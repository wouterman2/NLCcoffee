
80482201 - CoffeeMachine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08005800  08005800  00005800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8cc  08005940  08005940  00005940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08011210  08011210  00011210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011368  08011368  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  08011368  08011368  00011368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011370  08011370  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011370  08011370  00011370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011374  08011374  00011374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08011378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c8  200000e0  08011458  000200e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200012a8  08011458  000212a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022cd6  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000620d  00000000  00000000  00042ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00011114  00000000  00000000  00048fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d0  00000000  00000000  0005a100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016d8  00000000  00000000  0005b6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c86a  00000000  00000000  0005cda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028c5a  00000000  00000000  00079612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095621  00000000  00000000  000a226c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013788d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e1c  00000000  00000000  001378e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08005940 <__do_global_dtors_aux>:
 8005940:	b510      	push	{r4, lr}
 8005942:	4c05      	ldr	r4, [pc, #20]	; (8005958 <__do_global_dtors_aux+0x18>)
 8005944:	7823      	ldrb	r3, [r4, #0]
 8005946:	b933      	cbnz	r3, 8005956 <__do_global_dtors_aux+0x16>
 8005948:	4b04      	ldr	r3, [pc, #16]	; (800595c <__do_global_dtors_aux+0x1c>)
 800594a:	b113      	cbz	r3, 8005952 <__do_global_dtors_aux+0x12>
 800594c:	4804      	ldr	r0, [pc, #16]	; (8005960 <__do_global_dtors_aux+0x20>)
 800594e:	f3af 8000 	nop.w
 8005952:	2301      	movs	r3, #1
 8005954:	7023      	strb	r3, [r4, #0]
 8005956:	bd10      	pop	{r4, pc}
 8005958:	200000e0 	.word	0x200000e0
 800595c:	00000000 	.word	0x00000000
 8005960:	080111f4 	.word	0x080111f4

08005964 <frame_dummy>:
 8005964:	b508      	push	{r3, lr}
 8005966:	4b03      	ldr	r3, [pc, #12]	; (8005974 <frame_dummy+0x10>)
 8005968:	b11b      	cbz	r3, 8005972 <frame_dummy+0xe>
 800596a:	4903      	ldr	r1, [pc, #12]	; (8005978 <frame_dummy+0x14>)
 800596c:	4803      	ldr	r0, [pc, #12]	; (800597c <frame_dummy+0x18>)
 800596e:	f3af 8000 	nop.w
 8005972:	bd08      	pop	{r3, pc}
 8005974:	00000000 	.word	0x00000000
 8005978:	200000e4 	.word	0x200000e4
 800597c:	080111f4 	.word	0x080111f4

08005980 <__aeabi_drsub>:
 8005980:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005984:	e002      	b.n	800598c <__adddf3>
 8005986:	bf00      	nop

08005988 <__aeabi_dsub>:
 8005988:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800598c <__adddf3>:
 800598c:	b530      	push	{r4, r5, lr}
 800598e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005992:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005996:	ea94 0f05 	teq	r4, r5
 800599a:	bf08      	it	eq
 800599c:	ea90 0f02 	teqeq	r0, r2
 80059a0:	bf1f      	itttt	ne
 80059a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80059a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80059aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80059ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80059b2:	f000 80e2 	beq.w	8005b7a <__adddf3+0x1ee>
 80059b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80059ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80059be:	bfb8      	it	lt
 80059c0:	426d      	neglt	r5, r5
 80059c2:	dd0c      	ble.n	80059de <__adddf3+0x52>
 80059c4:	442c      	add	r4, r5
 80059c6:	ea80 0202 	eor.w	r2, r0, r2
 80059ca:	ea81 0303 	eor.w	r3, r1, r3
 80059ce:	ea82 0000 	eor.w	r0, r2, r0
 80059d2:	ea83 0101 	eor.w	r1, r3, r1
 80059d6:	ea80 0202 	eor.w	r2, r0, r2
 80059da:	ea81 0303 	eor.w	r3, r1, r3
 80059de:	2d36      	cmp	r5, #54	; 0x36
 80059e0:	bf88      	it	hi
 80059e2:	bd30      	pophi	{r4, r5, pc}
 80059e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80059e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80059ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80059f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80059f4:	d002      	beq.n	80059fc <__adddf3+0x70>
 80059f6:	4240      	negs	r0, r0
 80059f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80059fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8005a00:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005a04:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005a08:	d002      	beq.n	8005a10 <__adddf3+0x84>
 8005a0a:	4252      	negs	r2, r2
 8005a0c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005a10:	ea94 0f05 	teq	r4, r5
 8005a14:	f000 80a7 	beq.w	8005b66 <__adddf3+0x1da>
 8005a18:	f1a4 0401 	sub.w	r4, r4, #1
 8005a1c:	f1d5 0e20 	rsbs	lr, r5, #32
 8005a20:	db0d      	blt.n	8005a3e <__adddf3+0xb2>
 8005a22:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005a26:	fa22 f205 	lsr.w	r2, r2, r5
 8005a2a:	1880      	adds	r0, r0, r2
 8005a2c:	f141 0100 	adc.w	r1, r1, #0
 8005a30:	fa03 f20e 	lsl.w	r2, r3, lr
 8005a34:	1880      	adds	r0, r0, r2
 8005a36:	fa43 f305 	asr.w	r3, r3, r5
 8005a3a:	4159      	adcs	r1, r3
 8005a3c:	e00e      	b.n	8005a5c <__adddf3+0xd0>
 8005a3e:	f1a5 0520 	sub.w	r5, r5, #32
 8005a42:	f10e 0e20 	add.w	lr, lr, #32
 8005a46:	2a01      	cmp	r2, #1
 8005a48:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005a4c:	bf28      	it	cs
 8005a4e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005a52:	fa43 f305 	asr.w	r3, r3, r5
 8005a56:	18c0      	adds	r0, r0, r3
 8005a58:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005a5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005a60:	d507      	bpl.n	8005a72 <__adddf3+0xe6>
 8005a62:	f04f 0e00 	mov.w	lr, #0
 8005a66:	f1dc 0c00 	rsbs	ip, ip, #0
 8005a6a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005a6e:	eb6e 0101 	sbc.w	r1, lr, r1
 8005a72:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005a76:	d31b      	bcc.n	8005ab0 <__adddf3+0x124>
 8005a78:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005a7c:	d30c      	bcc.n	8005a98 <__adddf3+0x10c>
 8005a7e:	0849      	lsrs	r1, r1, #1
 8005a80:	ea5f 0030 	movs.w	r0, r0, rrx
 8005a84:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005a88:	f104 0401 	add.w	r4, r4, #1
 8005a8c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005a90:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005a94:	f080 809a 	bcs.w	8005bcc <__adddf3+0x240>
 8005a98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005a9c:	bf08      	it	eq
 8005a9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005aa2:	f150 0000 	adcs.w	r0, r0, #0
 8005aa6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005aaa:	ea41 0105 	orr.w	r1, r1, r5
 8005aae:	bd30      	pop	{r4, r5, pc}
 8005ab0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005ab4:	4140      	adcs	r0, r0
 8005ab6:	eb41 0101 	adc.w	r1, r1, r1
 8005aba:	3c01      	subs	r4, #1
 8005abc:	bf28      	it	cs
 8005abe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8005ac2:	d2e9      	bcs.n	8005a98 <__adddf3+0x10c>
 8005ac4:	f091 0f00 	teq	r1, #0
 8005ac8:	bf04      	itt	eq
 8005aca:	4601      	moveq	r1, r0
 8005acc:	2000      	moveq	r0, #0
 8005ace:	fab1 f381 	clz	r3, r1
 8005ad2:	bf08      	it	eq
 8005ad4:	3320      	addeq	r3, #32
 8005ad6:	f1a3 030b 	sub.w	r3, r3, #11
 8005ada:	f1b3 0220 	subs.w	r2, r3, #32
 8005ade:	da0c      	bge.n	8005afa <__adddf3+0x16e>
 8005ae0:	320c      	adds	r2, #12
 8005ae2:	dd08      	ble.n	8005af6 <__adddf3+0x16a>
 8005ae4:	f102 0c14 	add.w	ip, r2, #20
 8005ae8:	f1c2 020c 	rsb	r2, r2, #12
 8005aec:	fa01 f00c 	lsl.w	r0, r1, ip
 8005af0:	fa21 f102 	lsr.w	r1, r1, r2
 8005af4:	e00c      	b.n	8005b10 <__adddf3+0x184>
 8005af6:	f102 0214 	add.w	r2, r2, #20
 8005afa:	bfd8      	it	le
 8005afc:	f1c2 0c20 	rsble	ip, r2, #32
 8005b00:	fa01 f102 	lsl.w	r1, r1, r2
 8005b04:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005b08:	bfdc      	itt	le
 8005b0a:	ea41 010c 	orrle.w	r1, r1, ip
 8005b0e:	4090      	lslle	r0, r2
 8005b10:	1ae4      	subs	r4, r4, r3
 8005b12:	bfa2      	ittt	ge
 8005b14:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005b18:	4329      	orrge	r1, r5
 8005b1a:	bd30      	popge	{r4, r5, pc}
 8005b1c:	ea6f 0404 	mvn.w	r4, r4
 8005b20:	3c1f      	subs	r4, #31
 8005b22:	da1c      	bge.n	8005b5e <__adddf3+0x1d2>
 8005b24:	340c      	adds	r4, #12
 8005b26:	dc0e      	bgt.n	8005b46 <__adddf3+0x1ba>
 8005b28:	f104 0414 	add.w	r4, r4, #20
 8005b2c:	f1c4 0220 	rsb	r2, r4, #32
 8005b30:	fa20 f004 	lsr.w	r0, r0, r4
 8005b34:	fa01 f302 	lsl.w	r3, r1, r2
 8005b38:	ea40 0003 	orr.w	r0, r0, r3
 8005b3c:	fa21 f304 	lsr.w	r3, r1, r4
 8005b40:	ea45 0103 	orr.w	r1, r5, r3
 8005b44:	bd30      	pop	{r4, r5, pc}
 8005b46:	f1c4 040c 	rsb	r4, r4, #12
 8005b4a:	f1c4 0220 	rsb	r2, r4, #32
 8005b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8005b52:	fa01 f304 	lsl.w	r3, r1, r4
 8005b56:	ea40 0003 	orr.w	r0, r0, r3
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	bd30      	pop	{r4, r5, pc}
 8005b5e:	fa21 f004 	lsr.w	r0, r1, r4
 8005b62:	4629      	mov	r1, r5
 8005b64:	bd30      	pop	{r4, r5, pc}
 8005b66:	f094 0f00 	teq	r4, #0
 8005b6a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005b6e:	bf06      	itte	eq
 8005b70:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005b74:	3401      	addeq	r4, #1
 8005b76:	3d01      	subne	r5, #1
 8005b78:	e74e      	b.n	8005a18 <__adddf3+0x8c>
 8005b7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005b7e:	bf18      	it	ne
 8005b80:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005b84:	d029      	beq.n	8005bda <__adddf3+0x24e>
 8005b86:	ea94 0f05 	teq	r4, r5
 8005b8a:	bf08      	it	eq
 8005b8c:	ea90 0f02 	teqeq	r0, r2
 8005b90:	d005      	beq.n	8005b9e <__adddf3+0x212>
 8005b92:	ea54 0c00 	orrs.w	ip, r4, r0
 8005b96:	bf04      	itt	eq
 8005b98:	4619      	moveq	r1, r3
 8005b9a:	4610      	moveq	r0, r2
 8005b9c:	bd30      	pop	{r4, r5, pc}
 8005b9e:	ea91 0f03 	teq	r1, r3
 8005ba2:	bf1e      	ittt	ne
 8005ba4:	2100      	movne	r1, #0
 8005ba6:	2000      	movne	r0, #0
 8005ba8:	bd30      	popne	{r4, r5, pc}
 8005baa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8005bae:	d105      	bne.n	8005bbc <__adddf3+0x230>
 8005bb0:	0040      	lsls	r0, r0, #1
 8005bb2:	4149      	adcs	r1, r1
 8005bb4:	bf28      	it	cs
 8005bb6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8005bba:	bd30      	pop	{r4, r5, pc}
 8005bbc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005bc0:	bf3c      	itt	cc
 8005bc2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8005bc6:	bd30      	popcc	{r4, r5, pc}
 8005bc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005bcc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8005bd0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bd4:	f04f 0000 	mov.w	r0, #0
 8005bd8:	bd30      	pop	{r4, r5, pc}
 8005bda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005bde:	bf1a      	itte	ne
 8005be0:	4619      	movne	r1, r3
 8005be2:	4610      	movne	r0, r2
 8005be4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005be8:	bf1c      	itt	ne
 8005bea:	460b      	movne	r3, r1
 8005bec:	4602      	movne	r2, r0
 8005bee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005bf2:	bf06      	itte	eq
 8005bf4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8005bf8:	ea91 0f03 	teqeq	r1, r3
 8005bfc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8005c00:	bd30      	pop	{r4, r5, pc}
 8005c02:	bf00      	nop

08005c04 <__aeabi_ui2d>:
 8005c04:	f090 0f00 	teq	r0, #0
 8005c08:	bf04      	itt	eq
 8005c0a:	2100      	moveq	r1, #0
 8005c0c:	4770      	bxeq	lr
 8005c0e:	b530      	push	{r4, r5, lr}
 8005c10:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005c14:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005c18:	f04f 0500 	mov.w	r5, #0
 8005c1c:	f04f 0100 	mov.w	r1, #0
 8005c20:	e750      	b.n	8005ac4 <__adddf3+0x138>
 8005c22:	bf00      	nop

08005c24 <__aeabi_i2d>:
 8005c24:	f090 0f00 	teq	r0, #0
 8005c28:	bf04      	itt	eq
 8005c2a:	2100      	moveq	r1, #0
 8005c2c:	4770      	bxeq	lr
 8005c2e:	b530      	push	{r4, r5, lr}
 8005c30:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005c34:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005c38:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8005c3c:	bf48      	it	mi
 8005c3e:	4240      	negmi	r0, r0
 8005c40:	f04f 0100 	mov.w	r1, #0
 8005c44:	e73e      	b.n	8005ac4 <__adddf3+0x138>
 8005c46:	bf00      	nop

08005c48 <__aeabi_f2d>:
 8005c48:	0042      	lsls	r2, r0, #1
 8005c4a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005c4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8005c52:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005c56:	bf1f      	itttt	ne
 8005c58:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005c5c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005c60:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005c64:	4770      	bxne	lr
 8005c66:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8005c6a:	bf08      	it	eq
 8005c6c:	4770      	bxeq	lr
 8005c6e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8005c72:	bf04      	itt	eq
 8005c74:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8005c78:	4770      	bxeq	lr
 8005c7a:	b530      	push	{r4, r5, lr}
 8005c7c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005c80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005c84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005c88:	e71c      	b.n	8005ac4 <__adddf3+0x138>
 8005c8a:	bf00      	nop

08005c8c <__aeabi_ul2d>:
 8005c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8005c90:	bf08      	it	eq
 8005c92:	4770      	bxeq	lr
 8005c94:	b530      	push	{r4, r5, lr}
 8005c96:	f04f 0500 	mov.w	r5, #0
 8005c9a:	e00a      	b.n	8005cb2 <__aeabi_l2d+0x16>

08005c9c <__aeabi_l2d>:
 8005c9c:	ea50 0201 	orrs.w	r2, r0, r1
 8005ca0:	bf08      	it	eq
 8005ca2:	4770      	bxeq	lr
 8005ca4:	b530      	push	{r4, r5, lr}
 8005ca6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8005caa:	d502      	bpl.n	8005cb2 <__aeabi_l2d+0x16>
 8005cac:	4240      	negs	r0, r0
 8005cae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005cb2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005cb6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005cba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8005cbe:	f43f aed8 	beq.w	8005a72 <__adddf3+0xe6>
 8005cc2:	f04f 0203 	mov.w	r2, #3
 8005cc6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005cca:	bf18      	it	ne
 8005ccc:	3203      	addne	r2, #3
 8005cce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005cd2:	bf18      	it	ne
 8005cd4:	3203      	addne	r2, #3
 8005cd6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8005cda:	f1c2 0320 	rsb	r3, r2, #32
 8005cde:	fa00 fc03 	lsl.w	ip, r0, r3
 8005ce2:	fa20 f002 	lsr.w	r0, r0, r2
 8005ce6:	fa01 fe03 	lsl.w	lr, r1, r3
 8005cea:	ea40 000e 	orr.w	r0, r0, lr
 8005cee:	fa21 f102 	lsr.w	r1, r1, r2
 8005cf2:	4414      	add	r4, r2
 8005cf4:	e6bd      	b.n	8005a72 <__adddf3+0xe6>
 8005cf6:	bf00      	nop

08005cf8 <__aeabi_dmul>:
 8005cf8:	b570      	push	{r4, r5, r6, lr}
 8005cfa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005cfe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005d02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005d06:	bf1d      	ittte	ne
 8005d08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005d0c:	ea94 0f0c 	teqne	r4, ip
 8005d10:	ea95 0f0c 	teqne	r5, ip
 8005d14:	f000 f8de 	bleq	8005ed4 <__aeabi_dmul+0x1dc>
 8005d18:	442c      	add	r4, r5
 8005d1a:	ea81 0603 	eor.w	r6, r1, r3
 8005d1e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8005d22:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8005d26:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8005d2a:	bf18      	it	ne
 8005d2c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005d30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005d34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d38:	d038      	beq.n	8005dac <__aeabi_dmul+0xb4>
 8005d3a:	fba0 ce02 	umull	ip, lr, r0, r2
 8005d3e:	f04f 0500 	mov.w	r5, #0
 8005d42:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005d46:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8005d4a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005d4e:	f04f 0600 	mov.w	r6, #0
 8005d52:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005d56:	f09c 0f00 	teq	ip, #0
 8005d5a:	bf18      	it	ne
 8005d5c:	f04e 0e01 	orrne.w	lr, lr, #1
 8005d60:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005d64:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005d68:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005d6c:	d204      	bcs.n	8005d78 <__aeabi_dmul+0x80>
 8005d6e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005d72:	416d      	adcs	r5, r5
 8005d74:	eb46 0606 	adc.w	r6, r6, r6
 8005d78:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005d7c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005d80:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005d84:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005d88:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005d8c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005d90:	bf88      	it	hi
 8005d92:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005d96:	d81e      	bhi.n	8005dd6 <__aeabi_dmul+0xde>
 8005d98:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005d9c:	bf08      	it	eq
 8005d9e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005da2:	f150 0000 	adcs.w	r0, r0, #0
 8005da6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005daa:	bd70      	pop	{r4, r5, r6, pc}
 8005dac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005db0:	ea46 0101 	orr.w	r1, r6, r1
 8005db4:	ea40 0002 	orr.w	r0, r0, r2
 8005db8:	ea81 0103 	eor.w	r1, r1, r3
 8005dbc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005dc0:	bfc2      	ittt	gt
 8005dc2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005dc6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005dca:	bd70      	popgt	{r4, r5, r6, pc}
 8005dcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005dd0:	f04f 0e00 	mov.w	lr, #0
 8005dd4:	3c01      	subs	r4, #1
 8005dd6:	f300 80ab 	bgt.w	8005f30 <__aeabi_dmul+0x238>
 8005dda:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8005dde:	bfde      	ittt	le
 8005de0:	2000      	movle	r0, #0
 8005de2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8005de6:	bd70      	pople	{r4, r5, r6, pc}
 8005de8:	f1c4 0400 	rsb	r4, r4, #0
 8005dec:	3c20      	subs	r4, #32
 8005dee:	da35      	bge.n	8005e5c <__aeabi_dmul+0x164>
 8005df0:	340c      	adds	r4, #12
 8005df2:	dc1b      	bgt.n	8005e2c <__aeabi_dmul+0x134>
 8005df4:	f104 0414 	add.w	r4, r4, #20
 8005df8:	f1c4 0520 	rsb	r5, r4, #32
 8005dfc:	fa00 f305 	lsl.w	r3, r0, r5
 8005e00:	fa20 f004 	lsr.w	r0, r0, r4
 8005e04:	fa01 f205 	lsl.w	r2, r1, r5
 8005e08:	ea40 0002 	orr.w	r0, r0, r2
 8005e0c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8005e10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005e14:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005e18:	fa21 f604 	lsr.w	r6, r1, r4
 8005e1c:	eb42 0106 	adc.w	r1, r2, r6
 8005e20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005e24:	bf08      	it	eq
 8005e26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
 8005e2c:	f1c4 040c 	rsb	r4, r4, #12
 8005e30:	f1c4 0520 	rsb	r5, r4, #32
 8005e34:	fa00 f304 	lsl.w	r3, r0, r4
 8005e38:	fa20 f005 	lsr.w	r0, r0, r5
 8005e3c:	fa01 f204 	lsl.w	r2, r1, r4
 8005e40:	ea40 0002 	orr.w	r0, r0, r2
 8005e44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005e48:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005e4c:	f141 0100 	adc.w	r1, r1, #0
 8005e50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005e54:	bf08      	it	eq
 8005e56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005e5a:	bd70      	pop	{r4, r5, r6, pc}
 8005e5c:	f1c4 0520 	rsb	r5, r4, #32
 8005e60:	fa00 f205 	lsl.w	r2, r0, r5
 8005e64:	ea4e 0e02 	orr.w	lr, lr, r2
 8005e68:	fa20 f304 	lsr.w	r3, r0, r4
 8005e6c:	fa01 f205 	lsl.w	r2, r1, r5
 8005e70:	ea43 0302 	orr.w	r3, r3, r2
 8005e74:	fa21 f004 	lsr.w	r0, r1, r4
 8005e78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005e7c:	fa21 f204 	lsr.w	r2, r1, r4
 8005e80:	ea20 0002 	bic.w	r0, r0, r2
 8005e84:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005e88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005e8c:	bf08      	it	eq
 8005e8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005e92:	bd70      	pop	{r4, r5, r6, pc}
 8005e94:	f094 0f00 	teq	r4, #0
 8005e98:	d10f      	bne.n	8005eba <__aeabi_dmul+0x1c2>
 8005e9a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8005e9e:	0040      	lsls	r0, r0, #1
 8005ea0:	eb41 0101 	adc.w	r1, r1, r1
 8005ea4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005ea8:	bf08      	it	eq
 8005eaa:	3c01      	subeq	r4, #1
 8005eac:	d0f7      	beq.n	8005e9e <__aeabi_dmul+0x1a6>
 8005eae:	ea41 0106 	orr.w	r1, r1, r6
 8005eb2:	f095 0f00 	teq	r5, #0
 8005eb6:	bf18      	it	ne
 8005eb8:	4770      	bxne	lr
 8005eba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8005ebe:	0052      	lsls	r2, r2, #1
 8005ec0:	eb43 0303 	adc.w	r3, r3, r3
 8005ec4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005ec8:	bf08      	it	eq
 8005eca:	3d01      	subeq	r5, #1
 8005ecc:	d0f7      	beq.n	8005ebe <__aeabi_dmul+0x1c6>
 8005ece:	ea43 0306 	orr.w	r3, r3, r6
 8005ed2:	4770      	bx	lr
 8005ed4:	ea94 0f0c 	teq	r4, ip
 8005ed8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005edc:	bf18      	it	ne
 8005ede:	ea95 0f0c 	teqne	r5, ip
 8005ee2:	d00c      	beq.n	8005efe <__aeabi_dmul+0x206>
 8005ee4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005ee8:	bf18      	it	ne
 8005eea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005eee:	d1d1      	bne.n	8005e94 <__aeabi_dmul+0x19c>
 8005ef0:	ea81 0103 	eor.w	r1, r1, r3
 8005ef4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005ef8:	f04f 0000 	mov.w	r0, #0
 8005efc:	bd70      	pop	{r4, r5, r6, pc}
 8005efe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005f02:	bf06      	itte	eq
 8005f04:	4610      	moveq	r0, r2
 8005f06:	4619      	moveq	r1, r3
 8005f08:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005f0c:	d019      	beq.n	8005f42 <__aeabi_dmul+0x24a>
 8005f0e:	ea94 0f0c 	teq	r4, ip
 8005f12:	d102      	bne.n	8005f1a <__aeabi_dmul+0x222>
 8005f14:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8005f18:	d113      	bne.n	8005f42 <__aeabi_dmul+0x24a>
 8005f1a:	ea95 0f0c 	teq	r5, ip
 8005f1e:	d105      	bne.n	8005f2c <__aeabi_dmul+0x234>
 8005f20:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005f24:	bf1c      	itt	ne
 8005f26:	4610      	movne	r0, r2
 8005f28:	4619      	movne	r1, r3
 8005f2a:	d10a      	bne.n	8005f42 <__aeabi_dmul+0x24a>
 8005f2c:	ea81 0103 	eor.w	r1, r1, r3
 8005f30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005f34:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005f38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f3c:	f04f 0000 	mov.w	r0, #0
 8005f40:	bd70      	pop	{r4, r5, r6, pc}
 8005f42:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005f46:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8005f4a:	bd70      	pop	{r4, r5, r6, pc}

08005f4c <__aeabi_ddiv>:
 8005f4c:	b570      	push	{r4, r5, r6, lr}
 8005f4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005f52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005f56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005f5a:	bf1d      	ittte	ne
 8005f5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005f60:	ea94 0f0c 	teqne	r4, ip
 8005f64:	ea95 0f0c 	teqne	r5, ip
 8005f68:	f000 f8a7 	bleq	80060ba <__aeabi_ddiv+0x16e>
 8005f6c:	eba4 0405 	sub.w	r4, r4, r5
 8005f70:	ea81 0e03 	eor.w	lr, r1, r3
 8005f74:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005f78:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005f7c:	f000 8088 	beq.w	8006090 <__aeabi_ddiv+0x144>
 8005f80:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005f84:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005f88:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005f8c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005f90:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005f94:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005f98:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005f9c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005fa0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005fa4:	429d      	cmp	r5, r3
 8005fa6:	bf08      	it	eq
 8005fa8:	4296      	cmpeq	r6, r2
 8005faa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8005fae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005fb2:	d202      	bcs.n	8005fba <__aeabi_ddiv+0x6e>
 8005fb4:	085b      	lsrs	r3, r3, #1
 8005fb6:	ea4f 0232 	mov.w	r2, r2, rrx
 8005fba:	1ab6      	subs	r6, r6, r2
 8005fbc:	eb65 0503 	sbc.w	r5, r5, r3
 8005fc0:	085b      	lsrs	r3, r3, #1
 8005fc2:	ea4f 0232 	mov.w	r2, r2, rrx
 8005fc6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005fca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8005fce:	ebb6 0e02 	subs.w	lr, r6, r2
 8005fd2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005fd6:	bf22      	ittt	cs
 8005fd8:	1ab6      	subcs	r6, r6, r2
 8005fda:	4675      	movcs	r5, lr
 8005fdc:	ea40 000c 	orrcs.w	r0, r0, ip
 8005fe0:	085b      	lsrs	r3, r3, #1
 8005fe2:	ea4f 0232 	mov.w	r2, r2, rrx
 8005fe6:	ebb6 0e02 	subs.w	lr, r6, r2
 8005fea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005fee:	bf22      	ittt	cs
 8005ff0:	1ab6      	subcs	r6, r6, r2
 8005ff2:	4675      	movcs	r5, lr
 8005ff4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005ff8:	085b      	lsrs	r3, r3, #1
 8005ffa:	ea4f 0232 	mov.w	r2, r2, rrx
 8005ffe:	ebb6 0e02 	subs.w	lr, r6, r2
 8006002:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006006:	bf22      	ittt	cs
 8006008:	1ab6      	subcs	r6, r6, r2
 800600a:	4675      	movcs	r5, lr
 800600c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006010:	085b      	lsrs	r3, r3, #1
 8006012:	ea4f 0232 	mov.w	r2, r2, rrx
 8006016:	ebb6 0e02 	subs.w	lr, r6, r2
 800601a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800601e:	bf22      	ittt	cs
 8006020:	1ab6      	subcs	r6, r6, r2
 8006022:	4675      	movcs	r5, lr
 8006024:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006028:	ea55 0e06 	orrs.w	lr, r5, r6
 800602c:	d018      	beq.n	8006060 <__aeabi_ddiv+0x114>
 800602e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006032:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006036:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800603a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800603e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006042:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006046:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800604a:	d1c0      	bne.n	8005fce <__aeabi_ddiv+0x82>
 800604c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006050:	d10b      	bne.n	800606a <__aeabi_ddiv+0x11e>
 8006052:	ea41 0100 	orr.w	r1, r1, r0
 8006056:	f04f 0000 	mov.w	r0, #0
 800605a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800605e:	e7b6      	b.n	8005fce <__aeabi_ddiv+0x82>
 8006060:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006064:	bf04      	itt	eq
 8006066:	4301      	orreq	r1, r0
 8006068:	2000      	moveq	r0, #0
 800606a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800606e:	bf88      	it	hi
 8006070:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006074:	f63f aeaf 	bhi.w	8005dd6 <__aeabi_dmul+0xde>
 8006078:	ebb5 0c03 	subs.w	ip, r5, r3
 800607c:	bf04      	itt	eq
 800607e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006082:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006086:	f150 0000 	adcs.w	r0, r0, #0
 800608a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800608e:	bd70      	pop	{r4, r5, r6, pc}
 8006090:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006094:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006098:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800609c:	bfc2      	ittt	gt
 800609e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80060a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80060a6:	bd70      	popgt	{r4, r5, r6, pc}
 80060a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80060ac:	f04f 0e00 	mov.w	lr, #0
 80060b0:	3c01      	subs	r4, #1
 80060b2:	e690      	b.n	8005dd6 <__aeabi_dmul+0xde>
 80060b4:	ea45 0e06 	orr.w	lr, r5, r6
 80060b8:	e68d      	b.n	8005dd6 <__aeabi_dmul+0xde>
 80060ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80060be:	ea94 0f0c 	teq	r4, ip
 80060c2:	bf08      	it	eq
 80060c4:	ea95 0f0c 	teqeq	r5, ip
 80060c8:	f43f af3b 	beq.w	8005f42 <__aeabi_dmul+0x24a>
 80060cc:	ea94 0f0c 	teq	r4, ip
 80060d0:	d10a      	bne.n	80060e8 <__aeabi_ddiv+0x19c>
 80060d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80060d6:	f47f af34 	bne.w	8005f42 <__aeabi_dmul+0x24a>
 80060da:	ea95 0f0c 	teq	r5, ip
 80060de:	f47f af25 	bne.w	8005f2c <__aeabi_dmul+0x234>
 80060e2:	4610      	mov	r0, r2
 80060e4:	4619      	mov	r1, r3
 80060e6:	e72c      	b.n	8005f42 <__aeabi_dmul+0x24a>
 80060e8:	ea95 0f0c 	teq	r5, ip
 80060ec:	d106      	bne.n	80060fc <__aeabi_ddiv+0x1b0>
 80060ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80060f2:	f43f aefd 	beq.w	8005ef0 <__aeabi_dmul+0x1f8>
 80060f6:	4610      	mov	r0, r2
 80060f8:	4619      	mov	r1, r3
 80060fa:	e722      	b.n	8005f42 <__aeabi_dmul+0x24a>
 80060fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006100:	bf18      	it	ne
 8006102:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006106:	f47f aec5 	bne.w	8005e94 <__aeabi_dmul+0x19c>
 800610a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800610e:	f47f af0d 	bne.w	8005f2c <__aeabi_dmul+0x234>
 8006112:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006116:	f47f aeeb 	bne.w	8005ef0 <__aeabi_dmul+0x1f8>
 800611a:	e712      	b.n	8005f42 <__aeabi_dmul+0x24a>

0800611c <__gedf2>:
 800611c:	f04f 3cff 	mov.w	ip, #4294967295
 8006120:	e006      	b.n	8006130 <__cmpdf2+0x4>
 8006122:	bf00      	nop

08006124 <__ledf2>:
 8006124:	f04f 0c01 	mov.w	ip, #1
 8006128:	e002      	b.n	8006130 <__cmpdf2+0x4>
 800612a:	bf00      	nop

0800612c <__cmpdf2>:
 800612c:	f04f 0c01 	mov.w	ip, #1
 8006130:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006134:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006138:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800613c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006140:	bf18      	it	ne
 8006142:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006146:	d01b      	beq.n	8006180 <__cmpdf2+0x54>
 8006148:	b001      	add	sp, #4
 800614a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800614e:	bf0c      	ite	eq
 8006150:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006154:	ea91 0f03 	teqne	r1, r3
 8006158:	bf02      	ittt	eq
 800615a:	ea90 0f02 	teqeq	r0, r2
 800615e:	2000      	moveq	r0, #0
 8006160:	4770      	bxeq	lr
 8006162:	f110 0f00 	cmn.w	r0, #0
 8006166:	ea91 0f03 	teq	r1, r3
 800616a:	bf58      	it	pl
 800616c:	4299      	cmppl	r1, r3
 800616e:	bf08      	it	eq
 8006170:	4290      	cmpeq	r0, r2
 8006172:	bf2c      	ite	cs
 8006174:	17d8      	asrcs	r0, r3, #31
 8006176:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800617a:	f040 0001 	orr.w	r0, r0, #1
 800617e:	4770      	bx	lr
 8006180:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006184:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006188:	d102      	bne.n	8006190 <__cmpdf2+0x64>
 800618a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800618e:	d107      	bne.n	80061a0 <__cmpdf2+0x74>
 8006190:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006194:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006198:	d1d6      	bne.n	8006148 <__cmpdf2+0x1c>
 800619a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800619e:	d0d3      	beq.n	8006148 <__cmpdf2+0x1c>
 80061a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop

080061a8 <__aeabi_cdrcmple>:
 80061a8:	4684      	mov	ip, r0
 80061aa:	4610      	mov	r0, r2
 80061ac:	4662      	mov	r2, ip
 80061ae:	468c      	mov	ip, r1
 80061b0:	4619      	mov	r1, r3
 80061b2:	4663      	mov	r3, ip
 80061b4:	e000      	b.n	80061b8 <__aeabi_cdcmpeq>
 80061b6:	bf00      	nop

080061b8 <__aeabi_cdcmpeq>:
 80061b8:	b501      	push	{r0, lr}
 80061ba:	f7ff ffb7 	bl	800612c <__cmpdf2>
 80061be:	2800      	cmp	r0, #0
 80061c0:	bf48      	it	mi
 80061c2:	f110 0f00 	cmnmi.w	r0, #0
 80061c6:	bd01      	pop	{r0, pc}

080061c8 <__aeabi_dcmpeq>:
 80061c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80061cc:	f7ff fff4 	bl	80061b8 <__aeabi_cdcmpeq>
 80061d0:	bf0c      	ite	eq
 80061d2:	2001      	moveq	r0, #1
 80061d4:	2000      	movne	r0, #0
 80061d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80061da:	bf00      	nop

080061dc <__aeabi_dcmplt>:
 80061dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80061e0:	f7ff ffea 	bl	80061b8 <__aeabi_cdcmpeq>
 80061e4:	bf34      	ite	cc
 80061e6:	2001      	movcc	r0, #1
 80061e8:	2000      	movcs	r0, #0
 80061ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80061ee:	bf00      	nop

080061f0 <__aeabi_dcmple>:
 80061f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80061f4:	f7ff ffe0 	bl	80061b8 <__aeabi_cdcmpeq>
 80061f8:	bf94      	ite	ls
 80061fa:	2001      	movls	r0, #1
 80061fc:	2000      	movhi	r0, #0
 80061fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8006202:	bf00      	nop

08006204 <__aeabi_dcmpge>:
 8006204:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006208:	f7ff ffce 	bl	80061a8 <__aeabi_cdrcmple>
 800620c:	bf94      	ite	ls
 800620e:	2001      	movls	r0, #1
 8006210:	2000      	movhi	r0, #0
 8006212:	f85d fb08 	ldr.w	pc, [sp], #8
 8006216:	bf00      	nop

08006218 <__aeabi_dcmpgt>:
 8006218:	f84d ed08 	str.w	lr, [sp, #-8]!
 800621c:	f7ff ffc4 	bl	80061a8 <__aeabi_cdrcmple>
 8006220:	bf34      	ite	cc
 8006222:	2001      	movcc	r0, #1
 8006224:	2000      	movcs	r0, #0
 8006226:	f85d fb08 	ldr.w	pc, [sp], #8
 800622a:	bf00      	nop

0800622c <__aeabi_dcmpun>:
 800622c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006230:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006234:	d102      	bne.n	800623c <__aeabi_dcmpun+0x10>
 8006236:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800623a:	d10a      	bne.n	8006252 <__aeabi_dcmpun+0x26>
 800623c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006240:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006244:	d102      	bne.n	800624c <__aeabi_dcmpun+0x20>
 8006246:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800624a:	d102      	bne.n	8006252 <__aeabi_dcmpun+0x26>
 800624c:	f04f 0000 	mov.w	r0, #0
 8006250:	4770      	bx	lr
 8006252:	f04f 0001 	mov.w	r0, #1
 8006256:	4770      	bx	lr

08006258 <__aeabi_d2uiz>:
 8006258:	004a      	lsls	r2, r1, #1
 800625a:	d211      	bcs.n	8006280 <__aeabi_d2uiz+0x28>
 800625c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006260:	d211      	bcs.n	8006286 <__aeabi_d2uiz+0x2e>
 8006262:	d50d      	bpl.n	8006280 <__aeabi_d2uiz+0x28>
 8006264:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006268:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800626c:	d40e      	bmi.n	800628c <__aeabi_d2uiz+0x34>
 800626e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006272:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006276:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800627a:	fa23 f002 	lsr.w	r0, r3, r2
 800627e:	4770      	bx	lr
 8006280:	f04f 0000 	mov.w	r0, #0
 8006284:	4770      	bx	lr
 8006286:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800628a:	d102      	bne.n	8006292 <__aeabi_d2uiz+0x3a>
 800628c:	f04f 30ff 	mov.w	r0, #4294967295
 8006290:	4770      	bx	lr
 8006292:	f04f 0000 	mov.w	r0, #0
 8006296:	4770      	bx	lr

08006298 <__aeabi_d2f>:
 8006298:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800629c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80062a0:	bf24      	itt	cs
 80062a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80062a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80062aa:	d90d      	bls.n	80062c8 <__aeabi_d2f+0x30>
 80062ac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80062b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80062b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80062b8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80062bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80062c0:	bf08      	it	eq
 80062c2:	f020 0001 	biceq.w	r0, r0, #1
 80062c6:	4770      	bx	lr
 80062c8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80062cc:	d121      	bne.n	8006312 <__aeabi_d2f+0x7a>
 80062ce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80062d2:	bfbc      	itt	lt
 80062d4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80062d8:	4770      	bxlt	lr
 80062da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80062de:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80062e2:	f1c2 0218 	rsb	r2, r2, #24
 80062e6:	f1c2 0c20 	rsb	ip, r2, #32
 80062ea:	fa10 f30c 	lsls.w	r3, r0, ip
 80062ee:	fa20 f002 	lsr.w	r0, r0, r2
 80062f2:	bf18      	it	ne
 80062f4:	f040 0001 	orrne.w	r0, r0, #1
 80062f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80062fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8006300:	fa03 fc0c 	lsl.w	ip, r3, ip
 8006304:	ea40 000c 	orr.w	r0, r0, ip
 8006308:	fa23 f302 	lsr.w	r3, r3, r2
 800630c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006310:	e7cc      	b.n	80062ac <__aeabi_d2f+0x14>
 8006312:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8006316:	d107      	bne.n	8006328 <__aeabi_d2f+0x90>
 8006318:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800631c:	bf1e      	ittt	ne
 800631e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8006322:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8006326:	4770      	bxne	lr
 8006328:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800632c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006330:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop

08006338 <__aeabi_frsub>:
 8006338:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800633c:	e002      	b.n	8006344 <__addsf3>
 800633e:	bf00      	nop

08006340 <__aeabi_fsub>:
 8006340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08006344 <__addsf3>:
 8006344:	0042      	lsls	r2, r0, #1
 8006346:	bf1f      	itttt	ne
 8006348:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800634c:	ea92 0f03 	teqne	r2, r3
 8006350:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8006354:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8006358:	d06a      	beq.n	8006430 <__addsf3+0xec>
 800635a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800635e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8006362:	bfc1      	itttt	gt
 8006364:	18d2      	addgt	r2, r2, r3
 8006366:	4041      	eorgt	r1, r0
 8006368:	4048      	eorgt	r0, r1
 800636a:	4041      	eorgt	r1, r0
 800636c:	bfb8      	it	lt
 800636e:	425b      	neglt	r3, r3
 8006370:	2b19      	cmp	r3, #25
 8006372:	bf88      	it	hi
 8006374:	4770      	bxhi	lr
 8006376:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800637a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800637e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006382:	bf18      	it	ne
 8006384:	4240      	negne	r0, r0
 8006386:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800638a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800638e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8006392:	bf18      	it	ne
 8006394:	4249      	negne	r1, r1
 8006396:	ea92 0f03 	teq	r2, r3
 800639a:	d03f      	beq.n	800641c <__addsf3+0xd8>
 800639c:	f1a2 0201 	sub.w	r2, r2, #1
 80063a0:	fa41 fc03 	asr.w	ip, r1, r3
 80063a4:	eb10 000c 	adds.w	r0, r0, ip
 80063a8:	f1c3 0320 	rsb	r3, r3, #32
 80063ac:	fa01 f103 	lsl.w	r1, r1, r3
 80063b0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80063b4:	d502      	bpl.n	80063bc <__addsf3+0x78>
 80063b6:	4249      	negs	r1, r1
 80063b8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80063bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80063c0:	d313      	bcc.n	80063ea <__addsf3+0xa6>
 80063c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80063c6:	d306      	bcc.n	80063d6 <__addsf3+0x92>
 80063c8:	0840      	lsrs	r0, r0, #1
 80063ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80063ce:	f102 0201 	add.w	r2, r2, #1
 80063d2:	2afe      	cmp	r2, #254	; 0xfe
 80063d4:	d251      	bcs.n	800647a <__addsf3+0x136>
 80063d6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80063da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80063de:	bf08      	it	eq
 80063e0:	f020 0001 	biceq.w	r0, r0, #1
 80063e4:	ea40 0003 	orr.w	r0, r0, r3
 80063e8:	4770      	bx	lr
 80063ea:	0049      	lsls	r1, r1, #1
 80063ec:	eb40 0000 	adc.w	r0, r0, r0
 80063f0:	3a01      	subs	r2, #1
 80063f2:	bf28      	it	cs
 80063f4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80063f8:	d2ed      	bcs.n	80063d6 <__addsf3+0x92>
 80063fa:	fab0 fc80 	clz	ip, r0
 80063fe:	f1ac 0c08 	sub.w	ip, ip, #8
 8006402:	ebb2 020c 	subs.w	r2, r2, ip
 8006406:	fa00 f00c 	lsl.w	r0, r0, ip
 800640a:	bfaa      	itet	ge
 800640c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8006410:	4252      	neglt	r2, r2
 8006412:	4318      	orrge	r0, r3
 8006414:	bfbc      	itt	lt
 8006416:	40d0      	lsrlt	r0, r2
 8006418:	4318      	orrlt	r0, r3
 800641a:	4770      	bx	lr
 800641c:	f092 0f00 	teq	r2, #0
 8006420:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8006424:	bf06      	itte	eq
 8006426:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800642a:	3201      	addeq	r2, #1
 800642c:	3b01      	subne	r3, #1
 800642e:	e7b5      	b.n	800639c <__addsf3+0x58>
 8006430:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8006434:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8006438:	bf18      	it	ne
 800643a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800643e:	d021      	beq.n	8006484 <__addsf3+0x140>
 8006440:	ea92 0f03 	teq	r2, r3
 8006444:	d004      	beq.n	8006450 <__addsf3+0x10c>
 8006446:	f092 0f00 	teq	r2, #0
 800644a:	bf08      	it	eq
 800644c:	4608      	moveq	r0, r1
 800644e:	4770      	bx	lr
 8006450:	ea90 0f01 	teq	r0, r1
 8006454:	bf1c      	itt	ne
 8006456:	2000      	movne	r0, #0
 8006458:	4770      	bxne	lr
 800645a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800645e:	d104      	bne.n	800646a <__addsf3+0x126>
 8006460:	0040      	lsls	r0, r0, #1
 8006462:	bf28      	it	cs
 8006464:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8006468:	4770      	bx	lr
 800646a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800646e:	bf3c      	itt	cc
 8006470:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8006474:	4770      	bxcc	lr
 8006476:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800647a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800647e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006482:	4770      	bx	lr
 8006484:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8006488:	bf16      	itet	ne
 800648a:	4608      	movne	r0, r1
 800648c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8006490:	4601      	movne	r1, r0
 8006492:	0242      	lsls	r2, r0, #9
 8006494:	bf06      	itte	eq
 8006496:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800649a:	ea90 0f01 	teqeq	r0, r1
 800649e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80064a2:	4770      	bx	lr

080064a4 <__aeabi_ui2f>:
 80064a4:	f04f 0300 	mov.w	r3, #0
 80064a8:	e004      	b.n	80064b4 <__aeabi_i2f+0x8>
 80064aa:	bf00      	nop

080064ac <__aeabi_i2f>:
 80064ac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80064b0:	bf48      	it	mi
 80064b2:	4240      	negmi	r0, r0
 80064b4:	ea5f 0c00 	movs.w	ip, r0
 80064b8:	bf08      	it	eq
 80064ba:	4770      	bxeq	lr
 80064bc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80064c0:	4601      	mov	r1, r0
 80064c2:	f04f 0000 	mov.w	r0, #0
 80064c6:	e01c      	b.n	8006502 <__aeabi_l2f+0x2a>

080064c8 <__aeabi_ul2f>:
 80064c8:	ea50 0201 	orrs.w	r2, r0, r1
 80064cc:	bf08      	it	eq
 80064ce:	4770      	bxeq	lr
 80064d0:	f04f 0300 	mov.w	r3, #0
 80064d4:	e00a      	b.n	80064ec <__aeabi_l2f+0x14>
 80064d6:	bf00      	nop

080064d8 <__aeabi_l2f>:
 80064d8:	ea50 0201 	orrs.w	r2, r0, r1
 80064dc:	bf08      	it	eq
 80064de:	4770      	bxeq	lr
 80064e0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80064e4:	d502      	bpl.n	80064ec <__aeabi_l2f+0x14>
 80064e6:	4240      	negs	r0, r0
 80064e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80064ec:	ea5f 0c01 	movs.w	ip, r1
 80064f0:	bf02      	ittt	eq
 80064f2:	4684      	moveq	ip, r0
 80064f4:	4601      	moveq	r1, r0
 80064f6:	2000      	moveq	r0, #0
 80064f8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80064fc:	bf08      	it	eq
 80064fe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8006502:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8006506:	fabc f28c 	clz	r2, ip
 800650a:	3a08      	subs	r2, #8
 800650c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8006510:	db10      	blt.n	8006534 <__aeabi_l2f+0x5c>
 8006512:	fa01 fc02 	lsl.w	ip, r1, r2
 8006516:	4463      	add	r3, ip
 8006518:	fa00 fc02 	lsl.w	ip, r0, r2
 800651c:	f1c2 0220 	rsb	r2, r2, #32
 8006520:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006524:	fa20 f202 	lsr.w	r2, r0, r2
 8006528:	eb43 0002 	adc.w	r0, r3, r2
 800652c:	bf08      	it	eq
 800652e:	f020 0001 	biceq.w	r0, r0, #1
 8006532:	4770      	bx	lr
 8006534:	f102 0220 	add.w	r2, r2, #32
 8006538:	fa01 fc02 	lsl.w	ip, r1, r2
 800653c:	f1c2 0220 	rsb	r2, r2, #32
 8006540:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8006544:	fa21 f202 	lsr.w	r2, r1, r2
 8006548:	eb43 0002 	adc.w	r0, r3, r2
 800654c:	bf08      	it	eq
 800654e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8006552:	4770      	bx	lr

08006554 <__aeabi_fmul>:
 8006554:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006558:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800655c:	bf1e      	ittt	ne
 800655e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8006562:	ea92 0f0c 	teqne	r2, ip
 8006566:	ea93 0f0c 	teqne	r3, ip
 800656a:	d06f      	beq.n	800664c <__aeabi_fmul+0xf8>
 800656c:	441a      	add	r2, r3
 800656e:	ea80 0c01 	eor.w	ip, r0, r1
 8006572:	0240      	lsls	r0, r0, #9
 8006574:	bf18      	it	ne
 8006576:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800657a:	d01e      	beq.n	80065ba <__aeabi_fmul+0x66>
 800657c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006580:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8006584:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8006588:	fba0 3101 	umull	r3, r1, r0, r1
 800658c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8006590:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8006594:	bf3e      	ittt	cc
 8006596:	0049      	lslcc	r1, r1, #1
 8006598:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800659c:	005b      	lslcc	r3, r3, #1
 800659e:	ea40 0001 	orr.w	r0, r0, r1
 80065a2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80065a6:	2afd      	cmp	r2, #253	; 0xfd
 80065a8:	d81d      	bhi.n	80065e6 <__aeabi_fmul+0x92>
 80065aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80065b2:	bf08      	it	eq
 80065b4:	f020 0001 	biceq.w	r0, r0, #1
 80065b8:	4770      	bx	lr
 80065ba:	f090 0f00 	teq	r0, #0
 80065be:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80065c2:	bf08      	it	eq
 80065c4:	0249      	lsleq	r1, r1, #9
 80065c6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80065ca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80065ce:	3a7f      	subs	r2, #127	; 0x7f
 80065d0:	bfc2      	ittt	gt
 80065d2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80065d6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80065da:	4770      	bxgt	lr
 80065dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80065e0:	f04f 0300 	mov.w	r3, #0
 80065e4:	3a01      	subs	r2, #1
 80065e6:	dc5d      	bgt.n	80066a4 <__aeabi_fmul+0x150>
 80065e8:	f112 0f19 	cmn.w	r2, #25
 80065ec:	bfdc      	itt	le
 80065ee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80065f2:	4770      	bxle	lr
 80065f4:	f1c2 0200 	rsb	r2, r2, #0
 80065f8:	0041      	lsls	r1, r0, #1
 80065fa:	fa21 f102 	lsr.w	r1, r1, r2
 80065fe:	f1c2 0220 	rsb	r2, r2, #32
 8006602:	fa00 fc02 	lsl.w	ip, r0, r2
 8006606:	ea5f 0031 	movs.w	r0, r1, rrx
 800660a:	f140 0000 	adc.w	r0, r0, #0
 800660e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8006612:	bf08      	it	eq
 8006614:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8006618:	4770      	bx	lr
 800661a:	f092 0f00 	teq	r2, #0
 800661e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8006622:	bf02      	ittt	eq
 8006624:	0040      	lsleq	r0, r0, #1
 8006626:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800662a:	3a01      	subeq	r2, #1
 800662c:	d0f9      	beq.n	8006622 <__aeabi_fmul+0xce>
 800662e:	ea40 000c 	orr.w	r0, r0, ip
 8006632:	f093 0f00 	teq	r3, #0
 8006636:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800663a:	bf02      	ittt	eq
 800663c:	0049      	lsleq	r1, r1, #1
 800663e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8006642:	3b01      	subeq	r3, #1
 8006644:	d0f9      	beq.n	800663a <__aeabi_fmul+0xe6>
 8006646:	ea41 010c 	orr.w	r1, r1, ip
 800664a:	e78f      	b.n	800656c <__aeabi_fmul+0x18>
 800664c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8006650:	ea92 0f0c 	teq	r2, ip
 8006654:	bf18      	it	ne
 8006656:	ea93 0f0c 	teqne	r3, ip
 800665a:	d00a      	beq.n	8006672 <__aeabi_fmul+0x11e>
 800665c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8006660:	bf18      	it	ne
 8006662:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8006666:	d1d8      	bne.n	800661a <__aeabi_fmul+0xc6>
 8006668:	ea80 0001 	eor.w	r0, r0, r1
 800666c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006670:	4770      	bx	lr
 8006672:	f090 0f00 	teq	r0, #0
 8006676:	bf17      	itett	ne
 8006678:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800667c:	4608      	moveq	r0, r1
 800667e:	f091 0f00 	teqne	r1, #0
 8006682:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8006686:	d014      	beq.n	80066b2 <__aeabi_fmul+0x15e>
 8006688:	ea92 0f0c 	teq	r2, ip
 800668c:	d101      	bne.n	8006692 <__aeabi_fmul+0x13e>
 800668e:	0242      	lsls	r2, r0, #9
 8006690:	d10f      	bne.n	80066b2 <__aeabi_fmul+0x15e>
 8006692:	ea93 0f0c 	teq	r3, ip
 8006696:	d103      	bne.n	80066a0 <__aeabi_fmul+0x14c>
 8006698:	024b      	lsls	r3, r1, #9
 800669a:	bf18      	it	ne
 800669c:	4608      	movne	r0, r1
 800669e:	d108      	bne.n	80066b2 <__aeabi_fmul+0x15e>
 80066a0:	ea80 0001 	eor.w	r0, r0, r1
 80066a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80066a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80066ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80066b0:	4770      	bx	lr
 80066b2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80066b6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80066ba:	4770      	bx	lr

080066bc <__aeabi_fdiv>:
 80066bc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80066c0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80066c4:	bf1e      	ittt	ne
 80066c6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80066ca:	ea92 0f0c 	teqne	r2, ip
 80066ce:	ea93 0f0c 	teqne	r3, ip
 80066d2:	d069      	beq.n	80067a8 <__aeabi_fdiv+0xec>
 80066d4:	eba2 0203 	sub.w	r2, r2, r3
 80066d8:	ea80 0c01 	eor.w	ip, r0, r1
 80066dc:	0249      	lsls	r1, r1, #9
 80066de:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80066e2:	d037      	beq.n	8006754 <__aeabi_fdiv+0x98>
 80066e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80066e8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80066ec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80066f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80066f4:	428b      	cmp	r3, r1
 80066f6:	bf38      	it	cc
 80066f8:	005b      	lslcc	r3, r3, #1
 80066fa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80066fe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8006702:	428b      	cmp	r3, r1
 8006704:	bf24      	itt	cs
 8006706:	1a5b      	subcs	r3, r3, r1
 8006708:	ea40 000c 	orrcs.w	r0, r0, ip
 800670c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8006710:	bf24      	itt	cs
 8006712:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8006716:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800671a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800671e:	bf24      	itt	cs
 8006720:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8006724:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006728:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800672c:	bf24      	itt	cs
 800672e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8006732:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006736:	011b      	lsls	r3, r3, #4
 8006738:	bf18      	it	ne
 800673a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800673e:	d1e0      	bne.n	8006702 <__aeabi_fdiv+0x46>
 8006740:	2afd      	cmp	r2, #253	; 0xfd
 8006742:	f63f af50 	bhi.w	80065e6 <__aeabi_fmul+0x92>
 8006746:	428b      	cmp	r3, r1
 8006748:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800674c:	bf08      	it	eq
 800674e:	f020 0001 	biceq.w	r0, r0, #1
 8006752:	4770      	bx	lr
 8006754:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8006758:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800675c:	327f      	adds	r2, #127	; 0x7f
 800675e:	bfc2      	ittt	gt
 8006760:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8006764:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8006768:	4770      	bxgt	lr
 800676a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800676e:	f04f 0300 	mov.w	r3, #0
 8006772:	3a01      	subs	r2, #1
 8006774:	e737      	b.n	80065e6 <__aeabi_fmul+0x92>
 8006776:	f092 0f00 	teq	r2, #0
 800677a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800677e:	bf02      	ittt	eq
 8006780:	0040      	lsleq	r0, r0, #1
 8006782:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8006786:	3a01      	subeq	r2, #1
 8006788:	d0f9      	beq.n	800677e <__aeabi_fdiv+0xc2>
 800678a:	ea40 000c 	orr.w	r0, r0, ip
 800678e:	f093 0f00 	teq	r3, #0
 8006792:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006796:	bf02      	ittt	eq
 8006798:	0049      	lsleq	r1, r1, #1
 800679a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800679e:	3b01      	subeq	r3, #1
 80067a0:	d0f9      	beq.n	8006796 <__aeabi_fdiv+0xda>
 80067a2:	ea41 010c 	orr.w	r1, r1, ip
 80067a6:	e795      	b.n	80066d4 <__aeabi_fdiv+0x18>
 80067a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80067ac:	ea92 0f0c 	teq	r2, ip
 80067b0:	d108      	bne.n	80067c4 <__aeabi_fdiv+0x108>
 80067b2:	0242      	lsls	r2, r0, #9
 80067b4:	f47f af7d 	bne.w	80066b2 <__aeabi_fmul+0x15e>
 80067b8:	ea93 0f0c 	teq	r3, ip
 80067bc:	f47f af70 	bne.w	80066a0 <__aeabi_fmul+0x14c>
 80067c0:	4608      	mov	r0, r1
 80067c2:	e776      	b.n	80066b2 <__aeabi_fmul+0x15e>
 80067c4:	ea93 0f0c 	teq	r3, ip
 80067c8:	d104      	bne.n	80067d4 <__aeabi_fdiv+0x118>
 80067ca:	024b      	lsls	r3, r1, #9
 80067cc:	f43f af4c 	beq.w	8006668 <__aeabi_fmul+0x114>
 80067d0:	4608      	mov	r0, r1
 80067d2:	e76e      	b.n	80066b2 <__aeabi_fmul+0x15e>
 80067d4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80067d8:	bf18      	it	ne
 80067da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80067de:	d1ca      	bne.n	8006776 <__aeabi_fdiv+0xba>
 80067e0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80067e4:	f47f af5c 	bne.w	80066a0 <__aeabi_fmul+0x14c>
 80067e8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80067ec:	f47f af3c 	bne.w	8006668 <__aeabi_fmul+0x114>
 80067f0:	e75f      	b.n	80066b2 <__aeabi_fmul+0x15e>
 80067f2:	bf00      	nop

080067f4 <__gesf2>:
 80067f4:	f04f 3cff 	mov.w	ip, #4294967295
 80067f8:	e006      	b.n	8006808 <__cmpsf2+0x4>
 80067fa:	bf00      	nop

080067fc <__lesf2>:
 80067fc:	f04f 0c01 	mov.w	ip, #1
 8006800:	e002      	b.n	8006808 <__cmpsf2+0x4>
 8006802:	bf00      	nop

08006804 <__cmpsf2>:
 8006804:	f04f 0c01 	mov.w	ip, #1
 8006808:	f84d cd04 	str.w	ip, [sp, #-4]!
 800680c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8006810:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8006814:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8006818:	bf18      	it	ne
 800681a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800681e:	d011      	beq.n	8006844 <__cmpsf2+0x40>
 8006820:	b001      	add	sp, #4
 8006822:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8006826:	bf18      	it	ne
 8006828:	ea90 0f01 	teqne	r0, r1
 800682c:	bf58      	it	pl
 800682e:	ebb2 0003 	subspl.w	r0, r2, r3
 8006832:	bf88      	it	hi
 8006834:	17c8      	asrhi	r0, r1, #31
 8006836:	bf38      	it	cc
 8006838:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800683c:	bf18      	it	ne
 800683e:	f040 0001 	orrne.w	r0, r0, #1
 8006842:	4770      	bx	lr
 8006844:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8006848:	d102      	bne.n	8006850 <__cmpsf2+0x4c>
 800684a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800684e:	d105      	bne.n	800685c <__cmpsf2+0x58>
 8006850:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8006854:	d1e4      	bne.n	8006820 <__cmpsf2+0x1c>
 8006856:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800685a:	d0e1      	beq.n	8006820 <__cmpsf2+0x1c>
 800685c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop

08006864 <__aeabi_cfrcmple>:
 8006864:	4684      	mov	ip, r0
 8006866:	4608      	mov	r0, r1
 8006868:	4661      	mov	r1, ip
 800686a:	e7ff      	b.n	800686c <__aeabi_cfcmpeq>

0800686c <__aeabi_cfcmpeq>:
 800686c:	b50f      	push	{r0, r1, r2, r3, lr}
 800686e:	f7ff ffc9 	bl	8006804 <__cmpsf2>
 8006872:	2800      	cmp	r0, #0
 8006874:	bf48      	it	mi
 8006876:	f110 0f00 	cmnmi.w	r0, #0
 800687a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800687c <__aeabi_fcmpeq>:
 800687c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006880:	f7ff fff4 	bl	800686c <__aeabi_cfcmpeq>
 8006884:	bf0c      	ite	eq
 8006886:	2001      	moveq	r0, #1
 8006888:	2000      	movne	r0, #0
 800688a:	f85d fb08 	ldr.w	pc, [sp], #8
 800688e:	bf00      	nop

08006890 <__aeabi_fcmplt>:
 8006890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006894:	f7ff ffea 	bl	800686c <__aeabi_cfcmpeq>
 8006898:	bf34      	ite	cc
 800689a:	2001      	movcc	r0, #1
 800689c:	2000      	movcs	r0, #0
 800689e:	f85d fb08 	ldr.w	pc, [sp], #8
 80068a2:	bf00      	nop

080068a4 <__aeabi_fcmple>:
 80068a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80068a8:	f7ff ffe0 	bl	800686c <__aeabi_cfcmpeq>
 80068ac:	bf94      	ite	ls
 80068ae:	2001      	movls	r0, #1
 80068b0:	2000      	movhi	r0, #0
 80068b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80068b6:	bf00      	nop

080068b8 <__aeabi_fcmpge>:
 80068b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80068bc:	f7ff ffd2 	bl	8006864 <__aeabi_cfrcmple>
 80068c0:	bf94      	ite	ls
 80068c2:	2001      	movls	r0, #1
 80068c4:	2000      	movhi	r0, #0
 80068c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80068ca:	bf00      	nop

080068cc <__aeabi_fcmpgt>:
 80068cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80068d0:	f7ff ffc8 	bl	8006864 <__aeabi_cfrcmple>
 80068d4:	bf34      	ite	cc
 80068d6:	2001      	movcc	r0, #1
 80068d8:	2000      	movcs	r0, #0
 80068da:	f85d fb08 	ldr.w	pc, [sp], #8
 80068de:	bf00      	nop

080068e0 <__aeabi_f2uiz>:
 80068e0:	0042      	lsls	r2, r0, #1
 80068e2:	d20e      	bcs.n	8006902 <__aeabi_f2uiz+0x22>
 80068e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80068e8:	d30b      	bcc.n	8006902 <__aeabi_f2uiz+0x22>
 80068ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80068ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80068f2:	d409      	bmi.n	8006908 <__aeabi_f2uiz+0x28>
 80068f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80068f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068fc:	fa23 f002 	lsr.w	r0, r3, r2
 8006900:	4770      	bx	lr
 8006902:	f04f 0000 	mov.w	r0, #0
 8006906:	4770      	bx	lr
 8006908:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800690c:	d101      	bne.n	8006912 <__aeabi_f2uiz+0x32>
 800690e:	0242      	lsls	r2, r0, #9
 8006910:	d102      	bne.n	8006918 <__aeabi_f2uiz+0x38>
 8006912:	f04f 30ff 	mov.w	r0, #4294967295
 8006916:	4770      	bx	lr
 8006918:	f04f 0000 	mov.w	r0, #0
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop

08006920 <__aeabi_uldivmod>:
 8006920:	b953      	cbnz	r3, 8006938 <__aeabi_uldivmod+0x18>
 8006922:	b94a      	cbnz	r2, 8006938 <__aeabi_uldivmod+0x18>
 8006924:	2900      	cmp	r1, #0
 8006926:	bf08      	it	eq
 8006928:	2800      	cmpeq	r0, #0
 800692a:	bf1c      	itt	ne
 800692c:	f04f 31ff 	movne.w	r1, #4294967295
 8006930:	f04f 30ff 	movne.w	r0, #4294967295
 8006934:	f000 b976 	b.w	8006c24 <__aeabi_idiv0>
 8006938:	f1ad 0c08 	sub.w	ip, sp, #8
 800693c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006940:	f000 f806 	bl	8006950 <__udivmoddi4>
 8006944:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006948:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800694c:	b004      	add	sp, #16
 800694e:	4770      	bx	lr

08006950 <__udivmoddi4>:
 8006950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006954:	9e08      	ldr	r6, [sp, #32]
 8006956:	460d      	mov	r5, r1
 8006958:	4604      	mov	r4, r0
 800695a:	4688      	mov	r8, r1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d14d      	bne.n	80069fc <__udivmoddi4+0xac>
 8006960:	428a      	cmp	r2, r1
 8006962:	4694      	mov	ip, r2
 8006964:	d968      	bls.n	8006a38 <__udivmoddi4+0xe8>
 8006966:	fab2 f282 	clz	r2, r2
 800696a:	b152      	cbz	r2, 8006982 <__udivmoddi4+0x32>
 800696c:	fa01 f302 	lsl.w	r3, r1, r2
 8006970:	f1c2 0120 	rsb	r1, r2, #32
 8006974:	fa20 f101 	lsr.w	r1, r0, r1
 8006978:	fa0c fc02 	lsl.w	ip, ip, r2
 800697c:	ea41 0803 	orr.w	r8, r1, r3
 8006980:	4094      	lsls	r4, r2
 8006982:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8006986:	fbb8 f7f1 	udiv	r7, r8, r1
 800698a:	fa1f fe8c 	uxth.w	lr, ip
 800698e:	fb01 8817 	mls	r8, r1, r7, r8
 8006992:	fb07 f00e 	mul.w	r0, r7, lr
 8006996:	0c23      	lsrs	r3, r4, #16
 8006998:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800699c:	4298      	cmp	r0, r3
 800699e:	d90a      	bls.n	80069b6 <__udivmoddi4+0x66>
 80069a0:	eb1c 0303 	adds.w	r3, ip, r3
 80069a4:	f107 35ff 	add.w	r5, r7, #4294967295
 80069a8:	f080 811e 	bcs.w	8006be8 <__udivmoddi4+0x298>
 80069ac:	4298      	cmp	r0, r3
 80069ae:	f240 811b 	bls.w	8006be8 <__udivmoddi4+0x298>
 80069b2:	3f02      	subs	r7, #2
 80069b4:	4463      	add	r3, ip
 80069b6:	1a1b      	subs	r3, r3, r0
 80069b8:	fbb3 f0f1 	udiv	r0, r3, r1
 80069bc:	fb01 3310 	mls	r3, r1, r0, r3
 80069c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80069c4:	b2a4      	uxth	r4, r4
 80069c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80069ca:	45a6      	cmp	lr, r4
 80069cc:	d90a      	bls.n	80069e4 <__udivmoddi4+0x94>
 80069ce:	eb1c 0404 	adds.w	r4, ip, r4
 80069d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80069d6:	f080 8109 	bcs.w	8006bec <__udivmoddi4+0x29c>
 80069da:	45a6      	cmp	lr, r4
 80069dc:	f240 8106 	bls.w	8006bec <__udivmoddi4+0x29c>
 80069e0:	4464      	add	r4, ip
 80069e2:	3802      	subs	r0, #2
 80069e4:	2100      	movs	r1, #0
 80069e6:	eba4 040e 	sub.w	r4, r4, lr
 80069ea:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80069ee:	b11e      	cbz	r6, 80069f8 <__udivmoddi4+0xa8>
 80069f0:	2300      	movs	r3, #0
 80069f2:	40d4      	lsrs	r4, r2
 80069f4:	e9c6 4300 	strd	r4, r3, [r6]
 80069f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069fc:	428b      	cmp	r3, r1
 80069fe:	d908      	bls.n	8006a12 <__udivmoddi4+0xc2>
 8006a00:	2e00      	cmp	r6, #0
 8006a02:	f000 80ee 	beq.w	8006be2 <__udivmoddi4+0x292>
 8006a06:	2100      	movs	r1, #0
 8006a08:	e9c6 0500 	strd	r0, r5, [r6]
 8006a0c:	4608      	mov	r0, r1
 8006a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a12:	fab3 f183 	clz	r1, r3
 8006a16:	2900      	cmp	r1, #0
 8006a18:	d14a      	bne.n	8006ab0 <__udivmoddi4+0x160>
 8006a1a:	42ab      	cmp	r3, r5
 8006a1c:	d302      	bcc.n	8006a24 <__udivmoddi4+0xd4>
 8006a1e:	4282      	cmp	r2, r0
 8006a20:	f200 80fc 	bhi.w	8006c1c <__udivmoddi4+0x2cc>
 8006a24:	1a84      	subs	r4, r0, r2
 8006a26:	eb65 0303 	sbc.w	r3, r5, r3
 8006a2a:	2001      	movs	r0, #1
 8006a2c:	4698      	mov	r8, r3
 8006a2e:	2e00      	cmp	r6, #0
 8006a30:	d0e2      	beq.n	80069f8 <__udivmoddi4+0xa8>
 8006a32:	e9c6 4800 	strd	r4, r8, [r6]
 8006a36:	e7df      	b.n	80069f8 <__udivmoddi4+0xa8>
 8006a38:	b902      	cbnz	r2, 8006a3c <__udivmoddi4+0xec>
 8006a3a:	deff      	udf	#255	; 0xff
 8006a3c:	fab2 f282 	clz	r2, r2
 8006a40:	2a00      	cmp	r2, #0
 8006a42:	f040 8091 	bne.w	8006b68 <__udivmoddi4+0x218>
 8006a46:	eba1 000c 	sub.w	r0, r1, ip
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006a50:	fa1f fe8c 	uxth.w	lr, ip
 8006a54:	fbb0 f3f7 	udiv	r3, r0, r7
 8006a58:	fb07 0013 	mls	r0, r7, r3, r0
 8006a5c:	0c25      	lsrs	r5, r4, #16
 8006a5e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8006a62:	fb0e f003 	mul.w	r0, lr, r3
 8006a66:	42a8      	cmp	r0, r5
 8006a68:	d908      	bls.n	8006a7c <__udivmoddi4+0x12c>
 8006a6a:	eb1c 0505 	adds.w	r5, ip, r5
 8006a6e:	f103 38ff 	add.w	r8, r3, #4294967295
 8006a72:	d202      	bcs.n	8006a7a <__udivmoddi4+0x12a>
 8006a74:	42a8      	cmp	r0, r5
 8006a76:	f200 80ce 	bhi.w	8006c16 <__udivmoddi4+0x2c6>
 8006a7a:	4643      	mov	r3, r8
 8006a7c:	1a2d      	subs	r5, r5, r0
 8006a7e:	fbb5 f0f7 	udiv	r0, r5, r7
 8006a82:	fb07 5510 	mls	r5, r7, r0, r5
 8006a86:	fb0e fe00 	mul.w	lr, lr, r0
 8006a8a:	b2a4      	uxth	r4, r4
 8006a8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006a90:	45a6      	cmp	lr, r4
 8006a92:	d908      	bls.n	8006aa6 <__udivmoddi4+0x156>
 8006a94:	eb1c 0404 	adds.w	r4, ip, r4
 8006a98:	f100 35ff 	add.w	r5, r0, #4294967295
 8006a9c:	d202      	bcs.n	8006aa4 <__udivmoddi4+0x154>
 8006a9e:	45a6      	cmp	lr, r4
 8006aa0:	f200 80b6 	bhi.w	8006c10 <__udivmoddi4+0x2c0>
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	eba4 040e 	sub.w	r4, r4, lr
 8006aaa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8006aae:	e79e      	b.n	80069ee <__udivmoddi4+0x9e>
 8006ab0:	f1c1 0720 	rsb	r7, r1, #32
 8006ab4:	408b      	lsls	r3, r1
 8006ab6:	fa22 fc07 	lsr.w	ip, r2, r7
 8006aba:	ea4c 0c03 	orr.w	ip, ip, r3
 8006abe:	fa25 fa07 	lsr.w	sl, r5, r7
 8006ac2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8006ac6:	fbba f8f9 	udiv	r8, sl, r9
 8006aca:	fa20 f307 	lsr.w	r3, r0, r7
 8006ace:	fb09 aa18 	mls	sl, r9, r8, sl
 8006ad2:	408d      	lsls	r5, r1
 8006ad4:	fa1f fe8c 	uxth.w	lr, ip
 8006ad8:	431d      	orrs	r5, r3
 8006ada:	fa00 f301 	lsl.w	r3, r0, r1
 8006ade:	fb08 f00e 	mul.w	r0, r8, lr
 8006ae2:	0c2c      	lsrs	r4, r5, #16
 8006ae4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006ae8:	42a0      	cmp	r0, r4
 8006aea:	fa02 f201 	lsl.w	r2, r2, r1
 8006aee:	d90b      	bls.n	8006b08 <__udivmoddi4+0x1b8>
 8006af0:	eb1c 0404 	adds.w	r4, ip, r4
 8006af4:	f108 3aff 	add.w	sl, r8, #4294967295
 8006af8:	f080 8088 	bcs.w	8006c0c <__udivmoddi4+0x2bc>
 8006afc:	42a0      	cmp	r0, r4
 8006afe:	f240 8085 	bls.w	8006c0c <__udivmoddi4+0x2bc>
 8006b02:	f1a8 0802 	sub.w	r8, r8, #2
 8006b06:	4464      	add	r4, ip
 8006b08:	1a24      	subs	r4, r4, r0
 8006b0a:	fbb4 f0f9 	udiv	r0, r4, r9
 8006b0e:	fb09 4410 	mls	r4, r9, r0, r4
 8006b12:	fb00 fe0e 	mul.w	lr, r0, lr
 8006b16:	b2ad      	uxth	r5, r5
 8006b18:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8006b1c:	45a6      	cmp	lr, r4
 8006b1e:	d908      	bls.n	8006b32 <__udivmoddi4+0x1e2>
 8006b20:	eb1c 0404 	adds.w	r4, ip, r4
 8006b24:	f100 35ff 	add.w	r5, r0, #4294967295
 8006b28:	d26c      	bcs.n	8006c04 <__udivmoddi4+0x2b4>
 8006b2a:	45a6      	cmp	lr, r4
 8006b2c:	d96a      	bls.n	8006c04 <__udivmoddi4+0x2b4>
 8006b2e:	3802      	subs	r0, #2
 8006b30:	4464      	add	r4, ip
 8006b32:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8006b36:	fba0 9502 	umull	r9, r5, r0, r2
 8006b3a:	eba4 040e 	sub.w	r4, r4, lr
 8006b3e:	42ac      	cmp	r4, r5
 8006b40:	46c8      	mov	r8, r9
 8006b42:	46ae      	mov	lr, r5
 8006b44:	d356      	bcc.n	8006bf4 <__udivmoddi4+0x2a4>
 8006b46:	d053      	beq.n	8006bf0 <__udivmoddi4+0x2a0>
 8006b48:	2e00      	cmp	r6, #0
 8006b4a:	d069      	beq.n	8006c20 <__udivmoddi4+0x2d0>
 8006b4c:	ebb3 0208 	subs.w	r2, r3, r8
 8006b50:	eb64 040e 	sbc.w	r4, r4, lr
 8006b54:	fa22 f301 	lsr.w	r3, r2, r1
 8006b58:	fa04 f707 	lsl.w	r7, r4, r7
 8006b5c:	431f      	orrs	r7, r3
 8006b5e:	40cc      	lsrs	r4, r1
 8006b60:	e9c6 7400 	strd	r7, r4, [r6]
 8006b64:	2100      	movs	r1, #0
 8006b66:	e747      	b.n	80069f8 <__udivmoddi4+0xa8>
 8006b68:	fa0c fc02 	lsl.w	ip, ip, r2
 8006b6c:	f1c2 0120 	rsb	r1, r2, #32
 8006b70:	fa25 f301 	lsr.w	r3, r5, r1
 8006b74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006b78:	fa20 f101 	lsr.w	r1, r0, r1
 8006b7c:	4095      	lsls	r5, r2
 8006b7e:	430d      	orrs	r5, r1
 8006b80:	fbb3 f1f7 	udiv	r1, r3, r7
 8006b84:	fb07 3311 	mls	r3, r7, r1, r3
 8006b88:	fa1f fe8c 	uxth.w	lr, ip
 8006b8c:	0c28      	lsrs	r0, r5, #16
 8006b8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8006b92:	fb01 f30e 	mul.w	r3, r1, lr
 8006b96:	4283      	cmp	r3, r0
 8006b98:	fa04 f402 	lsl.w	r4, r4, r2
 8006b9c:	d908      	bls.n	8006bb0 <__udivmoddi4+0x260>
 8006b9e:	eb1c 0000 	adds.w	r0, ip, r0
 8006ba2:	f101 38ff 	add.w	r8, r1, #4294967295
 8006ba6:	d22f      	bcs.n	8006c08 <__udivmoddi4+0x2b8>
 8006ba8:	4283      	cmp	r3, r0
 8006baa:	d92d      	bls.n	8006c08 <__udivmoddi4+0x2b8>
 8006bac:	3902      	subs	r1, #2
 8006bae:	4460      	add	r0, ip
 8006bb0:	1ac0      	subs	r0, r0, r3
 8006bb2:	fbb0 f3f7 	udiv	r3, r0, r7
 8006bb6:	fb07 0013 	mls	r0, r7, r3, r0
 8006bba:	b2ad      	uxth	r5, r5
 8006bbc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8006bc0:	fb03 f00e 	mul.w	r0, r3, lr
 8006bc4:	42a8      	cmp	r0, r5
 8006bc6:	d908      	bls.n	8006bda <__udivmoddi4+0x28a>
 8006bc8:	eb1c 0505 	adds.w	r5, ip, r5
 8006bcc:	f103 38ff 	add.w	r8, r3, #4294967295
 8006bd0:	d216      	bcs.n	8006c00 <__udivmoddi4+0x2b0>
 8006bd2:	42a8      	cmp	r0, r5
 8006bd4:	d914      	bls.n	8006c00 <__udivmoddi4+0x2b0>
 8006bd6:	3b02      	subs	r3, #2
 8006bd8:	4465      	add	r5, ip
 8006bda:	1a28      	subs	r0, r5, r0
 8006bdc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8006be0:	e738      	b.n	8006a54 <__udivmoddi4+0x104>
 8006be2:	4631      	mov	r1, r6
 8006be4:	4630      	mov	r0, r6
 8006be6:	e707      	b.n	80069f8 <__udivmoddi4+0xa8>
 8006be8:	462f      	mov	r7, r5
 8006bea:	e6e4      	b.n	80069b6 <__udivmoddi4+0x66>
 8006bec:	4618      	mov	r0, r3
 8006bee:	e6f9      	b.n	80069e4 <__udivmoddi4+0x94>
 8006bf0:	454b      	cmp	r3, r9
 8006bf2:	d2a9      	bcs.n	8006b48 <__udivmoddi4+0x1f8>
 8006bf4:	ebb9 0802 	subs.w	r8, r9, r2
 8006bf8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8006bfc:	3801      	subs	r0, #1
 8006bfe:	e7a3      	b.n	8006b48 <__udivmoddi4+0x1f8>
 8006c00:	4643      	mov	r3, r8
 8006c02:	e7ea      	b.n	8006bda <__udivmoddi4+0x28a>
 8006c04:	4628      	mov	r0, r5
 8006c06:	e794      	b.n	8006b32 <__udivmoddi4+0x1e2>
 8006c08:	4641      	mov	r1, r8
 8006c0a:	e7d1      	b.n	8006bb0 <__udivmoddi4+0x260>
 8006c0c:	46d0      	mov	r8, sl
 8006c0e:	e77b      	b.n	8006b08 <__udivmoddi4+0x1b8>
 8006c10:	4464      	add	r4, ip
 8006c12:	3802      	subs	r0, #2
 8006c14:	e747      	b.n	8006aa6 <__udivmoddi4+0x156>
 8006c16:	3b02      	subs	r3, #2
 8006c18:	4465      	add	r5, ip
 8006c1a:	e72f      	b.n	8006a7c <__udivmoddi4+0x12c>
 8006c1c:	4608      	mov	r0, r1
 8006c1e:	e706      	b.n	8006a2e <__udivmoddi4+0xde>
 8006c20:	4631      	mov	r1, r6
 8006c22:	e6e9      	b.n	80069f8 <__udivmoddi4+0xa8>

08006c24 <__aeabi_idiv0>:
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop

08006c28 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8006c28:	b500      	push	{lr}
 8006c2a:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	9301      	str	r3, [sp, #4]
 8006c30:	9302      	str	r3, [sp, #8]
 8006c32:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8006c34:	4860      	ldr	r0, [pc, #384]	; (8006db8 <MX_ADC_Init+0x190>)
 8006c36:	4a61      	ldr	r2, [pc, #388]	; (8006dbc <MX_ADC_Init+0x194>)
 8006c38:	6002      	str	r2, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8006c3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006c3e:	6042      	str	r2, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8006c40:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006c42:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8006c44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c48:	6102      	str	r2, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006c4a:	6143      	str	r3, [r0, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8006c4c:	6183      	str	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8006c4e:	61c3      	str	r3, [r0, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8006c50:	6203      	str	r3, [r0, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 8006c52:	2201      	movs	r2, #1
 8006c54:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  hadc.Init.NbrOfConversion = 12;
 8006c58:	210c      	movs	r1, #12
 8006c5a:	6281      	str	r1, [r0, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8006c5c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006c60:	2110      	movs	r1, #16
 8006c62:	6341      	str	r1, [r0, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006c64:	6383      	str	r3, [r0, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 8006c66:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8006c6a:	f006 fa11 	bl	800d090 <HAL_ADC_Init>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d17a      	bne.n	8006d68 <MX_ADC_Init+0x140>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006c72:	2304      	movs	r3, #4
 8006c74:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006c76:	2301      	movs	r3, #1
 8006c78:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 8006c7a:	2306      	movs	r3, #6
 8006c7c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006c7e:	a901      	add	r1, sp, #4
 8006c80:	484d      	ldr	r0, [pc, #308]	; (8006db8 <MX_ADC_Init+0x190>)
 8006c82:	f006 fbc1 	bl	800d408 <HAL_ADC_ConfigChannel>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d171      	bne.n	8006d6e <MX_ADC_Init+0x146>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006c8a:	2305      	movs	r3, #5
 8006c8c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8006c8e:	2302      	movs	r3, #2
 8006c90:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006c92:	a901      	add	r1, sp, #4
 8006c94:	4848      	ldr	r0, [pc, #288]	; (8006db8 <MX_ADC_Init+0x190>)
 8006c96:	f006 fbb7 	bl	800d408 <HAL_ADC_ConfigChannel>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	d16a      	bne.n	8006d74 <MX_ADC_Init+0x14c>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006c9e:	2306      	movs	r3, #6
 8006ca0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006ca6:	a901      	add	r1, sp, #4
 8006ca8:	4843      	ldr	r0, [pc, #268]	; (8006db8 <MX_ADC_Init+0x190>)
 8006caa:	f006 fbad 	bl	800d408 <HAL_ADC_ConfigChannel>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	d163      	bne.n	8006d7a <MX_ADC_Init+0x152>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8006cb2:	2307      	movs	r3, #7
 8006cb4:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8006cb6:	2304      	movs	r3, #4
 8006cb8:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006cba:	eb0d 0103 	add.w	r1, sp, r3
 8006cbe:	483e      	ldr	r0, [pc, #248]	; (8006db8 <MX_ADC_Init+0x190>)
 8006cc0:	f006 fba2 	bl	800d408 <HAL_ADC_ConfigChannel>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d15b      	bne.n	8006d80 <MX_ADC_Init+0x158>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006cc8:	2308      	movs	r3, #8
 8006cca:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8006ccc:	2305      	movs	r3, #5
 8006cce:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006cd0:	a901      	add	r1, sp, #4
 8006cd2:	4839      	ldr	r0, [pc, #228]	; (8006db8 <MX_ADC_Init+0x190>)
 8006cd4:	f006 fb98 	bl	800d408 <HAL_ADC_ConfigChannel>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d154      	bne.n	8006d86 <MX_ADC_Init+0x15e>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8006cdc:	2309      	movs	r3, #9
 8006cde:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8006ce0:	2306      	movs	r3, #6
 8006ce2:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006ce4:	a901      	add	r1, sp, #4
 8006ce6:	4834      	ldr	r0, [pc, #208]	; (8006db8 <MX_ADC_Init+0x190>)
 8006ce8:	f006 fb8e 	bl	800d408 <HAL_ADC_ConfigChannel>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d14d      	bne.n	8006d8c <MX_ADC_Init+0x164>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006cf0:	230e      	movs	r3, #14
 8006cf2:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8006cf4:	2307      	movs	r3, #7
 8006cf6:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006cf8:	a901      	add	r1, sp, #4
 8006cfa:	482f      	ldr	r0, [pc, #188]	; (8006db8 <MX_ADC_Init+0x190>)
 8006cfc:	f006 fb84 	bl	800d408 <HAL_ADC_ConfigChannel>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d146      	bne.n	8006d92 <MX_ADC_Init+0x16a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006d04:	230f      	movs	r3, #15
 8006d06:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8006d08:	2308      	movs	r3, #8
 8006d0a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006d0c:	a901      	add	r1, sp, #4
 8006d0e:	482a      	ldr	r0, [pc, #168]	; (8006db8 <MX_ADC_Init+0x190>)
 8006d10:	f006 fb7a 	bl	800d408 <HAL_ADC_ConfigChannel>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	d13f      	bne.n	8006d98 <MX_ADC_Init+0x170>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006d18:	230a      	movs	r3, #10
 8006d1a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8006d1c:	2309      	movs	r3, #9
 8006d1e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006d20:	a901      	add	r1, sp, #4
 8006d22:	4825      	ldr	r0, [pc, #148]	; (8006db8 <MX_ADC_Init+0x190>)
 8006d24:	f006 fb70 	bl	800d408 <HAL_ADC_ConfigChannel>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	d138      	bne.n	8006d9e <MX_ADC_Init+0x176>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8006d2c:	230b      	movs	r3, #11
 8006d2e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8006d30:	230a      	movs	r3, #10
 8006d32:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006d34:	a901      	add	r1, sp, #4
 8006d36:	4820      	ldr	r0, [pc, #128]	; (8006db8 <MX_ADC_Init+0x190>)
 8006d38:	f006 fb66 	bl	800d408 <HAL_ADC_ConfigChannel>
 8006d3c:	bb90      	cbnz	r0, 8006da4 <MX_ADC_Init+0x17c>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006d3e:	230c      	movs	r3, #12
 8006d40:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8006d42:	230b      	movs	r3, #11
 8006d44:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006d46:	a901      	add	r1, sp, #4
 8006d48:	481b      	ldr	r0, [pc, #108]	; (8006db8 <MX_ADC_Init+0x190>)
 8006d4a:	f006 fb5d 	bl	800d408 <HAL_ADC_ConfigChannel>
 8006d4e:	bb60      	cbnz	r0, 8006daa <MX_ADC_Init+0x182>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8006d50:	2311      	movs	r3, #17
 8006d52:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8006d54:	230c      	movs	r3, #12
 8006d56:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006d58:	a901      	add	r1, sp, #4
 8006d5a:	4817      	ldr	r0, [pc, #92]	; (8006db8 <MX_ADC_Init+0x190>)
 8006d5c:	f006 fb54 	bl	800d408 <HAL_ADC_ConfigChannel>
 8006d60:	bb30      	cbnz	r0, 8006db0 <MX_ADC_Init+0x188>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8006d62:	b005      	add	sp, #20
 8006d64:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006d68:	f001 f982 	bl	8008070 <Error_Handler>
 8006d6c:	e781      	b.n	8006c72 <MX_ADC_Init+0x4a>
    Error_Handler();
 8006d6e:	f001 f97f 	bl	8008070 <Error_Handler>
 8006d72:	e78a      	b.n	8006c8a <MX_ADC_Init+0x62>
    Error_Handler();
 8006d74:	f001 f97c 	bl	8008070 <Error_Handler>
 8006d78:	e791      	b.n	8006c9e <MX_ADC_Init+0x76>
    Error_Handler();
 8006d7a:	f001 f979 	bl	8008070 <Error_Handler>
 8006d7e:	e798      	b.n	8006cb2 <MX_ADC_Init+0x8a>
    Error_Handler();
 8006d80:	f001 f976 	bl	8008070 <Error_Handler>
 8006d84:	e7a0      	b.n	8006cc8 <MX_ADC_Init+0xa0>
    Error_Handler();
 8006d86:	f001 f973 	bl	8008070 <Error_Handler>
 8006d8a:	e7a7      	b.n	8006cdc <MX_ADC_Init+0xb4>
    Error_Handler();
 8006d8c:	f001 f970 	bl	8008070 <Error_Handler>
 8006d90:	e7ae      	b.n	8006cf0 <MX_ADC_Init+0xc8>
    Error_Handler();
 8006d92:	f001 f96d 	bl	8008070 <Error_Handler>
 8006d96:	e7b5      	b.n	8006d04 <MX_ADC_Init+0xdc>
    Error_Handler();
 8006d98:	f001 f96a 	bl	8008070 <Error_Handler>
 8006d9c:	e7bc      	b.n	8006d18 <MX_ADC_Init+0xf0>
    Error_Handler();
 8006d9e:	f001 f967 	bl	8008070 <Error_Handler>
 8006da2:	e7c3      	b.n	8006d2c <MX_ADC_Init+0x104>
    Error_Handler();
 8006da4:	f001 f964 	bl	8008070 <Error_Handler>
 8006da8:	e7c9      	b.n	8006d3e <MX_ADC_Init+0x116>
    Error_Handler();
 8006daa:	f001 f961 	bl	8008070 <Error_Handler>
 8006dae:	e7cf      	b.n	8006d50 <MX_ADC_Init+0x128>
    Error_Handler();
 8006db0:	f001 f95e 	bl	8008070 <Error_Handler>
}
 8006db4:	e7d5      	b.n	8006d62 <MX_ADC_Init+0x13a>
 8006db6:	bf00      	nop
 8006db8:	200000fc 	.word	0x200000fc
 8006dbc:	40012400 	.word	0x40012400

08006dc0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006dc0:	b570      	push	{r4, r5, r6, lr}
 8006dc2:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	9305      	str	r3, [sp, #20]
 8006dc8:	9306      	str	r3, [sp, #24]
 8006dca:	9307      	str	r3, [sp, #28]
 8006dcc:	9308      	str	r3, [sp, #32]
 8006dce:	9309      	str	r3, [sp, #36]	; 0x24
  if(adcHandle->Instance==ADC1)
 8006dd0:	6802      	ldr	r2, [r0, #0]
 8006dd2:	4b33      	ldr	r3, [pc, #204]	; (8006ea0 <HAL_ADC_MspInit+0xe0>)
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d001      	beq.n	8006ddc <HAL_ADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006dd8:	b00a      	add	sp, #40	; 0x28
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
 8006ddc:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006dde:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8006de2:	6a1a      	ldr	r2, [r3, #32]
 8006de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006de8:	621a      	str	r2, [r3, #32]
 8006dea:	6a1a      	ldr	r2, [r3, #32]
 8006dec:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006df0:	9201      	str	r2, [sp, #4]
 8006df2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006df4:	69da      	ldr	r2, [r3, #28]
 8006df6:	f042 0204 	orr.w	r2, r2, #4
 8006dfa:	61da      	str	r2, [r3, #28]
 8006dfc:	69da      	ldr	r2, [r3, #28]
 8006dfe:	f002 0204 	and.w	r2, r2, #4
 8006e02:	9202      	str	r2, [sp, #8]
 8006e04:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e06:	69da      	ldr	r2, [r3, #28]
 8006e08:	f042 0201 	orr.w	r2, r2, #1
 8006e0c:	61da      	str	r2, [r3, #28]
 8006e0e:	69da      	ldr	r2, [r3, #28]
 8006e10:	f002 0201 	and.w	r2, r2, #1
 8006e14:	9203      	str	r2, [sp, #12]
 8006e16:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e18:	69da      	ldr	r2, [r3, #28]
 8006e1a:	f042 0202 	orr.w	r2, r2, #2
 8006e1e:	61da      	str	r2, [r3, #28]
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	9304      	str	r3, [sp, #16]
 8006e28:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = SW5_Pin|SW3_Pin|SW4_Pin|NTC1_Pin
 8006e2a:	2337      	movs	r3, #55	; 0x37
 8006e2c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e2e:	2603      	movs	r6, #3
 8006e30:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e32:	a905      	add	r1, sp, #20
 8006e34:	481b      	ldr	r0, [pc, #108]	; (8006ea4 <HAL_ADC_MspInit+0xe4>)
 8006e36:	f007 f849 	bl	800decc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PS3_Pin|LS1_Pin|PS2_Pin|PS1_Pin;
 8006e3a:	23f0      	movs	r3, #240	; 0xf0
 8006e3c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e3e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e40:	2500      	movs	r5, #0
 8006e42:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e44:	a905      	add	r1, sp, #20
 8006e46:	4818      	ldr	r0, [pc, #96]	; (8006ea8 <HAL_ADC_MspInit+0xe8>)
 8006e48:	f007 f840 	bl	800decc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NTC3_Pin|NTC4_Pin;
 8006e4c:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e4e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e50:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e52:	a905      	add	r1, sp, #20
 8006e54:	4815      	ldr	r0, [pc, #84]	; (8006eac <HAL_ADC_MspInit+0xec>)
 8006e56:	f007 f839 	bl	800decc <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8006e5a:	4815      	ldr	r0, [pc, #84]	; (8006eb0 <HAL_ADC_MspInit+0xf0>)
 8006e5c:	4b15      	ldr	r3, [pc, #84]	; (8006eb4 <HAL_ADC_MspInit+0xf4>)
 8006e5e:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e60:	6045      	str	r5, [r0, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e62:	6085      	str	r5, [r0, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8006e64:	2380      	movs	r3, #128	; 0x80
 8006e66:	60c3      	str	r3, [r0, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006e68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e6c:	6103      	str	r3, [r0, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e72:	6143      	str	r3, [r0, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8006e74:	2320      	movs	r3, #32
 8006e76:	6183      	str	r3, [r0, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8006e78:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8006e7a:	f006 fcc1 	bl	800d800 <HAL_DMA_Init>
 8006e7e:	b958      	cbnz	r0, 8006e98 <HAL_ADC_MspInit+0xd8>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8006e80:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <HAL_ADC_MspInit+0xf0>)
 8006e82:	6463      	str	r3, [r4, #68]	; 0x44
 8006e84:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8006e86:	2200      	movs	r2, #0
 8006e88:	4611      	mov	r1, r2
 8006e8a:	2012      	movs	r0, #18
 8006e8c:	f006 fc4e 	bl	800d72c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8006e90:	2012      	movs	r0, #18
 8006e92:	f006 fc81 	bl	800d798 <HAL_NVIC_EnableIRQ>
}
 8006e96:	e79f      	b.n	8006dd8 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8006e98:	f001 f8ea 	bl	8008070 <Error_Handler>
 8006e9c:	e7f0      	b.n	8006e80 <HAL_ADC_MspInit+0xc0>
 8006e9e:	bf00      	nop
 8006ea0:	40012400 	.word	0x40012400
 8006ea4:	40020800 	.word	0x40020800
 8006ea8:	40020000 	.word	0x40020000
 8006eac:	40020400 	.word	0x40020400
 8006eb0:	20000150 	.word	0x20000150
 8006eb4:	40026008 	.word	0x40026008

08006eb8 <AIR_Init>:
//-----------------------------------------------------------------------------
//! \brief        Initializes the airpump module
//! \details      Starts the PWM control
//! \params       None
void AIR_Init (void)
{
 8006eb8:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(&htim3);
 8006eba:	4c04      	ldr	r4, [pc, #16]	; (8006ecc <AIR_Init+0x14>)
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f007 fff3 	bl	800eea8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8006ec2:	2104      	movs	r1, #4
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f008 f9a5 	bl	800f214 <HAL_TIM_PWM_Start>
}
 8006eca:	bd10      	pop	{r4, pc}
 8006ecc:	20000a30 	.word	0x20000a30

08006ed0 <AIR_Set>:
//! \brief        Sets the percentage of the air pump
//! \details      Sets the percentage and status of the air pump
//! \param[in]	  uint8_t newPercentage (0 - 100%)
void AIR_Set (uint8_t newPercentage)
{
	if (newPercentage > 100) newPercentage = 100;
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2864      	cmp	r0, #100	; 0x64
 8006ed4:	bf28      	it	cs
 8006ed6:	2364      	movcs	r3, #100	; 0x64
	AIR.Percentage = newPercentage;
 8006ed8:	4a07      	ldr	r2, [pc, #28]	; (8006ef8 <AIR_Set+0x28>)
 8006eda:	7053      	strb	r3, [r2, #1]

	if (DUMMYMODE) return; //In dummymode don't switch on the pump
 8006edc:	4a07      	ldr	r2, [pc, #28]	; (8006efc <AIR_Set+0x2c>)
 8006ede:	7812      	ldrb	r2, [r2, #0]
 8006ee0:	b94a      	cbnz	r2, 8006ef6 <AIR_Set+0x26>
	AIR_Control = (uint8_t) ((float) newPercentage);// * 0.66f); //pump is 3V CCR2=66 -> 3V
 8006ee2:	4a07      	ldr	r2, [pc, #28]	; (8006f00 <AIR_Set+0x30>)
 8006ee4:	6393      	str	r3, [r2, #56]	; 0x38
	if (newPercentage > 0)
 8006ee6:	b118      	cbz	r0, 8006ef0 <AIR_Set+0x20>
	{
		AIR.Status = sACTIVE;
 8006ee8:	4b03      	ldr	r3, [pc, #12]	; (8006ef8 <AIR_Set+0x28>)
 8006eea:	2203      	movs	r2, #3
 8006eec:	701a      	strb	r2, [r3, #0]
 8006eee:	4770      	bx	lr
	}
	else
	{
		AIR.Status = sINACTIVE;
 8006ef0:	4b01      	ldr	r3, [pc, #4]	; (8006ef8 <AIR_Set+0x28>)
 8006ef2:	2204      	movs	r2, #4
 8006ef4:	701a      	strb	r2, [r3, #0]
	}
}
 8006ef6:	4770      	bx	lr
 8006ef8:	20000194 	.word	0x20000194
 8006efc:	20000c48 	.word	0x20000c48
 8006f00:	40000400 	.word	0x40000400

08006f04 <AIR_GetPercentage>:
	if (DUMMYMODE)
	{

	}
	return AIR.Percentage;
}
 8006f04:	4b01      	ldr	r3, [pc, #4]	; (8006f0c <AIR_GetPercentage+0x8>)
 8006f06:	7858      	ldrb	r0, [r3, #1]
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	20000194 	.word	0x20000194

08006f10 <AM_SetTimerValue>:
//! \details    Writes a value in the TimerValue array
//! \param[in]	uint8_t newCounter
//! \param[in]	uint16_t newTime
void AM_SetTimerValue(uint8_t newCounter, uint16_t newTime)
{
	TimerValues[newCounter] = newTime;
 8006f10:	4b01      	ldr	r3, [pc, #4]	; (8006f18 <AM_SetTimerValue+0x8>)
 8006f12:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
}
 8006f16:	4770      	bx	lr
 8006f18:	200001ac 	.word	0x200001ac

08006f1c <AM_GetHumidity>:
//! \brief      Returns the humidity
//! \details    Returns the humidity
//! \param[out]	float Humidity
float AM_GetHumidity (void)
{
	if (DUMMYMODE)
 8006f1c:	4b03      	ldr	r3, [pc, #12]	; (8006f2c <AM_GetHumidity+0x10>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	b913      	cbnz	r3, 8006f28 <AM_GetHumidity+0xc>
		return 545;
	else
		return Sensor.Humidity;
 8006f22:	4b03      	ldr	r3, [pc, #12]	; (8006f30 <AM_GetHumidity+0x14>)
 8006f24:	6858      	ldr	r0, [r3, #4]
 8006f26:	4770      	bx	lr
		return 545;
 8006f28:	4802      	ldr	r0, [pc, #8]	; (8006f34 <AM_GetHumidity+0x18>)
}
 8006f2a:	4770      	bx	lr
 8006f2c:	20000c48 	.word	0x20000c48
 8006f30:	20000198 	.word	0x20000198
 8006f34:	44084000 	.word	0x44084000

08006f38 <AM_GetTemperature>:
//! \brief      Returns the temperature
//! \details    Returns the temperature
//! \param[out]	uint16_t Temperature
float AM_GetTemperature (void)
{
	if (DUMMYMODE)
 8006f38:	4b03      	ldr	r3, [pc, #12]	; (8006f48 <AM_GetTemperature+0x10>)
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	b913      	cbnz	r3, 8006f44 <AM_GetTemperature+0xc>
		return 221;
	else
		return Sensor.Temperature;
 8006f3e:	4b03      	ldr	r3, [pc, #12]	; (8006f4c <AM_GetTemperature+0x14>)
 8006f40:	6898      	ldr	r0, [r3, #8]
 8006f42:	4770      	bx	lr
		return 221;
 8006f44:	4802      	ldr	r0, [pc, #8]	; (8006f50 <AM_GetTemperature+0x18>)
}
 8006f46:	4770      	bx	lr
 8006f48:	20000c48 	.word	0x20000c48
 8006f4c:	20000198 	.word	0x20000198
 8006f50:	435d0000 	.word	0x435d0000

08006f54 <AM_UpdateValues>:
//! \brief      Updates the humidity and temperature values
//! \details    Starts the read sequence
//! \param		None
void AM_UpdateValues (void)
{
	Sensor.Counter = 1;
 8006f54:	4b01      	ldr	r3, [pc, #4]	; (8006f5c <AM_UpdateValues+0x8>)
 8006f56:	2201      	movs	r2, #1
 8006f58:	701a      	strb	r2, [r3, #0]
}
 8006f5a:	4770      	bx	lr
 8006f5c:	20000198 	.word	0x20000198

08006f60 <AM_GetSensorCounter>:
//! \details    Returns the sensor counter
//! \param[out]	uint8_t Sensor.Counter
uint8_t AM_GetSensorCounter (void)
{
	return Sensor.Counter;
}
 8006f60:	4b01      	ldr	r3, [pc, #4]	; (8006f68 <AM_GetSensorCounter+0x8>)
 8006f62:	7818      	ldrb	r0, [r3, #0]
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	20000198 	.word	0x20000198

08006f6c <AM_IncreaseSensorCounter>:
//! \brief      Increases the sensor counter
//! \details    Increases the sensor counter
//! \param		None
void AM_IncreaseSensorCounter (void)
{
	Sensor.Counter++;
 8006f6c:	4a02      	ldr	r2, [pc, #8]	; (8006f78 <AM_IncreaseSensorCounter+0xc>)
 8006f6e:	7813      	ldrb	r3, [r2, #0]
 8006f70:	3301      	adds	r3, #1
 8006f72:	7013      	strb	r3, [r2, #0]
}
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	20000198 	.word	0x20000198

08006f7c <AM_SetSensorGPIO>:
//-----------------------------------------------------------------------------
//! \brief      Sets the sensor GPIO to input or output
//! \details    Based on the parameter sets the sensor to input or output
//! \param      None
void AM_SetSensorGPIO (uint32_t newType)
{
 8006f7c:	b500      	push	{lr}
 8006f7e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f80:	2300      	movs	r3, #0
 8006f82:	9303      	str	r3, [sp, #12]
 8006f84:	9304      	str	r3, [sp, #16]
 8006f86:	9305      	str	r3, [sp, #20]
	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = HT1_Pin;
 8006f88:	2308      	movs	r3, #8
 8006f8a:	9301      	str	r3, [sp, #4]
	if (newType == GPIO_MODE_INPUT)
 8006f8c:	b9b0      	cbnz	r0, 8006fbc <AM_SetSensorGPIO+0x40>
	{
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006f8e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8006f92:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f94:	2301      	movs	r3, #1
 8006f96:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(HT1_GPIO_Port, &GPIO_InitStruct);
 8006f98:	a901      	add	r1, sp, #4
 8006f9a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8006f9e:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 8006fa2:	f006 ff93 	bl	800decc <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	4611      	mov	r1, r2
 8006faa:	2009      	movs	r0, #9
 8006fac:	f006 fbbe 	bl	800d72c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8006fb0:	2009      	movs	r0, #9
 8006fb2:	f006 fbf1 	bl	800d798 <HAL_NVIC_EnableIRQ>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
		HAL_GPIO_Init(HT1_GPIO_Port, &GPIO_InitStruct);
	}

}
 8006fb6:	b007      	add	sp, #28
 8006fb8:	f85d fb04 	ldr.w	pc, [sp], #4
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(HT1_GPIO_Port, &GPIO_InitStruct);
 8006fc4:	a901      	add	r1, sp, #4
 8006fc6:	4802      	ldr	r0, [pc, #8]	; (8006fd0 <AM_SetSensorGPIO+0x54>)
 8006fc8:	f006 ff80 	bl	800decc <HAL_GPIO_Init>
}
 8006fcc:	e7f3      	b.n	8006fb6 <AM_SetSensorGPIO+0x3a>
 8006fce:	bf00      	nop
 8006fd0:	40020400 	.word	0x40020400

08006fd4 <AM_HandleSensor>:
{
 8006fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (Sensor.Counter == 0)
 8006fd6:	4b3e      	ldr	r3, [pc, #248]	; (80070d0 <AM_HandleSensor+0xfc>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	b143      	cbz	r3, 8006fee <AM_HandleSensor+0x1a>
	else if (Sensor.Counter == 1)
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d007      	beq.n	8006ff0 <AM_HandleSensor+0x1c>
	else if ((Sensor.Counter >= 2) && (Sensor.Counter < 17)) //15 ms
 8006fe0:	1e9a      	subs	r2, r3, #2
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	2a0e      	cmp	r2, #14
 8006fe6:	d80f      	bhi.n	8007008 <AM_HandleSensor+0x34>
		Sensor.Counter ++;
 8006fe8:	3301      	adds	r3, #1
 8006fea:	4a39      	ldr	r2, [pc, #228]	; (80070d0 <AM_HandleSensor+0xfc>)
 8006fec:	7013      	strb	r3, [r2, #0]
}
 8006fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		AM_SetSensorGPIO(GPIO_MODE_OUTPUT_PP);
 8006ff0:	2001      	movs	r0, #1
 8006ff2:	f7ff ffc3 	bl	8006f7c <AM_SetSensorGPIO>
		DataLow();
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2108      	movs	r1, #8
 8006ffa:	4836      	ldr	r0, [pc, #216]	; (80070d4 <AM_HandleSensor+0x100>)
 8006ffc:	f007 f850 	bl	800e0a0 <HAL_GPIO_WritePin>
		Sensor.Counter = 2;
 8007000:	4b33      	ldr	r3, [pc, #204]	; (80070d0 <AM_HandleSensor+0xfc>)
 8007002:	2202      	movs	r2, #2
 8007004:	701a      	strb	r2, [r3, #0]
 8007006:	e7f2      	b.n	8006fee <AM_HandleSensor+0x1a>
	else if (Sensor.Counter == 17)
 8007008:	2b11      	cmp	r3, #17
 800700a:	d047      	beq.n	800709c <AM_HandleSensor+0xc8>
	else if (Sensor.Counter == 100)
 800700c:	2b64      	cmp	r3, #100	; 0x64
 800700e:	d1ee      	bne.n	8006fee <AM_HandleSensor+0x1a>
 8007010:	4831      	ldr	r0, [pc, #196]	; (80070d8 <AM_HandleSensor+0x104>)
 8007012:	1c83      	adds	r3, r0, #2
 8007014:	30a0      	adds	r0, #160	; 0xa0
			TimerValues[i] = TimerValues[i+1] - TimerValues[i];
 8007016:	885a      	ldrh	r2, [r3, #2]
 8007018:	8819      	ldrh	r1, [r3, #0]
 800701a:	1a52      	subs	r2, r2, r1
 800701c:	f823 2b02 	strh.w	r2, [r3], #2
		for (uint8_t i = 1; i<80; i++)
 8007020:	4283      	cmp	r3, r0
 8007022:	d1f8      	bne.n	8007016 <AM_HandleSensor+0x42>
 8007024:	4d2d      	ldr	r5, [pc, #180]	; (80070dc <AM_HandleSensor+0x108>)
 8007026:	f04f 0e10 	mov.w	lr, #16
 800702a:	f04f 0c01 	mov.w	ip, #1
			Sensor.RawValues[j] = 0;
 800702e:	2700      	movs	r7, #0
				if ((TimerValues[i+1] > 55) && (TimerValues[i+1] < 85)) //Logical 1
 8007030:	4c29      	ldr	r4, [pc, #164]	; (80070d8 <AM_HandleSensor+0x104>)
			Sensor.RawValues[j] = 0;
 8007032:	f805 7b01 	strb.w	r7, [r5], #1
			for (uint8_t i = 1 + j * 16; i<16 + j * 16; i+=2)
 8007036:	fa5f f38c 	uxtb.w	r3, ip
 800703a:	4662      	mov	r2, ip
 800703c:	4670      	mov	r0, lr
 800703e:	45f4      	cmp	ip, lr
 8007040:	da14      	bge.n	800706c <AM_HandleSensor+0x98>
 8007042:	462e      	mov	r6, r5
 8007044:	f815 1c01 	ldrb.w	r1, [r5, #-1]
				if ((TimerValues[i+1] > 55) && (TimerValues[i+1] < 85)) //Logical 1
 8007048:	3201      	adds	r2, #1
 800704a:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 800704e:	3a38      	subs	r2, #56	; 0x38
 8007050:	b292      	uxth	r2, r2
 8007052:	2a1c      	cmp	r2, #28
					Sensor.RawValues[j] = (Sensor.RawValues[j] << 1) + 1;
 8007054:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007058:	bf98      	it	ls
 800705a:	3101      	addls	r1, #1
					Sensor.RawValues[j] = (Sensor.RawValues[j] << 1);
 800705c:	b2c9      	uxtb	r1, r1
			for (uint8_t i = 1 + j * 16; i<16 + j * 16; i+=2)
 800705e:	3302      	adds	r3, #2
 8007060:	b2db      	uxtb	r3, r3
 8007062:	461a      	mov	r2, r3
 8007064:	4283      	cmp	r3, r0
 8007066:	dbef      	blt.n	8007048 <AM_HandleSensor+0x74>
 8007068:	f806 1c01 	strb.w	r1, [r6, #-1]
		for (uint8_t j = 0; j < 5; j++)
 800706c:	f10c 0c10 	add.w	ip, ip, #16
 8007070:	f10e 0e10 	add.w	lr, lr, #16
 8007074:	f1bc 0f51 	cmp.w	ip, #81	; 0x51
 8007078:	d1db      	bne.n	8007032 <AM_HandleSensor+0x5e>
		Sensor.CheckSum = (uint8_t) (Sensor.RawValues[0]+Sensor.RawValues[1]+Sensor.RawValues[2]+Sensor.RawValues[3]);
 800707a:	4a15      	ldr	r2, [pc, #84]	; (80070d0 <AM_HandleSensor+0xfc>)
 800707c:	7b50      	ldrb	r0, [r2, #13]
 800707e:	7b91      	ldrb	r1, [r2, #14]
 8007080:	7bd4      	ldrb	r4, [r2, #15]
 8007082:	7c15      	ldrb	r5, [r2, #16]
 8007084:	1843      	adds	r3, r0, r1
 8007086:	4423      	add	r3, r4
 8007088:	442b      	add	r3, r5
 800708a:	b2db      	uxtb	r3, r3
 800708c:	7313      	strb	r3, [r2, #12]
		if (Sensor.CheckSum == Sensor.RawValues[4])
 800708e:	7c52      	ldrb	r2, [r2, #17]
 8007090:	429a      	cmp	r2, r3
 8007092:	d00f      	beq.n	80070b4 <AM_HandleSensor+0xe0>
		Sensor.Counter = 0;
 8007094:	4b0e      	ldr	r3, [pc, #56]	; (80070d0 <AM_HandleSensor+0xfc>)
 8007096:	2200      	movs	r2, #0
 8007098:	701a      	strb	r2, [r3, #0]
 800709a:	e7a8      	b.n	8006fee <AM_HandleSensor+0x1a>
		DataHigh();
 800709c:	2201      	movs	r2, #1
 800709e:	2108      	movs	r1, #8
 80070a0:	480c      	ldr	r0, [pc, #48]	; (80070d4 <AM_HandleSensor+0x100>)
 80070a2:	f006 fffd 	bl	800e0a0 <HAL_GPIO_WritePin>
		AM_SetSensorGPIO(GPIO_MODE_INPUT);
 80070a6:	2000      	movs	r0, #0
 80070a8:	f7ff ff68 	bl	8006f7c <AM_SetSensorGPIO>
		Sensor.Counter = 18;
 80070ac:	4b08      	ldr	r3, [pc, #32]	; (80070d0 <AM_HandleSensor+0xfc>)
 80070ae:	2212      	movs	r2, #18
 80070b0:	701a      	strb	r2, [r3, #0]
 80070b2:	e79c      	b.n	8006fee <AM_HandleSensor+0x1a>
			Sensor.Humidity = Sensor.RawValues[0] << 8 | Sensor.RawValues[1];
 80070b4:	4e06      	ldr	r6, [pc, #24]	; (80070d0 <AM_HandleSensor+0xfc>)
 80070b6:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 80070ba:	f7ff f9f7 	bl	80064ac <__aeabi_i2f>
 80070be:	6070      	str	r0, [r6, #4]
			Sensor.Temperature = (Sensor.RawValues[2] & 0x7f) << 8 | Sensor.RawValues[3];
 80070c0:	0220      	lsls	r0, r4, #8
 80070c2:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 80070c6:	4328      	orrs	r0, r5
 80070c8:	f7ff f9f0 	bl	80064ac <__aeabi_i2f>
 80070cc:	60b0      	str	r0, [r6, #8]
 80070ce:	e7e1      	b.n	8007094 <AM_HandleSensor+0xc0>
 80070d0:	20000198 	.word	0x20000198
 80070d4:	40020400 	.word	0x40020400
 80070d8:	200001ac 	.word	0x200001ac
 80070dc:	200001a5 	.word	0x200001a5

080070e0 <ANA_Init>:
//-----------------------------------------------------------------------------
//! \brief      Initializes the analog module
//! \details    Starts DMA and assign values
//! \param      None
void ANA_Init(void)
{
 80070e0:	b508      	push	{r3, lr}
	vrefint_cal= *((uint16_t*)VREFINT_CAL_ADDR_CMSIS); // read VREFINT_CAL_ADDR memory location
 80070e2:	4b05      	ldr	r3, [pc, #20]	; (80070f8 <ANA_Init+0x18>)
 80070e4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80070e8:	4b04      	ldr	r3, [pc, #16]	; (80070fc <ANA_Init+0x1c>)
 80070ea:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc,(uint32_t*) &ADC_Converted_Values,NROFANALOGSENSORS);
 80070ec:	220c      	movs	r2, #12
 80070ee:	4904      	ldr	r1, [pc, #16]	; (8007100 <ANA_Init+0x20>)
 80070f0:	4804      	ldr	r0, [pc, #16]	; (8007104 <ANA_Init+0x24>)
 80070f2:	f006 faa7 	bl	800d644 <HAL_ADC_Start_DMA>
}
 80070f6:	bd08      	pop	{r3, pc}
 80070f8:	1ff80000 	.word	0x1ff80000
 80070fc:	20000288 	.word	0x20000288
 8007100:	20000250 	.word	0x20000250
 8007104:	200000fc 	.word	0x200000fc

08007108 <ANA_GetSensorValue>:
//!				ADC_NTC2 = Temperature FTH 2
//!				ADC_VINTREF = Internal reference voltage
//! \param[out] float value
uint64_t MCUVoltage;
float ANA_GetSensorValue(enuSensor newSensor)
{
 8007108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710c:	b083      	sub	sp, #12
 800710e:	9000      	str	r0, [sp, #0]
	float ADCValue = (float) (ADC_Converted_Values[(uint8_t) newSensor]);
 8007110:	4b79      	ldr	r3, [pc, #484]	; (80072f8 <ANA_GetSensorValue+0x1f0>)
 8007112:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
 8007116:	9201      	str	r2, [sp, #4]
	const float D = 8.80540116411882E-8f;



	uint64_t Temp;
	MCUVoltage = (3000 * vrefint_cal) / ADC_Converted_Values[NROFANALOGSENSORS - 1];
 8007118:	4a78      	ldr	r2, [pc, #480]	; (80072fc <ANA_GetSensorValue+0x1f4>)
 800711a:	8815      	ldrh	r5, [r2, #0]
 800711c:	8adf      	ldrh	r7, [r3, #22]
 800711e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007122:	fb02 f305 	mul.w	r3, r2, r5
 8007126:	fb93 f3f7 	sdiv	r3, r3, r7
	if (MCUVoltage < 3000)
 800712a:	4293      	cmp	r3, r2
 800712c:	d364      	bcc.n	80071f8 <ANA_GetSensorValue+0xf0>
	MCUVoltage = (3000 * vrefint_cal) / ADC_Converted_Values[NROFANALOGSENSORS - 1];
 800712e:	4a74      	ldr	r2, [pc, #464]	; (8007300 <ANA_GetSensorValue+0x1f8>)
 8007130:	6013      	str	r3, [r2, #0]
 8007132:	2300      	movs	r3, #0
 8007134:	6053      	str	r3, [r2, #4]
	{
		MCUVoltage = 0;
	}
	for (uint8_t i = 0; i< NROFANALOGSENSORS-1; i++)
 8007136:	4c70      	ldr	r4, [pc, #448]	; (80072f8 <ANA_GetSensorValue+0x1f0>)
 8007138:	4e72      	ldr	r6, [pc, #456]	; (8007304 <ANA_GetSensorValue+0x1fc>)
 800713a:	f104 0916 	add.w	r9, r4, #22
	{
		Temp = (uint64_t)3000 * (uint64_t)vrefint_cal * (uint64_t)ADC_Converted_Values[i];
 800713e:	f04f 0800 	mov.w	r8, #0
		Temp = Temp / (uint64_t) ADC_Converted_Values[NROFANALOGSENSORS - 1];
		Temp = Temp / 4095;
 8007142:	f640 7aff 	movw	sl, #4095	; 0xfff
 8007146:	f04f 0b00 	mov.w	fp, #0
		Temp = (uint64_t)3000 * (uint64_t)vrefint_cal * (uint64_t)ADC_Converted_Values[i];
 800714a:	f834 cb02 	ldrh.w	ip, [r4], #2
 800714e:	fbac 2c05 	umull	r2, ip, ip, r5
 8007152:	2300      	movs	r3, #0
 8007154:	1890      	adds	r0, r2, r2
 8007156:	eb43 0103 	adc.w	r1, r3, r3
 800715a:	eb10 0c02 	adds.w	ip, r0, r2
 800715e:	eb43 0101 	adc.w	r1, r3, r1
 8007162:	0109      	lsls	r1, r1, #4
 8007164:	ea41 711c 	orr.w	r1, r1, ip, lsr #28
 8007168:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800716c:	ebbc 0c02 	subs.w	ip, ip, r2
 8007170:	eb61 0103 	sbc.w	r1, r1, r3
 8007174:	00c9      	lsls	r1, r1, #3
 8007176:	ea41 715c 	orr.w	r1, r1, ip, lsr #29
 800717a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800717e:	ebbc 0c02 	subs.w	ip, ip, r2
 8007182:	eb61 0103 	sbc.w	r1, r1, r3
 8007186:	00c9      	lsls	r1, r1, #3
		Temp = Temp / (uint64_t) ADC_Converted_Values[NROFANALOGSENSORS - 1];
 8007188:	463a      	mov	r2, r7
 800718a:	4643      	mov	r3, r8
 800718c:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8007190:	ea41 715c 	orr.w	r1, r1, ip, lsr #29
 8007194:	f7ff fbc4 	bl	8006920 <__aeabi_uldivmod>
		Temp = Temp / 4095;
 8007198:	4652      	mov	r2, sl
 800719a:	465b      	mov	r3, fp
 800719c:	f7ff fbc0 	bl	8006920 <__aeabi_uldivmod>
		ADC_Voltage_Values[i] = (uint16_t) Temp;
 80071a0:	f826 0b02 	strh.w	r0, [r6], #2
	for (uint8_t i = 0; i< NROFANALOGSENSORS-1; i++)
 80071a4:	454c      	cmp	r4, r9
 80071a6:	d1d0      	bne.n	800714a <ANA_GetSensorValue+0x42>
	}
	switch (newSensor)
 80071a8:	9b00      	ldr	r3, [sp, #0]
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d82e      	bhi.n	800720c <ANA_GetSensorValue+0x104>
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d83a      	bhi.n	8007228 <ANA_GetSensorValue+0x120>
 80071b2:	d127      	bne.n	8007204 <ANA_GetSensorValue+0xfc>
		{
			break;
		}
		case ADC_LS1: //Water tank level
		{
			if (LS1_VOLTAGE <= 0)
 80071b4:	4b53      	ldr	r3, [pc, #332]	; (8007304 <ANA_GetSensorValue+0x1fc>)
 80071b6:	8858      	ldrh	r0, [r3, #2]
 80071b8:	f7ff f978 	bl	80064ac <__aeabi_i2f>
 80071bc:	4952      	ldr	r1, [pc, #328]	; (8007308 <ANA_GetSensorValue+0x200>)
 80071be:	f7ff f8bf 	bl	8006340 <__aeabi_fsub>
 80071c2:	4604      	mov	r4, r0
 80071c4:	2100      	movs	r1, #0
 80071c6:	f7ff fb6d 	bl	80068a4 <__aeabi_fcmple>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	f040 8088 	bne.w	80072e0 <ANA_GetSensorValue+0x1d8>
				ReturnValue = 0;
			else
				ReturnValue  = ((float)LS1_VOLTAGE - (float)LS1_VOLTAGE_OFFSET) / 0.8f * (float)WAT.Area /10000.0f;
 80071d0:	494e      	ldr	r1, [pc, #312]	; (800730c <ANA_GetSensorValue+0x204>)
 80071d2:	4620      	mov	r0, r4
 80071d4:	f7ff f8b4 	bl	8006340 <__aeabi_fsub>
 80071d8:	494d      	ldr	r1, [pc, #308]	; (8007310 <ANA_GetSensorValue+0x208>)
 80071da:	f7ff fa6f 	bl	80066bc <__aeabi_fdiv>
 80071de:	4604      	mov	r4, r0
 80071e0:	4b4c      	ldr	r3, [pc, #304]	; (8007314 <ANA_GetSensorValue+0x20c>)
 80071e2:	8858      	ldrh	r0, [r3, #2]
 80071e4:	f7ff f95e 	bl	80064a4 <__aeabi_ui2f>
 80071e8:	4601      	mov	r1, r0
 80071ea:	4620      	mov	r0, r4
 80071ec:	f7ff f9b2 	bl	8006554 <__aeabi_fmul>
 80071f0:	4949      	ldr	r1, [pc, #292]	; (8007318 <ANA_GetSensorValue+0x210>)
 80071f2:	f7ff fa63 	bl	80066bc <__aeabi_fdiv>
 80071f6:	e006      	b.n	8007206 <ANA_GetSensorValue+0xfe>
		MCUVoltage = 0;
 80071f8:	4b41      	ldr	r3, [pc, #260]	; (8007300 <ANA_GetSensorValue+0x1f8>)
 80071fa:	2000      	movs	r0, #0
 80071fc:	2100      	movs	r1, #0
 80071fe:	e9c3 0100 	strd	r0, r1, [r3]
 8007202:	e798      	b.n	8007136 <ANA_GetSensorValue+0x2e>
	switch (newSensor)
 8007204:	2000      	movs	r0, #0

		default:
			break;
	}
	return ReturnValue;
}
 8007206:	b003      	add	sp, #12
 8007208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (newSensor)
 800720c:	9b00      	ldr	r3, [sp, #0]
 800720e:	3b04      	subs	r3, #4
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b03      	cmp	r3, #3
 8007214:	d862      	bhi.n	80072dc <ANA_GetSensorValue+0x1d4>
			if (ADCValue > NTC1_2_DISCONNECTED_VALUE)
 8007216:	f640 733c 	movw	r3, #3900	; 0xf3c
 800721a:	9a01      	ldr	r2, [sp, #4]
 800721c:	429a      	cmp	r2, r3
 800721e:	d861      	bhi.n	80072e4 <ANA_GetSensorValue+0x1dc>
			else if (ADCValue < NTC1_2_SHORTED_VALUE)
 8007220:	2a63      	cmp	r2, #99	; 0x63
 8007222:	d80b      	bhi.n	800723c <ANA_GetSensorValue+0x134>
				ReturnValue = SHORTED;
 8007224:	483d      	ldr	r0, [pc, #244]	; (800731c <ANA_GetSensorValue+0x214>)
	return ReturnValue;
 8007226:	e7ee      	b.n	8007206 <ANA_GetSensorValue+0xfe>
			ReturnValue = (ADC_Voltage_Values[newSensor] - 500) * 4;
 8007228:	4b36      	ldr	r3, [pc, #216]	; (8007304 <ANA_GetSensorValue+0x1fc>)
 800722a:	9a00      	ldr	r2, [sp, #0]
 800722c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8007230:	f5a0 70fa 	sub.w	r0, r0, #500	; 0x1f4
 8007234:	0080      	lsls	r0, r0, #2
 8007236:	f7ff f939 	bl	80064ac <__aeabi_i2f>
			break;
 800723a:	e7e4      	b.n	8007206 <ANA_GetSensorValue+0xfe>
				fTemp = ADC_Voltage_Values[newSensor] * SerialRes / (3300 - ADC_Voltage_Values[newSensor]);
 800723c:	4b31      	ldr	r3, [pc, #196]	; (8007304 <ANA_GetSensorValue+0x1fc>)
 800723e:	9a00      	ldr	r2, [sp, #0]
 8007240:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8007244:	4628      	mov	r0, r5
 8007246:	f7ff f931 	bl	80064ac <__aeabi_i2f>
 800724a:	4933      	ldr	r1, [pc, #204]	; (8007318 <ANA_GetSensorValue+0x210>)
 800724c:	f7ff f982 	bl	8006554 <__aeabi_fmul>
 8007250:	4604      	mov	r4, r0
 8007252:	f5c5 604e 	rsb	r0, r5, #3296	; 0xce0
 8007256:	3004      	adds	r0, #4
 8007258:	f7ff f928 	bl	80064ac <__aeabi_i2f>
 800725c:	4601      	mov	r1, r0
 800725e:	4620      	mov	r0, r4
 8007260:	f7ff fa2c 	bl	80066bc <__aeabi_fdiv>
				fLog = (float)(log(fTemp));
 8007264:	f7fe fcf0 	bl	8005c48 <__aeabi_f2d>
 8007268:	f008 fef4 	bl	8010054 <log>
 800726c:	f7ff f814 	bl	8006298 <__aeabi_d2f>
 8007270:	4604      	mov	r4, r0
				fDenum = (A + (B *( fLog)) + (D * (pow(fLog, 3))));
 8007272:	f7fe fce9 	bl	8005c48 <__aeabi_f2d>
 8007276:	2200      	movs	r2, #0
 8007278:	4b29      	ldr	r3, [pc, #164]	; (8007320 <ANA_GetSensorValue+0x218>)
 800727a:	f008 ff1d 	bl	80100b8 <pow>
 800727e:	4606      	mov	r6, r0
 8007280:	460f      	mov	r7, r1
 8007282:	4928      	ldr	r1, [pc, #160]	; (8007324 <ANA_GetSensorValue+0x21c>)
 8007284:	4620      	mov	r0, r4
 8007286:	f7ff f965 	bl	8006554 <__aeabi_fmul>
 800728a:	4927      	ldr	r1, [pc, #156]	; (8007328 <ANA_GetSensorValue+0x220>)
 800728c:	f7ff f85a 	bl	8006344 <__addsf3>
 8007290:	f7fe fcda 	bl	8005c48 <__aeabi_f2d>
 8007294:	4604      	mov	r4, r0
 8007296:	460d      	mov	r5, r1
 8007298:	a313      	add	r3, pc, #76	; (adr r3, 80072e8 <ANA_GetSensorValue+0x1e0>)
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	4630      	mov	r0, r6
 80072a0:	4639      	mov	r1, r7
 80072a2:	f7fe fd29 	bl	8005cf8 <__aeabi_dmul>
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	4620      	mov	r0, r4
 80072ac:	4629      	mov	r1, r5
 80072ae:	f7fe fb6d 	bl	800598c <__adddf3>
 80072b2:	f7fe fff1 	bl	8006298 <__aeabi_d2f>
 80072b6:	4601      	mov	r1, r0
				ReturnValue = ((1.0f/(fDenum)) - 273.15) * 10; // x 0.1 °C
 80072b8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80072bc:	f7ff f9fe 	bl	80066bc <__aeabi_fdiv>
 80072c0:	f7fe fcc2 	bl	8005c48 <__aeabi_f2d>
 80072c4:	a30a      	add	r3, pc, #40	; (adr r3, 80072f0 <ANA_GetSensorValue+0x1e8>)
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	f7fe fb5d 	bl	8005988 <__aeabi_dsub>
 80072ce:	2200      	movs	r2, #0
 80072d0:	4b16      	ldr	r3, [pc, #88]	; (800732c <ANA_GetSensorValue+0x224>)
 80072d2:	f7fe fd11 	bl	8005cf8 <__aeabi_dmul>
 80072d6:	f7fe ffdf 	bl	8006298 <__aeabi_d2f>
 80072da:	e794      	b.n	8007206 <ANA_GetSensorValue+0xfe>
	switch (newSensor)
 80072dc:	2000      	movs	r0, #0
 80072de:	e792      	b.n	8007206 <ANA_GetSensorValue+0xfe>
				ReturnValue = 0;
 80072e0:	2000      	movs	r0, #0
 80072e2:	e790      	b.n	8007206 <ANA_GetSensorValue+0xfe>
				ReturnValue = DISCONNECTED;
 80072e4:	4812      	ldr	r0, [pc, #72]	; (8007330 <ANA_GetSensorValue+0x228>)
 80072e6:	e78e      	b.n	8007206 <ANA_GetSensorValue+0xfe>
 80072e8:	80000000 	.word	0x80000000
 80072ec:	3e77a306 	.word	0x3e77a306
 80072f0:	66666666 	.word	0x66666666
 80072f4:	40711266 	.word	0x40711266
 80072f8:	20000250 	.word	0x20000250
 80072fc:	20000288 	.word	0x20000288
 8007300:	20000280 	.word	0x20000280
 8007304:	20000268 	.word	0x20000268
 8007308:	43fa0000 	.word	0x43fa0000
 800730c:	43480000 	.word	0x43480000
 8007310:	3f4ccccd 	.word	0x3f4ccccd
 8007314:	20000c44 	.word	0x20000c44
 8007318:	461c4000 	.word	0x461c4000
 800731c:	449604cd 	.word	0x449604cd
 8007320:	40080000 	.word	0x40080000
 8007324:	396d8b2e 	.word	0x396d8b2e
 8007328:	3a4f747f 	.word	0x3a4f747f
 800732c:	40240000 	.word	0x40240000
 8007330:	c3889333 	.word	0xc3889333

08007334 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8007334:	b500      	push	{lr}
 8007336:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007338:	4b16      	ldr	r3, [pc, #88]	; (8007394 <MX_DMA_Init+0x60>)
 800733a:	69da      	ldr	r2, [r3, #28]
 800733c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007340:	61da      	str	r2, [r3, #28]
 8007342:	69db      	ldr	r3, [r3, #28]
 8007344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007348:	9301      	str	r3, [sp, #4]
 800734a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800734c:	2200      	movs	r2, #0
 800734e:	4611      	mov	r1, r2
 8007350:	200b      	movs	r0, #11
 8007352:	f006 f9eb 	bl	800d72c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007356:	200b      	movs	r0, #11
 8007358:	f006 fa1e 	bl	800d798 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800735c:	2200      	movs	r2, #0
 800735e:	4611      	mov	r1, r2
 8007360:	200d      	movs	r0, #13
 8007362:	f006 f9e3 	bl	800d72c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8007366:	200d      	movs	r0, #13
 8007368:	f006 fa16 	bl	800d798 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800736c:	2200      	movs	r2, #0
 800736e:	4611      	mov	r1, r2
 8007370:	200f      	movs	r0, #15
 8007372:	f006 f9db 	bl	800d72c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8007376:	200f      	movs	r0, #15
 8007378:	f006 fa0e 	bl	800d798 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800737c:	2200      	movs	r2, #0
 800737e:	4611      	mov	r1, r2
 8007380:	2010      	movs	r0, #16
 8007382:	f006 f9d3 	bl	800d72c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8007386:	2010      	movs	r0, #16
 8007388:	f006 fa06 	bl	800d798 <HAL_NVIC_EnableIRQ>

}
 800738c:	b003      	add	sp, #12
 800738e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007392:	bf00      	nop
 8007394:	40023800 	.word	0x40023800

08007398 <DRP_GetStatus>:
//-----------------------------------------------------------------------------
//! \brief      Returns the drip tray status
//! \details    Returns the current drip tray status
//! \param[out] enuStatus DripTrayStatus
uint8_t DRP_GetStatus (void)
{
 8007398:	b508      	push	{r3, lr}
	if (DRP_Present())
 800739a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800739e:	480a      	ldr	r0, [pc, #40]	; (80073c8 <DRP_GetStatus+0x30>)
 80073a0:	f006 fe78 	bl	800e094 <HAL_GPIO_ReadPin>
	{
		DRP.Status = sPLACED;
	}
	else
	{
		DRP.Status = sNOTPLACED;
 80073a4:	2800      	cmp	r0, #0
 80073a6:	bf0c      	ite	eq
 80073a8:	220c      	moveq	r2, #12
 80073aa:	220b      	movne	r2, #11
 80073ac:	4b07      	ldr	r3, [pc, #28]	; (80073cc <DRP_GetStatus+0x34>)
 80073ae:	701a      	strb	r2, [r3, #0]
	}
	if (DRP_Full()) //Also fire if driptray placed is not detected.
 80073b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80073b4:	4806      	ldr	r0, [pc, #24]	; (80073d0 <DRP_GetStatus+0x38>)
 80073b6:	f006 fe6d 	bl	800e094 <HAL_GPIO_ReadPin>
 80073ba:	b910      	cbnz	r0, 80073c2 <DRP_GetStatus+0x2a>
	{
		DRP.Status = sFULL;
 80073bc:	4b03      	ldr	r3, [pc, #12]	; (80073cc <DRP_GetStatus+0x34>)
 80073be:	220d      	movs	r2, #13
 80073c0:	701a      	strb	r2, [r3, #0]
	}
	return DRP.Status;
}
 80073c2:	4b02      	ldr	r3, [pc, #8]	; (80073cc <DRP_GetStatus+0x34>)
 80073c4:	7818      	ldrb	r0, [r3, #0]
 80073c6:	bd08      	pop	{r3, pc}
 80073c8:	40020000 	.word	0x40020000
 80073cc:	2000028c 	.word	0x2000028c
 80073d0:	40020800 	.word	0x40020800

080073d4 <MX_GPIO_Init>:

/** Configure pins
     PB1   ------> SharedAnalog_PB1
*/
void MX_GPIO_Init(void)
{
 80073d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d8:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073da:	2400      	movs	r4, #0
 80073dc:	9405      	str	r4, [sp, #20]
 80073de:	9406      	str	r4, [sp, #24]
 80073e0:	9407      	str	r4, [sp, #28]
 80073e2:	9408      	str	r4, [sp, #32]
 80073e4:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80073e6:	4b72      	ldr	r3, [pc, #456]	; (80075b0 <MX_GPIO_Init+0x1dc>)
 80073e8:	69da      	ldr	r2, [r3, #28]
 80073ea:	f042 0204 	orr.w	r2, r2, #4
 80073ee:	61da      	str	r2, [r3, #28]
 80073f0:	69da      	ldr	r2, [r3, #28]
 80073f2:	f002 0204 	and.w	r2, r2, #4
 80073f6:	9201      	str	r2, [sp, #4]
 80073f8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80073fa:	69da      	ldr	r2, [r3, #28]
 80073fc:	f042 0220 	orr.w	r2, r2, #32
 8007400:	61da      	str	r2, [r3, #28]
 8007402:	69da      	ldr	r2, [r3, #28]
 8007404:	f002 0220 	and.w	r2, r2, #32
 8007408:	9202      	str	r2, [sp, #8]
 800740a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800740c:	69da      	ldr	r2, [r3, #28]
 800740e:	f042 0201 	orr.w	r2, r2, #1
 8007412:	61da      	str	r2, [r3, #28]
 8007414:	69da      	ldr	r2, [r3, #28]
 8007416:	f002 0201 	and.w	r2, r2, #1
 800741a:	9203      	str	r2, [sp, #12]
 800741c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800741e:	69da      	ldr	r2, [r3, #28]
 8007420:	f042 0202 	orr.w	r2, r2, #2
 8007424:	61da      	str	r2, [r3, #28]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	9304      	str	r3, [sp, #16]
 800742e:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|H2H_Pin|ENHF_Pin, GPIO_PIN_RESET);
 8007430:	4f60      	ldr	r7, [pc, #384]	; (80075b4 <MX_GPIO_Init+0x1e0>)
 8007432:	4622      	mov	r2, r4
 8007434:	f249 0108 	movw	r1, #36872	; 0x9008
 8007438:	4638      	mov	r0, r7
 800743a:	f006 fe31 	bl	800e0a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, P2_Pin|H1L_Pin, GPIO_PIN_RESET);
 800743e:	f8df b178 	ldr.w	fp, [pc, #376]	; 80075b8 <MX_GPIO_Init+0x1e4>
 8007442:	4622      	mov	r2, r4
 8007444:	2103      	movs	r1, #3
 8007446:	4658      	mov	r0, fp
 8007448:	f006 fe2a 	bl	800e0a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENZC_Pin|H3_Pin|H2L_Pin|H1H_Pin, GPIO_PIN_RESET);
 800744c:	f8df 816c 	ldr.w	r8, [pc, #364]	; 80075bc <MX_GPIO_Init+0x1e8>
 8007450:	4622      	mov	r2, r4
 8007452:	f640 6101 	movw	r1, #3585	; 0xe01
 8007456:	4640      	mov	r0, r8
 8007458:	f006 fe22 	bl	800e0a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SER595_Pin|EN595_Pin|RCLK595_Pin|SRCLK595_Pin, GPIO_PIN_RESET);
 800745c:	4e58      	ldr	r6, [pc, #352]	; (80075c0 <MX_GPIO_Init+0x1ec>)
 800745e:	4622      	mov	r2, r4
 8007460:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8007464:	4630      	mov	r0, r6
 8007466:	f006 fe1b 	bl	800e0a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = EF1_Pin|EF2_Pin|FM1_Pin|FM2_Pin;
 800746a:	f246 03c0 	movw	r3, #24768	; 0x60c0
 800746e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007470:	f44f 1988 	mov.w	r9, #1114112	; 0x110000
 8007474:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007478:	2501      	movs	r5, #1
 800747a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800747c:	a905      	add	r1, sp, #20
 800747e:	4638      	mov	r0, r7
 8007480:	f006 fd24 	bl	800decc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = P1_Pin|H2H_Pin|ENHF_Pin;
 8007484:	f249 0308 	movw	r3, #36872	; 0x9008
 8007488:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800748a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800748c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800748e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007490:	a905      	add	r1, sp, #20
 8007492:	4638      	mov	r0, r7
 8007494:	f006 fd1a 	bl	800decc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = P2_Pin|H1L_Pin;
 8007498:	f04f 0a03 	mov.w	sl, #3
 800749c:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074a0:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074a2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074a4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80074a6:	a905      	add	r1, sp, #20
 80074a8:	4658      	mov	r0, fp
 80074aa:	f006 fd0f 	bl	800decc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ENZC_Pin|H3_Pin|H2L_Pin|H1H_Pin;
 80074ae:	f640 6301 	movw	r3, #3585	; 0xe01
 80074b2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074b4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074b6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074b8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ba:	a905      	add	r1, sp, #20
 80074bc:	4640      	mov	r0, r8
 80074be:	f006 fd05 	bl	800decc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ZC_Pin;
 80074c2:	f04f 0b02 	mov.w	fp, #2
 80074c6:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80074ca:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80074ce:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(ZC_GPIO_Port, &GPIO_InitStruct);
 80074d0:	a905      	add	r1, sp, #20
 80074d2:	4640      	mov	r0, r8
 80074d4:	f006 fcfa 	bl	800decc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NTC4_Pin;
 80074d8:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80074dc:	f8cd a018 	str.w	sl, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(NTC4_GPIO_Port, &GPIO_InitStruct);
 80074e2:	a905      	add	r1, sp, #20
 80074e4:	4630      	mov	r0, r6
 80074e6:	f006 fcf1 	bl	800decc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HW3_Pin|HW1_Pin|HW2_Pin;
 80074ea:	f245 0304 	movw	r3, #20484	; 0x5004
 80074ee:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074f0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80074f2:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074f4:	a905      	add	r1, sp, #20
 80074f6:	4630      	mov	r0, r6
 80074f8:	f006 fce8 	bl	800decc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW1A_Pin|SW1B_Pin;
 80074fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007500:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007502:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007504:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007506:	a905      	add	r1, sp, #20
 8007508:	4638      	mov	r0, r7
 800750a:	f006 fcdf 	bl	800decc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SW2_Pin|SW6_Pin;
 800750e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8007512:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007514:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007516:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007518:	a905      	add	r1, sp, #20
 800751a:	4640      	mov	r0, r8
 800751c:	f006 fcd6 	bl	800decc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LS3_Pin;
 8007520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007524:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007526:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007528:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(LS3_GPIO_Port, &GPIO_InitStruct);
 800752a:	a905      	add	r1, sp, #20
 800752c:	4640      	mov	r0, r8
 800752e:	f006 fccd 	bl	800decc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LS2_Pin|LS4_Pin;
 8007532:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007536:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007538:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800753a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800753c:	a905      	add	r1, sp, #20
 800753e:	4638      	mov	r0, r7
 8007540:	f006 fcc4 	bl	800decc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HT1_Pin;
 8007544:	2308      	movs	r3, #8
 8007546:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007548:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800754c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(HT1_GPIO_Port, &GPIO_InitStruct);
 800754e:	a905      	add	r1, sp, #20
 8007550:	4630      	mov	r0, r6
 8007552:	f006 fcbb 	bl	800decc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SER595_Pin|EN595_Pin|RCLK595_Pin|SRCLK595_Pin;
 8007556:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800755a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800755c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800755e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007560:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007562:	a905      	add	r1, sp, #20
 8007564:	4630      	mov	r0, r6
 8007566:	f006 fcb1 	bl	800decc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800756a:	4622      	mov	r2, r4
 800756c:	4621      	mov	r1, r4
 800756e:	2007      	movs	r0, #7
 8007570:	f006 f8dc 	bl	800d72c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8007574:	2007      	movs	r0, #7
 8007576:	f006 f90f 	bl	800d798 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800757a:	4622      	mov	r2, r4
 800757c:	4621      	mov	r1, r4
 800757e:	2009      	movs	r0, #9
 8007580:	f006 f8d4 	bl	800d72c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8007584:	2009      	movs	r0, #9
 8007586:	f006 f907 	bl	800d798 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800758a:	4622      	mov	r2, r4
 800758c:	4621      	mov	r1, r4
 800758e:	2017      	movs	r0, #23
 8007590:	f006 f8cc 	bl	800d72c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007594:	2017      	movs	r0, #23
 8007596:	f006 f8ff 	bl	800d798 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800759a:	4622      	mov	r2, r4
 800759c:	4621      	mov	r1, r4
 800759e:	2028      	movs	r0, #40	; 0x28
 80075a0:	f006 f8c4 	bl	800d72c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80075a4:	2028      	movs	r0, #40	; 0x28
 80075a6:	f006 f8f7 	bl	800d798 <HAL_NVIC_EnableIRQ>

}
 80075aa:	b00b      	add	sp, #44	; 0x2c
 80075ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b0:	40023800 	.word	0x40023800
 80075b4:	40020800 	.word	0x40020800
 80075b8:	40021400 	.word	0x40021400
 80075bc:	40020000 	.word	0x40020000
 80075c0:	40020400 	.word	0x40020400

080075c4 <HEA_GetHeaterTemperature>:
//! \details    Gets the temperature of the selected heater
//! \param[in]  uint8_t newHeater		Heater number
//! \param[out] uint32_t Temperature
uint32_t HEA_GetHeaterTemperature (uint8_t newHeater)
{
	return HEA[newHeater].GetTemperature;
 80075c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80075c8:	4b02      	ldr	r3, [pc, #8]	; (80075d4 <HEA_GetHeaterTemperature+0x10>)
 80075ca:	eb03 1040 	add.w	r0, r3, r0, lsl #5
}
 80075ce:	6880      	ldr	r0, [r0, #8]
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	20000290 	.word	0x20000290

080075d8 <HEA_HandleEfast>:
{
	for (uint8_t i = 0; i < 2; i++)
	{
		//HEA[i].EfastCounterOld = 0;
	}
}
 80075d8:	4770      	bx	lr
	...

080075dc <HEA_ResetEfast>:
//! \params		None
void HEA_ResetEfast(void)
{
	for (uint8_t i = 0; i < 2; i++)
	{
		if (HEA[i].EfastCounter > HEA[i].EfastCounterMax)
 80075dc:	4a1a      	ldr	r2, [pc, #104]	; (8007648 <HEA_ResetEfast+0x6c>)
 80075de:	6993      	ldr	r3, [r2, #24]
 80075e0:	6a12      	ldr	r2, [r2, #32]
 80075e2:	4293      	cmp	r3, r2
		{
			HEA[i].EfastCounterMax = HEA[i].EfastCounter;
 80075e4:	bf84      	itt	hi
 80075e6:	4a18      	ldrhi	r2, [pc, #96]	; (8007648 <HEA_ResetEfast+0x6c>)
 80075e8:	6213      	strhi	r3, [r2, #32]
		}
		HEA[i].EfastCounterOld = HEA[i].EfastCounter;
 80075ea:	4a17      	ldr	r2, [pc, #92]	; (8007648 <HEA_ResetEfast+0x6c>)
 80075ec:	61d3      	str	r3, [r2, #28]
		if (HEA[i].EfastActive == 1)
 80075ee:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 80075f2:	2a01      	cmp	r2, #1
 80075f4:	d014      	beq.n	8007620 <HEA_ResetEfast+0x44>
		{
			HEA[i].EfastActive = 0;
			HEA[i].EfastValidValue = HEA[i].EfastCounter - HEA[i].EfastOffset;
		}
		HEA[i].EfastCounter = 0;
 80075f6:	4a14      	ldr	r2, [pc, #80]	; (8007648 <HEA_ResetEfast+0x6c>)
 80075f8:	2300      	movs	r3, #0
 80075fa:	6193      	str	r3, [r2, #24]
		if (HEA[i].EfastCounter > HEA[i].EfastCounterMax)
 80075fc:	6f93      	ldr	r3, [r2, #120]	; 0x78
 80075fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007602:	4293      	cmp	r3, r2
			HEA[i].EfastCounterMax = HEA[i].EfastCounter;
 8007604:	bf84      	itt	hi
 8007606:	4a10      	ldrhi	r2, [pc, #64]	; (8007648 <HEA_ResetEfast+0x6c>)
 8007608:	f8c2 3080 	strhi.w	r3, [r2, #128]	; 0x80
		HEA[i].EfastCounterOld = HEA[i].EfastCounter;
 800760c:	4a0e      	ldr	r2, [pc, #56]	; (8007648 <HEA_ResetEfast+0x6c>)
 800760e:	67d3      	str	r3, [r2, #124]	; 0x7c
		if (HEA[i].EfastActive == 1)
 8007610:	f892 2089 	ldrb.w	r2, [r2, #137]	; 0x89
 8007614:	2a01      	cmp	r2, #1
 8007616:	d00c      	beq.n	8007632 <HEA_ResetEfast+0x56>
		HEA[i].EfastCounter = 0;
 8007618:	4b0b      	ldr	r3, [pc, #44]	; (8007648 <HEA_ResetEfast+0x6c>)
 800761a:	2200      	movs	r2, #0
 800761c:	679a      	str	r2, [r3, #120]	; 0x78
	}
}
 800761e:	4770      	bx	lr
			HEA[i].EfastActive = 0;
 8007620:	4a09      	ldr	r2, [pc, #36]	; (8007648 <HEA_ResetEfast+0x6c>)
 8007622:	2100      	movs	r1, #0
 8007624:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
			HEA[i].EfastValidValue = HEA[i].EfastCounter - HEA[i].EfastOffset;
 8007628:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 800762c:	1a5b      	subs	r3, r3, r1
 800762e:	6253      	str	r3, [r2, #36]	; 0x24
 8007630:	e7e1      	b.n	80075f6 <HEA_ResetEfast+0x1a>
			HEA[i].EfastActive = 0;
 8007632:	4a05      	ldr	r2, [pc, #20]	; (8007648 <HEA_ResetEfast+0x6c>)
 8007634:	2100      	movs	r1, #0
 8007636:	f882 1089 	strb.w	r1, [r2, #137]	; 0x89
			HEA[i].EfastValidValue = HEA[i].EfastCounter - HEA[i].EfastOffset;
 800763a:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
 800763e:	1a5b      	subs	r3, r3, r1
 8007640:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8007644:	e7e8      	b.n	8007618 <HEA_ResetEfast+0x3c>
 8007646:	bf00      	nop
 8007648:	20000290 	.word	0x20000290

0800764c <HEA_IncEfast>:
//! \brief        Increases the EFast counter of the selected Heater
//! \details
//! \param[in]    uint8_t newHeater H1 or H2
void HEA_IncEfast (uint8_t newHeater)
{
	if (newHeater > H2) return;
 800764c:	2801      	cmp	r0, #1
 800764e:	d807      	bhi.n	8007660 <HEA_IncEfast+0x14>

	HEA[newHeater].EfastCounter ++;
 8007650:	4b04      	ldr	r3, [pc, #16]	; (8007664 <HEA_IncEfast+0x18>)
 8007652:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8007656:	eb03 1242 	add.w	r2, r3, r2, lsl #5
 800765a:	6993      	ldr	r3, [r2, #24]
 800765c:	3301      	adds	r3, #1
 800765e:	6193      	str	r3, [r2, #24]
}
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	20000290 	.word	0x20000290

08007668 <HEA_SetControl>:
//! \brief        Sets the control value of the selected Heater
//! \details      Sets the power value from the PID
//! \param[in]    uint8_t newHeater (0 - 2)
//! \param[in]    float newPower (0 - 1200)
uint8_t HEA_SetControl (uint8_t newHeater, float newPower)
{
 8007668:	b538      	push	{r3, r4, r5, lr}
 800766a:	4604      	mov	r4, r0
 800766c:	460d      	mov	r5, r1
	uint8_t ReturnValue = TASK_ERROR;
	if (newHeater < H3)
 800766e:	2801      	cmp	r0, #1
 8007670:	d911      	bls.n	8007696 <HEA_SetControl+0x2e>
			HEA[newHeater].Power = FTH_E_POWER;
		else
			HEA[newHeater].Power = (uint16_t) (newPower/8.33333);//Max 1200 W

	else
		HEA[newHeater].Power = (uint16_t) (newPower/H3_Factor);     //Max 400 W
 8007672:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8007676:	481a      	ldr	r0, [pc, #104]	; (80076e0 <HEA_SetControl+0x78>)
 8007678:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800767c:	4b19      	ldr	r3, [pc, #100]	; (80076e4 <HEA_SetControl+0x7c>)
 800767e:	7818      	ldrb	r0, [r3, #0]
 8007680:	f7fe ff14 	bl	80064ac <__aeabi_i2f>
 8007684:	4601      	mov	r1, r0
 8007686:	4628      	mov	r0, r5
 8007688:	f7ff f818 	bl	80066bc <__aeabi_fdiv>
 800768c:	f7ff f928 	bl	80068e0 <__aeabi_f2uiz>
 8007690:	8060      	strh	r0, [r4, #2]
	ReturnValue = TASK_READY;
	return ReturnValue;
}
 8007692:	2001      	movs	r0, #1
 8007694:	bd38      	pop	{r3, r4, r5, pc}
		if (newPower == FTH_E_POWER)
 8007696:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800769a:	4628      	mov	r0, r5
 800769c:	f7ff f8ee 	bl	800687c <__aeabi_fcmpeq>
 80076a0:	b138      	cbz	r0, 80076b2 <HEA_SetControl+0x4a>
			HEA[newHeater].Power = FTH_E_POWER;
 80076a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80076a6:	4b0e      	ldr	r3, [pc, #56]	; (80076e0 <HEA_SetControl+0x78>)
 80076a8:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 80076ac:	2301      	movs	r3, #1
 80076ae:	8063      	strh	r3, [r4, #2]
 80076b0:	e7ef      	b.n	8007692 <HEA_SetControl+0x2a>
			HEA[newHeater].Power = (uint16_t) (newPower/8.33333);//Max 1200 W
 80076b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80076b6:	4b0a      	ldr	r3, [pc, #40]	; (80076e0 <HEA_SetControl+0x78>)
 80076b8:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 80076bc:	4628      	mov	r0, r5
 80076be:	f7fe fac3 	bl	8005c48 <__aeabi_f2d>
 80076c2:	a305      	add	r3, pc, #20	; (adr r3, 80076d8 <HEA_SetControl+0x70>)
 80076c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c8:	f7fe fc40 	bl	8005f4c <__aeabi_ddiv>
 80076cc:	f7fe fdc4 	bl	8006258 <__aeabi_d2uiz>
 80076d0:	8060      	strh	r0, [r4, #2]
 80076d2:	e7de      	b.n	8007692 <HEA_SetControl+0x2a>
 80076d4:	f3af 8000 	nop.w
 80076d8:	3ad18d26 	.word	0x3ad18d26
 80076dc:	4020aaaa 	.word	0x4020aaaa
 80076e0:	20000290 	.word	0x20000290
 80076e4:	20000000 	.word	0x20000000

080076e8 <HEA_HandlePID>:
//-----------------------------------------------------------------------------
//! \brief        Handles the PID of the heaters based on temperature
//! \details      Calculates the PID for the heaters based on the required and measured temperature
//! \params       None
void HEA_HandlePID (void)
{
 80076e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ec:	b085      	sub	sp, #20
	for (uint8_t i = 0; i < 3; i++)
 80076ee:	4d8c      	ldr	r5, [pc, #560]	; (8007920 <HEA_HandlePID+0x238>)
{
 80076f0:	f04f 0b00 	mov.w	fp, #0
		else
			HEA[i].TemperatureDeviation = 0;
		if ((HEA[i].Status == sINACTIVE) || (HEA[i].SetTemperature == 0))
		{
			HEA[i].Status = sINACTIVE;
			HEA_SetControl (i,0);
 80076f4:	f04f 0a00 	mov.w	sl, #0
 80076f8:	e063      	b.n	80077c2 <HEA_HandlePID+0xda>
			if (!DUMMYMODE) HEA[i].GetTemperature = ANA_GetSensorValue(ADC_NTC1);
 80076fa:	4b8a      	ldr	r3, [pc, #552]	; (8007924 <HEA_HandlePID+0x23c>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d166      	bne.n	80077d0 <HEA_HandlePID+0xe8>
 8007702:	2006      	movs	r0, #6
 8007704:	f7ff fd00 	bl	8007108 <ANA_GetSensorValue>
 8007708:	f7ff f8ea 	bl	80068e0 <__aeabi_f2uiz>
 800770c:	4b84      	ldr	r3, [pc, #528]	; (8007920 <HEA_HandlePID+0x238>)
 800770e:	6098      	str	r0, [r3, #8]
 8007710:	e05e      	b.n	80077d0 <HEA_HandlePID+0xe8>
			if (!DUMMYMODE) HEA[i].GetTemperature = ANA_GetSensorValue(ADC_NTC2);
 8007712:	4b84      	ldr	r3, [pc, #528]	; (8007924 <HEA_HandlePID+0x23c>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d15a      	bne.n	80077d0 <HEA_HandlePID+0xe8>
 800771a:	2007      	movs	r0, #7
 800771c:	f7ff fcf4 	bl	8007108 <ANA_GetSensorValue>
 8007720:	f7ff f8de 	bl	80068e0 <__aeabi_f2uiz>
 8007724:	4b7e      	ldr	r3, [pc, #504]	; (8007920 <HEA_HandlePID+0x238>)
 8007726:	6698      	str	r0, [r3, #104]	; 0x68
 8007728:	e052      	b.n	80077d0 <HEA_HandlePID+0xe8>
			if ((!DUMMYMODE) && (!DUMMYMODEH3)) HEA[i].GetTemperature = ANA_GetSensorValue(ADC_NTC3);
 800772a:	4b7e      	ldr	r3, [pc, #504]	; (8007924 <HEA_HandlePID+0x23c>)
 800772c:	781a      	ldrb	r2, [r3, #0]
 800772e:	4b7e      	ldr	r3, [pc, #504]	; (8007928 <HEA_HandlePID+0x240>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	4313      	orrs	r3, r2
 8007734:	d14c      	bne.n	80077d0 <HEA_HandlePID+0xe8>
 8007736:	2004      	movs	r0, #4
 8007738:	f7ff fce6 	bl	8007108 <ANA_GetSensorValue>
 800773c:	f7ff f8d0 	bl	80068e0 <__aeabi_f2uiz>
 8007740:	4b77      	ldr	r3, [pc, #476]	; (8007920 <HEA_HandlePID+0x238>)
 8007742:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
 8007746:	e043      	b.n	80077d0 <HEA_HandlePID+0xe8>
				HEA[i].I_Heater = SetHeaterI;
				HEA[i].D_Heater = SetHeaterD;
			}
			else
			{
				HEA[i].P_Heater = SetHeater3P;
 8007748:	4b78      	ldr	r3, [pc, #480]	; (800792c <HEA_HandlePID+0x244>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	63ab      	str	r3, [r5, #56]	; 0x38
				HEA[i].I_Heater = SetHeater3I;
 800774e:	4b78      	ldr	r3, [pc, #480]	; (8007930 <HEA_HandlePID+0x248>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	63eb      	str	r3, [r5, #60]	; 0x3c
				HEA[i].D_Heater = SetHeater3D;
 8007754:	4b77      	ldr	r3, [pc, #476]	; (8007934 <HEA_HandlePID+0x24c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	642b      	str	r3, [r5, #64]	; 0x40
 800775a:	e070      	b.n	800783e <HEA_HandlePID+0x156>
			{
				HEA[i].HeaterControl = HEA[i].PID_Heater;// + (HeaterPreset * PresetScale);
			}
			if (HEA[i].HeaterControl < 10)
			{
				HEA[i].HeaterControl = 0; //To avoid selecting FTH_E_POWER which is 8.3333 W
 800775c:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			}
			if (HEA[i].DeltaTemperature > MaxDeltaT)
 8007760:	4b75      	ldr	r3, [pc, #468]	; (8007938 <HEA_HandlePID+0x250>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	9a00      	ldr	r2, [sp, #0]
 8007766:	429a      	cmp	r2, r3
 8007768:	dd01      	ble.n	800776e <HEA_HandlePID+0x86>
			{
				HEA[i].HeaterControl = 0;
 800776a:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			}
			if (HEA[i].HeaterControl > 10000)
			{
				HEA[i].HeaterControl = 10000;
			}
			if (HEA[i].TemperatureDeviation > 50)
 800776e:	9b01      	ldr	r3, [sp, #4]
 8007770:	2b32      	cmp	r3, #50	; 0x32
				HEA[i].HeaterControl = 10000;
 8007772:	bfc4      	itt	gt
 8007774:	4b71      	ldrgt	r3, [pc, #452]	; (800793c <HEA_HandlePID+0x254>)
 8007776:	65a3      	strgt	r3, [r4, #88]	; 0x58

			//Cut off heater if temperature already at setpoint and still rising
			if ((HEA[i].GetTemperature >= HEA[i].SetTemperature) && (HEA[i].DeltaTemperature > 0))
 8007778:	4547      	cmp	r7, r8
 800777a:	f0c0 809a 	bcc.w	80078b2 <HEA_HandlePID+0x1ca>
 800777e:	9b00      	ldr	r3, [sp, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	f340 8093 	ble.w	80078ac <HEA_HandlePID+0x1c4>
				HEA[i].HeaterControl = 0;
 8007786:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			//Switch on heater if temperature already under setpoint and falling
			if ((HEA[i].GetTemperature <= HEA[i].SetTemperature) && (HEA[i].DeltaTemperature < 0) && (HEA[i].HeaterControl < 7500))
				HEA[i].HeaterControl = 10000;

			if (HEA[i].EfastValidValue > MAXEFAST) //&& (HEA[i].GetTemperature > 1200)) //Protect heater against overheating (In case of steam)
 800778a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800778c:	2b14      	cmp	r3, #20
			{
				HEA[i].HeaterControl = FTH_E_POWER; //Special mode for Efast measuring at 120W
 800778e:	bf84      	itt	hi
 8007790:	f04f 537e 	movhi.w	r3, #1065353216	; 0x3f800000
 8007794:	65a3      	strhi	r3, [r4, #88]	; 0x58
			}
			else if (HEA[i].EfastValidValue > CUTOFFEFAST)
			{
				HEA[i].HeaterControl = FTH_E_POWER; //Special mode for Efast measuring at 120W
			}
			if (i == H3)
 8007796:	2e02      	cmp	r6, #2
 8007798:	f000 8099 	beq.w	80078ce <HEA_HandlePID+0x1e6>
			{
				if (HEA[i].GetTemperature > HEA[i].SetTemperature)
					HEA[i].HeaterControl = 0;
			}
			HEA[i].HeaterControlOld = HEA[i].HeaterControl;
 800779c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800779e:	65e0      	str	r0, [r4, #92]	; 0x5c
			HEA[i].GetTemperatureOld = HEA[i].GetTemperature;
 80077a0:	6127      	str	r7, [r4, #16]
			HEA_SetControl (i, (uint16_t) (HEA[i].HeaterControl));
 80077a2:	f7ff f89d 	bl	80068e0 <__aeabi_f2uiz>
 80077a6:	b280      	uxth	r0, r0
 80077a8:	f7fe fe7c 	bl	80064a4 <__aeabi_ui2f>
 80077ac:	4601      	mov	r1, r0
 80077ae:	4630      	mov	r0, r6
 80077b0:	f7ff ff5a 	bl	8007668 <HEA_SetControl>
	for (uint8_t i = 0; i < 3; i++)
 80077b4:	f10b 0b01 	add.w	fp, fp, #1
 80077b8:	3560      	adds	r5, #96	; 0x60
 80077ba:	f1bb 0f03 	cmp.w	fp, #3
 80077be:	f000 80ab 	beq.w	8007918 <HEA_HandlePID+0x230>
		if (i == 0) //FTH 1
 80077c2:	f01b 06ff 	ands.w	r6, fp, #255	; 0xff
 80077c6:	d098      	beq.n	80076fa <HEA_HandlePID+0x12>
		else if (i == 1) //FTH 2
 80077c8:	2e01      	cmp	r6, #1
 80077ca:	d0a2      	beq.n	8007712 <HEA_HandlePID+0x2a>
		else if (i == 2) //Brewer heater
 80077cc:	2e02      	cmp	r6, #2
 80077ce:	d0ac      	beq.n	800772a <HEA_HandlePID+0x42>
		HEA[i].DeltaTemperature = HEA[i].GetTemperature - HEA[i].GetTemperatureOld;
 80077d0:	462c      	mov	r4, r5
 80077d2:	68af      	ldr	r7, [r5, #8]
 80077d4:	692b      	ldr	r3, [r5, #16]
 80077d6:	1afb      	subs	r3, r7, r3
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	616b      	str	r3, [r5, #20]
		if (HEA[i].SetTemperature > 0)
 80077dc:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80077e0:	f1b8 0f00 	cmp.w	r8, #0
 80077e4:	d079      	beq.n	80078da <HEA_HandlePID+0x1f2>
			HEA[i].TemperatureDeviation = HEA[i].SetTemperature - HEA[i].GetTemperature;
 80077e6:	eba8 0307 	sub.w	r3, r8, r7
 80077ea:	9301      	str	r3, [sp, #4]
 80077ec:	60eb      	str	r3, [r5, #12]
		if ((HEA[i].Status == sINACTIVE) || (HEA[i].SetTemperature == 0))
 80077ee:	782b      	ldrb	r3, [r5, #0]
 80077f0:	2b04      	cmp	r3, #4
 80077f2:	d074      	beq.n	80078de <HEA_HandlePID+0x1f6>
			HEA[i].ErrorP_Heater= (float)(HEA[i].SetTemperature) - (float)(HEA[i].GetTemperature); //get error and bring into control range
 80077f4:	4640      	mov	r0, r8
 80077f6:	f7fe fe55 	bl	80064a4 <__aeabi_ui2f>
 80077fa:	4681      	mov	r9, r0
 80077fc:	4638      	mov	r0, r7
 80077fe:	f7fe fe51 	bl	80064a4 <__aeabi_ui2f>
 8007802:	4601      	mov	r1, r0
 8007804:	4648      	mov	r0, r9
 8007806:	f7fe fd9b 	bl	8006340 <__aeabi_fsub>
 800780a:	4681      	mov	r9, r0
 800780c:	64a0      	str	r0, [r4, #72]	; 0x48
			HEA[i].ErrorI_Heater= HEA[i].ErrorI_Heater + (HEA[i].ErrorP_Heater);//bring into control range
 800780e:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8007810:	f7fe fd98 	bl	8006344 <__addsf3>
 8007814:	9002      	str	r0, [sp, #8]
 8007816:	64e0      	str	r0, [r4, #76]	; 0x4c
			HEA[i].ErrorD_Heater= (HEA[i].ErrorP_Heater - HEA[i].ErrorP_Heater_Old); //bring into control range
 8007818:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800781a:	4648      	mov	r0, r9
 800781c:	f7fe fd90 	bl	8006340 <__aeabi_fsub>
 8007820:	9003      	str	r0, [sp, #12]
 8007822:	6520      	str	r0, [r4, #80]	; 0x50
			HEA[i].ErrorP_Heater_Old = HEA[i].ErrorP_Heater;
 8007824:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
			if (i<H3)
 8007828:	2e01      	cmp	r6, #1
 800782a:	d88d      	bhi.n	8007748 <HEA_HandlePID+0x60>
				HEA[i].P_Heater = SetHeaterP;
 800782c:	4b44      	ldr	r3, [pc, #272]	; (8007940 <HEA_HandlePID+0x258>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	63ab      	str	r3, [r5, #56]	; 0x38
				HEA[i].I_Heater = SetHeaterI;
 8007832:	4b44      	ldr	r3, [pc, #272]	; (8007944 <HEA_HandlePID+0x25c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	63eb      	str	r3, [r5, #60]	; 0x3c
				HEA[i].D_Heater = SetHeaterD;
 8007838:	4b43      	ldr	r3, [pc, #268]	; (8007948 <HEA_HandlePID+0x260>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	642b      	str	r3, [r5, #64]	; 0x40
			HEA[i].PID_Heater = (HEA[i].ErrorP_Heater * HEA[i].P_Heater); // Calculate P;
 800783e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007840:	4648      	mov	r0, r9
 8007842:	f7fe fe87 	bl	8006554 <__aeabi_fmul>
 8007846:	4681      	mov	r9, r0
			HEA[i].PID_Heater = HEA[i].PID_Heater + ((HEA[i].ErrorI_Heater * HEA[i].I_Heater)); //Calculate I and add to P
 8007848:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800784a:	9802      	ldr	r0, [sp, #8]
 800784c:	f7fe fe82 	bl	8006554 <__aeabi_fmul>
 8007850:	4601      	mov	r1, r0
 8007852:	4648      	mov	r0, r9
 8007854:	f7fe fd76 	bl	8006344 <__addsf3>
 8007858:	4681      	mov	r9, r0
			HEA[i].PID_Heater = HEA[i].PID_Heater + (((HEA[i].ErrorD_Heater * HEA[i].D_Heater))); // Calculate D and add to PI
 800785a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800785c:	9803      	ldr	r0, [sp, #12]
 800785e:	f7fe fe79 	bl	8006554 <__aeabi_fmul>
 8007862:	4601      	mov	r1, r0
 8007864:	4648      	mov	r0, r9
 8007866:	f7fe fd6d 	bl	8006344 <__addsf3>
 800786a:	4681      	mov	r9, r0
 800786c:	6560      	str	r0, [r4, #84]	; 0x54
			if (HEA[i].PID_Heater < 0)
 800786e:	4651      	mov	r1, sl
 8007870:	f7ff f80e 	bl	8006890 <__aeabi_fcmplt>
 8007874:	2800      	cmp	r0, #0
 8007876:	f47f af71 	bne.w	800775c <HEA_HandlePID+0x74>
				HEA[i].HeaterControl = HEA[i].PID_Heater;// + (HeaterPreset * PresetScale);
 800787a:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
			if (HEA[i].HeaterControl < 10)
 800787e:	4933      	ldr	r1, [pc, #204]	; (800794c <HEA_HandlePID+0x264>)
 8007880:	4648      	mov	r0, r9
 8007882:	f7ff f805 	bl	8006890 <__aeabi_fcmplt>
 8007886:	2800      	cmp	r0, #0
 8007888:	f47f af68 	bne.w	800775c <HEA_HandlePID+0x74>
			if (HEA[i].DeltaTemperature > MaxDeltaT)
 800788c:	4b2a      	ldr	r3, [pc, #168]	; (8007938 <HEA_HandlePID+0x250>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	9a00      	ldr	r2, [sp, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	f73f af69 	bgt.w	800776a <HEA_HandlePID+0x82>
			if (HEA[i].HeaterControl > 10000)
 8007898:	4928      	ldr	r1, [pc, #160]	; (800793c <HEA_HandlePID+0x254>)
 800789a:	4648      	mov	r0, r9
 800789c:	f7ff f816 	bl	80068cc <__aeabi_fcmpgt>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	f43f af64 	beq.w	800776e <HEA_HandlePID+0x86>
				HEA[i].HeaterControl = 10000;
 80078a6:	4b25      	ldr	r3, [pc, #148]	; (800793c <HEA_HandlePID+0x254>)
 80078a8:	65a3      	str	r3, [r4, #88]	; 0x58
 80078aa:	e760      	b.n	800776e <HEA_HandlePID+0x86>
			if ((HEA[i].GetTemperature <= HEA[i].SetTemperature) && (HEA[i].DeltaTemperature < 0) && (HEA[i].HeaterControl < 7500))
 80078ac:	4547      	cmp	r7, r8
 80078ae:	f47f af6c 	bne.w	800778a <HEA_HandlePID+0xa2>
 80078b2:	9b00      	ldr	r3, [sp, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f6bf af68 	bge.w	800778a <HEA_HandlePID+0xa2>
 80078ba:	4925      	ldr	r1, [pc, #148]	; (8007950 <HEA_HandlePID+0x268>)
 80078bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078be:	f7fe ffe7 	bl	8006890 <__aeabi_fcmplt>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	f43f af61 	beq.w	800778a <HEA_HandlePID+0xa2>
				HEA[i].HeaterControl = 10000;
 80078c8:	4b1c      	ldr	r3, [pc, #112]	; (800793c <HEA_HandlePID+0x254>)
 80078ca:	65a3      	str	r3, [r4, #88]	; 0x58
 80078cc:	e75d      	b.n	800778a <HEA_HandlePID+0xa2>
				if (HEA[i].GetTemperature > HEA[i].SetTemperature)
 80078ce:	4547      	cmp	r7, r8
					HEA[i].HeaterControl = 0;
 80078d0:	bf84      	itt	hi
 80078d2:	4b13      	ldrhi	r3, [pc, #76]	; (8007920 <HEA_HandlePID+0x238>)
 80078d4:	f8c3 a118 	strhi.w	sl, [r3, #280]	; 0x118
 80078d8:	e760      	b.n	800779c <HEA_HandlePID+0xb4>
 80078da:	2300      	movs	r3, #0
 80078dc:	60eb      	str	r3, [r5, #12]
			HEA[i].Status = sINACTIVE;
 80078de:	2304      	movs	r3, #4
 80078e0:	7023      	strb	r3, [r4, #0]
			HEA_SetControl (i,0);
 80078e2:	4651      	mov	r1, sl
 80078e4:	4630      	mov	r0, r6
 80078e6:	f7ff febf 	bl	8007668 <HEA_SetControl>
			HEA[i].ErrorP_Heater = 0;
 80078ea:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
			HEA[i].ErrorP_Heater_Old = 0;
 80078ee:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
			HEA[i].ErrorD_Heater = 0;
 80078f2:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
			HEA[i].ErrorI_Heater = 0;
 80078f6:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
			HEA[i].PID_Heater = 0;
 80078fa:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
			HEA[i].HeaterControl = 0;
 80078fe:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			HEA[i].HeaterControlOld = 0;
 8007902:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
			if (!DUMMYMODE)
 8007906:	4b07      	ldr	r3, [pc, #28]	; (8007924 <HEA_HandlePID+0x23c>)
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	f47f af52 	bne.w	80077b4 <HEA_HandlePID+0xcc>
				HEA[i].SetTemperature = 0;
 8007910:	6063      	str	r3, [r4, #4]
				HEA[i].GetTemperatureOld = 0;
 8007912:	6123      	str	r3, [r4, #16]
				HEA[i].DeltaTemperature = 0;
 8007914:	6163      	str	r3, [r4, #20]
 8007916:	e74d      	b.n	80077b4 <HEA_HandlePID+0xcc>
		}
	}
}
 8007918:	b005      	add	sp, #20
 800791a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800791e:	bf00      	nop
 8007920:	20000290 	.word	0x20000290
 8007924:	20000c48 	.word	0x20000c48
 8007928:	20000c4a 	.word	0x20000c4a
 800792c:	2000001c 	.word	0x2000001c
 8007930:	200003b8 	.word	0x200003b8
 8007934:	200003b4 	.word	0x200003b4
 8007938:	20000001 	.word	0x20000001
 800793c:	461c4000 	.word	0x461c4000
 8007940:	20000028 	.word	0x20000028
 8007944:	20000024 	.word	0x20000024
 8007948:	20000020 	.word	0x20000020
 800794c:	41200000 	.word	0x41200000
 8007950:	45ea6000 	.word	0x45ea6000

08007954 <HEA_Handle>:
{
 8007954:	b508      	push	{r3, lr}
	if (TickTimer ++ < 49) return; //50 ms interval
 8007956:	4b07      	ldr	r3, [pc, #28]	; (8007974 <HEA_Handle+0x20>)
 8007958:	881b      	ldrh	r3, [r3, #0]
 800795a:	2b30      	cmp	r3, #48	; 0x30
 800795c:	d803      	bhi.n	8007966 <HEA_Handle+0x12>
 800795e:	3301      	adds	r3, #1
 8007960:	4a04      	ldr	r2, [pc, #16]	; (8007974 <HEA_Handle+0x20>)
 8007962:	8013      	strh	r3, [r2, #0]
}
 8007964:	bd08      	pop	{r3, pc}
	TickTimer = 0;
 8007966:	4b03      	ldr	r3, [pc, #12]	; (8007974 <HEA_Handle+0x20>)
 8007968:	2200      	movs	r2, #0
 800796a:	801a      	strh	r2, [r3, #0]
	HEA_HandlePID();
 800796c:	f7ff febc 	bl	80076e8 <HEA_HandlePID>
 8007970:	e7f8      	b.n	8007964 <HEA_Handle+0x10>
 8007972:	bf00      	nop
 8007974:	2000002c 	.word	0x2000002c

08007978 <HEA_Set>:
//! \details    Sets the selected heater status to the requested status
//! \param[in]  uint8_t newHeater		Heater number
//! \param[in]  enuStatus newStatus		INACTIVE or ACTIVE
void HEA_Set (uint8_t newHeater, enuStatus newStatus)
{
	if (DUMMYMODE) return;
 8007978:	4b04      	ldr	r3, [pc, #16]	; (800798c <HEA_Set+0x14>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	b923      	cbnz	r3, 8007988 <HEA_Set+0x10>
	HEA[newHeater].Status = newStatus;
 800797e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007982:	0140      	lsls	r0, r0, #5
 8007984:	4b02      	ldr	r3, [pc, #8]	; (8007990 <HEA_Set+0x18>)
 8007986:	5419      	strb	r1, [r3, r0]
}
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	20000c48 	.word	0x20000c48
 8007990:	20000290 	.word	0x20000290

08007994 <HEA_SetHeaterTemperature>:
//! \param[in]  uint8_t newHeater		Heater number
//! \param[in]  uint16_t newTemperature
//! \param[in]  uint16_t newSteamMode
void HEA_SetHeaterTemperature (uint8_t newHeater, uint16_t newTemperature, uint8_t newSteamMode)
{
	HEA[newHeater].SetTemperature = newTemperature;
 8007994:	4b04      	ldr	r3, [pc, #16]	; (80079a8 <HEA_SetHeaterTemperature+0x14>)
 8007996:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 800799a:	eb03 1c4c 	add.w	ip, r3, ip, lsl #5
 800799e:	f8cc 1004 	str.w	r1, [ip, #4]
	HEA[newHeater].SteamMode = newSteamMode;
 80079a2:	f88c 2030 	strb.w	r2, [ip, #48]	; 0x30
}
 80079a6:	4770      	bx	lr
 80079a8:	20000290 	.word	0x20000290

080079ac <HEA_SetHeaterGPIO>:
//-----------------------------------------------------------------------------
//! \brief      Sets the temperature of the selected heater
//! \details    Sets the temperature of the selected heater
//! \param[in]  uint8_t newHeater		Heater number H1, H2, H3
void HEA_SetHeaterGPIO (uint8_t newHeater)
{
 80079ac:	b538      	push	{r3, r4, r5, lr}
	uint16_t x1, x2;
	if (DUMMYMODE) return;
 80079ae:	4bab      	ldr	r3, [pc, #684]	; (8007c5c <HEA_SetHeaterGPIO+0x2b0>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	b92b      	cbnz	r3, 80079c0 <HEA_SetHeaterGPIO+0x14>
 80079b4:	4604      	mov	r4, r0
	if (newHeater < H3) //Heater 1 or Heater 2
 80079b6:	2801      	cmp	r0, #1
 80079b8:	d903      	bls.n	80079c2 <HEA_SetHeaterGPIO+0x16>
				//HEA[newHeater].EfastActive = 0;
				if (newHeater == 0) H1H_OFF(); else H2H_OFF();
			}
		}
	}
	else if ((newHeater == H3)&&(!DUMMYMODEH3))
 80079ba:	2802      	cmp	r0, #2
 80079bc:	f000 8160 	beq.w	8007c80 <HEA_SetHeaterGPIO+0x2d4>
			{
				H3_OFF();
			}
		}
	}
}
 80079c0:	bd38      	pop	{r3, r4, r5, pc}
		if (HEA[newHeater].Power > FTH_L_POWER + FTH_H_POWER) HEA[newHeater].Power = FTH_L_POWER + FTH_H_POWER;
 80079c2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80079c6:	4aa6      	ldr	r2, [pc, #664]	; (8007c60 <HEA_SetHeaterGPIO+0x2b4>)
 80079c8:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80079cc:	885b      	ldrh	r3, [r3, #2]
 80079ce:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80079d2:	d92f      	bls.n	8007a34 <HEA_SetHeaterGPIO+0x88>
 80079d4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80079d8:	0159      	lsls	r1, r3, #5
 80079da:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80079de:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80079e2:	8058      	strh	r0, [r3, #2]
		x1 = PhaseCounter;
 80079e4:	4b9f      	ldr	r3, [pc, #636]	; (8007c64 <HEA_SetHeaterGPIO+0x2b8>)
 80079e6:	781d      	ldrb	r5, [r3, #0]
		if ((HEA[newHeater].Power == 0) || (HEA[newHeater].Status == sINACTIVE))
 80079e8:	5c53      	ldrb	r3, [r2, r1]
 80079ea:	2b04      	cmp	r3, #4
 80079ec:	d023      	beq.n	8007a36 <HEA_SetHeaterGPIO+0x8a>
			if (newHeater == H1) H1H_ON(); else H2H_ON();
 80079ee:	2c00      	cmp	r4, #0
 80079f0:	f040 80a9 	bne.w	8007b46 <HEA_SetHeaterGPIO+0x19a>
 80079f4:	2201      	movs	r2, #1
 80079f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80079fa:	489b      	ldr	r0, [pc, #620]	; (8007c68 <HEA_SetHeaterGPIO+0x2bc>)
 80079fc:	f006 fb50 	bl	800e0a0 <HAL_GPIO_WritePin>
			x2 = PhaseList[((HEA[newHeater].Power-FTH_H_POWER)*10/FTH_L_POWER)];
 8007a00:	4b97      	ldr	r3, [pc, #604]	; (8007c60 <HEA_SetHeaterGPIO+0x2b4>)
 8007a02:	885b      	ldrh	r3, [r3, #2]
 8007a04:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8007a08:	4a98      	ldr	r2, [pc, #608]	; (8007c6c <HEA_SetHeaterGPIO+0x2c0>)
 8007a0a:	fb82 1203 	smull	r1, r2, r2, r3
 8007a0e:	441a      	add	r2, r3
 8007a10:	17db      	asrs	r3, r3, #31
 8007a12:	ebc3 1322 	rsb	r3, r3, r2, asr #4
			if ((1<<(x1)) & (x2)) //This phase is on
 8007a16:	4a96      	ldr	r2, [pc, #600]	; (8007c70 <HEA_SetHeaterGPIO+0x2c4>)
 8007a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a1c:	fa43 f505 	asr.w	r5, r3, r5
 8007a20:	f015 0f01 	tst.w	r5, #1
 8007a24:	f040 816b 	bne.w	8007cfe <HEA_SetHeaterGPIO+0x352>
				if (newHeater == H1) H1L_OFF(); else H2L_OFF();
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2102      	movs	r1, #2
 8007a2c:	4891      	ldr	r0, [pc, #580]	; (8007c74 <HEA_SetHeaterGPIO+0x2c8>)
 8007a2e:	f006 fb37 	bl	800e0a0 <HAL_GPIO_WritePin>
 8007a32:	e7c5      	b.n	80079c0 <HEA_SetHeaterGPIO+0x14>
		if ((HEA[newHeater].Power == 0) || (HEA[newHeater].Status == sINACTIVE))
 8007a34:	b963      	cbnz	r3, 8007a50 <HEA_SetHeaterGPIO+0xa4>
			if (newHeater == H1)
 8007a36:	bb8c      	cbnz	r4, 8007a9c <HEA_SetHeaterGPIO+0xf0>
				H1L_OFF();
 8007a38:	2200      	movs	r2, #0
 8007a3a:	2102      	movs	r1, #2
 8007a3c:	488d      	ldr	r0, [pc, #564]	; (8007c74 <HEA_SetHeaterGPIO+0x2c8>)
 8007a3e:	f006 fb2f 	bl	800e0a0 <HAL_GPIO_WritePin>
				H1H_OFF();
 8007a42:	2200      	movs	r2, #0
 8007a44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007a48:	4887      	ldr	r0, [pc, #540]	; (8007c68 <HEA_SetHeaterGPIO+0x2bc>)
 8007a4a:	f006 fb29 	bl	800e0a0 <HAL_GPIO_WritePin>
 8007a4e:	e7b7      	b.n	80079c0 <HEA_SetHeaterGPIO+0x14>
		x1 = PhaseCounter;
 8007a50:	4a84      	ldr	r2, [pc, #528]	; (8007c64 <HEA_SetHeaterGPIO+0x2b8>)
 8007a52:	7815      	ldrb	r5, [r2, #0]
		if ((HEA[newHeater].Power == 0) || (HEA[newHeater].Status == sINACTIVE))
 8007a54:	2260      	movs	r2, #96	; 0x60
 8007a56:	fb00 f202 	mul.w	r2, r0, r2
 8007a5a:	4981      	ldr	r1, [pc, #516]	; (8007c60 <HEA_SetHeaterGPIO+0x2b4>)
 8007a5c:	5c8a      	ldrb	r2, [r1, r2]
 8007a5e:	2a04      	cmp	r2, #4
 8007a60:	d0e9      	beq.n	8007a36 <HEA_SetHeaterGPIO+0x8a>
		else if (HEA[newHeater].Power == FTH_E_POWER)//Use both heaters
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d14b      	bne.n	8007afe <HEA_SetHeaterGPIO+0x152>
			if ((1<<(x1)) & (x2)) //Both heater tracks on
 8007a66:	f44f 7304 	mov.w	r3, #528	; 0x210
 8007a6a:	fa43 f505 	asr.w	r5, r3, r5
 8007a6e:	f015 0f01 	tst.w	r5, #1
 8007a72:	d02b      	beq.n	8007acc <HEA_SetHeaterGPIO+0x120>
				HEA[newHeater].EfastActive = 1;
 8007a74:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8007a78:	4b79      	ldr	r3, [pc, #484]	; (8007c60 <HEA_SetHeaterGPIO+0x2b4>)
 8007a7a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				if (newHeater == H1)
 8007a84:	b9b0      	cbnz	r0, 8007ab4 <HEA_SetHeaterGPIO+0x108>
					H1L_ON();
 8007a86:	2102      	movs	r1, #2
 8007a88:	487a      	ldr	r0, [pc, #488]	; (8007c74 <HEA_SetHeaterGPIO+0x2c8>)
 8007a8a:	f006 fb09 	bl	800e0a0 <HAL_GPIO_WritePin>
					H1H_ON();
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007a94:	4874      	ldr	r0, [pc, #464]	; (8007c68 <HEA_SetHeaterGPIO+0x2bc>)
 8007a96:	f006 fb03 	bl	800e0a0 <HAL_GPIO_WritePin>
 8007a9a:	e791      	b.n	80079c0 <HEA_SetHeaterGPIO+0x14>
				H2L_OFF();
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007aa2:	4871      	ldr	r0, [pc, #452]	; (8007c68 <HEA_SetHeaterGPIO+0x2bc>)
 8007aa4:	f006 fafc 	bl	800e0a0 <HAL_GPIO_WritePin>
				H2H_OFF();
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2108      	movs	r1, #8
 8007aac:	4872      	ldr	r0, [pc, #456]	; (8007c78 <HEA_SetHeaterGPIO+0x2cc>)
 8007aae:	f006 faf7 	bl	800e0a0 <HAL_GPIO_WritePin>
 8007ab2:	e785      	b.n	80079c0 <HEA_SetHeaterGPIO+0x14>
					H2H_ON();
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	2108      	movs	r1, #8
 8007ab8:	486f      	ldr	r0, [pc, #444]	; (8007c78 <HEA_SetHeaterGPIO+0x2cc>)
 8007aba:	f006 faf1 	bl	800e0a0 <HAL_GPIO_WritePin>
					H2L_ON();
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ac4:	4868      	ldr	r0, [pc, #416]	; (8007c68 <HEA_SetHeaterGPIO+0x2bc>)
 8007ac6:	f006 faeb 	bl	800e0a0 <HAL_GPIO_WritePin>
 8007aca:	e779      	b.n	80079c0 <HEA_SetHeaterGPIO+0x14>
				if (newHeater == H1)
 8007acc:	b958      	cbnz	r0, 8007ae6 <HEA_SetHeaterGPIO+0x13a>
					H1L_OFF();
 8007ace:	2200      	movs	r2, #0
 8007ad0:	2102      	movs	r1, #2
 8007ad2:	4868      	ldr	r0, [pc, #416]	; (8007c74 <HEA_SetHeaterGPIO+0x2c8>)
 8007ad4:	f006 fae4 	bl	800e0a0 <HAL_GPIO_WritePin>
					H1H_OFF();
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ade:	4862      	ldr	r0, [pc, #392]	; (8007c68 <HEA_SetHeaterGPIO+0x2bc>)
 8007ae0:	f006 fade 	bl	800e0a0 <HAL_GPIO_WritePin>
 8007ae4:	e76c      	b.n	80079c0 <HEA_SetHeaterGPIO+0x14>
					H2L_OFF();
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007aec:	485e      	ldr	r0, [pc, #376]	; (8007c68 <HEA_SetHeaterGPIO+0x2bc>)
 8007aee:	f006 fad7 	bl	800e0a0 <HAL_GPIO_WritePin>
					H2H_OFF();
 8007af2:	2200      	movs	r2, #0
 8007af4:	2108      	movs	r1, #8
 8007af6:	4860      	ldr	r0, [pc, #384]	; (8007c78 <HEA_SetHeaterGPIO+0x2cc>)
 8007af8:	f006 fad2 	bl	800e0a0 <HAL_GPIO_WritePin>
 8007afc:	e760      	b.n	80079c0 <HEA_SetHeaterGPIO+0x14>
		else if (HEA[newHeater].Power > FTH_H_POWER) //Use both HEA. High power part is 100% on
 8007afe:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8007b02:	f63f af74 	bhi.w	80079ee <HEA_SetHeaterGPIO+0x42>
		else if (HEA[newHeater].Power <= FTH_L_POWER) //Only use Low power part
 8007b06:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8007b0a:	d86c      	bhi.n	8007be6 <HEA_SetHeaterGPIO+0x23a>
			if (newHeater == 0) H1H_OFF(); else H2H_OFF();
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	d13b      	bne.n	8007b88 <HEA_SetHeaterGPIO+0x1dc>
 8007b10:	2200      	movs	r2, #0
 8007b12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b16:	4854      	ldr	r0, [pc, #336]	; (8007c68 <HEA_SetHeaterGPIO+0x2bc>)
 8007b18:	f006 fac2 	bl	800e0a0 <HAL_GPIO_WritePin>
			x2 = PhaseList[(HEA[newHeater].Power*10/FTH_L_POWER)];
 8007b1c:	4b50      	ldr	r3, [pc, #320]	; (8007c60 <HEA_SetHeaterGPIO+0x2b4>)
 8007b1e:	885a      	ldrh	r2, [r3, #2]
 8007b20:	4b52      	ldr	r3, [pc, #328]	; (8007c6c <HEA_SetHeaterGPIO+0x2c0>)
 8007b22:	fb83 1302 	smull	r1, r3, r3, r2
 8007b26:	4413      	add	r3, r2
 8007b28:	111b      	asrs	r3, r3, #4
			if ((1<<(x1)) & (x2)) //This phase is on
 8007b2a:	4a51      	ldr	r2, [pc, #324]	; (8007c70 <HEA_SetHeaterGPIO+0x2c4>)
 8007b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b30:	fa43 f505 	asr.w	r5, r3, r5
 8007b34:	f015 0f01 	tst.w	r5, #1
 8007b38:	d145      	bne.n	8007bc6 <HEA_SetHeaterGPIO+0x21a>
				if (newHeater == 0) H1L_OFF(); else H2L_OFF();
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	2102      	movs	r1, #2
 8007b3e:	484d      	ldr	r0, [pc, #308]	; (8007c74 <HEA_SetHeaterGPIO+0x2c8>)
 8007b40:	f006 faae 	bl	800e0a0 <HAL_GPIO_WritePin>
 8007b44:	e73c      	b.n	80079c0 <HEA_SetHeaterGPIO+0x14>
			if (newHeater == H1) H1H_ON(); else H2H_ON();
 8007b46:	2201      	movs	r2, #1
 8007b48:	2108      	movs	r1, #8
 8007b4a:	484b      	ldr	r0, [pc, #300]	; (8007c78 <HEA_SetHeaterGPIO+0x2cc>)
 8007b4c:	f006 faa8 	bl	800e0a0 <HAL_GPIO_WritePin>
			x2 = PhaseList[((HEA[newHeater].Power-FTH_H_POWER)*10/FTH_L_POWER)];
 8007b50:	4b43      	ldr	r3, [pc, #268]	; (8007c60 <HEA_SetHeaterGPIO+0x2b4>)
 8007b52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b56:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8007b5a:	4a44      	ldr	r2, [pc, #272]	; (8007c6c <HEA_SetHeaterGPIO+0x2c0>)
 8007b5c:	fb82 1203 	smull	r1, r2, r2, r3
 8007b60:	441a      	add	r2, r3
 8007b62:	17db      	asrs	r3, r3, #31
 8007b64:	ebc3 1322 	rsb	r3, r3, r2, asr #4
			if ((1<<(x1)) & (x2)) //This phase is on
 8007b68:	4a41      	ldr	r2, [pc, #260]	; (8007c70 <HEA_SetHeaterGPIO+0x2c4>)
 8007b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b6e:	fa43 f505 	asr.w	r5, r3, r5
 8007b72:	f015 0f01 	tst.w	r5, #1
 8007b76:	f040 80cf 	bne.w	8007d18 <HEA_SetHeaterGPIO+0x36c>
				if (newHeater == H1) H1L_OFF(); else H2L_OFF();
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b80:	4839      	ldr	r0, [pc, #228]	; (8007c68 <HEA_SetHeaterGPIO+0x2bc>)
 8007b82:	f006 fa8d 	bl	800e0a0 <HAL_GPIO_WritePin>
 8007b86:	e71b      	b.n	80079c0 <HEA_SetHeaterGPIO+0x14>
			if (newHeater == 0) H1H_OFF(); else H2H_OFF();
 8007b88:	2200      	movs	r2, #0
 8007b8a:	2108      	movs	r1, #8
 8007b8c:	483a      	ldr	r0, [pc, #232]	; (8007c78 <HEA_SetHeaterGPIO+0x2cc>)
 8007b8e:	f006 fa87 	bl	800e0a0 <HAL_GPIO_WritePin>
			x2 = PhaseList[(HEA[newHeater].Power*10/FTH_L_POWER)];
 8007b92:	4b33      	ldr	r3, [pc, #204]	; (8007c60 <HEA_SetHeaterGPIO+0x2b4>)
 8007b94:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8007b98:	4b34      	ldr	r3, [pc, #208]	; (8007c6c <HEA_SetHeaterGPIO+0x2c0>)
 8007b9a:	fb83 1302 	smull	r1, r3, r3, r2
 8007b9e:	4413      	add	r3, r2
 8007ba0:	111b      	asrs	r3, r3, #4
			if ((1<<(x1)) & (x2)) //This phase is on
 8007ba2:	4a33      	ldr	r2, [pc, #204]	; (8007c70 <HEA_SetHeaterGPIO+0x2c4>)
 8007ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ba8:	fa43 f505 	asr.w	r5, r3, r5
 8007bac:	f015 0f01 	tst.w	r5, #1
 8007bb0:	d012      	beq.n	8007bd8 <HEA_SetHeaterGPIO+0x22c>
				HEA[newHeater].EfastActive = 1;
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	4b2a      	ldr	r3, [pc, #168]	; (8007c60 <HEA_SetHeaterGPIO+0x2b4>)
 8007bb6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
				if (newHeater == 0) H1L_ON(); else H2L_ON();
 8007bba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007bbe:	482a      	ldr	r0, [pc, #168]	; (8007c68 <HEA_SetHeaterGPIO+0x2bc>)
 8007bc0:	f006 fa6e 	bl	800e0a0 <HAL_GPIO_WritePin>
 8007bc4:	e6fc      	b.n	80079c0 <HEA_SetHeaterGPIO+0x14>
				HEA[newHeater].EfastActive = 1;
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	4b25      	ldr	r3, [pc, #148]	; (8007c60 <HEA_SetHeaterGPIO+0x2b4>)
 8007bca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				if (newHeater == 0) H1L_ON(); else H2L_ON();
 8007bce:	2102      	movs	r1, #2
 8007bd0:	4828      	ldr	r0, [pc, #160]	; (8007c74 <HEA_SetHeaterGPIO+0x2c8>)
 8007bd2:	f006 fa65 	bl	800e0a0 <HAL_GPIO_WritePin>
 8007bd6:	e6f3      	b.n	80079c0 <HEA_SetHeaterGPIO+0x14>
				if (newHeater == 0) H1L_OFF(); else H2L_OFF();
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007bde:	4822      	ldr	r0, [pc, #136]	; (8007c68 <HEA_SetHeaterGPIO+0x2bc>)
 8007be0:	f006 fa5e 	bl	800e0a0 <HAL_GPIO_WritePin>
 8007be4:	e6ec      	b.n	80079c0 <HEA_SetHeaterGPIO+0x14>
			if (newHeater == 0) H1L_OFF(); else H2L_OFF();
 8007be6:	b9d0      	cbnz	r0, 8007c1e <HEA_SetHeaterGPIO+0x272>
 8007be8:	2200      	movs	r2, #0
 8007bea:	2102      	movs	r1, #2
 8007bec:	4821      	ldr	r0, [pc, #132]	; (8007c74 <HEA_SetHeaterGPIO+0x2c8>)
 8007bee:	f006 fa57 	bl	800e0a0 <HAL_GPIO_WritePin>
			x2 = PhaseList[(HEA[newHeater].Power*10/FTH_H_POWER)];
 8007bf2:	4b1b      	ldr	r3, [pc, #108]	; (8007c60 <HEA_SetHeaterGPIO+0x2b4>)
 8007bf4:	885a      	ldrh	r2, [r3, #2]
 8007bf6:	4b21      	ldr	r3, [pc, #132]	; (8007c7c <HEA_SetHeaterGPIO+0x2d0>)
 8007bf8:	fb83 1302 	smull	r1, r3, r3, r2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	119b      	asrs	r3, r3, #6
			if ((1<<(x1)) & (x2)) //This phase is on
 8007c00:	4a1b      	ldr	r2, [pc, #108]	; (8007c70 <HEA_SetHeaterGPIO+0x2c4>)
 8007c02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c06:	fa43 f505 	asr.w	r5, r3, r5
 8007c0a:	f015 0f01 	tst.w	r5, #1
 8007c0e:	d16c      	bne.n	8007cea <HEA_SetHeaterGPIO+0x33e>
				if (newHeater == 0) H1H_OFF(); else H2H_OFF();
 8007c10:	2200      	movs	r2, #0
 8007c12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c16:	4814      	ldr	r0, [pc, #80]	; (8007c68 <HEA_SetHeaterGPIO+0x2bc>)
 8007c18:	f006 fa42 	bl	800e0a0 <HAL_GPIO_WritePin>
 8007c1c:	e6d0      	b.n	80079c0 <HEA_SetHeaterGPIO+0x14>
			if (newHeater == 0) H1L_OFF(); else H2L_OFF();
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c24:	4810      	ldr	r0, [pc, #64]	; (8007c68 <HEA_SetHeaterGPIO+0x2bc>)
 8007c26:	f006 fa3b 	bl	800e0a0 <HAL_GPIO_WritePin>
			x2 = PhaseList[(HEA[newHeater].Power*10/FTH_H_POWER)];
 8007c2a:	4b0d      	ldr	r3, [pc, #52]	; (8007c60 <HEA_SetHeaterGPIO+0x2b4>)
 8007c2c:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8007c30:	4b12      	ldr	r3, [pc, #72]	; (8007c7c <HEA_SetHeaterGPIO+0x2d0>)
 8007c32:	fb83 1302 	smull	r1, r3, r3, r2
 8007c36:	4413      	add	r3, r2
 8007c38:	119b      	asrs	r3, r3, #6
			if ((1<<(x1)) & (x2)) //This phase is on
 8007c3a:	4a0d      	ldr	r2, [pc, #52]	; (8007c70 <HEA_SetHeaterGPIO+0x2c4>)
 8007c3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c40:	fa43 f505 	asr.w	r5, r3, r5
 8007c44:	f015 0f01 	tst.w	r5, #1
 8007c48:	d074      	beq.n	8007d34 <HEA_SetHeaterGPIO+0x388>
				HEA[newHeater].EfastActive = 1;
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	4b04      	ldr	r3, [pc, #16]	; (8007c60 <HEA_SetHeaterGPIO+0x2b4>)
 8007c4e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
				if (newHeater == 0) H1H_ON(); else H2H_ON();
 8007c52:	2108      	movs	r1, #8
 8007c54:	4808      	ldr	r0, [pc, #32]	; (8007c78 <HEA_SetHeaterGPIO+0x2cc>)
 8007c56:	f006 fa23 	bl	800e0a0 <HAL_GPIO_WritePin>
 8007c5a:	e6b1      	b.n	80079c0 <HEA_SetHeaterGPIO+0x14>
 8007c5c:	20000c48 	.word	0x20000c48
 8007c60:	20000290 	.word	0x20000290
 8007c64:	200003b0 	.word	0x200003b0
 8007c68:	40020000 	.word	0x40020000
 8007c6c:	88888889 	.word	0x88888889
 8007c70:	20000004 	.word	0x20000004
 8007c74:	40021400 	.word	0x40021400
 8007c78:	40020800 	.word	0x40020800
 8007c7c:	b60b60b7 	.word	0xb60b60b7
	else if ((newHeater == H3)&&(!DUMMYMODEH3))
 8007c80:	4b2f      	ldr	r3, [pc, #188]	; (8007d40 <HEA_SetHeaterGPIO+0x394>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f47f ae9b 	bne.w	80079c0 <HEA_SetHeaterGPIO+0x14>
		x1 = PhaseCounter;
 8007c8a:	4b2e      	ldr	r3, [pc, #184]	; (8007d44 <HEA_SetHeaterGPIO+0x398>)
 8007c8c:	781a      	ldrb	r2, [r3, #0]
		if (HEA[newHeater].Power > BH_POWER) HEA[newHeater].Power = BH_POWER;
 8007c8e:	4b2e      	ldr	r3, [pc, #184]	; (8007d48 <HEA_SetHeaterGPIO+0x39c>)
 8007c90:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8007c94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007c98:	d917      	bls.n	8007cca <HEA_SetHeaterGPIO+0x31e>
 8007c9a:	4b2b      	ldr	r3, [pc, #172]	; (8007d48 <HEA_SetHeaterGPIO+0x39c>)
 8007c9c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007ca0:	f8a3 10c2 	strh.w	r1, [r3, #194]	; 0xc2
		x2 = PhaseList[(HEA[newHeater].Power*10/BH_POWER)];
 8007ca4:	4b29      	ldr	r3, [pc, #164]	; (8007d4c <HEA_SetHeaterGPIO+0x3a0>)
 8007ca6:	8a9b      	ldrh	r3, [r3, #20]
		if ((HEA[newHeater].Power == 0) || (HEA[newHeater].Status == sINACTIVE))
 8007ca8:	4927      	ldr	r1, [pc, #156]	; (8007d48 <HEA_SetHeaterGPIO+0x39c>)
 8007caa:	f891 10c0 	ldrb.w	r1, [r1, #192]	; 0xc0
 8007cae:	2904      	cmp	r1, #4
 8007cb0:	d00c      	beq.n	8007ccc <HEA_SetHeaterGPIO+0x320>
			if ((1<<(x1)) & (x2)) //This phase is on
 8007cb2:	4113      	asrs	r3, r2
 8007cb4:	f013 0f01 	tst.w	r3, #1
				H3_ON();
 8007cb8:	bf14      	ite	ne
 8007cba:	2201      	movne	r2, #1
				H3_OFF();
 8007cbc:	2200      	moveq	r2, #0
 8007cbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cc2:	4823      	ldr	r0, [pc, #140]	; (8007d50 <HEA_SetHeaterGPIO+0x3a4>)
 8007cc4:	f006 f9ec 	bl	800e0a0 <HAL_GPIO_WritePin>
 8007cc8:	e67a      	b.n	80079c0 <HEA_SetHeaterGPIO+0x14>
		if ((HEA[newHeater].Power == 0) || (HEA[newHeater].Status == sINACTIVE))
 8007cca:	b933      	cbnz	r3, 8007cda <HEA_SetHeaterGPIO+0x32e>
			H3_OFF();
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cd2:	481f      	ldr	r0, [pc, #124]	; (8007d50 <HEA_SetHeaterGPIO+0x3a4>)
 8007cd4:	f006 f9e4 	bl	800e0a0 <HAL_GPIO_WritePin>
 8007cd8:	e672      	b.n	80079c0 <HEA_SetHeaterGPIO+0x14>
		x2 = PhaseList[(HEA[newHeater].Power*10/BH_POWER)];
 8007cda:	491e      	ldr	r1, [pc, #120]	; (8007d54 <HEA_SetHeaterGPIO+0x3a8>)
 8007cdc:	fb81 1303 	smull	r1, r3, r1, r3
 8007ce0:	111b      	asrs	r3, r3, #4
 8007ce2:	491a      	ldr	r1, [pc, #104]	; (8007d4c <HEA_SetHeaterGPIO+0x3a0>)
 8007ce4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007ce8:	e7de      	b.n	8007ca8 <HEA_SetHeaterGPIO+0x2fc>
				HEA[newHeater].EfastActive = 1;
 8007cea:	2201      	movs	r2, #1
 8007cec:	4b16      	ldr	r3, [pc, #88]	; (8007d48 <HEA_SetHeaterGPIO+0x39c>)
 8007cee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				if (newHeater == 0) H1H_ON(); else H2H_ON();
 8007cf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007cf6:	4816      	ldr	r0, [pc, #88]	; (8007d50 <HEA_SetHeaterGPIO+0x3a4>)
 8007cf8:	f006 f9d2 	bl	800e0a0 <HAL_GPIO_WritePin>
 8007cfc:	e660      	b.n	80079c0 <HEA_SetHeaterGPIO+0x14>
				HEA[newHeater].EfastActive = 1;
 8007cfe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8007d02:	4b11      	ldr	r3, [pc, #68]	; (8007d48 <HEA_SetHeaterGPIO+0x39c>)
 8007d04:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				if (newHeater == H1) H1L_ON(); else H2L_ON();
 8007d0e:	2102      	movs	r1, #2
 8007d10:	4811      	ldr	r0, [pc, #68]	; (8007d58 <HEA_SetHeaterGPIO+0x3ac>)
 8007d12:	f006 f9c5 	bl	800e0a0 <HAL_GPIO_WritePin>
 8007d16:	e653      	b.n	80079c0 <HEA_SetHeaterGPIO+0x14>
				HEA[newHeater].EfastActive = 1;
 8007d18:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8007d1c:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <HEA_SetHeaterGPIO+0x39c>)
 8007d1e:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 8007d22:	2201      	movs	r2, #1
 8007d24:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
				if (newHeater == H1) H1L_ON(); else H2L_ON();
 8007d28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d2c:	4808      	ldr	r0, [pc, #32]	; (8007d50 <HEA_SetHeaterGPIO+0x3a4>)
 8007d2e:	f006 f9b7 	bl	800e0a0 <HAL_GPIO_WritePin>
 8007d32:	e645      	b.n	80079c0 <HEA_SetHeaterGPIO+0x14>
				if (newHeater == 0) H1H_OFF(); else H2H_OFF();
 8007d34:	2200      	movs	r2, #0
 8007d36:	2108      	movs	r1, #8
 8007d38:	4808      	ldr	r0, [pc, #32]	; (8007d5c <HEA_SetHeaterGPIO+0x3b0>)
 8007d3a:	f006 f9b1 	bl	800e0a0 <HAL_GPIO_WritePin>
 8007d3e:	e63f      	b.n	80079c0 <HEA_SetHeaterGPIO+0x14>
 8007d40:	20000c4a 	.word	0x20000c4a
 8007d44:	200003b0 	.word	0x200003b0
 8007d48:	20000290 	.word	0x20000290
 8007d4c:	20000004 	.word	0x20000004
 8007d50:	40020000 	.word	0x40020000
 8007d54:	51eb851f 	.word	0x51eb851f
 8007d58:	40021400 	.word	0x40021400
 8007d5c:	40020800 	.word	0x40020800

08007d60 <HAL_TIM_PeriodElapsedCallback>:
//-----------------------------------------------------------------------------
//! \brief      Handles the timer elapsed event
//! \details    Handles the elapsed event from all timers
//! \param[in]	TIM_HandleTypeDef* htim
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8007d60:	b508      	push	{r3, lr}
	if(htim->Instance==TIM9)
 8007d62:	6802      	ldr	r2, [r0, #0]
 8007d64:	4b16      	ldr	r3, [pc, #88]	; (8007dc0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d000      	beq.n	8007d6c <HAL_TIM_PeriodElapsedCallback+0xc>
		HEA_SetHeaterGPIO(H1); //FTH1 heater
		HEA_SetHeaterGPIO(H2); //FTH2 heater
		HEA_SetHeaterGPIO(H3); //Brewer heater

	}
}
 8007d6a:	bd08      	pop	{r3, pc}
		PhaseCounter ++;
 8007d6c:	4b15      	ldr	r3, [pc, #84]	; (8007dc4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	3301      	adds	r3, #1
 8007d72:	b2db      	uxtb	r3, r3
		if (PhaseCounter > 9) PhaseCounter = 0;
 8007d74:	2b09      	cmp	r3, #9
 8007d76:	d81b      	bhi.n	8007db0 <HAL_TIM_PeriodElapsedCallback+0x50>
		PhaseCounter ++;
 8007d78:	4a12      	ldr	r2, [pc, #72]	; (8007dc4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8007d7a:	7013      	strb	r3, [r2, #0]
		PhaseCounterPumps ++;
 8007d7c:	4b12      	ldr	r3, [pc, #72]	; (8007dc8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	3301      	adds	r3, #1
 8007d82:	b2db      	uxtb	r3, r3
		if (PhaseCounterPumps > 19) PhaseCounterPumps = 0;
 8007d84:	2b13      	cmp	r3, #19
 8007d86:	d817      	bhi.n	8007db8 <HAL_TIM_PeriodElapsedCallback+0x58>
		PhaseCounterPumps ++;
 8007d88:	4a0f      	ldr	r2, [pc, #60]	; (8007dc8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8007d8a:	7013      	strb	r3, [r2, #0]
		PUM_SetPumpGPIO (P1, sOFF);
 8007d8c:	2108      	movs	r1, #8
 8007d8e:	2000      	movs	r0, #0
 8007d90:	f000 fd9e 	bl	80088d0 <PUM_SetPumpGPIO>
		PUM_SetPumpGPIO (P2, sOFF);
 8007d94:	2108      	movs	r1, #8
 8007d96:	2001      	movs	r0, #1
 8007d98:	f000 fd9a 	bl	80088d0 <PUM_SetPumpGPIO>
		HEA_SetHeaterGPIO(H1); //FTH1 heater
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	f7ff fe05 	bl	80079ac <HEA_SetHeaterGPIO>
		HEA_SetHeaterGPIO(H2); //FTH2 heater
 8007da2:	2001      	movs	r0, #1
 8007da4:	f7ff fe02 	bl	80079ac <HEA_SetHeaterGPIO>
		HEA_SetHeaterGPIO(H3); //Brewer heater
 8007da8:	2002      	movs	r0, #2
 8007daa:	f7ff fdff 	bl	80079ac <HEA_SetHeaterGPIO>
}
 8007dae:	e7dc      	b.n	8007d6a <HAL_TIM_PeriodElapsedCallback+0xa>
		if (PhaseCounter > 9) PhaseCounter = 0;
 8007db0:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	701a      	strb	r2, [r3, #0]
 8007db6:	e7e1      	b.n	8007d7c <HAL_TIM_PeriodElapsedCallback+0x1c>
		if (PhaseCounterPumps > 19) PhaseCounterPumps = 0;
 8007db8:	4b03      	ldr	r3, [pc, #12]	; (8007dc8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	701a      	strb	r2, [r3, #0]
 8007dbe:	e7e5      	b.n	8007d8c <HAL_TIM_PeriodElapsedCallback+0x2c>
 8007dc0:	40010800 	.word	0x40010800
 8007dc4:	200003b0 	.word	0x200003b0
 8007dc8:	20000660 	.word	0x20000660

08007dcc <HAL_TIM_OC_DelayElapsedCallback>:
//! \details    Handles the output compare event from all timers
//! \param[in]	TIM_HandleTypeDef* htim
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef* htim)
{

	if(htim->Instance==TIM9)
 8007dcc:	6802      	ldr	r2, [r0, #0]
 8007dce:	4b10      	ldr	r3, [pc, #64]	; (8007e10 <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d000      	beq.n	8007dd6 <HAL_TIM_OC_DelayElapsedCallback+0xa>
 8007dd4:	4770      	bx	lr
{
 8007dd6:	b510      	push	{r4, lr}
 8007dd8:	4604      	mov	r4, r0
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8007dda:	7e03      	ldrb	r3, [r0, #24]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d003      	beq.n	8007de8 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
		{
			if (PUM[P1].ControlType == 1) PUM_SetPumpGPIO (0, sON);
		}

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8007de0:	7e23      	ldrb	r3, [r4, #24]
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d00a      	beq.n	8007dfc <HAL_TIM_OC_DelayElapsedCallback+0x30>
		{
			if (PUM[P2].ControlType == 1) PUM_SetPumpGPIO (1, sON);
		}
	}
}
 8007de6:	bd10      	pop	{r4, pc}
			if (PUM[P1].ControlType == 1) PUM_SetPumpGPIO (0, sON);
 8007de8:	4b0a      	ldr	r3, [pc, #40]	; (8007e14 <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 8007dea:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d1f9      	bne.n	8007de6 <HAL_TIM_OC_DelayElapsedCallback+0x1a>
 8007df2:	2107      	movs	r1, #7
 8007df4:	2000      	movs	r0, #0
 8007df6:	f000 fd6b 	bl	80088d0 <PUM_SetPumpGPIO>
 8007dfa:	e7f1      	b.n	8007de0 <HAL_TIM_OC_DelayElapsedCallback+0x14>
			if (PUM[P2].ControlType == 1) PUM_SetPumpGPIO (1, sON);
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 8007dfe:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d1ef      	bne.n	8007de6 <HAL_TIM_OC_DelayElapsedCallback+0x1a>
 8007e06:	2107      	movs	r1, #7
 8007e08:	2001      	movs	r0, #1
 8007e0a:	f000 fd61 	bl	80088d0 <PUM_SetPumpGPIO>
}
 8007e0e:	e7ea      	b.n	8007de6 <HAL_TIM_OC_DelayElapsedCallback+0x1a>
 8007e10:	40010800 	.word	0x40010800
 8007e14:	20000570 	.word	0x20000570

08007e18 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8007e18:	b508      	push	{r3, lr}
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8007e1a:	4807      	ldr	r0, [pc, #28]	; (8007e38 <MX_IWDG_Init+0x20>)
 8007e1c:	4b07      	ldr	r3, [pc, #28]	; (8007e3c <MX_IWDG_Init+0x24>)
 8007e1e:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8007e20:	2306      	movs	r3, #6
 8007e22:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 1250;
 8007e24:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8007e28:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8007e2a:	f006 f957 	bl	800e0dc <HAL_IWDG_Init>
 8007e2e:	b900      	cbnz	r0, 8007e32 <MX_IWDG_Init+0x1a>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8007e30:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007e32:	f000 f91d 	bl	8008070 <Error_Handler>
}
 8007e36:	e7fb      	b.n	8007e30 <MX_IWDG_Init+0x18>
 8007e38:	200003bc 	.word	0x200003bc
 8007e3c:	40003000 	.word	0x40003000

08007e40 <MAIN_GPIO_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MAIN_GPIO_Init(void)
{
 8007e40:	b500      	push	{lr}
 8007e42:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e44:	2300      	movs	r3, #0
 8007e46:	9302      	str	r3, [sp, #8]
 8007e48:	9303      	str	r3, [sp, #12]
 8007e4a:	9304      	str	r3, [sp, #16]
 8007e4c:	9305      	str	r3, [sp, #20]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e4e:	4b0b      	ldr	r3, [pc, #44]	; (8007e7c <MAIN_GPIO_Init+0x3c>)
 8007e50:	69da      	ldr	r2, [r3, #28]
 8007e52:	f042 0202 	orr.w	r2, r2, #2
 8007e56:	61da      	str	r2, [r3, #28]
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	9b00      	ldr	r3, [sp, #0]

  /*Configure GPIO pins : HW0 */
    GPIO_InitStruct.Pin = HW0_Pin;
 8007e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e66:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e6c:	a901      	add	r1, sp, #4
 8007e6e:	4804      	ldr	r0, [pc, #16]	; (8007e80 <MAIN_GPIO_Init+0x40>)
 8007e70:	f006 f82c 	bl	800decc <HAL_GPIO_Init>
}
 8007e74:	b007      	add	sp, #28
 8007e76:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e7a:	bf00      	nop
 8007e7c:	40023800 	.word	0x40023800
 8007e80:	40020400 	.word	0x40020400

08007e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007e84:	b500      	push	{lr}
 8007e86:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007e88:	2234      	movs	r2, #52	; 0x34
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	a805      	add	r0, sp, #20
 8007e8e:	f008 f8d9 	bl	8010044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007e92:	2300      	movs	r3, #0
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	9301      	str	r3, [sp, #4]
 8007e98:	9302      	str	r3, [sp, #8]
 8007e9a:	9303      	str	r3, [sp, #12]
 8007e9c:	9304      	str	r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e9e:	4917      	ldr	r1, [pc, #92]	; (8007efc <SystemClock_Config+0x78>)
 8007ea0:	680a      	ldr	r2, [r1, #0]
 8007ea2:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8007ea6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eaa:	600a      	str	r2, [r1, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8007eac:	220a      	movs	r2, #10
 8007eae:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007eb4:	2110      	movs	r1, #16
 8007eb6:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007eb8:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007eba:	2202      	movs	r2, #2
 8007ebc:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007ebe:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8007ec0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007ec4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8007ec6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007eca:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007ecc:	a805      	add	r0, sp, #20
 8007ece:	f006 f983 	bl	800e1d8 <HAL_RCC_OscConfig>
 8007ed2:	b978      	cbnz	r0, 8007ef4 <SystemClock_Config+0x70>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007ed4:	230f      	movs	r3, #15
 8007ed6:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007edc:	2300      	movs	r3, #0
 8007ede:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007ee0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007ee2:	9304      	str	r3, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	4668      	mov	r0, sp
 8007ee8:	f006 fc68 	bl	800e7bc <HAL_RCC_ClockConfig>
 8007eec:	b920      	cbnz	r0, 8007ef8 <SystemClock_Config+0x74>
  {
    Error_Handler();
  }
}
 8007eee:	b013      	add	sp, #76	; 0x4c
 8007ef0:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007ef4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007ef6:	e7fe      	b.n	8007ef6 <SystemClock_Config+0x72>
 8007ef8:	b672      	cpsid	i
 8007efa:	e7fe      	b.n	8007efa <SystemClock_Config+0x76>
 8007efc:	40007000 	.word	0x40007000

08007f00 <main>:
{
 8007f00:	b580      	push	{r7, lr}
  Initialized = 0;
 8007f02:	4c4e      	ldr	r4, [pc, #312]	; (800803c <main+0x13c>)
 8007f04:	2300      	movs	r3, #0
 8007f06:	7023      	strb	r3, [r4, #0]
  SCB->VTOR = FLA_MAINADDRESS; /* Vector Table Relocation to partition 2 in Internal FLASH */
 8007f08:	4b4d      	ldr	r3, [pc, #308]	; (8008040 <main+0x140>)
 8007f0a:	4a4e      	ldr	r2, [pc, #312]	; (8008044 <main+0x144>)
 8007f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = 1;
 8007f0e:	2501      	movs	r5, #1
 8007f10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007f14:	611d      	str	r5, [r3, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 8007f16:	b662      	cpsie	i
  HAL_Init();
 8007f18:	f005 f898 	bl	800d04c <HAL_Init>
  SystemClock_Config();
 8007f1c:	f7ff ffb2 	bl	8007e84 <SystemClock_Config>
  MAIN_GPIO_Init();
 8007f20:	f7ff ff8e 	bl	8007e40 <MAIN_GPIO_Init>
  HW0 = (HAL_GPIO_ReadPin(HW0_GPIO_Port, HW0_Pin) == GPIO_PIN_SET);
 8007f24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007f28:	4847      	ldr	r0, [pc, #284]	; (8008048 <main+0x148>)
 8007f2a:	f006 f8b3 	bl	800e094 <HAL_GPIO_ReadPin>
 8007f2e:	42a8      	cmp	r0, r5
 8007f30:	bf14      	ite	ne
 8007f32:	2300      	movne	r3, #0
 8007f34:	2301      	moveq	r3, #1
 8007f36:	4a45      	ldr	r2, [pc, #276]	; (800804c <main+0x14c>)
 8007f38:	7013      	strb	r3, [r2, #0]
  MX_GPIO_Init();
 8007f3a:	f7ff fa4b 	bl	80073d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8007f3e:	f7ff f9f9 	bl	8007334 <MX_DMA_Init>
  MX_TIM3_Init();
 8007f42:	f001 f959 	bl	80091f8 <MX_TIM3_Init>
  MX_TIM7_Init();
 8007f46:	f001 f851 	bl	8008fec <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8007f4a:	f001 f993 	bl	8009274 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8007f4e:	f001 f9ab 	bl	80092a8 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8007f52:	f000 fe85 	bl	8008c60 <MX_SPI2_Init>
  MX_TIM9_Init();
 8007f56:	f001 f871 	bl	800903c <MX_TIM9_Init>
  MX_TIM6_Init();
 8007f5a:	f001 f81f 	bl	8008f9c <MX_TIM6_Init>
  MX_IWDG_Init();
 8007f5e:	f7ff ff5b 	bl	8007e18 <MX_IWDG_Init>
  MX_ADC_Init(); //Put here, because CubeIDE puts it in front of MX_DMA_Init(), which makes ADC DMA not work
 8007f62:	f7fe fe61 	bl	8006c28 <MX_ADC_Init>
  VAL_Init();
 8007f66:	f001 fb3b 	bl	80095e0 <VAL_Init>
  SER_Init ();
 8007f6a:	f003 ff63 	bl	800be34 <SER_Init>
  ANA_Init();
 8007f6e:	f7ff f8b7 	bl	80070e0 <ANA_Init>
  WAT_Init();
 8007f72:	f001 fb7b 	bl	800966c <WAT_Init>
  LED_Init();
 8007f76:	f003 fb93 	bl	800b6a0 <LED_Init>
  PUM_Init();
 8007f7a:	f000 f9bf 	bl	80082fc <PUM_Init>
  AIR_Init();
 8007f7e:	f7fe ff9b 	bl	8006eb8 <AIR_Init>
  REC_Init();
 8007f82:	f000 fd73 	bl	8008a6c <REC_Init>
  FLA_Init();
 8007f86:	f003 f9b3 	bl	800b2f0 <FLA_Init>
  WRK_Init();
 8007f8a:	f002 fbff 	bl	800a78c <WRK_Init>
  HAL_TIM_Base_Start(&htim6); //Start general timer
 8007f8e:	4830      	ldr	r0, [pc, #192]	; (8008050 <main+0x150>)
 8007f90:	f006 ff8a 	bl	800eea8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim7); //Start general timer
 8007f94:	482f      	ldr	r0, [pc, #188]	; (8008054 <main+0x154>)
 8007f96:	f006 ff87 	bl	800eea8 <HAL_TIM_Base_Start>
  Initialized = 1;
 8007f9a:	7025      	strb	r5, [r4, #0]
	HAL_IWDG_Refresh(&hiwdg);
 8007f9c:	4d2e      	ldr	r5, [pc, #184]	; (8008058 <main+0x158>)
  	if (FlgFM[P1] == 1)
 8007f9e:	4c2f      	ldr	r4, [pc, #188]	; (800805c <main+0x15c>)
		DRP_DetectionOn();
 8007fa0:	4e2f      	ldr	r6, [pc, #188]	; (8008060 <main+0x160>)
 8007fa2:	e02a      	b.n	8007ffa <main+0xfa>
  		Flg1ms = 0;
 8007fa4:	4b2f      	ldr	r3, [pc, #188]	; (8008064 <main+0x164>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	701a      	strb	r2, [r3, #0]
  		WRK_HandleTickTime();
 8007faa:	f002 fe49 	bl	800ac40 <WRK_HandleTickTime>
 8007fae:	e02b      	b.n	8008008 <main+0x108>
  		FlgFM[P1] = 0;
 8007fb0:	2700      	movs	r7, #0
 8007fb2:	7027      	strb	r7, [r4, #0]
  		PUM_CalculateFlow(P1);
 8007fb4:	4638      	mov	r0, r7
 8007fb6:	f000 f8d9 	bl	800816c <PUM_CalculateFlow>
  		PUM_CalculateVolume(P1);
 8007fba:	4638      	mov	r0, r7
 8007fbc:	f000 f880 	bl	80080c0 <PUM_CalculateVolume>
 8007fc0:	e025      	b.n	800800e <main+0x10e>
		FlgFM[P2] = 0;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	7063      	strb	r3, [r4, #1]
		PUM_CalculateFlow(P2);
 8007fc6:	2001      	movs	r0, #1
 8007fc8:	f000 f8d0 	bl	800816c <PUM_CalculateFlow>
		PUM_CalculateVolume(P2);
 8007fcc:	2001      	movs	r0, #1
 8007fce:	f000 f877 	bl	80080c0 <PUM_CalculateVolume>
 8007fd2:	e01f      	b.n	8008014 <main+0x114>
		FlgZCR = 0;
 8007fd4:	4b24      	ldr	r3, [pc, #144]	; (8008068 <main+0x168>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	701a      	strb	r2, [r3, #0]
		PUM_CalculateFlow(P2);
 8007fda:	2001      	movs	r0, #1
 8007fdc:	f000 f8c6 	bl	800816c <PUM_CalculateFlow>
		PUM_CalculateVolume(P2);
 8007fe0:	2001      	movs	r0, #1
 8007fe2:	f000 f86d 	bl	80080c0 <PUM_CalculateVolume>
 8007fe6:	e019      	b.n	800801c <main+0x11c>
  		DRP_DetectionOff();
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f006 f856 	bl	800e0a0 <HAL_GPIO_WritePin>
  		a = 0;
 8007ff4:	4b1d      	ldr	r3, [pc, #116]	; (800806c <main+0x16c>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	701a      	strb	r2, [r3, #0]
	HAL_IWDG_Refresh(&hiwdg);
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	f006 f89f 	bl	800e13e <HAL_IWDG_Refresh>
  	if (Flg1ms == 1)
 8008000:	4b18      	ldr	r3, [pc, #96]	; (8008064 <main+0x164>)
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d0cd      	beq.n	8007fa4 <main+0xa4>
  	if (FlgFM[P1] == 1)
 8008008:	7823      	ldrb	r3, [r4, #0]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d0d0      	beq.n	8007fb0 <main+0xb0>
  	if (FlgFM[P2] == 1)
 800800e:	7863      	ldrb	r3, [r4, #1]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d0d6      	beq.n	8007fc2 <main+0xc2>
  	if (FlgZCR == 1)
 8008014:	4b14      	ldr	r3, [pc, #80]	; (8008068 <main+0x168>)
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d0db      	beq.n	8007fd4 <main+0xd4>
  	if (a==1)
 800801c:	4b13      	ldr	r3, [pc, #76]	; (800806c <main+0x16c>)
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d0e1      	beq.n	8007fe8 <main+0xe8>
  	else if (a==2)
 8008024:	2b02      	cmp	r3, #2
 8008026:	d1e8      	bne.n	8007ffa <main+0xfa>
		DRP_DetectionOn();
 8008028:	2200      	movs	r2, #0
 800802a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800802e:	4630      	mov	r0, r6
 8008030:	f006 f836 	bl	800e0a0 <HAL_GPIO_WritePin>
		a = 0;
 8008034:	4b0d      	ldr	r3, [pc, #52]	; (800806c <main+0x16c>)
 8008036:	2200      	movs	r2, #0
 8008038:	701a      	strb	r2, [r3, #0]
 800803a:	e7de      	b.n	8007ffa <main+0xfa>
 800803c:	20000c51 	.word	0x20000c51
 8008040:	e000ed00 	.word	0xe000ed00
 8008044:	08005800 	.word	0x08005800
 8008048:	40020400 	.word	0x40020400
 800804c:	20000c50 	.word	0x20000c50
 8008050:	20000a70 	.word	0x20000a70
 8008054:	20000ab0 	.word	0x20000ab0
 8008058:	200003bc 	.word	0x200003bc
 800805c:	200003cc 	.word	0x200003cc
 8008060:	40020800 	.word	0x40020800
 8008064:	20000c4b 	.word	0x20000c4b
 8008068:	20000c6e 	.word	0x20000c6e
 800806c:	200003c8 	.word	0x200003c8

08008070 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8008070:	b672      	cpsid	i
  while (1)
 8008072:	e7fe      	b.n	8008072 <Error_Handler+0x2>

08008074 <PUM_GetParameter>:
//! \param[in]	uint8_t newParameter   (PUM_ULPERPULSEP1 or PUM_ULPERPULSEP2)
//! \param[out]	uint16_t newValue
uint16_t PUM_GetParameter (uint8_t newParameter)
{
	uint16_t ReturnValue = 0;
	switch (newParameter)
 8008074:	2827      	cmp	r0, #39	; 0x27
 8008076:	d003      	beq.n	8008080 <PUM_GetParameter+0xc>
 8008078:	2828      	cmp	r0, #40	; 0x28
 800807a:	d004      	beq.n	8008086 <PUM_GetParameter+0x12>
 800807c:	2000      	movs	r0, #0
 800807e:	4770      	bx	lr
	{
		case PUM_ULPERPULSEP1:
		{
			ReturnValue = PUM[P1].UlPerPulse;
 8008080:	4b03      	ldr	r3, [pc, #12]	; (8008090 <PUM_GetParameter+0x1c>)
 8008082:	8f98      	ldrh	r0, [r3, #60]	; 0x3c
			break;
 8008084:	4770      	bx	lr
		}
		case PUM_ULPERPULSEP2:
		{
			ReturnValue = PUM[P2].UlPerPulse;
 8008086:	4b02      	ldr	r3, [pc, #8]	; (8008090 <PUM_GetParameter+0x1c>)
 8008088:	f8b3 00b4 	ldrh.w	r0, [r3, #180]	; 0xb4
		}
		default:
			break;
	}
	return ReturnValue;
}
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	20000570 	.word	0x20000570

08008094 <PUM_SetParameter>:
//! \brief      Sets a machine parameter related to the pump module
//! \details    Sets a parameter and stores it in EEprom
//! \param[in]	uint8_t newParameter   (PUM_ULPERPULSEP1 or PUM_ULPERPULSEP2)
//! \param[in]	uint16_t newValue
void PUM_SetParameter (uint8_t newParameter, uint16_t newValue)
{
 8008094:	b508      	push	{r3, lr}
	switch (newParameter)
 8008096:	2827      	cmp	r0, #39	; 0x27
 8008098:	d002      	beq.n	80080a0 <PUM_SetParameter+0xc>
 800809a:	2828      	cmp	r0, #40	; 0x28
 800809c:	d006      	beq.n	80080ac <PUM_SetParameter+0x18>
			break;
		}
		default:
			break;
	}
}
 800809e:	bd08      	pop	{r3, pc}
			PUM[P1].UlPerPulse = newValue;
 80080a0:	4b06      	ldr	r3, [pc, #24]	; (80080bc <PUM_SetParameter+0x28>)
 80080a2:	63d9      	str	r1, [r3, #60]	; 0x3c
			EEP_WriteEEPROM(newParameter, newValue);
 80080a4:	2027      	movs	r0, #39	; 0x27
 80080a6:	f002 febf 	bl	800ae28 <EEP_WriteEEPROM>
			break;
 80080aa:	e7f8      	b.n	800809e <PUM_SetParameter+0xa>
			PUM[P2].UlPerPulse = newValue;
 80080ac:	4b03      	ldr	r3, [pc, #12]	; (80080bc <PUM_SetParameter+0x28>)
 80080ae:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
			EEP_WriteEEPROM(newParameter, newValue);
 80080b2:	2028      	movs	r0, #40	; 0x28
 80080b4:	f002 feb8 	bl	800ae28 <EEP_WriteEEPROM>
}
 80080b8:	e7f1      	b.n	800809e <PUM_SetParameter+0xa>
 80080ba:	bf00      	nop
 80080bc:	20000570 	.word	0x20000570

080080c0 <PUM_CalculateVolume>:
//! \brief      Calculates the volume dispensed
//! \details    Calculates the volume and sets the pump inactive when the volume is reached
//! \param[in]	uint8_t newPump (P1, P2)
void PUM_CalculateVolume (uint8_t newPump)
{
	if (newPump < P3)
 80080c0:	2801      	cmp	r0, #1
 80080c2:	d900      	bls.n	80080c6 <PUM_CalculateVolume+0x6>
 80080c4:	4770      	bx	lr
{
 80080c6:	b530      	push	{r4, r5, lr}
	{
		if (PUM[newPump].Status == sACTIVE)
 80080c8:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
 80080cc:	4a25      	ldr	r2, [pc, #148]	; (8008164 <PUM_CalculateVolume+0xa4>)
 80080ce:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d013      	beq.n	80080fe <PUM_CalculateVolume+0x3e>
					if ((gRecipe[i].UsingCircuit2 == 1) && (newPump == P2))
						gRecipe[i].GetTotalVolume += PUM[newPump].UlPerPulse;
				}
			}
		}
		if (PUM[newPump].GetVolume >= PUM[newPump].SetVolume)
 80080d6:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
 80080da:	4a22      	ldr	r2, [pc, #136]	; (8008164 <PUM_CalculateVolume+0xa4>)
 80080dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80080e0:	699c      	ldr	r4, [r3, #24]
 80080e2:	69da      	ldr	r2, [r3, #28]
 80080e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80080e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e8:	428c      	cmp	r4, r1
 80080ea:	eb72 0303 	sbcs.w	r3, r2, r3
 80080ee:	d305      	bcc.n	80080fc <PUM_CalculateVolume+0x3c>
		{
			PUM[newPump].Status = sINACTIVE;
 80080f0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80080f4:	4b1b      	ldr	r3, [pc, #108]	; (8008164 <PUM_CalculateVolume+0xa4>)
 80080f6:	2204      	movs	r2, #4
 80080f8:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
		}
	}
}
 80080fc:	bd30      	pop	{r4, r5, pc}
			PUM[newPump].GetVolume += PUM[newPump].UlPerPulse;
 80080fe:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
 8008102:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008106:	f04f 0e00 	mov.w	lr, #0
 800810a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800810c:	699a      	ldr	r2, [r3, #24]
 800810e:	69d9      	ldr	r1, [r3, #28]
 8008110:	1912      	adds	r2, r2, r4
 8008112:	f141 0100 	adc.w	r1, r1, #0
 8008116:	619a      	str	r2, [r3, #24]
 8008118:	61d9      	str	r1, [r3, #28]
			for (uint8_t i = 0; i<2;i++)
 800811a:	4b13      	ldr	r3, [pc, #76]	; (8008168 <PUM_CalculateVolume+0xa8>)
 800811c:	f503 7c00 	add.w	ip, r3, #512	; 0x200
 8008120:	e00b      	b.n	800813a <PUM_CalculateVolume+0x7a>
					if ((gRecipe[i].UsingCircuit1 == 1) && (newPump == P1))
 8008122:	b988      	cbnz	r0, 8008148 <PUM_CalculateVolume+0x88>
						gRecipe[i].GetTotalVolume += PUM[newPump].UlPerPulse;
 8008124:	699a      	ldr	r2, [r3, #24]
 8008126:	69dd      	ldr	r5, [r3, #28]
 8008128:	1912      	adds	r2, r2, r4
 800812a:	eb4e 0505 	adc.w	r5, lr, r5
 800812e:	619a      	str	r2, [r3, #24]
 8008130:	61dd      	str	r5, [r3, #28]
			for (uint8_t i = 0; i<2;i++)
 8008132:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008136:	4563      	cmp	r3, ip
 8008138:	d0cd      	beq.n	80080d6 <PUM_CalculateVolume+0x16>
				if (gRecipe[i].Active)
 800813a:	4619      	mov	r1, r3
 800813c:	785a      	ldrb	r2, [r3, #1]
 800813e:	2a00      	cmp	r2, #0
 8008140:	d0f7      	beq.n	8008132 <PUM_CalculateVolume+0x72>
					if ((gRecipe[i].UsingCircuit1 == 1) && (newPump == P1))
 8008142:	791a      	ldrb	r2, [r3, #4]
 8008144:	2a01      	cmp	r2, #1
 8008146:	d0ec      	beq.n	8008122 <PUM_CalculateVolume+0x62>
					if ((gRecipe[i].UsingCircuit2 == 1) && (newPump == P2))
 8008148:	794a      	ldrb	r2, [r1, #5]
 800814a:	2a01      	cmp	r2, #1
 800814c:	d1f1      	bne.n	8008132 <PUM_CalculateVolume+0x72>
 800814e:	2801      	cmp	r0, #1
 8008150:	d1ef      	bne.n	8008132 <PUM_CalculateVolume+0x72>
						gRecipe[i].GetTotalVolume += PUM[newPump].UlPerPulse;
 8008152:	698a      	ldr	r2, [r1, #24]
 8008154:	69cd      	ldr	r5, [r1, #28]
 8008156:	1912      	adds	r2, r2, r4
 8008158:	eb4e 0505 	adc.w	r5, lr, r5
 800815c:	618a      	str	r2, [r1, #24]
 800815e:	61cd      	str	r5, [r1, #28]
 8008160:	e7e7      	b.n	8008132 <PUM_CalculateVolume+0x72>
 8008162:	bf00      	nop
 8008164:	20000570 	.word	0x20000570
 8008168:	20000678 	.word	0x20000678

0800816c <PUM_CalculateFlow>:
//-----------------------------------------------------------------------------
//! \brief      Calculates the time based flow
//! \details    Calculates the flow based on pulse count and pulse time
//! \param[in]	uint8_t newPump (P1, P2)
void PUM_CalculateFlow(uint8_t newPump)
{
 800816c:	b410      	push	{r4}
	//uint16_t Pulses;

	Pulses = PUM[newPump].PulseTime - PUM[newPump].PulseTimeOld;
 800816e:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
 8008172:	4a13      	ldr	r2, [pc, #76]	; (80081c0 <PUM_CalculateFlow+0x54>)
 8008174:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008178:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
 800817c:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
 8008180:	1acb      	subs	r3, r1, r3
 8008182:	b29b      	uxth	r3, r3
 8008184:	4c0f      	ldr	r4, [pc, #60]	; (80081c4 <PUM_CalculateFlow+0x58>)
 8008186:	8023      	strh	r3, [r4, #0]
	PulsesOld = Pulses;
 8008188:	4c0f      	ldr	r4, [pc, #60]	; (80081c8 <PUM_CalculateFlow+0x5c>)
 800818a:	8023      	strh	r3, [r4, #0]
	PUM[newPump].PulseTimeOld = PUM[newPump].PulseTime;
 800818c:	f8a2 1046 	strh.w	r1, [r2, #70]	; 0x46
	if (Pulses > 0)
 8008190:	b19b      	cbz	r3, 80081ba <PUM_CalculateFlow+0x4e>
	{
		//PUM[newPump].Status = sON;
		PUM[newPump].GetFlowTimeBased = PUM[newPump].UlPerPulse * 10000 / Pulses ; //ul/s //Timer is 10kHz, so pulses of 100us
 8008192:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
 8008196:	490a      	ldr	r1, [pc, #40]	; (80081c0 <PUM_CalculateFlow+0x54>)
 8008198:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800819c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800819e:	f242 7110 	movw	r1, #10000	; 0x2710
 80081a2:	fb01 f202 	mul.w	r2, r1, r2
 80081a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081aa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80081ae:	4a04      	ldr	r2, [pc, #16]	; (80081c0 <PUM_CalculateFlow+0x54>)
 80081b0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80081b4:	60c3      	str	r3, [r0, #12]
	else
	{
		//PUM[newPump].Status = sOFF;
		PUM[newPump].GetFlowTimeBased = 0;
	}
}
 80081b6:	bc10      	pop	{r4}
 80081b8:	4770      	bx	lr
		PUM[newPump].GetFlowTimeBased = 0;
 80081ba:	2300      	movs	r3, #0
 80081bc:	e7f5      	b.n	80081aa <PUM_CalculateFlow+0x3e>
 80081be:	bf00      	nop
 80081c0:	20000570 	.word	0x20000570
 80081c4:	20000662 	.word	0x20000662
 80081c8:	20000664 	.word	0x20000664

080081cc <PUM_HandlePressureSensors>:
//-----------------------------------------------------------------------------
//! \brief      Gets the pressure
//! \details    Retrieves the pressure
//! \params		None
void PUM_HandlePressureSensors (void)
{
 80081cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint8_t Counter = 0;
	//static uint16_t PS1Values[10];
	//static uint16_t PS2Values[10];
	uint64_t PS1Value = 0, PS2Value = 0;
	if (Counter >= 100) Counter = 0;
 80081ce:	4b22      	ldr	r3, [pc, #136]	; (8008258 <PUM_HandlePressureSensors+0x8c>)
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	2b63      	cmp	r3, #99	; 0x63
 80081d4:	d902      	bls.n	80081dc <PUM_HandlePressureSensors+0x10>
 80081d6:	4b20      	ldr	r3, [pc, #128]	; (8008258 <PUM_HandlePressureSensors+0x8c>)
 80081d8:	2200      	movs	r2, #0
 80081da:	701a      	strb	r2, [r3, #0]
	PS1Values[Counter] = ANA_GetSensorValue(ADC_PS1);
 80081dc:	2003      	movs	r0, #3
 80081de:	f7fe ff93 	bl	8007108 <ANA_GetSensorValue>
 80081e2:	4d1e      	ldr	r5, [pc, #120]	; (800825c <PUM_HandlePressureSensors+0x90>)
 80081e4:	4f1c      	ldr	r7, [pc, #112]	; (8008258 <PUM_HandlePressureSensors+0x8c>)
 80081e6:	783c      	ldrb	r4, [r7, #0]
 80081e8:	f7fe fb7a 	bl	80068e0 <__aeabi_f2uiz>
 80081ec:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
	PS2Values[Counter] = ANA_GetSensorValue(ADC_PS2);
 80081f0:	2002      	movs	r0, #2
 80081f2:	f7fe ff89 	bl	8007108 <ANA_GetSensorValue>
 80081f6:	783e      	ldrb	r6, [r7, #0]
 80081f8:	4c19      	ldr	r4, [pc, #100]	; (8008260 <PUM_HandlePressureSensors+0x94>)
 80081fa:	f7fe fb71 	bl	80068e0 <__aeabi_f2uiz>
 80081fe:	f824 0016 	strh.w	r0, [r4, r6, lsl #1]
	Counter ++;
 8008202:	3601      	adds	r6, #1
 8008204:	703e      	strb	r6, [r7, #0]
	for (uint8_t i = 0; i<100 ; i ++)
 8008206:	1eaa      	subs	r2, r5, #2
 8008208:	f1a4 0c02 	sub.w	ip, r4, #2
 800820c:	f105 0ec6 	add.w	lr, r5, #198	; 0xc6
	uint64_t PS1Value = 0, PS2Value = 0;
 8008210:	2400      	movs	r4, #0
 8008212:	4625      	mov	r5, r4
 8008214:	4620      	mov	r0, r4
 8008216:	4621      	mov	r1, r4
	{
		PS1Value += PS1Values[i];
 8008218:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800821c:	1818      	adds	r0, r3, r0
 800821e:	f141 0100 	adc.w	r1, r1, #0
		PS2Value += PS2Values[i];
 8008222:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
 8008226:	191b      	adds	r3, r3, r4
 8008228:	461c      	mov	r4, r3
 800822a:	f145 0500 	adc.w	r5, r5, #0
	for (uint8_t i = 0; i<100 ; i ++)
 800822e:	4572      	cmp	r2, lr
 8008230:	d1f2      	bne.n	8008218 <PUM_HandlePressureSensors+0x4c>
	}
	if (DUMMYMODE) return; //Pressure is simulated in dummy mode
 8008232:	4b0c      	ldr	r3, [pc, #48]	; (8008264 <PUM_HandlePressureSensors+0x98>)
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	b96b      	cbnz	r3, 8008254 <PUM_HandlePressureSensors+0x88>
	PUM[P1].GetPressure = (uint32_t) (PS1Value / 100);
 8008238:	4e0b      	ldr	r6, [pc, #44]	; (8008268 <PUM_HandlePressureSensors+0x9c>)
 800823a:	2264      	movs	r2, #100	; 0x64
 800823c:	2300      	movs	r3, #0
 800823e:	f7fe fb6f 	bl	8006920 <__aeabi_uldivmod>
 8008242:	6170      	str	r0, [r6, #20]
	PUM[P2].GetPressure = (uint32_t) (PS2Value / 100);
 8008244:	2264      	movs	r2, #100	; 0x64
 8008246:	2300      	movs	r3, #0
 8008248:	4620      	mov	r0, r4
 800824a:	4629      	mov	r1, r5
 800824c:	f7fe fb68 	bl	8006920 <__aeabi_uldivmod>
 8008250:	f8c6 008c 	str.w	r0, [r6, #140]	; 0x8c
}
 8008254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008256:	bf00      	nop
 8008258:	200003c9 	.word	0x200003c9
 800825c:	200003dc 	.word	0x200003dc
 8008260:	200004a4 	.word	0x200004a4
 8008264:	20000c48 	.word	0x20000c48
 8008268:	20000570 	.word	0x20000570

0800826c <PUM_HandleFlowMeters>:
//! \params		None
void PUM_HandleFlowMeters (void)
{
	static uint8_t TickTime;
	static uint32_t NoFlowCounter[2];
	if (DUMMYMODE) return; //Flow is simulated in dummy mode
 800826c:	4b1f      	ldr	r3, [pc, #124]	; (80082ec <PUM_HandleFlowMeters+0x80>)
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d139      	bne.n	80082e8 <PUM_HandleFlowMeters+0x7c>

	TickTime ++;
 8008274:	4b1e      	ldr	r3, [pc, #120]	; (80082f0 <PUM_HandleFlowMeters+0x84>)
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	3301      	adds	r3, #1
 800827a:	b2db      	uxtb	r3, r3
	if (TickTime < 9) return;
 800827c:	2b08      	cmp	r3, #8
 800827e:	d90e      	bls.n	800829e <PUM_HandleFlowMeters+0x32>
{
 8008280:	b5f0      	push	{r4, r5, r6, r7, lr}
	TickTime = 0;
 8008282:	4b1b      	ldr	r3, [pc, #108]	; (80082f0 <PUM_HandleFlowMeters+0x84>)
 8008284:	2200      	movs	r2, #0
 8008286:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = P1; i <= P2; i++)
 8008288:	4b1a      	ldr	r3, [pc, #104]	; (80082f4 <PUM_HandleFlowMeters+0x88>)
 800828a:	491b      	ldr	r1, [pc, #108]	; (80082f8 <PUM_HandleFlowMeters+0x8c>)
 800828c:	f103 0cf0 	add.w	ip, r3, #240	; 0xf0
	{
		PUM[i].GetFlow = PUM[i].Pulses * PUM[i].UlPerPulse; //Ul/s x 60 = Ul / min
		PUM[i].Pulses = 0;
 8008290:	4614      	mov	r4, r2
			//PUM[i].Status = sOFF;
			PUM[i].GetFlowTimeBased = 0;
		}
		if (PUM[i].GetFlowTimeBased == 0)
		{
			if (NoFlowCounter[i] < 0xffff) NoFlowCounter[i] ++;
 8008292:	f64f 75fe 	movw	r5, #65534	; 0xfffe
			if (NoFlowCounter[i] > NOFLOWCUTOFFTIME * 10)
 8008296:	f644 6e20 	movw	lr, #20000	; 0x4e20
			{
				PUM[i].Status = sUNITERROR;
 800829a:	2614      	movs	r6, #20
 800829c:	e009      	b.n	80082b2 <PUM_HandleFlowMeters+0x46>
	TickTime ++;
 800829e:	4a14      	ldr	r2, [pc, #80]	; (80082f0 <PUM_HandleFlowMeters+0x84>)
 80082a0:	7013      	strb	r3, [r2, #0]
 80082a2:	4770      	bx	lr
		if (PUM[i].GetFlowTimeBased == 0)
 80082a4:	68c2      	ldr	r2, [r0, #12]
 80082a6:	b1a2      	cbz	r2, 80082d2 <PUM_HandleFlowMeters+0x66>
			}
		}
		else
		{
			NoFlowCounter[i] = 0;
 80082a8:	600c      	str	r4, [r1, #0]
	for (uint8_t i = P1; i <= P2; i++)
 80082aa:	3378      	adds	r3, #120	; 0x78
 80082ac:	3104      	adds	r1, #4
 80082ae:	4563      	cmp	r3, ip
 80082b0:	d019      	beq.n	80082e6 <PUM_HandleFlowMeters+0x7a>
		PUM[i].GetFlow = PUM[i].Pulses * PUM[i].UlPerPulse; //Ul/s x 60 = Ul / min
 80082b2:	4618      	mov	r0, r3
 80082b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082b6:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 80082b8:	fb07 f202 	mul.w	r2, r7, r2
 80082bc:	609a      	str	r2, [r3, #8]
		PUM[i].Pulses = 0;
 80082be:	641c      	str	r4, [r3, #64]	; 0x40
		if ((PUM[i].GetFlow == 0) && (PUM[i].PulseTimeOld == PUM[i].PulseTime))
 80082c0:	2a00      	cmp	r2, #0
 80082c2:	d1ef      	bne.n	80082a4 <PUM_HandleFlowMeters+0x38>
 80082c4:	f8b3 7046 	ldrh.w	r7, [r3, #70]	; 0x46
 80082c8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80082cc:	4297      	cmp	r7, r2
 80082ce:	d1e9      	bne.n	80082a4 <PUM_HandleFlowMeters+0x38>
			PUM[i].GetFlowTimeBased = 0;
 80082d0:	60dc      	str	r4, [r3, #12]
			if (NoFlowCounter[i] < 0xffff) NoFlowCounter[i] ++;
 80082d2:	680a      	ldr	r2, [r1, #0]
 80082d4:	42aa      	cmp	r2, r5
 80082d6:	bf9c      	itt	ls
 80082d8:	3201      	addls	r2, #1
 80082da:	600a      	strls	r2, [r1, #0]
			if (NoFlowCounter[i] > NOFLOWCUTOFFTIME * 10)
 80082dc:	680a      	ldr	r2, [r1, #0]
 80082de:	4572      	cmp	r2, lr
 80082e0:	d9e3      	bls.n	80082aa <PUM_HandleFlowMeters+0x3e>
				PUM[i].Status = sUNITERROR;
 80082e2:	7006      	strb	r6, [r0, #0]
 80082e4:	e7e1      	b.n	80082aa <PUM_HandleFlowMeters+0x3e>
		}
	}


}
 80082e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	20000c48 	.word	0x20000c48
 80082f0:	20000670 	.word	0x20000670
 80082f4:	20000570 	.word	0x20000570
 80082f8:	200003d0 	.word	0x200003d0

080082fc <PUM_Init>:
//-----------------------------------------------------------------------------
//! \brief        Initializes the pumps module
//! \details      Sets parameters for the PID control
//! \params       None
void PUM_Init(void)
{
 80082fc:	b508      	push	{r3, lr}
	PUM[P1].UlPerPulse = EEP_ReadEEPROM(PUM_ULPERPULSEP1);
 80082fe:	2027      	movs	r0, #39	; 0x27
 8008300:	f002 fda7 	bl	800ae52 <EEP_ReadEEPROM>
	if (PUM[P1].UlPerPulse == 0)
 8008304:	b178      	cbz	r0, 8008326 <PUM_Init+0x2a>
	PUM[P1].UlPerPulse = EEP_ReadEEPROM(PUM_ULPERPULSEP1);
 8008306:	4a10      	ldr	r2, [pc, #64]	; (8008348 <PUM_Init+0x4c>)
 8008308:	63d0      	str	r0, [r2, #60]	; 0x3c
	{
		PUM[P1].UlPerPulse = PUM_ULPERPULSE;
		EEP_WriteEEPROM(PUM_ULPERPULSEP1, PUM_ULPERPULSE);
	}
	PUM[P2].UlPerPulse = EEP_ReadEEPROM(PUM_ULPERPULSEP2);
 800830a:	2028      	movs	r0, #40	; 0x28
 800830c:	f002 fda1 	bl	800ae52 <EEP_ReadEEPROM>
	if (PUM[P2].UlPerPulse == 0)
 8008310:	b188      	cbz	r0, 8008336 <PUM_Init+0x3a>
	PUM[P2].UlPerPulse = EEP_ReadEEPROM(PUM_ULPERPULSEP2);
 8008312:	4a0d      	ldr	r2, [pc, #52]	; (8008348 <PUM_Init+0x4c>)
 8008314:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
	{
		PUM[P2].UlPerPulse = PUM_ULPERPULSE;
		EEP_WriteEEPROM(PUM_ULPERPULSEP2, PUM_ULPERPULSE);
	}
	//Set control type to phase cutting
	PUM[P1].ControlType = 1;
 8008318:	4b0b      	ldr	r3, [pc, #44]	; (8008348 <PUM_Init+0x4c>)
 800831a:	2201      	movs	r2, #1
 800831c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	PUM[P2].ControlType = 1;
 8008320:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
}
 8008324:	bd08      	pop	{r3, pc}
		PUM[P1].UlPerPulse = PUM_ULPERPULSE;
 8008326:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800832a:	4b07      	ldr	r3, [pc, #28]	; (8008348 <PUM_Init+0x4c>)
 800832c:	63d9      	str	r1, [r3, #60]	; 0x3c
		EEP_WriteEEPROM(PUM_ULPERPULSEP1, PUM_ULPERPULSE);
 800832e:	2027      	movs	r0, #39	; 0x27
 8008330:	f002 fd7a 	bl	800ae28 <EEP_WriteEEPROM>
 8008334:	e7e9      	b.n	800830a <PUM_Init+0xe>
		PUM[P2].UlPerPulse = PUM_ULPERPULSE;
 8008336:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800833a:	4b03      	ldr	r3, [pc, #12]	; (8008348 <PUM_Init+0x4c>)
 800833c:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
		EEP_WriteEEPROM(PUM_ULPERPULSEP2, PUM_ULPERPULSE);
 8008340:	2028      	movs	r0, #40	; 0x28
 8008342:	f002 fd71 	bl	800ae28 <EEP_WriteEEPROM>
 8008346:	e7e7      	b.n	8008318 <PUM_Init+0x1c>
 8008348:	20000570 	.word	0x20000570

0800834c <PUM_SetControl>:
//! \param[in]    uint8_t newPump (0 - 1)
//! \param[in]    uint8_t newPercentage (0 - 100)
uint8_t PUM_SetControl (uint8_t newPump, uint8_t newPercentage)
{
	uint8_t ReturnValue = TASK_READY;
	PUM[newPump].Percentage = newPercentage;
 800834c:	4a1a      	ldr	r2, [pc, #104]	; (80083b8 <PUM_SetControl+0x6c>)
 800834e:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
 8008352:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008356:	7059      	strb	r1, [r3, #1]
	if (PUM[P2].Percentage > PMax) PMax = PUM[P2].Percentage;
 8008358:	f892 3079 	ldrb.w	r3, [r2, #121]	; 0x79
 800835c:	4a17      	ldr	r2, [pc, #92]	; (80083bc <PUM_SetControl+0x70>)
 800835e:	7812      	ldrb	r2, [r2, #0]
 8008360:	429a      	cmp	r2, r3
 8008362:	bf3c      	itt	cc
 8008364:	4a15      	ldrcc	r2, [pc, #84]	; (80083bc <PUM_SetControl+0x70>)
 8008366:	7013      	strbcc	r3, [r2, #0]
	if ((newPercentage >= 20) && (newPercentage <= 100) && (newPump < 2))
 8008368:	f1a1 0314 	sub.w	r3, r1, #20
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b50      	cmp	r3, #80	; 0x50
 8008370:	d801      	bhi.n	8008376 <PUM_SetControl+0x2a>
 8008372:	2801      	cmp	r0, #1
 8008374:	d90a      	bls.n	800838c <PUM_SetControl+0x40>
	{
		PUM[newPump].Percentage = newPercentage;
		ReturnValue = TASK_READY;
	}
	else if ((newPercentage > 0)&&(newPercentage <= 40)&&(newPump==0))
 8008376:	3901      	subs	r1, #1
 8008378:	b2c9      	uxtb	r1, r1
 800837a:	2927      	cmp	r1, #39	; 0x27
 800837c:	d804      	bhi.n	8008388 <PUM_SetControl+0x3c>
 800837e:	b938      	cbnz	r0, 8008390 <PUM_SetControl+0x44>
	{
		PUM[newPump].Percentage = 30;//newPercentage = 40;
 8008380:	4b0d      	ldr	r3, [pc, #52]	; (80083b8 <PUM_SetControl+0x6c>)
 8008382:	221e      	movs	r2, #30
 8008384:	705a      	strb	r2, [r3, #1]
 8008386:	e001      	b.n	800838c <PUM_SetControl+0x40>
	}
	else if ((newPercentage > 0)&&(newPercentage <= 65)&&(newPump==1)&&(PUM[newPump].GetFlow < 100))
 8008388:	2940      	cmp	r1, #64	; 0x40
 800838a:	d901      	bls.n	8008390 <PUM_SetControl+0x44>
	else if ((newPercentage > 0)&&(newPercentage <= 50)&&(newPump==1)&&(PUM[newPump].GetFlow >= 100))
	{
		PUM[newPump].Percentage = 50;//newPercentage = 40;
	}
	return ReturnValue;
}
 800838c:	2001      	movs	r0, #1
 800838e:	4770      	bx	lr
	else if ((newPercentage > 0)&&(newPercentage <= 65)&&(newPump==1)&&(PUM[newPump].GetFlow < 100))
 8008390:	2801      	cmp	r0, #1
 8008392:	d1fb      	bne.n	800838c <PUM_SetControl+0x40>
 8008394:	4b08      	ldr	r3, [pc, #32]	; (80083b8 <PUM_SetControl+0x6c>)
 8008396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800839a:	2b63      	cmp	r3, #99	; 0x63
 800839c:	d804      	bhi.n	80083a8 <PUM_SetControl+0x5c>
		PUM[newPump].Percentage = 65;//newPercentage = 40;
 800839e:	4b06      	ldr	r3, [pc, #24]	; (80083b8 <PUM_SetControl+0x6c>)
 80083a0:	2241      	movs	r2, #65	; 0x41
 80083a2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	return ReturnValue;
 80083a6:	e7f1      	b.n	800838c <PUM_SetControl+0x40>
	else if ((newPercentage > 0)&&(newPercentage <= 50)&&(newPump==1)&&(PUM[newPump].GetFlow >= 100))
 80083a8:	2931      	cmp	r1, #49	; 0x31
 80083aa:	d8ef      	bhi.n	800838c <PUM_SetControl+0x40>
		PUM[newPump].Percentage = 50;//newPercentage = 40;
 80083ac:	4b02      	ldr	r3, [pc, #8]	; (80083b8 <PUM_SetControl+0x6c>)
 80083ae:	2232      	movs	r2, #50	; 0x32
 80083b0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 80083b4:	e7ea      	b.n	800838c <PUM_SetControl+0x40>
 80083b6:	bf00      	nop
 80083b8:	20000570 	.word	0x20000570
 80083bc:	200003d8 	.word	0x200003d8

080083c0 <PUM_HandlePIDPressure>:
{
 80083c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c4:	b085      	sub	sp, #20
	for (uint8_t i = 0; i < 2; i++)
 80083c6:	4c56      	ldr	r4, [pc, #344]	; (8008520 <PUM_HandlePIDPressure+0x160>)
{
 80083c8:	2600      	movs	r6, #0
				PUM[i].ErrorP_Pump = 0;
 80083ca:	2700      	movs	r7, #0
				PUM_SetControl (i, PUM[i].PumpControl/100);
 80083cc:	f8df a154 	ldr.w	sl, [pc, #340]	; 8008524 <PUM_HandlePIDPressure+0x164>
				if (PUM[i].PumpControl > 10000)
 80083d0:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8008528 <PUM_HandlePIDPressure+0x168>
 80083d4:	e011      	b.n	80083fa <PUM_HandlePIDPressure+0x3a>
				PUM_SetControl (i,0);
 80083d6:	2100      	movs	r1, #0
 80083d8:	4640      	mov	r0, r8
 80083da:	f7ff ffb7 	bl	800834c <PUM_SetControl>
				PUM[i].ErrorP_Pump = 0;
 80083de:	65ef      	str	r7, [r5, #92]	; 0x5c
				PUM[i].ErrorP_Pump_Old = 0;
 80083e0:	65af      	str	r7, [r5, #88]	; 0x58
				PUM[i].ErrorD_Pump = 0;
 80083e2:	666f      	str	r7, [r5, #100]	; 0x64
				PUM[i].ErrorI_Pump = 0;
 80083e4:	662f      	str	r7, [r5, #96]	; 0x60
				PUM[i].PID_Pump = 0;
 80083e6:	66af      	str	r7, [r5, #104]	; 0x68
				PUM[i].PumpControl = 0;
 80083e8:	66ef      	str	r7, [r5, #108]	; 0x6c
				PUM[i].PumpControlOld = 0;
 80083ea:	672f      	str	r7, [r5, #112]	; 0x70
				PUM[i].Percentage = 0;
 80083ec:	2300      	movs	r3, #0
 80083ee:	706b      	strb	r3, [r5, #1]
	for (uint8_t i = 0; i < 2; i++)
 80083f0:	3601      	adds	r6, #1
 80083f2:	3478      	adds	r4, #120	; 0x78
 80083f4:	2e02      	cmp	r6, #2
 80083f6:	f000 808f 	beq.w	8008518 <PUM_HandlePIDPressure+0x158>
 80083fa:	fa5f f886 	uxtb.w	r8, r6
		if ((PUM[i].SetControlType == PUM_PRESSURECONTROL) || (PUM[i].SetControlType == PUM_BOTHCONTROL)) //Only use if pressure control
 80083fe:	4625      	mov	r5, r4
 8008400:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8008404:	3b02      	subs	r3, #2
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b01      	cmp	r3, #1
 800840a:	d8f1      	bhi.n	80083f0 <PUM_HandlePIDPressure+0x30>
			if (PUM[i].GetPressure < PUM[i].SetPressure)
 800840c:	f8d4 b014 	ldr.w	fp, [r4, #20]
 8008410:	6920      	ldr	r0, [r4, #16]
 8008412:	4583      	cmp	fp, r0
 8008414:	d205      	bcs.n	8008422 <PUM_HandlePIDPressure+0x62>
					PUM[i].RegulateFlow = 0;
 8008416:	2300      	movs	r3, #0
 8008418:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
					PUM[i].RegulatePressure = 1;
 800841c:	2301      	movs	r3, #1
 800841e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if ((PUM[i].Status == sINACTIVE) || (PUM[i].Status == sUNITERROR) || (PUM[i].SetPressure == 0) || ((PUM[i].RegulatePressure == 0) && (PUM[i].RegulateFlow == 0)))
 8008422:	782b      	ldrb	r3, [r5, #0]
 8008424:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8008428:	2b04      	cmp	r3, #4
 800842a:	d0d4      	beq.n	80083d6 <PUM_HandlePIDPressure+0x16>
 800842c:	2800      	cmp	r0, #0
 800842e:	d0d2      	beq.n	80083d6 <PUM_HandlePIDPressure+0x16>
 8008430:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
 8008434:	b923      	cbnz	r3, 8008440 <PUM_HandlePIDPressure+0x80>
 8008436:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1d8      	bne.n	80083f0 <PUM_HandlePIDPressure+0x30>
 800843e:	e7ca      	b.n	80083d6 <PUM_HandlePIDPressure+0x16>
			else if (PUM[i].RegulatePressure == 1)
 8008440:	2b01      	cmp	r3, #1
 8008442:	d1d5      	bne.n	80083f0 <PUM_HandlePIDPressure+0x30>
				PUM[i].ErrorP_Pump= (float)(PUM[i].SetPressure) - (float)(PUM[i].GetPressure); //get error and bring into control range
 8008444:	f7fe f82e 	bl	80064a4 <__aeabi_ui2f>
 8008448:	9000      	str	r0, [sp, #0]
 800844a:	4658      	mov	r0, fp
 800844c:	f7fe f82a 	bl	80064a4 <__aeabi_ui2f>
 8008450:	4601      	mov	r1, r0
 8008452:	9800      	ldr	r0, [sp, #0]
 8008454:	f7fd ff74 	bl	8006340 <__aeabi_fsub>
 8008458:	4683      	mov	fp, r0
 800845a:	65e8      	str	r0, [r5, #92]	; 0x5c
				PUM[i].ErrorI_Pump= PUM[i].ErrorI_Pump + (PUM[i].ErrorP_Pump);//bring into control range
 800845c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800845e:	f7fd ff71 	bl	8006344 <__addsf3>
 8008462:	9002      	str	r0, [sp, #8]
 8008464:	6628      	str	r0, [r5, #96]	; 0x60
				PUM[i].ErrorD_Pump= (PUM[i].ErrorP_Pump - PUM[i].ErrorP_Pump_Old); //bring into control range
 8008466:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8008468:	4658      	mov	r0, fp
 800846a:	f7fd ff69 	bl	8006340 <__aeabi_fsub>
 800846e:	9003      	str	r0, [sp, #12]
 8008470:	6668      	str	r0, [r5, #100]	; 0x64
				PUM[i].ErrorP_Pump_Old = PUM[i].ErrorP_Pump;
 8008472:	f8c5 b058 	str.w	fp, [r5, #88]	; 0x58
				PUM[i].P_Pump = SetPressureP; //100.0;
 8008476:	4b2d      	ldr	r3, [pc, #180]	; (800852c <PUM_HandlePIDPressure+0x16c>)
 8008478:	6819      	ldr	r1, [r3, #0]
 800847a:	64e9      	str	r1, [r5, #76]	; 0x4c
				PUM[i].I_Pump = SetPressureI; //0.5;
 800847c:	4b2c      	ldr	r3, [pc, #176]	; (8008530 <PUM_HandlePIDPressure+0x170>)
 800847e:	f8d3 c000 	ldr.w	ip, [r3]
 8008482:	f8cd c000 	str.w	ip, [sp]
 8008486:	f8c5 c050 	str.w	ip, [r5, #80]	; 0x50
				PUM[i].D_Pump = SetPressureD; //0.5;
 800848a:	4b2a      	ldr	r3, [pc, #168]	; (8008534 <PUM_HandlePIDPressure+0x174>)
 800848c:	f8d3 e000 	ldr.w	lr, [r3]
 8008490:	f8cd e004 	str.w	lr, [sp, #4]
 8008494:	f8c5 e054 	str.w	lr, [r5, #84]	; 0x54
				PUM[i].PID_Pump = PUM[i].ErrorP_Pump * PUM[i].P_Pump; // Calculate P
 8008498:	4658      	mov	r0, fp
 800849a:	f7fe f85b 	bl	8006554 <__aeabi_fmul>
 800849e:	4683      	mov	fp, r0
				PUM[i].PID_Pump = PUM[i].PID_Pump + ((PUM[i].ErrorI_Pump * PUM[i].I_Pump)); //Calculate I and add to P
 80084a0:	9900      	ldr	r1, [sp, #0]
 80084a2:	9802      	ldr	r0, [sp, #8]
 80084a4:	f7fe f856 	bl	8006554 <__aeabi_fmul>
 80084a8:	4601      	mov	r1, r0
 80084aa:	4658      	mov	r0, fp
 80084ac:	f7fd ff4a 	bl	8006344 <__addsf3>
 80084b0:	4683      	mov	fp, r0
				PUM[i].PID_Pump = PUM[i].PID_Pump + (((PUM[i].ErrorD_Pump * PUM[i].D_Pump))); // Calculate D and add to PI
 80084b2:	9901      	ldr	r1, [sp, #4]
 80084b4:	9803      	ldr	r0, [sp, #12]
 80084b6:	f7fe f84d 	bl	8006554 <__aeabi_fmul>
 80084ba:	4601      	mov	r1, r0
 80084bc:	4658      	mov	r0, fp
 80084be:	f7fd ff41 	bl	8006344 <__addsf3>
 80084c2:	66a8      	str	r0, [r5, #104]	; 0x68
				PUM[i].PumpControl = PUM[i].PID_Pump;// + (PumpPreset * PresetScale);
 80084c4:	66e8      	str	r0, [r5, #108]	; 0x6c
				if (PUM[i].PID_Pump < 0)
 80084c6:	4639      	mov	r1, r7
 80084c8:	f7fe f9e2 	bl	8006890 <__aeabi_fcmplt>
 80084cc:	b9e0      	cbnz	r0, 8008508 <PUM_HandlePIDPressure+0x148>
				if (PUM[i].PumpControlOld == 0)
 80084ce:	4639      	mov	r1, r7
 80084d0:	6f28      	ldr	r0, [r5, #112]	; 0x70
 80084d2:	f7fe f9d3 	bl	800687c <__aeabi_fcmpeq>
 80084d6:	b108      	cbz	r0, 80084dc <PUM_HandlePIDPressure+0x11c>
					PUM[i].PumpControlOld = PUM[i].PumpControl;
 80084d8:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80084da:	672b      	str	r3, [r5, #112]	; 0x70
				if (PUM[i].PumpControl > 10000)
 80084dc:	4649      	mov	r1, r9
 80084de:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80084e0:	f7fe f9f4 	bl	80068cc <__aeabi_fcmpgt>
 80084e4:	b108      	cbz	r0, 80084ea <PUM_HandlePIDPressure+0x12a>
					PUM[i].PumpControl = 10000;
 80084e6:	f8c5 906c 	str.w	r9, [r5, #108]	; 0x6c
				PUM[i].GetVolumeOld = PUM[i].GetVolume;
 80084ea:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
 80084ee:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
				PUM_SetControl (i, PUM[i].PumpControl/100);
 80084f2:	4651      	mov	r1, sl
 80084f4:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80084f6:	f7fe f8e1 	bl	80066bc <__aeabi_fdiv>
 80084fa:	f7fe f9f1 	bl	80068e0 <__aeabi_f2uiz>
 80084fe:	b2c1      	uxtb	r1, r0
 8008500:	4640      	mov	r0, r8
 8008502:	f7ff ff23 	bl	800834c <PUM_SetControl>
 8008506:	e773      	b.n	80083f0 <PUM_HandlePIDPressure+0x30>
					PUM[i].PumpControl = 0;
 8008508:	66ef      	str	r7, [r5, #108]	; 0x6c
				if (PUM[i].PumpControlOld == 0)
 800850a:	4639      	mov	r1, r7
 800850c:	6f28      	ldr	r0, [r5, #112]	; 0x70
 800850e:	f7fe f9b5 	bl	800687c <__aeabi_fcmpeq>
 8008512:	2800      	cmp	r0, #0
 8008514:	d1e0      	bne.n	80084d8 <PUM_HandlePIDPressure+0x118>
 8008516:	e7e8      	b.n	80084ea <PUM_HandlePIDPressure+0x12a>
}
 8008518:	b005      	add	sp, #20
 800851a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851e:	bf00      	nop
 8008520:	20000570 	.word	0x20000570
 8008524:	42c80000 	.word	0x42c80000
 8008528:	461c4000 	.word	0x461c4000
 800852c:	20000054 	.word	0x20000054
 8008530:	20000050 	.word	0x20000050
 8008534:	2000066c 	.word	0x2000066c

08008538 <PUM_HandlePIDFlow>:
{
 8008538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	b087      	sub	sp, #28
	for (uint8_t i = 0; i < 2; i++)
 800853e:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 800873c <PUM_HandlePIDFlow+0x204>
 8008542:	4f7f      	ldr	r7, [pc, #508]	; (8008740 <PUM_HandlePIDFlow+0x208>)
{
 8008544:	f04f 0a01 	mov.w	sl, #1
 8008548:	f04f 0900 	mov.w	r9, #0
				PUM[i].ErrorP_Pump = 0;
 800854c:	f04f 0b00 	mov.w	fp, #0
 8008550:	e0db      	b.n	800870a <PUM_HandlePIDFlow+0x1d2>
			else if (PUM[i].RegulateFlow == 1)
 8008552:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8008556:	2b01      	cmp	r3, #1
 8008558:	f040 80cb 	bne.w	80086f2 <PUM_HandlePIDFlow+0x1ba>
				PUM[i].ErrorP_Pump= (float)(PUM[i].SetFlow) - (float)(GetFlow); //get error and bring into control range
 800855c:	f7fd ffa2 	bl	80064a4 <__aeabi_ui2f>
 8008560:	9001      	str	r0, [sp, #4]
 8008562:	68e0      	ldr	r0, [r4, #12]
 8008564:	f7fd ff9e 	bl	80064a4 <__aeabi_ui2f>
 8008568:	4601      	mov	r1, r0
 800856a:	9801      	ldr	r0, [sp, #4]
 800856c:	f7fd fee8 	bl	8006340 <__aeabi_fsub>
 8008570:	9001      	str	r0, [sp, #4]
 8008572:	65e0      	str	r0, [r4, #92]	; 0x5c
				PUM[i].ErrorI_Pump= PUM[i].ErrorI_Pump + (PUM[i].ErrorP_Pump);//bring into control range
 8008574:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8008576:	f7fd fee5 	bl	8006344 <__addsf3>
 800857a:	9003      	str	r0, [sp, #12]
 800857c:	6620      	str	r0, [r4, #96]	; 0x60
				PUM[i].ErrorD_Pump= (PUM[i].ErrorP_Pump - PUM[i].ErrorP_Pump_Old); //bring into control range
 800857e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008580:	9801      	ldr	r0, [sp, #4]
 8008582:	f7fd fedd 	bl	8006340 <__aeabi_fsub>
 8008586:	9004      	str	r0, [sp, #16]
 8008588:	6660      	str	r0, [r4, #100]	; 0x64
				PUM[i].ErrorP_Pump_Old = PUM[i].ErrorP_Pump;
 800858a:	9a01      	ldr	r2, [sp, #4]
 800858c:	65a2      	str	r2, [r4, #88]	; 0x58
				PUM[i].P_Pump = SetP; //100.0;
 800858e:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 8008744 <PUM_HandlePIDFlow+0x20c>
 8008592:	f8dc 1000 	ldr.w	r1, [ip]
 8008596:	64e1      	str	r1, [r4, #76]	; 0x4c
				PUM[i].I_Pump = SetI; //0.5;
 8008598:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8008748 <PUM_HandlePIDFlow+0x210>
 800859c:	f8dc c000 	ldr.w	ip, [ip]
 80085a0:	f8cd c004 	str.w	ip, [sp, #4]
 80085a4:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
				PUM[i].D_Pump = SetD; //0.5;
 80085a8:	4b68      	ldr	r3, [pc, #416]	; (800874c <PUM_HandlePIDFlow+0x214>)
 80085aa:	f8d3 e000 	ldr.w	lr, [r3]
 80085ae:	f8cd e008 	str.w	lr, [sp, #8]
 80085b2:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
				PUM[i].PID_Pump = (PUM[i].ErrorP_Pump * PUM[i].P_Pump); // Calculate P;
 80085b6:	4610      	mov	r0, r2
 80085b8:	f7fd ffcc 	bl	8006554 <__aeabi_fmul>
 80085bc:	9005      	str	r0, [sp, #20]
				PUM[i].PID_Pump = PUM[i].PID_Pump + ((PUM[i].ErrorI_Pump * PUM[i].I_Pump)); //Calculate I and add to P
 80085be:	9901      	ldr	r1, [sp, #4]
 80085c0:	9803      	ldr	r0, [sp, #12]
 80085c2:	f7fd ffc7 	bl	8006554 <__aeabi_fmul>
 80085c6:	4601      	mov	r1, r0
 80085c8:	9805      	ldr	r0, [sp, #20]
 80085ca:	f7fd febb 	bl	8006344 <__addsf3>
 80085ce:	9001      	str	r0, [sp, #4]
				PUM[i].PID_Pump = PUM[i].PID_Pump + (((PUM[i].ErrorD_Pump * PUM[i].D_Pump))); // Calculate D and add to PI
 80085d0:	9902      	ldr	r1, [sp, #8]
 80085d2:	9804      	ldr	r0, [sp, #16]
 80085d4:	f7fd ffbe 	bl	8006554 <__aeabi_fmul>
 80085d8:	4601      	mov	r1, r0
 80085da:	9801      	ldr	r0, [sp, #4]
 80085dc:	f7fd feb2 	bl	8006344 <__addsf3>
 80085e0:	9001      	str	r0, [sp, #4]
 80085e2:	66a0      	str	r0, [r4, #104]	; 0x68
				if (PUM[i].PID_Pump < 10)
 80085e4:	495a      	ldr	r1, [pc, #360]	; (8008750 <PUM_HandlePIDFlow+0x218>)
 80085e6:	f7fe f953 	bl	8006890 <__aeabi_fcmplt>
 80085ea:	2800      	cmp	r0, #0
 80085ec:	d154      	bne.n	8008698 <PUM_HandlePIDFlow+0x160>
					PUM[i].PumpControl = PUM[i].PID_Pump + PUM_Offset;
 80085ee:	4b59      	ldr	r3, [pc, #356]	; (8008754 <PUM_HandlePIDFlow+0x21c>)
 80085f0:	8818      	ldrh	r0, [r3, #0]
 80085f2:	f7fd ff5b 	bl	80064ac <__aeabi_i2f>
 80085f6:	9901      	ldr	r1, [sp, #4]
 80085f8:	f7fd fea4 	bl	8006344 <__addsf3>
 80085fc:	9001      	str	r0, [sp, #4]
				if (PUM[i].PumpControl > 10000)
 80085fe:	4956      	ldr	r1, [pc, #344]	; (8008758 <PUM_HandlePIDFlow+0x220>)
 8008600:	f7fe f964 	bl	80068cc <__aeabi_fcmpgt>
 8008604:	b320      	cbz	r0, 8008650 <PUM_HandlePIDFlow+0x118>
					PUM[i].PumpControl = 10000;
 8008606:	4b54      	ldr	r3, [pc, #336]	; (8008758 <PUM_HandlePIDFlow+0x220>)
 8008608:	66e3      	str	r3, [r4, #108]	; 0x6c
				PUM[i].PumpControlOld = PUM[i].PumpControl;
 800860a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800860c:	6720      	str	r0, [r4, #112]	; 0x70
				PUM[i].GetVolumeOld = PUM[i].GetVolume;
 800860e:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8008612:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
				if ((PUM[i].SteamMode == 0))
 8008616:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800861a:	b1e3      	cbz	r3, 8008656 <PUM_HandlePIDFlow+0x11e>
						if ((HEA[i].GetTemperature < HEA[i].SetTemperature))//&&(HEA[i].EfastValidValue < MAXEFAST))
 800861c:	9701      	str	r7, [sp, #4]
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	429a      	cmp	r2, r3
 8008624:	d321      	bcc.n	800866a <PUM_HandlePIDFlow+0x132>
							if (i==0)
 8008626:	b355      	cbz	r5, 800867e <PUM_HandlePIDFlow+0x146>
								if (PUM[i].GetFlow < 100)
 8008628:	2e63      	cmp	r6, #99	; 0x63
									PUM_SetControl(i, 65);
 800862a:	bf94      	ite	ls
 800862c:	2141      	movls	r1, #65	; 0x41
									PUM_SetControl(i, 50);
 800862e:	2132      	movhi	r1, #50	; 0x32
 8008630:	4628      	mov	r0, r5
 8008632:	f7ff fe8b 	bl	800834c <PUM_SetControl>
						if ((HEA[i].EfastValidValue) > MAXEFAST)
 8008636:	9b01      	ldr	r3, [sp, #4]
 8008638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863a:	2b14      	cmp	r3, #20
 800863c:	d959      	bls.n	80086f2 <PUM_HandlePIDFlow+0x1ba>
								if (PUM[i].GetFlow < 100)
 800863e:	68a3      	ldr	r3, [r4, #8]
 8008640:	2b63      	cmp	r3, #99	; 0x63
									PUM_SetControl(i, 65);
 8008642:	bf94      	ite	ls
 8008644:	2141      	movls	r1, #65	; 0x41
									PUM_SetControl(i, 50);
 8008646:	2132      	movhi	r1, #50	; 0x32
 8008648:	4628      	mov	r0, r5
 800864a:	f7ff fe7f 	bl	800834c <PUM_SetControl>
 800864e:	e050      	b.n	80086f2 <PUM_HandlePIDFlow+0x1ba>
 8008650:	9b01      	ldr	r3, [sp, #4]
 8008652:	66e3      	str	r3, [r4, #108]	; 0x6c
 8008654:	e7d9      	b.n	800860a <PUM_HandlePIDFlow+0xd2>
					PUM_SetControl (i, PUM[i].PumpControl/100);
 8008656:	4941      	ldr	r1, [pc, #260]	; (800875c <PUM_HandlePIDFlow+0x224>)
 8008658:	f7fe f830 	bl	80066bc <__aeabi_fdiv>
 800865c:	f7fe f940 	bl	80068e0 <__aeabi_f2uiz>
 8008660:	b2c1      	uxtb	r1, r0
 8008662:	4628      	mov	r0, r5
 8008664:	f7ff fe72 	bl	800834c <PUM_SetControl>
 8008668:	e043      	b.n	80086f2 <PUM_HandlePIDFlow+0x1ba>
							PUM_SetControl(i, 0);
 800866a:	2100      	movs	r1, #0
 800866c:	4628      	mov	r0, r5
 800866e:	f7ff fe6d 	bl	800834c <PUM_SetControl>
						if ((HEA[i].EfastValidValue) > MAXEFAST)
 8008672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008674:	2b14      	cmp	r3, #20
 8008676:	d93c      	bls.n	80086f2 <PUM_HandlePIDFlow+0x1ba>
							if (i==0)
 8008678:	2d00      	cmp	r5, #0
 800867a:	d1e0      	bne.n	800863e <PUM_HandlePIDFlow+0x106>
 800867c:	e007      	b.n	800868e <PUM_HandlePIDFlow+0x156>
								PUM_SetControl(i, 40);
 800867e:	2128      	movs	r1, #40	; 0x28
 8008680:	2000      	movs	r0, #0
 8008682:	f7ff fe63 	bl	800834c <PUM_SetControl>
						if ((HEA[i].EfastValidValue) > MAXEFAST)
 8008686:	9b01      	ldr	r3, [sp, #4]
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	2b14      	cmp	r3, #20
 800868c:	d931      	bls.n	80086f2 <PUM_HandlePIDFlow+0x1ba>
								PUM_SetControl(i, 40);
 800868e:	2128      	movs	r1, #40	; 0x28
 8008690:	2000      	movs	r0, #0
 8008692:	f7ff fe5b 	bl	800834c <PUM_SetControl>
	for (uint8_t i = 0; i < 2; i++)
 8008696:	e02f      	b.n	80086f8 <PUM_HandlePIDFlow+0x1c0>
 8008698:	f8c4 b06c 	str.w	fp, [r4, #108]	; 0x6c
				if (PUM[i].PumpControl > 10000)
 800869c:	e7b5      	b.n	800860a <PUM_HandlePIDFlow+0xd2>
			if (PUM[i].GetFlow < PUM[i].SetFlow)
 800869e:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80086a2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80086a6:	4286      	cmp	r6, r0
 80086a8:	d33e      	bcc.n	8008728 <PUM_HandlePIDFlow+0x1f0>
			if ((PUM[i].Status == sINACTIVE) || (PUM[i].Status == sUNITERROR) || (PUM[i].SetFlow == 0) || ((PUM[i].RegulatePressure == 0) && (PUM[i].RegulateFlow == 0)))
 80086aa:	7823      	ldrb	r3, [r4, #0]
 80086ac:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80086b0:	2b04      	cmp	r3, #4
 80086b2:	d00a      	beq.n	80086ca <PUM_HandlePIDFlow+0x192>
 80086b4:	b148      	cbz	r0, 80086ca <PUM_HandlePIDFlow+0x192>
 80086b6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f47f af49 	bne.w	8008552 <PUM_HandlePIDFlow+0x1a>
 80086c0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f47f af44 	bne.w	8008552 <PUM_HandlePIDFlow+0x1a>
				PUM_SetControl (i,0);
 80086ca:	2100      	movs	r1, #0
 80086cc:	4628      	mov	r0, r5
 80086ce:	f7ff fe3d 	bl	800834c <PUM_SetControl>
				PUM[i].ErrorP_Pump = 0;
 80086d2:	f8c4 b05c 	str.w	fp, [r4, #92]	; 0x5c
				PUM[i].ErrorP_Pump_Old = 0;
 80086d6:	f8c4 b058 	str.w	fp, [r4, #88]	; 0x58
				PUM[i].ErrorD_Pump = 0;
 80086da:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
				PUM[i].ErrorI_Pump = 0;
 80086de:	f8c4 b060 	str.w	fp, [r4, #96]	; 0x60
				PUM[i].PID_Pump = 0;
 80086e2:	f8c4 b068 	str.w	fp, [r4, #104]	; 0x68
				PUM[i].PumpControl = 0;
 80086e6:	f8c4 b06c 	str.w	fp, [r4, #108]	; 0x6c
				PUM[i].PumpControlOld = 0;
 80086ea:	f8c4 b070 	str.w	fp, [r4, #112]	; 0x70
				PUM[i].Percentage = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	7063      	strb	r3, [r4, #1]
	for (uint8_t i = 0; i < 2; i++)
 80086f2:	f1ba 0f01 	cmp.w	sl, #1
 80086f6:	d81e      	bhi.n	8008736 <PUM_HandlePIDFlow+0x1fe>
 80086f8:	f109 0901 	add.w	r9, r9, #1
 80086fc:	f108 0878 	add.w	r8, r8, #120	; 0x78
 8008700:	f10a 0a01 	add.w	sl, sl, #1
 8008704:	fa5f fa8a 	uxtb.w	sl, sl
 8008708:	3760      	adds	r7, #96	; 0x60
 800870a:	fa5f f589 	uxtb.w	r5, r9
		if ((PUM[i].SetControlType == PUM_FLOWCONTROL) || (PUM[i].SetControlType == PUM_BOTHCONTROL)) //Only use if flow control
 800870e:	4644      	mov	r4, r8
 8008710:	f898 3038 	ldrb.w	r3, [r8, #56]	; 0x38
 8008714:	2b01      	cmp	r3, #1
 8008716:	d0c2      	beq.n	800869e <PUM_HandlePIDFlow+0x166>
 8008718:	2b03      	cmp	r3, #3
 800871a:	d1ea      	bne.n	80086f2 <PUM_HandlePIDFlow+0x1ba>
			if (PUM[i].GetFlow < PUM[i].SetFlow)
 800871c:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8008720:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008724:	4286      	cmp	r6, r0
 8008726:	d2c0      	bcs.n	80086aa <PUM_HandlePIDFlow+0x172>
					PUM[i].RegulateFlow = 1;
 8008728:	2301      	movs	r3, #1
 800872a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
					PUM[i].RegulatePressure = 0;
 800872e:	2300      	movs	r3, #0
 8008730:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 8008734:	e7b9      	b.n	80086aa <PUM_HandlePIDFlow+0x172>
}
 8008736:	b007      	add	sp, #28
 8008738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800873c:	20000570 	.word	0x20000570
 8008740:	20000290 	.word	0x20000290
 8008744:	2000004c 	.word	0x2000004c
 8008748:	20000048 	.word	0x20000048
 800874c:	20000668 	.word	0x20000668
 8008750:	41200000 	.word	0x41200000
 8008754:	2000002e 	.word	0x2000002e
 8008758:	461c4000 	.word	0x461c4000
 800875c:	42c80000 	.word	0x42c80000

08008760 <PUM_Handle>:
{
 8008760:	b508      	push	{r3, lr}
	PUM_HandlePressureSensors();
 8008762:	f7ff fd33 	bl	80081cc <PUM_HandlePressureSensors>
	if (TickTimer ++ < 99) return; //100ms interval
 8008766:	4b09      	ldr	r3, [pc, #36]	; (800878c <PUM_Handle+0x2c>)
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	2b62      	cmp	r3, #98	; 0x62
 800876c:	d803      	bhi.n	8008776 <PUM_Handle+0x16>
 800876e:	3301      	adds	r3, #1
 8008770:	4a06      	ldr	r2, [pc, #24]	; (800878c <PUM_Handle+0x2c>)
 8008772:	8013      	strh	r3, [r2, #0]
}
 8008774:	bd08      	pop	{r3, pc}
	TickTimer = 0;
 8008776:	4b05      	ldr	r3, [pc, #20]	; (800878c <PUM_Handle+0x2c>)
 8008778:	2200      	movs	r2, #0
 800877a:	801a      	strh	r2, [r3, #0]
	PUM_HandleFlowMeters();
 800877c:	f7ff fd76 	bl	800826c <PUM_HandleFlowMeters>
	PUM_HandlePIDFlow();
 8008780:	f7ff feda 	bl	8008538 <PUM_HandlePIDFlow>
	PUM_HandlePIDPressure();
 8008784:	f7ff fe1c 	bl	80083c0 <PUM_HandlePIDPressure>
 8008788:	e7f4      	b.n	8008774 <PUM_Handle+0x14>
 800878a:	bf00      	nop
 800878c:	20000058 	.word	0x20000058

08008790 <PUM_GetPressure>:
//! \details      Converts the value from mBar to 0.1 bar
//! \param[in]    uint8_t newPump (0 - 1)
uint16_t PUM_GetPressure (uint8_t newPump)
{
	{
		return PUM[newPump].GetPressure / 100; //Convert to x 0.1 bar
 8008790:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8008794:	4b04      	ldr	r3, [pc, #16]	; (80087a8 <PUM_GetPressure+0x18>)
 8008796:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800879a:	6940      	ldr	r0, [r0, #20]
 800879c:	4b03      	ldr	r3, [pc, #12]	; (80087ac <PUM_GetPressure+0x1c>)
 800879e:	fba3 3000 	umull	r3, r0, r3, r0
	}
}
 80087a2:	f3c0 104f 	ubfx	r0, r0, #5, #16
 80087a6:	4770      	bx	lr
 80087a8:	20000570 	.word	0x20000570
 80087ac:	51eb851f 	.word	0x51eb851f

080087b0 <PUM_GetFlow>:
//! \details      Converts the value from ul/s to ml/min
//! \param[in]    uint8_t newPump (0 - 1)
uint16_t PUM_GetFlow (uint8_t newPump)
{
	{
		return PUM[newPump].GetFlowTimeBased / 100; //Convert to x 0.1 ml/min
 80087b0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80087b4:	4b04      	ldr	r3, [pc, #16]	; (80087c8 <PUM_GetFlow+0x18>)
 80087b6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80087ba:	68c0      	ldr	r0, [r0, #12]
 80087bc:	4b03      	ldr	r3, [pc, #12]	; (80087cc <PUM_GetFlow+0x1c>)
 80087be:	fba3 3000 	umull	r3, r0, r3, r0
	}
}
 80087c2:	f3c0 104f 	ubfx	r0, r0, #5, #16
 80087c6:	4770      	bx	lr
 80087c8:	20000570 	.word	0x20000570
 80087cc:	51eb851f 	.word	0x51eb851f

080087d0 <PUM_GetVolume>:
//-----------------------------------------------------------------------------
//! \brief        Gets the volume of the selected pump
//! \details      Converts the value from ul to ml
//! \param[in]    uint8_t newPump (0 - 1)
uint16_t PUM_GetVolume (uint8_t newPump)
{
 80087d0:	b508      	push	{r3, lr}
	{
		return PUM[newPump].GetVolume/1000;
 80087d2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80087d6:	4b07      	ldr	r3, [pc, #28]	; (80087f4 <PUM_GetVolume+0x24>)
 80087d8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80087dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087e0:	2300      	movs	r3, #0
 80087e2:	f100 0118 	add.w	r1, r0, #24
 80087e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087ea:	f7fe f899 	bl	8006920 <__aeabi_uldivmod>
	}
}
 80087ee:	b280      	uxth	r0, r0
 80087f0:	bd08      	pop	{r3, pc}
 80087f2:	bf00      	nop
 80087f4:	20000570 	.word	0x20000570

080087f8 <PUM_Set>:
//! \brief        Sets the status of the selected pump
//! \details      Sets the status to ACTIVE or INACTIVE
//! \param[in]    uint8_t newPump (P1 - P2)
//! \param[in]    enuStatus newStatus (sINACTIVE, sACTIVE)
void PUM_Set (uint8_t newPump, uint32_t newStatus)
{
 80087f8:	b430      	push	{r4, r5}
	if (newPump == P1)
		PUM[newPump].UlPerPulse = (uint32_t) Temp;
	else
		PUM[newPump].UlPerPulse = 404;
		*/
	PUM[newPump].GetVolume = 0; //Reset the volume
 80087fa:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
 80087fe:	4b0c      	ldr	r3, [pc, #48]	; (8008830 <PUM_Set+0x38>)
 8008800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008804:	2400      	movs	r4, #0
 8008806:	2500      	movs	r5, #0
 8008808:	e9c3 4506 	strd	r4, r5, [r3, #24]
	if (DUMMYMODE) return; //In dummymode don't start the pump
 800880c:	4b09      	ldr	r3, [pc, #36]	; (8008834 <PUM_Set+0x3c>)
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	b92b      	cbnz	r3, 800881e <PUM_Set+0x26>
	PUM[newPump].Status = newStatus;
 8008812:	4613      	mov	r3, r2
 8008814:	4a06      	ldr	r2, [pc, #24]	; (8008830 <PUM_Set+0x38>)
 8008816:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	if (newStatus == sACTIVE)
 800881a:	2903      	cmp	r1, #3
 800881c:	d001      	beq.n	8008822 <PUM_Set+0x2a>
	{
		PUM[newPump].StartRegulating = 0;
	}

}
 800881e:	bc30      	pop	{r4, r5}
 8008820:	4770      	bx	lr
		PUM[newPump].StartRegulating = 0;
 8008822:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 8008826:	2300      	movs	r3, #0
 8008828:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
 800882c:	e7f7      	b.n	800881e <PUM_Set+0x26>
 800882e:	bf00      	nop
 8008830:	20000570 	.word	0x20000570
 8008834:	20000c48 	.word	0x20000c48

08008838 <PUM_SetControlType>:
//! \details      Sets the way to control the pump. Eater pressure or flow or both
//! \param[in]    uint8_t newPump (0 - 1)
//! \param[in]    uint32_t newControlType (0 = None, 1 = Flow, 2 = Pressure, 3 = Both)
void PUM_SetControlType (uint8_t newPump, uint32_t newControlType)
{
	PUM[newPump].SetControlType = newControlType;
 8008838:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800883c:	4b02      	ldr	r3, [pc, #8]	; (8008848 <PUM_SetControlType+0x10>)
 800883e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8008842:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
}
 8008846:	4770      	bx	lr
 8008848:	20000570 	.word	0x20000570

0800884c <PUM_SetVolume>:
//! \details      Global function to set the volume to be dispensed by the selected pump
//! \param[in]    uint8_t newPump (0 - 1)
//! \param[in]    uint32_t newVolume in ul
void PUM_SetVolume (uint8_t newPump, uint32_t newVolume)
{
	PUM[newPump].SetVolume = newVolume * 1000;
 800884c:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
 8008850:	4805      	ldr	r0, [pc, #20]	; (8008868 <PUM_SetVolume+0x1c>)
 8008852:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8008856:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800885a:	fb02 f101 	mul.w	r1, r2, r1
 800885e:	6301      	str	r1, [r0, #48]	; 0x30
 8008860:	2200      	movs	r2, #0
 8008862:	6342      	str	r2, [r0, #52]	; 0x34
}
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	20000570 	.word	0x20000570

0800886c <PUM_SetPressure>:
//! \details      Global function to start the pump at certain pressure
//! \param[in]    uint8_t newPump (0 - 1)
//! \param[in]    uint32_t newPressure (0 - 12000) mbar
void PUM_SetPressure (uint8_t newPump, uint32_t newPressure)
{
	PUM[newPump].SetPressure = newPressure;
 800886c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8008870:	4b02      	ldr	r3, [pc, #8]	; (800887c <PUM_SetPressure+0x10>)
 8008872:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8008876:	6101      	str	r1, [r0, #16]
}
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	20000570 	.word	0x20000570

08008880 <PUM_SetFlow>:
//! \brief        Sets the flow of the selected pump
//! \details      Global function to start the pump
//! \param[in]    uint8_t newPump (0 - 1)
//! \param[in]    uint32_t newFlow (0 - 200) x 0.1 ml/s for P1 and P2, (0-100) % for P3
void PUM_SetFlow (uint8_t newPump, uint32_t newFlow, uint8_t newSteamMode)
{
 8008880:	b500      	push	{lr}
	PUM[newPump].SetFlow = newFlow * 100; //Convert to ul/s
 8008882:	4b07      	ldr	r3, [pc, #28]	; (80088a0 <PUM_SetFlow+0x20>)
 8008884:	ebc0 1c00 	rsb	ip, r0, r0, lsl #4
 8008888:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 800888c:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8008890:	fb0e f101 	mul.w	r1, lr, r1
 8008894:	f8cc 1004 	str.w	r1, [ip, #4]
	PUM[newPump].SteamMode = newSteamMode;
 8008898:	f88c 204a 	strb.w	r2, [ip, #74]	; 0x4a
}
 800889c:	f85d fb04 	ldr.w	pc, [sp], #4
 80088a0:	20000570 	.word	0x20000570

080088a4 <PUM_SetPulses>:
//! \brief      Handles the pulse interrupt
//! \details    Increases the pulse counter and sets the pulse time
//! \param[in]	uint8_t newPump
void PUM_SetPulses (uint8_t newPump)
{
	PUM[newPump].Pulses ++;
 80088a4:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
 80088a8:	4b06      	ldr	r3, [pc, #24]	; (80088c4 <PUM_SetPulses+0x20>)
 80088aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088b0:	3201      	adds	r2, #1
 80088b2:	641a      	str	r2, [r3, #64]	; 0x40
	PUM[newPump].PulseTime = TIM6->CNT;
 80088b4:	4a04      	ldr	r2, [pc, #16]	; (80088c8 <PUM_SetPulses+0x24>)
 80088b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80088b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	FlgFM[newPump] = 1;
 80088bc:	4b03      	ldr	r3, [pc, #12]	; (80088cc <PUM_SetPulses+0x28>)
 80088be:	2201      	movs	r2, #1
 80088c0:	541a      	strb	r2, [r3, r0]
}
 80088c2:	4770      	bx	lr
 80088c4:	20000570 	.word	0x20000570
 80088c8:	40001000 	.word	0x40001000
 80088cc:	200003cc 	.word	0x200003cc

080088d0 <PUM_SetPumpGPIO>:
//! \brief        Sets the output of the specified pump
//! \details      Switches the output for the specified pump on or off
//! \param[in]    uint8_t newPump (0 - 1)
//! \param[in]    enuStatus newStatus (ON - OFF)
void PUM_SetPumpGPIO (uint8_t newPump, enuStatus newStatus)
{
 80088d0:	b508      	push	{r3, lr}
	uint16_t x1, x2;
	if (DUMMYMODE) return;
 80088d2:	4b50      	ldr	r3, [pc, #320]	; (8008a14 <PUM_SetPumpGPIO+0x144>)
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d169      	bne.n	80089ae <PUM_SetPumpGPIO+0xde>
	if (PUM[newPump].ControlType == 0)
 80088da:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
 80088de:	4a4e      	ldr	r2, [pc, #312]	; (8008a18 <PUM_SetPumpGPIO+0x148>)
 80088e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80088e4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d15c      	bne.n	80089a6 <PUM_SetPumpGPIO+0xd6>
	{

		x1 = PhaseCounterPumps/2;
 80088ec:	4b4b      	ldr	r3, [pc, #300]	; (8008a1c <PUM_SetPumpGPIO+0x14c>)
 80088ee:	7819      	ldrb	r1, [r3, #0]
		if (PUM[newPump].Percentage > 100) PUM[newPump].Percentage = 100;
 80088f0:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
 80088f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80088f8:	785b      	ldrb	r3, [r3, #1]
 80088fa:	2b64      	cmp	r3, #100	; 0x64
 80088fc:	d923      	bls.n	8008946 <PUM_SetPumpGPIO+0x76>
 80088fe:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
 8008902:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008906:	2264      	movs	r2, #100	; 0x64
 8008908:	705a      	strb	r2, [r3, #1]
		x2 = PhaseListPumps[(PUM[newPump].Percentage/10)];
 800890a:	4b45      	ldr	r3, [pc, #276]	; (8008a20 <PUM_SetPumpGPIO+0x150>)
 800890c:	f8b3 c014 	ldrh.w	ip, [r3, #20]
		//Make sure pump is switched off if power = 0
		if ((PUM[newPump].Percentage == 0) || (PUM[newPump].Status == sINACTIVE) || (PhaseCounterPumps%2 == 0))
 8008910:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
 8008914:	4a40      	ldr	r2, [pc, #256]	; (8008a18 <PUM_SetPumpGPIO+0x148>)
 8008916:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800891a:	2b04      	cmp	r3, #4
 800891c:	d014      	beq.n	8008948 <PUM_SetPumpGPIO+0x78>
 800891e:	f011 0f01 	tst.w	r1, #1
 8008922:	d011      	beq.n	8008948 <PUM_SetPumpGPIO+0x78>
				P2_OFF();
			}
		}
		else
		{
			if ((1<<(x1)) & (x2)) //This phase is on
 8008924:	0849      	lsrs	r1, r1, #1
 8008926:	fa4c f101 	asr.w	r1, ip, r1
 800892a:	f011 0f01 	tst.w	r1, #1
 800892e:	d029      	beq.n	8008984 <PUM_SetPumpGPIO+0xb4>
			{
				if (newPump == P1)
 8008930:	bb10      	cbnz	r0, 8008978 <PUM_SetPumpGPIO+0xa8>
				{
					P1_ON();
 8008932:	2201      	movs	r2, #1
 8008934:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008938:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800893c:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 8008940:	f005 fbae 	bl	800e0a0 <HAL_GPIO_WritePin>
 8008944:	e033      	b.n	80089ae <PUM_SetPumpGPIO+0xde>
		if ((PUM[newPump].Percentage == 0) || (PUM[newPump].Status == sINACTIVE) || (PhaseCounterPumps%2 == 0))
 8008946:	b953      	cbnz	r3, 800895e <PUM_SetPumpGPIO+0x8e>
			if (newPump == P1)
 8008948:	b980      	cbnz	r0, 800896c <PUM_SetPumpGPIO+0x9c>
				P1_OFF();
 800894a:	2200      	movs	r2, #0
 800894c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008950:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8008954:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 8008958:	f005 fba2 	bl	800e0a0 <HAL_GPIO_WritePin>
 800895c:	e027      	b.n	80089ae <PUM_SetPumpGPIO+0xde>
		x2 = PhaseListPumps[(PUM[newPump].Percentage/10)];
 800895e:	220a      	movs	r2, #10
 8008960:	fbb3 f3f2 	udiv	r3, r3, r2
 8008964:	4a2e      	ldr	r2, [pc, #184]	; (8008a20 <PUM_SetPumpGPIO+0x150>)
 8008966:	f832 c013 	ldrh.w	ip, [r2, r3, lsl #1]
 800896a:	e7d1      	b.n	8008910 <PUM_SetPumpGPIO+0x40>
				P2_OFF();
 800896c:	2200      	movs	r2, #0
 800896e:	2101      	movs	r1, #1
 8008970:	482c      	ldr	r0, [pc, #176]	; (8008a24 <PUM_SetPumpGPIO+0x154>)
 8008972:	f005 fb95 	bl	800e0a0 <HAL_GPIO_WritePin>
 8008976:	e01a      	b.n	80089ae <PUM_SetPumpGPIO+0xde>
				}
				else
				{
					P2_ON();
 8008978:	2201      	movs	r2, #1
 800897a:	4611      	mov	r1, r2
 800897c:	4829      	ldr	r0, [pc, #164]	; (8008a24 <PUM_SetPumpGPIO+0x154>)
 800897e:	f005 fb8f 	bl	800e0a0 <HAL_GPIO_WritePin>
 8008982:	e014      	b.n	80089ae <PUM_SetPumpGPIO+0xde>
				}
			}
			else
			{
				if (newPump == P1)
 8008984:	b948      	cbnz	r0, 800899a <PUM_SetPumpGPIO+0xca>
				{
					P1_OFF();
 8008986:	2200      	movs	r2, #0
 8008988:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800898c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8008990:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 8008994:	f005 fb84 	bl	800e0a0 <HAL_GPIO_WritePin>
 8008998:	e009      	b.n	80089ae <PUM_SetPumpGPIO+0xde>
				}
				else
				{
					P2_OFF();
 800899a:	2200      	movs	r2, #0
 800899c:	2101      	movs	r1, #1
 800899e:	4821      	ldr	r0, [pc, #132]	; (8008a24 <PUM_SetPumpGPIO+0x154>)
 80089a0:	f005 fb7e 	bl	800e0a0 <HAL_GPIO_WritePin>
 80089a4:	e003      	b.n	80089ae <PUM_SetPumpGPIO+0xde>
			}
		}
	}
	else
	{
		if (newStatus == sOFF)
 80089a6:	2908      	cmp	r1, #8
 80089a8:	d002      	beq.n	80089b0 <PUM_SetPumpGPIO+0xe0>
				{
					P2_OFF();
				}
			}
		}
		else if (newStatus == sON)
 80089aa:	2907      	cmp	r1, #7
 80089ac:	d019      	beq.n	80089e2 <PUM_SetPumpGPIO+0x112>
					P2_ON();
				}
			}
		}
	}
}
 80089ae:	bd08      	pop	{r3, pc}
			if (PUM[newPump].Percentage != 100)
 80089b0:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
 80089b4:	4a18      	ldr	r2, [pc, #96]	; (8008a18 <PUM_SetPumpGPIO+0x148>)
 80089b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80089ba:	785b      	ldrb	r3, [r3, #1]
 80089bc:	2b64      	cmp	r3, #100	; 0x64
 80089be:	d0f6      	beq.n	80089ae <PUM_SetPumpGPIO+0xde>
				if (newPump == 0)
 80089c0:	b948      	cbnz	r0, 80089d6 <PUM_SetPumpGPIO+0x106>
					P1_OFF();
 80089c2:	2200      	movs	r2, #0
 80089c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80089c8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80089cc:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 80089d0:	f005 fb66 	bl	800e0a0 <HAL_GPIO_WritePin>
 80089d4:	e7eb      	b.n	80089ae <PUM_SetPumpGPIO+0xde>
					P2_OFF();
 80089d6:	2200      	movs	r2, #0
 80089d8:	2101      	movs	r1, #1
 80089da:	4812      	ldr	r0, [pc, #72]	; (8008a24 <PUM_SetPumpGPIO+0x154>)
 80089dc:	f005 fb60 	bl	800e0a0 <HAL_GPIO_WritePin>
 80089e0:	e7e5      	b.n	80089ae <PUM_SetPumpGPIO+0xde>
			if (PUM[newPump].Percentage > 10)
 80089e2:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
 80089e6:	4a0c      	ldr	r2, [pc, #48]	; (8008a18 <PUM_SetPumpGPIO+0x148>)
 80089e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80089ec:	785b      	ldrb	r3, [r3, #1]
 80089ee:	2b0a      	cmp	r3, #10
 80089f0:	d9dd      	bls.n	80089ae <PUM_SetPumpGPIO+0xde>
				if (newPump == 0)
 80089f2:	b948      	cbnz	r0, 8008a08 <PUM_SetPumpGPIO+0x138>
					P1_ON();
 80089f4:	2201      	movs	r2, #1
 80089f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80089fa:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80089fe:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 8008a02:	f005 fb4d 	bl	800e0a0 <HAL_GPIO_WritePin>
 8008a06:	e7d2      	b.n	80089ae <PUM_SetPumpGPIO+0xde>
					P2_ON();
 8008a08:	2201      	movs	r2, #1
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	4805      	ldr	r0, [pc, #20]	; (8008a24 <PUM_SetPumpGPIO+0x154>)
 8008a0e:	f005 fb47 	bl	800e0a0 <HAL_GPIO_WritePin>
 8008a12:	e7cc      	b.n	80089ae <PUM_SetPumpGPIO+0xde>
 8008a14:	20000c48 	.word	0x20000c48
 8008a18:	20000570 	.word	0x20000570
 8008a1c:	20000660 	.word	0x20000660
 8008a20:	20000030 	.word	0x20000030
 8008a24:	40021400 	.word	0x40021400

08008a28 <REC_Set>:
stcRecipe gRecipe[MTypeLastRecipe];


void REC_Set (uint8_t newRecipe, enuStatus newStatus)
{
	if (newStatus == sINACTIVE)
 8008a28:	2904      	cmp	r1, #4
 8008a2a:	d002      	beq.n	8008a32 <REC_Set+0xa>
	{
		gRecipe[newRecipe].Active = 0;
		gRecipe[newRecipe].CurrentBlock = 255;
	}
	else if (newStatus == sACTIVE)
 8008a2c:	2903      	cmp	r1, #3
 8008a2e:	d008      	beq.n	8008a42 <REC_Set+0x1a>
			gRecipe[newRecipe].Active = 1;
			gRecipe[newRecipe].CurrentBlock = 0;
		}
	}

}
 8008a30:	4770      	bx	lr
		gRecipe[newRecipe].Active = 0;
 8008a32:	4b0d      	ldr	r3, [pc, #52]	; (8008a68 <REC_Set+0x40>)
 8008a34:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8008a38:	2300      	movs	r3, #0
 8008a3a:	7043      	strb	r3, [r0, #1]
		gRecipe[newRecipe].CurrentBlock = 255;
 8008a3c:	23ff      	movs	r3, #255	; 0xff
 8008a3e:	70c3      	strb	r3, [r0, #3]
 8008a40:	4770      	bx	lr
		if (gRecipe[newRecipe].Active == 0)
 8008a42:	4b09      	ldr	r3, [pc, #36]	; (8008a68 <REC_Set+0x40>)
 8008a44:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8008a48:	785b      	ldrb	r3, [r3, #1]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1f0      	bne.n	8008a30 <REC_Set+0x8>
			gRecipe[newRecipe].GetTotalVolume = 0;
 8008a4e:	4b06      	ldr	r3, [pc, #24]	; (8008a68 <REC_Set+0x40>)
 8008a50:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8008a54:	2200      	movs	r2, #0
 8008a56:	2300      	movs	r3, #0
 8008a58:	e9c0 2306 	strd	r2, r3, [r0, #24]
			gRecipe[newRecipe].Active = 1;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	7043      	strb	r3, [r0, #1]
			gRecipe[newRecipe].CurrentBlock = 0;
 8008a60:	2300      	movs	r3, #0
 8008a62:	70c3      	strb	r3, [r0, #3]
}
 8008a64:	e7e4      	b.n	8008a30 <REC_Set+0x8>
 8008a66:	bf00      	nop
 8008a68:	20000678 	.word	0x20000678

08008a6c <REC_Init>:
//-----------------------------------------------------------------------------
//! \brief      Initializes the recipe module
//! \details    Initializes the recipe module
//! \params 	None
void REC_Init(void)
{
 8008a6c:	b508      	push	{r3, lr}
	for (uint8_t i=0; i < RCount; i++) REC_Set(i,sINACTIVE);
 8008a6e:	2104      	movs	r1, #4
 8008a70:	2000      	movs	r0, #0
 8008a72:	f7ff ffd9 	bl	8008a28 <REC_Set>
 8008a76:	2104      	movs	r1, #4
 8008a78:	2001      	movs	r0, #1
 8008a7a:	f7ff ffd5 	bl	8008a28 <REC_Set>
 8008a7e:	2104      	movs	r1, #4
 8008a80:	2002      	movs	r0, #2
 8008a82:	f7ff ffd1 	bl	8008a28 <REC_Set>
	gRecipe[RECIPE3].RecipeBlocks[0].H3SetTemp = 60;
 8008a86:	4b02      	ldr	r3, [pc, #8]	; (8008a90 <REC_Init+0x24>)
 8008a88:	223c      	movs	r2, #60	; 0x3c
 8008a8a:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
	if (DUMMYMODE)
	{

	}
}
 8008a8e:	bd08      	pop	{r3, pc}
 8008a90:	20000678 	.word	0x20000678

08008a94 <REC_GetNrOfBlocks>:
//! \brief      Returns the number of blocks in the recipe
//! \details    Returns the number of blocks in the recipe RecipeType
//! \param[out]	uint8_t Number of Blocks
uint8_t REC_GetNrOfBlocks(uint8_t RecipeType)
{
	return gRecipe[RecipeType].Blocks;
 8008a94:	4b02      	ldr	r3, [pc, #8]	; (8008aa0 <REC_GetNrOfBlocks+0xc>)
 8008a96:	eb03 2300 	add.w	r3, r3, r0, lsl #8
}
 8008a9a:	7898      	ldrb	r0, [r3, #2]
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	20000678 	.word	0x20000678

08008aa4 <REC_GetCurrentBlock>:
//! \brief      Returns the current block number the recipe
//! \details    Returns the current block number the recipe defined by RecipeType
//! \param[out]	uint8_t Active Block Number
uint8_t REC_GetCurrentBlock(uint8_t RecipeType)
{
	return gRecipe[RecipeType].CurrentBlock;
 8008aa4:	4b02      	ldr	r3, [pc, #8]	; (8008ab0 <REC_GetCurrentBlock+0xc>)
 8008aa6:	eb03 2300 	add.w	r3, r3, r0, lsl #8
}
 8008aaa:	78d8      	ldrb	r0, [r3, #3]
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	20000678 	.word	0x20000678

08008ab4 <BTN_Process>:
//! \Ritual button structure
stcRitualButton BTN[2];

void BTN_Process (uint8_t newButton, uint8_t newState, enuStatus newDirection)
{
	if (newDirection != sUNDEFINED)
 8008ab4:	b11a      	cbz	r2, 8008abe <BTN_Process+0xa>
	{
		BTN[newButton].Direction = newDirection;
 8008ab6:	4b2d      	ldr	r3, [pc, #180]	; (8008b6c <BTN_Process+0xb8>)
 8008ab8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008abc:	705a      	strb	r2, [r3, #1]
	}
	if (newState == BTN_PUSHED)
 8008abe:	bb41      	cbnz	r1, 8008b12 <BTN_Process+0x5e>
	{
		if (BTN[newButton].TimePushed < 0xffff) BTN[newButton].TimePushed++;
 8008ac0:	4b2a      	ldr	r3, [pc, #168]	; (8008b6c <BTN_Process+0xb8>)
 8008ac2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008ac6:	885b      	ldrh	r3, [r3, #2]
 8008ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d004      	beq.n	8008ada <BTN_Process+0x26>
 8008ad0:	4a26      	ldr	r2, [pc, #152]	; (8008b6c <BTN_Process+0xb8>)
 8008ad2:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	8053      	strh	r3, [r2, #2]
		BTN[newButton].TimeReleased = 0;
 8008ada:	4b24      	ldr	r3, [pc, #144]	; (8008b6c <BTN_Process+0xb8>)
 8008adc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	809a      	strh	r2, [r3, #4]
		if ((BTN[newButton].TimePushed >= BTN_SHORTPRESSTIMEMIN) && (BTN[newButton].TimePushed <= BTN_SHORTPRESSTIMEMAX))
 8008ae4:	8859      	ldrh	r1, [r3, #2]
 8008ae6:	f1a1 0264 	sub.w	r2, r1, #100	; 0x64
 8008aea:	b292      	uxth	r2, r2
 8008aec:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 8008af0:	bf8c      	ite	hi
 8008af2:	2200      	movhi	r2, #0
 8008af4:	2201      	movls	r2, #1
 8008af6:	719a      	strb	r2, [r3, #6]
		}
		else
		{
			BTN[newButton].InShortPressRange = 0;
		}
		if (BTN[newButton].TimePushed >= BTN_LONGPRESSTIMEMIN)
 8008af8:	f240 53db 	movw	r3, #1499	; 0x5db
 8008afc:	4299      	cmp	r1, r3
 8008afe:	d926      	bls.n	8008b4e <BTN_Process+0x9a>
		{
			//Kumkeo wanted a longpress forever, until released //if (BTN[newButton].TimePushed <= BTN_LONGPRESSTIMEMAX)
			//{
				BTN[newButton].InLongPressRange = 1;
 8008b00:	4b1a      	ldr	r3, [pc, #104]	; (8008b6c <BTN_Process+0xb8>)
 8008b02:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 8008b06:	2101      	movs	r1, #1
 8008b08:	71d1      	strb	r1, [r2, #7]
				BTN[newButton].Status = sLONGPRESSED;
 8008b0a:	2210      	movs	r2, #16
 8008b0c:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
 8008b10:	4770      	bx	lr
			*/
		}
	}
	else
	{
		if (BTN[newButton].InShortPressRange == 1)
 8008b12:	4b16      	ldr	r3, [pc, #88]	; (8008b6c <BTN_Process+0xb8>)
 8008b14:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008b18:	799b      	ldrb	r3, [r3, #6]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d018      	beq.n	8008b50 <BTN_Process+0x9c>
		{
			BTN[newButton].Status = sSHORTPRESSED;
		}
		if (BTN[newButton].TimeReleased < 0xffff) BTN[newButton].TimeReleased++;
 8008b1e:	4b13      	ldr	r3, [pc, #76]	; (8008b6c <BTN_Process+0xb8>)
 8008b20:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008b24:	889b      	ldrh	r3, [r3, #4]
 8008b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d015      	beq.n	8008b5a <BTN_Process+0xa6>
 8008b2e:	3301      	adds	r3, #1
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	4a0e      	ldr	r2, [pc, #56]	; (8008b6c <BTN_Process+0xb8>)
 8008b34:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008b38:	8093      	strh	r3, [r2, #4]
		if (BTN[newButton].TimeReleased > BTN_RESETSTATUSTIME)
 8008b3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008b3e:	d80c      	bhi.n	8008b5a <BTN_Process+0xa6>
		{
			BTN[newButton].Status = sOFF;
			BTN[newButton].Direction = sUNDEFINED;
		}
		BTN[newButton].TimePushed = 0;
 8008b40:	4b0a      	ldr	r3, [pc, #40]	; (8008b6c <BTN_Process+0xb8>)
 8008b42:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8008b46:	2300      	movs	r3, #0
 8008b48:	8043      	strh	r3, [r0, #2]
		BTN[newButton].InShortPressRange = 0;
 8008b4a:	7183      	strb	r3, [r0, #6]
		BTN[newButton].InLongPressRange = 0;
 8008b4c:	71c3      	strb	r3, [r0, #7]
	}
}
 8008b4e:	4770      	bx	lr
			BTN[newButton].Status = sSHORTPRESSED;
 8008b50:	4b06      	ldr	r3, [pc, #24]	; (8008b6c <BTN_Process+0xb8>)
 8008b52:	220f      	movs	r2, #15
 8008b54:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
 8008b58:	e7e1      	b.n	8008b1e <BTN_Process+0x6a>
			BTN[newButton].Status = sOFF;
 8008b5a:	4b04      	ldr	r3, [pc, #16]	; (8008b6c <BTN_Process+0xb8>)
 8008b5c:	2208      	movs	r2, #8
 8008b5e:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
			BTN[newButton].Direction = sUNDEFINED;
 8008b62:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008b66:	2200      	movs	r2, #0
 8008b68:	705a      	strb	r2, [r3, #1]
 8008b6a:	e7e9      	b.n	8008b40 <BTN_Process+0x8c>
 8008b6c:	20000978 	.word	0x20000978

08008b70 <BTN_Handle>:
//-----------------------------------------------------------------------------
//! \brief      Handles the button status
//! \details    Checks the time buttons are pushed and creates status
//! \params		None
void BTN_Handle (void)
{
 8008b70:	b508      	push	{r3, lr}
	//If both light sensors are active, the ritual button is malfunctioning or not connected.
	if ((STATE_COFFEE_UP == BTN_ACTIVE) && (STATE_COFFEE_DOWN == BTN_ACTIVE))
 8008b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008b76:	4830      	ldr	r0, [pc, #192]	; (8008c38 <BTN_Handle+0xc8>)
 8008b78:	f005 fa8c 	bl	800e094 <HAL_GPIO_ReadPin>
 8008b7c:	2801      	cmp	r0, #1
 8008b7e:	d019      	beq.n	8008bb4 <BTN_Handle+0x44>
		BTN[BTN_COFFEE].InShortPressRange = 0;
		BTN[BTN_COFFEE].InLongPressRange = 0;
	}
	else
	{
		if (STATE_COFFEE_DOWN == BTN_ACTIVE)
 8008b80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008b84:	482c      	ldr	r0, [pc, #176]	; (8008c38 <BTN_Handle+0xc8>)
 8008b86:	f005 fa85 	bl	800e094 <HAL_GPIO_ReadPin>
 8008b8a:	2801      	cmp	r0, #1
 8008b8c:	d022      	beq.n	8008bd4 <BTN_Handle+0x64>
		{
			BTN_Process (BTN_COFFEE, BTN_PUSHED, sDOWNWARDS);
		}
		else if (STATE_COFFEE_UP == BTN_ACTIVE)
 8008b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008b92:	4829      	ldr	r0, [pc, #164]	; (8008c38 <BTN_Handle+0xc8>)
 8008b94:	f005 fa7e 	bl	800e094 <HAL_GPIO_ReadPin>
 8008b98:	2801      	cmp	r0, #1
 8008b9a:	d02c      	beq.n	8008bf6 <BTN_Handle+0x86>
		{
			BTN_Process (BTN_COFFEE, BTN_PUSHED, sUPWARDS);
		}
		else if (STATE_COFFEE_DOWN == BTN_INACTIVE)
 8008b9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008ba0:	4825      	ldr	r0, [pc, #148]	; (8008c38 <BTN_Handle+0xc8>)
 8008ba2:	f005 fa77 	bl	800e094 <HAL_GPIO_ReadPin>
 8008ba6:	bb60      	cbnz	r0, 8008c02 <BTN_Handle+0x92>
		{
			BTN_Process (BTN_COFFEE, BTN_RELEASED, sUNDEFINED);
 8008ba8:	2200      	movs	r2, #0
 8008baa:	2101      	movs	r1, #1
 8008bac:	4610      	mov	r0, r2
 8008bae:	f7ff ff81 	bl	8008ab4 <BTN_Process>
 8008bb2:	e014      	b.n	8008bde <BTN_Handle+0x6e>
	if ((STATE_COFFEE_UP == BTN_ACTIVE) && (STATE_COFFEE_DOWN == BTN_ACTIVE))
 8008bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008bb8:	481f      	ldr	r0, [pc, #124]	; (8008c38 <BTN_Handle+0xc8>)
 8008bba:	f005 fa6b 	bl	800e094 <HAL_GPIO_ReadPin>
 8008bbe:	2801      	cmp	r0, #1
 8008bc0:	d1de      	bne.n	8008b80 <BTN_Handle+0x10>
		BTN[BTN_COFFEE].TimeReleased = 0;
 8008bc2:	4b1e      	ldr	r3, [pc, #120]	; (8008c3c <BTN_Handle+0xcc>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	809a      	strh	r2, [r3, #4]
		BTN[BTN_COFFEE].TimePushed = 0;
 8008bc8:	805a      	strh	r2, [r3, #2]
		BTN[BTN_COFFEE].Status = sUNITERROR;
 8008bca:	2114      	movs	r1, #20
 8008bcc:	7019      	strb	r1, [r3, #0]
		BTN[BTN_COFFEE].InShortPressRange = 0;
 8008bce:	719a      	strb	r2, [r3, #6]
		BTN[BTN_COFFEE].InLongPressRange = 0;
 8008bd0:	71da      	strb	r2, [r3, #7]
 8008bd2:	e004      	b.n	8008bde <BTN_Handle+0x6e>
			BTN_Process (BTN_COFFEE, BTN_PUSHED, sDOWNWARDS);
 8008bd4:	2212      	movs	r2, #18
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	4608      	mov	r0, r1
 8008bda:	f7ff ff6b 	bl	8008ab4 <BTN_Process>
		else if (STATE_COFFEE_UP == BTN_INACTIVE)
		{
			BTN_Process (BTN_COFFEE, BTN_RELEASED, sUNDEFINED);
		}
	}
	if (STATE_MILK == BTN_PUSHED)
 8008bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008be2:	4817      	ldr	r0, [pc, #92]	; (8008c40 <BTN_Handle+0xd0>)
 8008be4:	f005 fa56 	bl	800e094 <HAL_GPIO_ReadPin>
 8008be8:	b9c0      	cbnz	r0, 8008c1c <BTN_Handle+0xac>
	{
		BTN_Process (BTN_MILK, BTN_PUSHED, sUNDEFINED);
 8008bea:	2200      	movs	r2, #0
 8008bec:	4611      	mov	r1, r2
 8008bee:	2001      	movs	r0, #1
 8008bf0:	f7ff ff60 	bl	8008ab4 <BTN_Process>
	}
	else if (STATE_MILK == BTN_RELEASED)
	{
		BTN_Process (BTN_MILK, BTN_RELEASED, sUNDEFINED);
	}
}
 8008bf4:	bd08      	pop	{r3, pc}
			BTN_Process (BTN_COFFEE, BTN_PUSHED, sUPWARDS);
 8008bf6:	2211      	movs	r2, #17
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	4608      	mov	r0, r1
 8008bfc:	f7ff ff5a 	bl	8008ab4 <BTN_Process>
 8008c00:	e7ed      	b.n	8008bde <BTN_Handle+0x6e>
		else if (STATE_COFFEE_UP == BTN_INACTIVE)
 8008c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008c06:	480c      	ldr	r0, [pc, #48]	; (8008c38 <BTN_Handle+0xc8>)
 8008c08:	f005 fa44 	bl	800e094 <HAL_GPIO_ReadPin>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	d1e6      	bne.n	8008bde <BTN_Handle+0x6e>
			BTN_Process (BTN_COFFEE, BTN_RELEASED, sUNDEFINED);
 8008c10:	2200      	movs	r2, #0
 8008c12:	2101      	movs	r1, #1
 8008c14:	4610      	mov	r0, r2
 8008c16:	f7ff ff4d 	bl	8008ab4 <BTN_Process>
 8008c1a:	e7e0      	b.n	8008bde <BTN_Handle+0x6e>
	else if (STATE_MILK == BTN_RELEASED)
 8008c1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008c20:	4807      	ldr	r0, [pc, #28]	; (8008c40 <BTN_Handle+0xd0>)
 8008c22:	f005 fa37 	bl	800e094 <HAL_GPIO_ReadPin>
 8008c26:	2801      	cmp	r0, #1
 8008c28:	d1e4      	bne.n	8008bf4 <BTN_Handle+0x84>
		BTN_Process (BTN_MILK, BTN_RELEASED, sUNDEFINED);
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	2101      	movs	r1, #1
 8008c2e:	4608      	mov	r0, r1
 8008c30:	f7ff ff40 	bl	8008ab4 <BTN_Process>
}
 8008c34:	e7de      	b.n	8008bf4 <BTN_Handle+0x84>
 8008c36:	bf00      	nop
 8008c38:	40020800 	.word	0x40020800
 8008c3c:	20000978 	.word	0x20000978
 8008c40:	40020000 	.word	0x40020000

08008c44 <BTN_GetStatus>:
	/*{
		BTN[newButton].TimePushed = BTN_LONGPRESSTIMEMAX; //Prevent firing again after request
	}
	*/
	return newStatus;
}
 8008c44:	4b01      	ldr	r3, [pc, #4]	; (8008c4c <BTN_GetStatus+0x8>)
 8008c46:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
 8008c4a:	4770      	bx	lr
 8008c4c:	20000978 	.word	0x20000978

08008c50 <BTN_GetDirection>:
//! \param[in]  uint8_t newButton (o = Coffee, 1 = Milk)
//! \param[out] enuStatus ButtonStatus
enuStatus BTN_GetDirection (uint8_t newButton)
{
	//To be added: Evaluation of the sensors to determine the filter type
	return BTN[newButton].Direction;
 8008c50:	4b02      	ldr	r3, [pc, #8]	; (8008c5c <BTN_GetDirection+0xc>)
 8008c52:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
}
 8008c56:	7858      	ldrb	r0, [r3, #1]
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	20000978 	.word	0x20000978

08008c60 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8008c60:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8008c62:	480e      	ldr	r0, [pc, #56]	; (8008c9c <MX_SPI2_Init+0x3c>)
 8008c64:	4b0e      	ldr	r3, [pc, #56]	; (8008ca0 <MX_SPI2_Init+0x40>)
 8008c66:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008c68:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008c6c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008c72:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c74:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008c76:	2201      	movs	r2, #1
 8008c78:	6142      	str	r2, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c7e:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c80:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008c82:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008c84:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c86:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8008c88:	230a      	movs	r3, #10
 8008c8a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008c8c:	f005 ff3e 	bl	800eb0c <HAL_SPI_Init>
 8008c90:	b900      	cbnz	r0, 8008c94 <MX_SPI2_Init+0x34>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8008c92:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008c94:	f7ff f9ec 	bl	8008070 <Error_Handler>
}
 8008c98:	e7fb      	b.n	8008c92 <MX_SPI2_Init+0x32>
 8008c9a:	bf00      	nop
 8008c9c:	200009cc 	.word	0x200009cc
 8008ca0:	40003800 	.word	0x40003800

08008ca4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008ca4:	b510      	push	{r4, lr}
 8008ca6:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ca8:	2300      	movs	r3, #0
 8008caa:	9303      	str	r3, [sp, #12]
 8008cac:	9304      	str	r3, [sp, #16]
 8008cae:	9305      	str	r3, [sp, #20]
 8008cb0:	9306      	str	r3, [sp, #24]
 8008cb2:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8008cb4:	6802      	ldr	r2, [r0, #0]
 8008cb6:	4b20      	ldr	r3, [pc, #128]	; (8008d38 <HAL_SPI_MspInit+0x94>)
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d001      	beq.n	8008cc0 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8008cbc:	b008      	add	sp, #32
 8008cbe:	bd10      	pop	{r4, pc}
 8008cc0:	4604      	mov	r4, r0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008cc2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8008cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ccc:	625a      	str	r2, [r3, #36]	; 0x24
 8008cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cd0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008cd4:	9201      	str	r2, [sp, #4]
 8008cd6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008cd8:	69da      	ldr	r2, [r3, #28]
 8008cda:	f042 0202 	orr.w	r2, r2, #2
 8008cde:	61da      	str	r2, [r3, #28]
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	f003 0302 	and.w	r3, r3, #2
 8008ce6:	9302      	str	r3, [sp, #8]
 8008ce8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = HW0_SPI2_SCK_Pin|LED_Pin;
 8008cea:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8008cee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cf0:	2302      	movs	r3, #2
 8008cf2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008cf8:	2305      	movs	r3, #5
 8008cfa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008cfc:	a903      	add	r1, sp, #12
 8008cfe:	480f      	ldr	r0, [pc, #60]	; (8008d3c <HAL_SPI_MspInit+0x98>)
 8008d00:	f005 f8e4 	bl	800decc <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8008d04:	480e      	ldr	r0, [pc, #56]	; (8008d40 <HAL_SPI_MspInit+0x9c>)
 8008d06:	4b0f      	ldr	r3, [pc, #60]	; (8008d44 <HAL_SPI_MspInit+0xa0>)
 8008d08:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008d0a:	2310      	movs	r3, #16
 8008d0c:	6043      	str	r3, [r0, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	6083      	str	r3, [r0, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008d12:	2280      	movs	r2, #128	; 0x80
 8008d14:	60c2      	str	r2, [r0, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008d16:	6103      	str	r3, [r0, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008d18:	6143      	str	r3, [r0, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8008d1a:	6183      	str	r3, [r0, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d20:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8008d22:	f004 fd6d 	bl	800d800 <HAL_DMA_Init>
 8008d26:	b918      	cbnz	r0, 8008d30 <HAL_SPI_MspInit+0x8c>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8008d28:	4b05      	ldr	r3, [pc, #20]	; (8008d40 <HAL_SPI_MspInit+0x9c>)
 8008d2a:	64a3      	str	r3, [r4, #72]	; 0x48
 8008d2c:	625c      	str	r4, [r3, #36]	; 0x24
}
 8008d2e:	e7c5      	b.n	8008cbc <HAL_SPI_MspInit+0x18>
      Error_Handler();
 8008d30:	f7ff f99e 	bl	8008070 <Error_Handler>
 8008d34:	e7f8      	b.n	8008d28 <HAL_SPI_MspInit+0x84>
 8008d36:	bf00      	nop
 8008d38:	40003800 	.word	0x40003800
 8008d3c:	40020400 	.word	0x40020400
 8008d40:	20000988 	.word	0x20000988
 8008d44:	40026058 	.word	0x40026058

08008d48 <WAN_Handle>:
//-----------------------------------------------------------------------------
//! \brief      Handles the temperature measurement of the steamwand
//! \details    Handles the temperature measurement of the steamwand
//! \params	None
void WAN_Handle (void)
{
 8008d48:	b508      	push	{r3, lr}
	static uint16_t TickTimer=7;
	if (TickTimer ++ < 99) return; //100 ms interval
 8008d4a:	4b12      	ldr	r3, [pc, #72]	; (8008d94 <WAN_Handle+0x4c>)
 8008d4c:	881b      	ldrh	r3, [r3, #0]
 8008d4e:	2b62      	cmp	r3, #98	; 0x62
 8008d50:	d90f      	bls.n	8008d72 <WAN_Handle+0x2a>
	TickTimer = 0;
 8008d52:	4b10      	ldr	r3, [pc, #64]	; (8008d94 <WAN_Handle+0x4c>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	801a      	strh	r2, [r3, #0]

	if (!DUMMYMODE) WAN.GetTemperature = ANA_GetSensorValue(ADC_NTC4);
 8008d58:	4b0f      	ldr	r3, [pc, #60]	; (8008d98 <WAN_Handle+0x50>)
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	b16b      	cbz	r3, 8008d7a <WAN_Handle+0x32>
	if (MILK_PRESENT)
 8008d5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008d62:	480e      	ldr	r0, [pc, #56]	; (8008d9c <WAN_Handle+0x54>)
 8008d64:	f005 f996 	bl	800e094 <HAL_GPIO_ReadPin>
 8008d68:	b178      	cbz	r0, 8008d8a <WAN_Handle+0x42>
		WAN.StatusMilk = sEMPTY;
 8008d6a:	4b0d      	ldr	r3, [pc, #52]	; (8008da0 <WAN_Handle+0x58>)
 8008d6c:	220e      	movs	r2, #14
 8008d6e:	705a      	strb	r2, [r3, #1]
 8008d70:	e002      	b.n	8008d78 <WAN_Handle+0x30>
	if (TickTimer ++ < 99) return; //100 ms interval
 8008d72:	3301      	adds	r3, #1
 8008d74:	4a07      	ldr	r2, [pc, #28]	; (8008d94 <WAN_Handle+0x4c>)
 8008d76:	8013      	strh	r3, [r2, #0]
	else
		WAN.StatusMilk = sFULL;
}
 8008d78:	bd08      	pop	{r3, pc}
	if (!DUMMYMODE) WAN.GetTemperature = ANA_GetSensorValue(ADC_NTC4);
 8008d7a:	2005      	movs	r0, #5
 8008d7c:	f7fe f9c4 	bl	8007108 <ANA_GetSensorValue>
 8008d80:	f7fd fdae 	bl	80068e0 <__aeabi_f2uiz>
 8008d84:	4b06      	ldr	r3, [pc, #24]	; (8008da0 <WAN_Handle+0x58>)
 8008d86:	6058      	str	r0, [r3, #4]
 8008d88:	e7e9      	b.n	8008d5e <WAN_Handle+0x16>
		WAN.StatusMilk = sFULL;
 8008d8a:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <WAN_Handle+0x58>)
 8008d8c:	220d      	movs	r2, #13
 8008d8e:	705a      	strb	r2, [r3, #1]
 8008d90:	e7f2      	b.n	8008d78 <WAN_Handle+0x30>
 8008d92:	bf00      	nop
 8008d94:	2000005a 	.word	0x2000005a
 8008d98:	20000c48 	.word	0x20000c48
 8008d9c:	40020800 	.word	0x40020800
 8008da0:	20000a24 	.word	0x20000a24

08008da4 <WAN_GetStatus>:
//-----------------------------------------------------------------------------
//! \brief      Returns the status of the steam wand
//! \details    Returns the current status based n the switch
//! \param[out] enuStatus Position
enuStatus WAN_GetStatus (void)
{
 8008da4:	b508      	push	{r3, lr}
	//To be added: Evaluation of the sensors to determine the position of the steam wand
	if (STEAMWANDINPOS)
 8008da6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008daa:	480c      	ldr	r0, [pc, #48]	; (8008ddc <WAN_GetStatus+0x38>)
 8008dac:	f005 f972 	bl	800e094 <HAL_GPIO_ReadPin>
 8008db0:	b950      	cbnz	r0, 8008dc8 <WAN_GetStatus+0x24>
	{
		if (WAN.StatusMilk == sEMPTY)
 8008db2:	4b0b      	ldr	r3, [pc, #44]	; (8008de0 <WAN_GetStatus+0x3c>)
 8008db4:	785b      	ldrb	r3, [r3, #1]
 8008db6:	2b0e      	cmp	r3, #14
		{
			WAN.Status = sPARKEDNOFLUID;
 8008db8:	4b09      	ldr	r3, [pc, #36]	; (8008de0 <WAN_GetStatus+0x3c>)
 8008dba:	bf0c      	ite	eq
 8008dbc:	221a      	moveq	r2, #26
		}
		else
		{
			WAN.Status = sPARKEDFLUID;
 8008dbe:	2219      	movne	r2, #25
 8008dc0:	701a      	strb	r2, [r3, #0]
		{
			WAN.Status = sLIFTEDFLUID;
		}
	}
	return WAN.Status;
}
 8008dc2:	4b07      	ldr	r3, [pc, #28]	; (8008de0 <WAN_GetStatus+0x3c>)
 8008dc4:	7818      	ldrb	r0, [r3, #0]
 8008dc6:	bd08      	pop	{r3, pc}
		if (WAN.StatusMilk == sEMPTY)
 8008dc8:	4b05      	ldr	r3, [pc, #20]	; (8008de0 <WAN_GetStatus+0x3c>)
 8008dca:	785b      	ldrb	r3, [r3, #1]
 8008dcc:	2b0e      	cmp	r3, #14
			WAN.Status = sLIFTEDNOFLUID;
 8008dce:	4b04      	ldr	r3, [pc, #16]	; (8008de0 <WAN_GetStatus+0x3c>)
 8008dd0:	bf0c      	ite	eq
 8008dd2:	2218      	moveq	r2, #24
			WAN.Status = sLIFTEDFLUID;
 8008dd4:	2217      	movne	r2, #23
 8008dd6:	701a      	strb	r2, [r3, #0]
 8008dd8:	e7f3      	b.n	8008dc2 <WAN_GetStatus+0x1e>
 8008dda:	bf00      	nop
 8008ddc:	40020000 	.word	0x40020000
 8008de0:	20000a24 	.word	0x20000a24

08008de4 <WAN_GetTemperature>:
//! \details    Gets the temperature of the milk
//! \param[out] uint32_t Temperature
uint32_t WAN_GetTemperature (void)
{
	return WAN.GetTemperature;
}
 8008de4:	4b01      	ldr	r3, [pc, #4]	; (8008dec <WAN_GetTemperature+0x8>)
 8008de6:	6858      	ldr	r0, [r3, #4]
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	20000a24 	.word	0x20000a24

08008df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008df0:	b084      	sub	sp, #16
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8008df2:	4b0f      	ldr	r3, [pc, #60]	; (8008e30 <HAL_MspInit+0x40>)
 8008df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008df6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008dfa:	625a      	str	r2, [r3, #36]	; 0x24
 8008dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008dfe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008e02:	9201      	str	r2, [sp, #4]
 8008e04:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e06:	6a1a      	ldr	r2, [r3, #32]
 8008e08:	f042 0201 	orr.w	r2, r2, #1
 8008e0c:	621a      	str	r2, [r3, #32]
 8008e0e:	6a1a      	ldr	r2, [r3, #32]
 8008e10:	f002 0201 	and.w	r2, r2, #1
 8008e14:	9202      	str	r2, [sp, #8]
 8008e16:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008e1e:	625a      	str	r2, [r3, #36]	; 0x24
 8008e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e26:	9303      	str	r3, [sp, #12]
 8008e28:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008e2a:	b004      	add	sp, #16
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	40023800 	.word	0x40023800

08008e34 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008e34:	e7fe      	b.n	8008e34 <NMI_Handler>

08008e36 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008e36:	e7fe      	b.n	8008e36 <HardFault_Handler>

08008e38 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008e38:	e7fe      	b.n	8008e38 <MemManage_Handler>

08008e3a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008e3a:	e7fe      	b.n	8008e3a <BusFault_Handler>

08008e3c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008e3c:	e7fe      	b.n	8008e3c <UsageFault_Handler>

08008e3e <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008e3e:	4770      	bx	lr

08008e40 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008e40:	4770      	bx	lr

08008e42 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008e42:	4770      	bx	lr

08008e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008e44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  Flg1ms = 1;
 8008e46:	4b03      	ldr	r3, [pc, #12]	; (8008e54 <SysTick_Handler+0x10>)
 8008e48:	2201      	movs	r2, #1
 8008e4a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008e4c:	f004 f90e 	bl	800d06c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008e50:	bd08      	pop	{r3, pc}
 8008e52:	bf00      	nop
 8008e54:	20000c4b 	.word	0x20000c4b

08008e58 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8008e58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(ZC_Pin) != RESET) //Interrupt from zerocross
 8008e5a:	4b06      	ldr	r3, [pc, #24]	; (8008e74 <EXTI1_IRQHandler+0x1c>)
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	f013 0f02 	tst.w	r3, #2
 8008e62:	d103      	bne.n	8008e6c <EXTI1_IRQHandler+0x14>
	{
		WRK_HandleZeroCross();
	}
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZC_Pin);
 8008e64:	2002      	movs	r0, #2
 8008e66:	f005 f92b 	bl	800e0c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8008e6a:	bd08      	pop	{r3, pc}
		WRK_HandleZeroCross();
 8008e6c:	f000 fcde 	bl	800982c <WRK_HandleZeroCross>
 8008e70:	e7f8      	b.n	8008e64 <EXTI1_IRQHandler+0xc>
 8008e72:	bf00      	nop
 8008e74:	40010400 	.word	0x40010400

08008e78 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8008e78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  uint8_t Counter = AM_GetSensorCounter();
 8008e7a:	f7fe f871 	bl	8006f60 <AM_GetSensorCounter>
  if ((Counter >= 18) && (Counter<100))
 8008e7e:	3812      	subs	r0, #18
 8008e80:	b2c0      	uxtb	r0, r0
 8008e82:	2851      	cmp	r0, #81	; 0x51
 8008e84:	d903      	bls.n	8008e8e <EXTI3_IRQHandler+0x16>
  {
    AM_SetTimerValue(Counter - 18, TIM7->CNT);
    AM_IncreaseSensorCounter();
  }
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HT1_Pin);
 8008e86:	2008      	movs	r0, #8
 8008e88:	f005 f91a 	bl	800e0c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8008e8c:	bd08      	pop	{r3, pc}
    AM_SetTimerValue(Counter - 18, TIM7->CNT);
 8008e8e:	4b04      	ldr	r3, [pc, #16]	; (8008ea0 <EXTI3_IRQHandler+0x28>)
 8008e90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008e92:	b289      	uxth	r1, r1
 8008e94:	f7fe f83c 	bl	8006f10 <AM_SetTimerValue>
    AM_IncreaseSensorCounter();
 8008e98:	f7fe f868 	bl	8006f6c <AM_IncreaseSensorCounter>
 8008e9c:	e7f3      	b.n	8008e86 <EXTI3_IRQHandler+0xe>
 8008e9e:	bf00      	nop
 8008ea0:	40001400 	.word	0x40001400

08008ea4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008ea4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8008ea6:	4802      	ldr	r0, [pc, #8]	; (8008eb0 <DMA1_Channel1_IRQHandler+0xc>)
 8008ea8:	f004 fd95 	bl	800d9d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008eac:	bd08      	pop	{r3, pc}
 8008eae:	bf00      	nop
 8008eb0:	20000150 	.word	0x20000150

08008eb4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8008eb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8008eb6:	4802      	ldr	r0, [pc, #8]	; (8008ec0 <DMA1_Channel3_IRQHandler+0xc>)
 8008eb8:	f004 fd8d 	bl	800d9d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8008ebc:	bd08      	pop	{r3, pc}
 8008ebe:	bf00      	nop
 8008ec0:	20000b74 	.word	0x20000b74

08008ec4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8008ec4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8008ec6:	4802      	ldr	r0, [pc, #8]	; (8008ed0 <DMA1_Channel5_IRQHandler+0xc>)
 8008ec8:	f004 fd85 	bl	800d9d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8008ecc:	bd08      	pop	{r3, pc}
 8008ece:	bf00      	nop
 8008ed0:	20000988 	.word	0x20000988

08008ed4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8008ed4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8008ed6:	4802      	ldr	r0, [pc, #8]	; (8008ee0 <DMA1_Channel6_IRQHandler+0xc>)
 8008ed8:	f004 fd7d 	bl	800d9d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8008edc:	bd08      	pop	{r3, pc}
 8008ede:	bf00      	nop
 8008ee0:	20000b30 	.word	0x20000b30

08008ee4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8008ee4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8008ee6:	4802      	ldr	r0, [pc, #8]	; (8008ef0 <ADC1_IRQHandler+0xc>)
 8008ee8:	f004 f9ea 	bl	800d2c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8008eec:	bd08      	pop	{r3, pc}
 8008eee:	bf00      	nop
 8008ef0:	200000fc 	.word	0x200000fc

08008ef4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008ef4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(FM1_Pin) != RESET) //Interrupt from flow meter 1
 8008ef6:	4b0c      	ldr	r3, [pc, #48]	; (8008f28 <EXTI9_5_IRQHandler+0x34>)
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008efe:	d10b      	bne.n	8008f18 <EXTI9_5_IRQHandler+0x24>
	{
		PUM_SetPulses(P1);
	}
	else if(__HAL_GPIO_EXTI_GET_IT(FM2_Pin) != RESET) //Interrupt from flow meter 2
 8008f00:	4b09      	ldr	r3, [pc, #36]	; (8008f28 <EXTI9_5_IRQHandler+0x34>)
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008f08:	d10a      	bne.n	8008f20 <EXTI9_5_IRQHandler+0x2c>
	{
		PUM_SetPulses(P2);
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FM1_Pin);
 8008f0a:	2040      	movs	r0, #64	; 0x40
 8008f0c:	f005 f8d8 	bl	800e0c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FM2_Pin);
 8008f10:	2080      	movs	r0, #128	; 0x80
 8008f12:	f005 f8d5 	bl	800e0c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008f16:	bd08      	pop	{r3, pc}
		PUM_SetPulses(P1);
 8008f18:	2000      	movs	r0, #0
 8008f1a:	f7ff fcc3 	bl	80088a4 <PUM_SetPulses>
 8008f1e:	e7f4      	b.n	8008f0a <EXTI9_5_IRQHandler+0x16>
		PUM_SetPulses(P2);
 8008f20:	2001      	movs	r0, #1
 8008f22:	f7ff fcbf 	bl	80088a4 <PUM_SetPulses>
 8008f26:	e7f0      	b.n	8008f0a <EXTI9_5_IRQHandler+0x16>
 8008f28:	40010400 	.word	0x40010400

08008f2c <TIM9_IRQHandler>:

/**
  * @brief This function handles TIM9 global interrupt.
  */
void TIM9_IRQHandler(void)
{
 8008f2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM9_IRQn 0 */

  /* USER CODE END TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8008f2e:	4802      	ldr	r0, [pc, #8]	; (8008f38 <TIM9_IRQHandler+0xc>)
 8008f30:	f006 fb88 	bl	800f644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM9_IRQn 1 */

  /* USER CODE END TIM9_IRQn 1 */
}
 8008f34:	bd08      	pop	{r3, pc}
 8008f36:	bf00      	nop
 8008f38:	20000af0 	.word	0x20000af0

08008f3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008f3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008f3e:	4802      	ldr	r0, [pc, #8]	; (8008f48 <USART2_IRQHandler+0xc>)
 8008f40:	f006 fe82 	bl	800fc48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008f44:	bd08      	pop	{r3, pc}
 8008f46:	bf00      	nop
 8008f48:	20000bb8 	.word	0x20000bb8

08008f4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8008f4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008f4e:	4802      	ldr	r0, [pc, #8]	; (8008f58 <USART3_IRQHandler+0xc>)
 8008f50:	f006 fe7a 	bl	800fc48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8008f54:	bd08      	pop	{r3, pc}
 8008f56:	bf00      	nop
 8008f58:	20000bfc 	.word	0x20000bfc

08008f5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008f5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(EF1_Pin) != RESET) //Interrupt from Efast heater 1
 8008f5e:	4b0d      	ldr	r3, [pc, #52]	; (8008f94 <EXTI15_10_IRQHandler+0x38>)
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008f66:	d10d      	bne.n	8008f84 <EXTI15_10_IRQHandler+0x28>
	{
		HEA_IncEfast(0);
	}
	else if(__HAL_GPIO_EXTI_GET_IT(EF2_Pin) != RESET) //Interrupt from Efast heater 2
 8008f68:	4b0a      	ldr	r3, [pc, #40]	; (8008f94 <EXTI15_10_IRQHandler+0x38>)
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008f70:	d10c      	bne.n	8008f8c <EXTI15_10_IRQHandler+0x30>
	{
		HEA_IncEfast(1);
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EF1_Pin);
 8008f72:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008f76:	f005 f8a3 	bl	800e0c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EF2_Pin);
 8008f7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008f7e:	f005 f89f 	bl	800e0c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008f82:	bd08      	pop	{r3, pc}
		HEA_IncEfast(0);
 8008f84:	2000      	movs	r0, #0
 8008f86:	f7fe fb61 	bl	800764c <HEA_IncEfast>
 8008f8a:	e7f2      	b.n	8008f72 <EXTI15_10_IRQHandler+0x16>
		HEA_IncEfast(1);
 8008f8c:	2001      	movs	r0, #1
 8008f8e:	f7fe fb5d 	bl	800764c <HEA_IncEfast>
 8008f92:	e7ee      	b.n	8008f72 <EXTI15_10_IRQHandler+0x16>
 8008f94:	40010400 	.word	0x40010400

08008f98 <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008f98:	4770      	bx	lr
	...

08008f9c <MX_TIM6_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8008f9c:	b500      	push	{lr}
 8008f9e:	b083      	sub	sp, #12

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8008fa6:	480f      	ldr	r0, [pc, #60]	; (8008fe4 <MX_TIM6_Init+0x48>)
 8008fa8:	4a0f      	ldr	r2, [pc, #60]	; (8008fe8 <MX_TIM6_Init+0x4c>)
 8008faa:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 3199;
 8008fac:	f640 427f 	movw	r2, #3199	; 0xc7f
 8008fb0:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008fb2:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 65535;
 8008fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fb8:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008fba:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8008fbc:	f005 ff4f 	bl	800ee5e <HAL_TIM_Base_Init>
 8008fc0:	b950      	cbnz	r0, 8008fd8 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008fc6:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8008fc8:	4669      	mov	r1, sp
 8008fca:	4806      	ldr	r0, [pc, #24]	; (8008fe4 <MX_TIM6_Init+0x48>)
 8008fcc:	f006 fbd8 	bl	800f780 <HAL_TIMEx_MasterConfigSynchronization>
 8008fd0:	b928      	cbnz	r0, 8008fde <MX_TIM6_Init+0x42>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8008fd2:	b003      	add	sp, #12
 8008fd4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8008fd8:	f7ff f84a 	bl	8008070 <Error_Handler>
 8008fdc:	e7f1      	b.n	8008fc2 <MX_TIM6_Init+0x26>
    Error_Handler();
 8008fde:	f7ff f847 	bl	8008070 <Error_Handler>
}
 8008fe2:	e7f6      	b.n	8008fd2 <MX_TIM6_Init+0x36>
 8008fe4:	20000a70 	.word	0x20000a70
 8008fe8:	40001000 	.word	0x40001000

08008fec <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8008fec:	b500      	push	{lr}
 8008fee:	b083      	sub	sp, #12

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8008ff6:	480f      	ldr	r0, [pc, #60]	; (8009034 <MX_TIM7_Init+0x48>)
 8008ff8:	4a0f      	ldr	r2, [pc, #60]	; (8009038 <MX_TIM7_Init+0x4c>)
 8008ffa:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 31;
 8008ffc:	221f      	movs	r2, #31
 8008ffe:	6042      	str	r2, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009000:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 65535;
 8009002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009006:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009008:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800900a:	f005 ff28 	bl	800ee5e <HAL_TIM_Base_Init>
 800900e:	b950      	cbnz	r0, 8009026 <MX_TIM7_Init+0x3a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009010:	2300      	movs	r3, #0
 8009012:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009014:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8009016:	4669      	mov	r1, sp
 8009018:	4806      	ldr	r0, [pc, #24]	; (8009034 <MX_TIM7_Init+0x48>)
 800901a:	f006 fbb1 	bl	800f780 <HAL_TIMEx_MasterConfigSynchronization>
 800901e:	b928      	cbnz	r0, 800902c <MX_TIM7_Init+0x40>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8009020:	b003      	add	sp, #12
 8009022:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8009026:	f7ff f823 	bl	8008070 <Error_Handler>
 800902a:	e7f1      	b.n	8009010 <MX_TIM7_Init+0x24>
    Error_Handler();
 800902c:	f7ff f820 	bl	8008070 <Error_Handler>
}
 8009030:	e7f6      	b.n	8009020 <MX_TIM7_Init+0x34>
 8009032:	bf00      	nop
 8009034:	20000ab0 	.word	0x20000ab0
 8009038:	40001400 	.word	0x40001400

0800903c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800903c:	b500      	push	{lr}
 800903e:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009040:	2300      	movs	r3, #0
 8009042:	9306      	str	r3, [sp, #24]
 8009044:	9307      	str	r3, [sp, #28]
 8009046:	9308      	str	r3, [sp, #32]
 8009048:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800904a:	9304      	str	r3, [sp, #16]
 800904c:	9305      	str	r3, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	9301      	str	r3, [sp, #4]
 8009052:	9302      	str	r3, [sp, #8]
 8009054:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8009056:	4827      	ldr	r0, [pc, #156]	; (80090f4 <MX_TIM9_Init+0xb8>)
 8009058:	4a27      	ldr	r2, [pc, #156]	; (80090f8 <MX_TIM9_Init+0xbc>)
 800905a:	6002      	str	r2, [r0, #0]
  htim9.Init.Prescaler = 31;
 800905c:	221f      	movs	r2, #31
 800905e:	6042      	str	r2, [r0, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009060:	6083      	str	r3, [r0, #8]
  htim9.Init.Period = 9500;
 8009062:	f242 521c 	movw	r2, #9500	; 0x251c
 8009066:	60c2      	str	r2, [r0, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009068:	6103      	str	r3, [r0, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800906a:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800906c:	f005 fef7 	bl	800ee5e <HAL_TIM_Base_Init>
 8009070:	bb58      	cbnz	r0, 80090ca <MX_TIM9_Init+0x8e>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009076:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8009078:	a906      	add	r1, sp, #24
 800907a:	481e      	ldr	r0, [pc, #120]	; (80090f4 <MX_TIM9_Init+0xb8>)
 800907c:	f006 fa2f 	bl	800f4de <HAL_TIM_ConfigClockSource>
 8009080:	bb30      	cbnz	r0, 80090d0 <MX_TIM9_Init+0x94>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8009082:	481c      	ldr	r0, [pc, #112]	; (80090f4 <MX_TIM9_Init+0xb8>)
 8009084:	f005 ff73 	bl	800ef6e <HAL_TIM_OC_Init>
 8009088:	bb28      	cbnz	r0, 80090d6 <MX_TIM9_Init+0x9a>
  {
    Error_Handler();
  }
  if (HAL_TIM_OnePulse_Init(&htim9, TIM_OPMODE_SINGLE) != HAL_OK)
 800908a:	2108      	movs	r1, #8
 800908c:	4819      	ldr	r0, [pc, #100]	; (80090f4 <MX_TIM9_Init+0xb8>)
 800908e:	f006 f91c 	bl	800f2ca <HAL_TIM_OnePulse_Init>
 8009092:	bb18      	cbnz	r0, 80090dc <MX_TIM9_Init+0xa0>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009094:	2300      	movs	r3, #0
 8009096:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009098:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 800909a:	a904      	add	r1, sp, #16
 800909c:	4815      	ldr	r0, [pc, #84]	; (80090f4 <MX_TIM9_Init+0xb8>)
 800909e:	f006 fb6f 	bl	800f780 <HAL_TIMEx_MasterConfigSynchronization>
 80090a2:	b9f0      	cbnz	r0, 80090e2 <MX_TIM9_Init+0xa6>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80090a4:	2200      	movs	r2, #0
 80090a6:	9200      	str	r2, [sp, #0]
  sConfigOC.Pulse = 0;
 80090a8:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80090aa:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80090ac:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80090ae:	4669      	mov	r1, sp
 80090b0:	4810      	ldr	r0, [pc, #64]	; (80090f4 <MX_TIM9_Init+0xb8>)
 80090b2:	f006 f934 	bl	800f31e <HAL_TIM_OC_ConfigChannel>
 80090b6:	b9b8      	cbnz	r0, 80090e8 <MX_TIM9_Init+0xac>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80090b8:	2204      	movs	r2, #4
 80090ba:	4669      	mov	r1, sp
 80090bc:	480d      	ldr	r0, [pc, #52]	; (80090f4 <MX_TIM9_Init+0xb8>)
 80090be:	f006 f92e 	bl	800f31e <HAL_TIM_OC_ConfigChannel>
 80090c2:	b9a0      	cbnz	r0, 80090ee <MX_TIM9_Init+0xb2>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80090c4:	b00b      	add	sp, #44	; 0x2c
 80090c6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80090ca:	f7fe ffd1 	bl	8008070 <Error_Handler>
 80090ce:	e7d0      	b.n	8009072 <MX_TIM9_Init+0x36>
    Error_Handler();
 80090d0:	f7fe ffce 	bl	8008070 <Error_Handler>
 80090d4:	e7d5      	b.n	8009082 <MX_TIM9_Init+0x46>
    Error_Handler();
 80090d6:	f7fe ffcb 	bl	8008070 <Error_Handler>
 80090da:	e7d6      	b.n	800908a <MX_TIM9_Init+0x4e>
    Error_Handler();
 80090dc:	f7fe ffc8 	bl	8008070 <Error_Handler>
 80090e0:	e7d8      	b.n	8009094 <MX_TIM9_Init+0x58>
    Error_Handler();
 80090e2:	f7fe ffc5 	bl	8008070 <Error_Handler>
 80090e6:	e7dd      	b.n	80090a4 <MX_TIM9_Init+0x68>
    Error_Handler();
 80090e8:	f7fe ffc2 	bl	8008070 <Error_Handler>
 80090ec:	e7e4      	b.n	80090b8 <MX_TIM9_Init+0x7c>
    Error_Handler();
 80090ee:	f7fe ffbf 	bl	8008070 <Error_Handler>
}
 80090f2:	e7e7      	b.n	80090c4 <MX_TIM9_Init+0x88>
 80090f4:	20000af0 	.word	0x20000af0
 80090f8:	40010800 	.word	0x40010800

080090fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM3)
 80090fc:	6802      	ldr	r2, [r0, #0]
 80090fe:	4b09      	ldr	r3, [pc, #36]	; (8009124 <HAL_TIM_PWM_MspInit+0x28>)
 8009100:	429a      	cmp	r2, r3
 8009102:	d000      	beq.n	8009106 <HAL_TIM_PWM_MspInit+0xa>
 8009104:	4770      	bx	lr
{
 8009106:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009108:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 800910c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800910e:	f042 0202 	orr.w	r2, r2, #2
 8009112:	625a      	str	r2, [r3, #36]	; 0x24
 8009114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009116:	f003 0302 	and.w	r3, r3, #2
 800911a:	9301      	str	r3, [sp, #4]
 800911c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800911e:	b002      	add	sp, #8
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	40000400 	.word	0x40000400

08009128 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009128:	b500      	push	{lr}
 800912a:	b085      	sub	sp, #20

  if(tim_baseHandle->Instance==TIM6)
 800912c:	6803      	ldr	r3, [r0, #0]
 800912e:	4a1a      	ldr	r2, [pc, #104]	; (8009198 <HAL_TIM_Base_MspInit+0x70>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d008      	beq.n	8009146 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM7)
 8009134:	4a19      	ldr	r2, [pc, #100]	; (800919c <HAL_TIM_Base_MspInit+0x74>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d010      	beq.n	800915c <HAL_TIM_Base_MspInit+0x34>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM9)
 800913a:	4a19      	ldr	r2, [pc, #100]	; (80091a0 <HAL_TIM_Base_MspInit+0x78>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d018      	beq.n	8009172 <HAL_TIM_Base_MspInit+0x4a>
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8009140:	b005      	add	sp, #20
 8009142:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM6_CLK_ENABLE();
 8009146:	4b17      	ldr	r3, [pc, #92]	; (80091a4 <HAL_TIM_Base_MspInit+0x7c>)
 8009148:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800914a:	f042 0210 	orr.w	r2, r2, #16
 800914e:	625a      	str	r2, [r3, #36]	; 0x24
 8009150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009152:	f003 0310 	and.w	r3, r3, #16
 8009156:	9301      	str	r3, [sp, #4]
 8009158:	9b01      	ldr	r3, [sp, #4]
 800915a:	e7f1      	b.n	8009140 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800915c:	4b11      	ldr	r3, [pc, #68]	; (80091a4 <HAL_TIM_Base_MspInit+0x7c>)
 800915e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009160:	f042 0220 	orr.w	r2, r2, #32
 8009164:	625a      	str	r2, [r3, #36]	; 0x24
 8009166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009168:	f003 0320 	and.w	r3, r3, #32
 800916c:	9302      	str	r3, [sp, #8]
 800916e:	9b02      	ldr	r3, [sp, #8]
 8009170:	e7e6      	b.n	8009140 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8009172:	4b0c      	ldr	r3, [pc, #48]	; (80091a4 <HAL_TIM_Base_MspInit+0x7c>)
 8009174:	6a1a      	ldr	r2, [r3, #32]
 8009176:	f042 0204 	orr.w	r2, r2, #4
 800917a:	621a      	str	r2, [r3, #32]
 800917c:	6a1b      	ldr	r3, [r3, #32]
 800917e:	f003 0304 	and.w	r3, r3, #4
 8009182:	9303      	str	r3, [sp, #12]
 8009184:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8009186:	2200      	movs	r2, #0
 8009188:	4611      	mov	r1, r2
 800918a:	2019      	movs	r0, #25
 800918c:	f004 face 	bl	800d72c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
 8009190:	2019      	movs	r0, #25
 8009192:	f004 fb01 	bl	800d798 <HAL_NVIC_EnableIRQ>
}
 8009196:	e7d3      	b.n	8009140 <HAL_TIM_Base_MspInit+0x18>
 8009198:	40001000 	.word	0x40001000
 800919c:	40001400 	.word	0x40001400
 80091a0:	40010800 	.word	0x40010800
 80091a4:	40023800 	.word	0x40023800

080091a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80091a8:	b500      	push	{lr}
 80091aa:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091ac:	2300      	movs	r3, #0
 80091ae:	9301      	str	r3, [sp, #4]
 80091b0:	9302      	str	r3, [sp, #8]
 80091b2:	9303      	str	r3, [sp, #12]
 80091b4:	9304      	str	r3, [sp, #16]
 80091b6:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM3)
 80091b8:	6802      	ldr	r2, [r0, #0]
 80091ba:	4b0d      	ldr	r3, [pc, #52]	; (80091f0 <HAL_TIM_MspPostInit+0x48>)
 80091bc:	429a      	cmp	r2, r3
 80091be:	d002      	beq.n	80091c6 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80091c0:	b007      	add	sp, #28
 80091c2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80091c6:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 80091ca:	69da      	ldr	r2, [r3, #28]
 80091cc:	f042 0202 	orr.w	r2, r2, #2
 80091d0:	61da      	str	r2, [r3, #28]
 80091d2:	69db      	ldr	r3, [r3, #28]
 80091d4:	f003 0302 	and.w	r3, r3, #2
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = P3_Pin;
 80091dc:	2320      	movs	r3, #32
 80091de:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091e0:	2302      	movs	r3, #2
 80091e2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80091e4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(P3_GPIO_Port, &GPIO_InitStruct);
 80091e6:	a901      	add	r1, sp, #4
 80091e8:	4802      	ldr	r0, [pc, #8]	; (80091f4 <HAL_TIM_MspPostInit+0x4c>)
 80091ea:	f004 fe6f 	bl	800decc <HAL_GPIO_Init>
}
 80091ee:	e7e7      	b.n	80091c0 <HAL_TIM_MspPostInit+0x18>
 80091f0:	40000400 	.word	0x40000400
 80091f4:	40020400 	.word	0x40020400

080091f8 <MX_TIM3_Init>:
{
 80091f8:	b500      	push	{lr}
 80091fa:	b087      	sub	sp, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80091fc:	2300      	movs	r3, #0
 80091fe:	9304      	str	r3, [sp, #16]
 8009200:	9305      	str	r3, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	9301      	str	r3, [sp, #4]
 8009206:	9302      	str	r3, [sp, #8]
 8009208:	9303      	str	r3, [sp, #12]
  htim3.Instance = TIM3;
 800920a:	4818      	ldr	r0, [pc, #96]	; (800926c <MX_TIM3_Init+0x74>)
 800920c:	4a18      	ldr	r2, [pc, #96]	; (8009270 <MX_TIM3_Init+0x78>)
 800920e:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 15;
 8009210:	220f      	movs	r2, #15
 8009212:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009214:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 99;
 8009216:	2263      	movs	r2, #99	; 0x63
 8009218:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800921a:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800921c:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800921e:	f005 ffd4 	bl	800f1ca <HAL_TIM_PWM_Init>
 8009222:	b9c8      	cbnz	r0, 8009258 <MX_TIM3_Init+0x60>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009224:	2300      	movs	r3, #0
 8009226:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009228:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800922a:	a904      	add	r1, sp, #16
 800922c:	480f      	ldr	r0, [pc, #60]	; (800926c <MX_TIM3_Init+0x74>)
 800922e:	f006 faa7 	bl	800f780 <HAL_TIMEx_MasterConfigSynchronization>
 8009232:	b9a0      	cbnz	r0, 800925e <MX_TIM3_Init+0x66>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009234:	2360      	movs	r3, #96	; 0x60
 8009236:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8009238:	2300      	movs	r3, #0
 800923a:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800923c:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800923e:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009240:	2204      	movs	r2, #4
 8009242:	4669      	mov	r1, sp
 8009244:	4809      	ldr	r0, [pc, #36]	; (800926c <MX_TIM3_Init+0x74>)
 8009246:	f006 f8ba 	bl	800f3be <HAL_TIM_PWM_ConfigChannel>
 800924a:	b958      	cbnz	r0, 8009264 <MX_TIM3_Init+0x6c>
  HAL_TIM_MspPostInit(&htim3);
 800924c:	4807      	ldr	r0, [pc, #28]	; (800926c <MX_TIM3_Init+0x74>)
 800924e:	f7ff ffab 	bl	80091a8 <HAL_TIM_MspPostInit>
}
 8009252:	b007      	add	sp, #28
 8009254:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8009258:	f7fe ff0a 	bl	8008070 <Error_Handler>
 800925c:	e7e2      	b.n	8009224 <MX_TIM3_Init+0x2c>
    Error_Handler();
 800925e:	f7fe ff07 	bl	8008070 <Error_Handler>
 8009262:	e7e7      	b.n	8009234 <MX_TIM3_Init+0x3c>
    Error_Handler();
 8009264:	f7fe ff04 	bl	8008070 <Error_Handler>
 8009268:	e7f0      	b.n	800924c <MX_TIM3_Init+0x54>
 800926a:	bf00      	nop
 800926c:	20000a30 	.word	0x20000a30
 8009270:	40000400 	.word	0x40000400

08009274 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009274:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009276:	480a      	ldr	r0, [pc, #40]	; (80092a0 <MX_USART2_UART_Init+0x2c>)
 8009278:	4b0a      	ldr	r3, [pc, #40]	; (80092a4 <MX_USART2_UART_Init+0x30>)
 800927a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800927c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8009280:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009282:	2300      	movs	r3, #0
 8009284:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009286:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009288:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800928a:	220c      	movs	r2, #12
 800928c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800928e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009290:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009292:	f006 fb61 	bl	800f958 <HAL_UART_Init>
 8009296:	b900      	cbnz	r0, 800929a <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009298:	bd08      	pop	{r3, pc}
    Error_Handler();
 800929a:	f7fe fee9 	bl	8008070 <Error_Handler>
}
 800929e:	e7fb      	b.n	8009298 <MX_USART2_UART_Init+0x24>
 80092a0:	20000bb8 	.word	0x20000bb8
 80092a4:	40004400 	.word	0x40004400

080092a8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80092a8:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80092aa:	480a      	ldr	r0, [pc, #40]	; (80092d4 <MX_USART3_UART_Init+0x2c>)
 80092ac:	4b0a      	ldr	r3, [pc, #40]	; (80092d8 <MX_USART3_UART_Init+0x30>)
 80092ae:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80092b0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80092b4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80092b6:	2300      	movs	r3, #0
 80092b8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80092ba:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80092bc:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80092be:	220c      	movs	r2, #12
 80092c0:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80092c2:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80092c4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80092c6:	f006 fb47 	bl	800f958 <HAL_UART_Init>
 80092ca:	b900      	cbnz	r0, 80092ce <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80092cc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80092ce:	f7fe fecf 	bl	8008070 <Error_Handler>
}
 80092d2:	e7fb      	b.n	80092cc <MX_USART3_UART_Init+0x24>
 80092d4:	20000bfc 	.word	0x20000bfc
 80092d8:	40004800 	.word	0x40004800

080092dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80092dc:	b510      	push	{r4, lr}
 80092de:	b08a      	sub	sp, #40	; 0x28
 80092e0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092e2:	2300      	movs	r3, #0
 80092e4:	9305      	str	r3, [sp, #20]
 80092e6:	9306      	str	r3, [sp, #24]
 80092e8:	9307      	str	r3, [sp, #28]
 80092ea:	9308      	str	r3, [sp, #32]
 80092ec:	9309      	str	r3, [sp, #36]	; 0x24
  if(uartHandle->Instance==USART2)
 80092ee:	6803      	ldr	r3, [r0, #0]
 80092f0:	4a42      	ldr	r2, [pc, #264]	; (80093fc <HAL_UART_MspInit+0x120>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d004      	beq.n	8009300 <HAL_UART_MspInit+0x24>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 80092f6:	4a42      	ldr	r2, [pc, #264]	; (8009400 <HAL_UART_MspInit+0x124>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d03f      	beq.n	800937c <HAL_UART_MspInit+0xa0>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80092fc:	b00a      	add	sp, #40	; 0x28
 80092fe:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8009300:	4b40      	ldr	r3, [pc, #256]	; (8009404 <HAL_UART_MspInit+0x128>)
 8009302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009304:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009308:	625a      	str	r2, [r3, #36]	; 0x24
 800930a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800930c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8009310:	9201      	str	r2, [sp, #4]
 8009312:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009314:	69da      	ldr	r2, [r3, #28]
 8009316:	f042 0201 	orr.w	r2, r2, #1
 800931a:	61da      	str	r2, [r3, #28]
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	9302      	str	r3, [sp, #8]
 8009324:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009326:	230c      	movs	r3, #12
 8009328:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800932a:	2302      	movs	r3, #2
 800932c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800932e:	2303      	movs	r3, #3
 8009330:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009332:	2307      	movs	r3, #7
 8009334:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009336:	a905      	add	r1, sp, #20
 8009338:	4833      	ldr	r0, [pc, #204]	; (8009408 <HAL_UART_MspInit+0x12c>)
 800933a:	f004 fdc7 	bl	800decc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800933e:	4833      	ldr	r0, [pc, #204]	; (800940c <HAL_UART_MspInit+0x130>)
 8009340:	4b33      	ldr	r3, [pc, #204]	; (8009410 <HAL_UART_MspInit+0x134>)
 8009342:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009344:	2300      	movs	r3, #0
 8009346:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009348:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800934a:	2280      	movs	r2, #128	; 0x80
 800934c:	60c2      	str	r2, [r0, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800934e:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009350:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8009352:	2220      	movs	r2, #32
 8009354:	6182      	str	r2, [r0, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009356:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8009358:	f004 fa52 	bl	800d800 <HAL_DMA_Init>
 800935c:	b958      	cbnz	r0, 8009376 <HAL_UART_MspInit+0x9a>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800935e:	4b2b      	ldr	r3, [pc, #172]	; (800940c <HAL_UART_MspInit+0x130>)
 8009360:	63a3      	str	r3, [r4, #56]	; 0x38
 8009362:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009364:	2200      	movs	r2, #0
 8009366:	4611      	mov	r1, r2
 8009368:	2026      	movs	r0, #38	; 0x26
 800936a:	f004 f9df 	bl	800d72c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800936e:	2026      	movs	r0, #38	; 0x26
 8009370:	f004 fa12 	bl	800d798 <HAL_NVIC_EnableIRQ>
 8009374:	e7c2      	b.n	80092fc <HAL_UART_MspInit+0x20>
      Error_Handler();
 8009376:	f7fe fe7b 	bl	8008070 <Error_Handler>
 800937a:	e7f0      	b.n	800935e <HAL_UART_MspInit+0x82>
    __HAL_RCC_USART3_CLK_ENABLE();
 800937c:	4b21      	ldr	r3, [pc, #132]	; (8009404 <HAL_UART_MspInit+0x128>)
 800937e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009380:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8009384:	625a      	str	r2, [r3, #36]	; 0x24
 8009386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009388:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800938c:	9203      	str	r2, [sp, #12]
 800938e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009390:	69da      	ldr	r2, [r3, #28]
 8009392:	f042 0202 	orr.w	r2, r2, #2
 8009396:	61da      	str	r2, [r3, #28]
 8009398:	69db      	ldr	r3, [r3, #28]
 800939a:	f003 0302 	and.w	r3, r3, #2
 800939e:	9304      	str	r3, [sp, #16]
 80093a0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80093a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80093a6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093a8:	2302      	movs	r3, #2
 80093aa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093ac:	2303      	movs	r3, #3
 80093ae:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80093b0:	2307      	movs	r3, #7
 80093b2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80093b4:	a905      	add	r1, sp, #20
 80093b6:	4817      	ldr	r0, [pc, #92]	; (8009414 <HAL_UART_MspInit+0x138>)
 80093b8:	f004 fd88 	bl	800decc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80093bc:	4816      	ldr	r0, [pc, #88]	; (8009418 <HAL_UART_MspInit+0x13c>)
 80093be:	4b17      	ldr	r3, [pc, #92]	; (800941c <HAL_UART_MspInit+0x140>)
 80093c0:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80093c2:	2300      	movs	r3, #0
 80093c4:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80093c6:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80093c8:	2280      	movs	r2, #128	; 0x80
 80093ca:	60c2      	str	r2, [r0, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80093cc:	6103      	str	r3, [r0, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80093ce:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80093d0:	2220      	movs	r2, #32
 80093d2:	6182      	str	r2, [r0, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80093d4:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80093d6:	f004 fa13 	bl	800d800 <HAL_DMA_Init>
 80093da:	b958      	cbnz	r0, 80093f4 <HAL_UART_MspInit+0x118>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80093dc:	4b0e      	ldr	r3, [pc, #56]	; (8009418 <HAL_UART_MspInit+0x13c>)
 80093de:	63a3      	str	r3, [r4, #56]	; 0x38
 80093e0:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80093e2:	2200      	movs	r2, #0
 80093e4:	4611      	mov	r1, r2
 80093e6:	2027      	movs	r0, #39	; 0x27
 80093e8:	f004 f9a0 	bl	800d72c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80093ec:	2027      	movs	r0, #39	; 0x27
 80093ee:	f004 f9d3 	bl	800d798 <HAL_NVIC_EnableIRQ>
}
 80093f2:	e783      	b.n	80092fc <HAL_UART_MspInit+0x20>
      Error_Handler();
 80093f4:	f7fe fe3c 	bl	8008070 <Error_Handler>
 80093f8:	e7f0      	b.n	80093dc <HAL_UART_MspInit+0x100>
 80093fa:	bf00      	nop
 80093fc:	40004400 	.word	0x40004400
 8009400:	40004800 	.word	0x40004800
 8009404:	40023800 	.word	0x40023800
 8009408:	40020000 	.word	0x40020000
 800940c:	20000b30 	.word	0x20000b30
 8009410:	4002606c 	.word	0x4002606c
 8009414:	40020400 	.word	0x40020400
 8009418:	20000b74 	.word	0x20000b74
 800941c:	40026030 	.word	0x40026030

08009420 <VAL_GetStatus>:
{
	uint8_t ValveSetting = 0;
	//return OutputRegister;
	for (uint8_t i = 0; i<10;i++)
	{
		if (VAL_CircuitSettings[i] == OutputRegister) ValveSetting = i;
 8009420:	4b0b      	ldr	r3, [pc, #44]	; (8009450 <VAL_GetStatus+0x30>)
 8009422:	f893 c000 	ldrb.w	ip, [r3]
 8009426:	4a0b      	ldr	r2, [pc, #44]	; (8009454 <VAL_GetStatus+0x34>)
	for (uint8_t i = 0; i<10;i++)
 8009428:	2300      	movs	r3, #0
	uint8_t ValveSetting = 0;
 800942a:	4618      	mov	r0, r3
		if (VAL_CircuitSettings[i] == OutputRegister) ValveSetting = i;
 800942c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009430:	4561      	cmp	r1, ip
 8009432:	bf08      	it	eq
 8009434:	4618      	moveq	r0, r3
	for (uint8_t i = 0; i<10;i++)
 8009436:	3301      	adds	r3, #1
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b0a      	cmp	r3, #10
 800943c:	d1f6      	bne.n	800942c <VAL_GetStatus+0xc>
	}
	if ((ValveSetting == 4) || (ValveSetting == 7)) ValveSetting = 0;
 800943e:	2804      	cmp	r0, #4
 8009440:	d003      	beq.n	800944a <VAL_GetStatus+0x2a>
 8009442:	2807      	cmp	r0, #7
 8009444:	bf08      	it	eq
 8009446:	2000      	moveq	r0, #0
 8009448:	4770      	bx	lr
 800944a:	2000      	movs	r0, #0
	return ValveSetting;
}
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	20000c40 	.word	0x20000c40
 8009454:	20000064 	.word	0x20000064

08009458 <VAL_SetCircuit>:
//! \details    Sets GPIO and enables the shiftregister
//! \param[in]	uint8_t newCircuitSetting (CIRCUIT1_OFF,CIRCUIT1_COFFEE,CIRCUIT1_MILK,CIRCUIT1_WATER,CIRCUIT2_OFF,CIRCUIT2_MILK,CIRCUIT2_WATER,CIRCUIT1_2_OFFOFF,CIRCUIT1_2_MILKMILK,CIRCUIT1_2_WATERWATER)
//! \param[in]	uint8_t newIncludeS3  (0 = Don't include S3, 1 = Include S3) Only for switching off
void VAL_SetCircuit (uint8_t newCircuitSetting, uint8_t newIncludeS3)
{
	if (newCircuitSetting == CIRCUIT_1_OFF)
 8009458:	4603      	mov	r3, r0
 800945a:	b958      	cbnz	r0, 8009474 <VAL_SetCircuit+0x1c>
	{
		if (newIncludeS3) OutputRegister &= ~VAL_S3; //Reset the S3
 800945c:	b121      	cbz	r1, 8009468 <VAL_SetCircuit+0x10>
 800945e:	4a22      	ldr	r2, [pc, #136]	; (80094e8 <VAL_SetCircuit+0x90>)
 8009460:	7813      	ldrb	r3, [r2, #0]
 8009462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009466:	7013      	strb	r3, [r2, #0]
		OutputRegister &= ~VAL_ALL_CIRCUIT_1; //Reset the valves in circuit 1
 8009468:	4a1f      	ldr	r2, [pc, #124]	; (80094e8 <VAL_SetCircuit+0x90>)
 800946a:	7813      	ldrb	r3, [r2, #0]
 800946c:	f023 030f 	bic.w	r3, r3, #15
 8009470:	7013      	strb	r3, [r2, #0]
 8009472:	4770      	bx	lr
	}
	else if (newCircuitSetting == CIRCUIT_2_OFF)
 8009474:	2804      	cmp	r0, #4
 8009476:	d013      	beq.n	80094a0 <VAL_SetCircuit+0x48>
	{
		if (newIncludeS3) OutputRegister &= ~VAL_S3; //Reset the S3
		OutputRegister &= ~VAL_ALL_CIRCUIT_2; //Reset the valves in circuit 2
	}
	else if (newCircuitSetting == CIRCUIT_1_2_OFF)
 8009478:	2807      	cmp	r0, #7
 800947a:	d01d      	beq.n	80094b8 <VAL_SetCircuit+0x60>
	{
			OutputRegister = 0;
	}
	else if ((newCircuitSetting == CIRCUIT_1_2_MILK) || (newCircuitSetting == CIRCUIT_1_2_WATER))
 800947c:	f1a0 0208 	sub.w	r2, r0, #8
 8009480:	b2d2      	uxtb	r2, r2
 8009482:	2a01      	cmp	r2, #1
 8009484:	d91c      	bls.n	80094c0 <VAL_SetCircuit+0x68>
	{
		OutputRegister = 0; //Reset the Output buffer to 0
		OutputRegister |= VAL_CircuitSettings[newCircuitSetting]; //Set the valves in circuit 1 and 2
	}
	else if ((newCircuitSetting == CIRCUIT_1_COFFEE) || (newCircuitSetting == CIRCUIT_1_MILK) || (newCircuitSetting == CIRCUIT_1_WATER))
 8009486:	1e42      	subs	r2, r0, #1
 8009488:	b2d2      	uxtb	r2, r2
 800948a:	2a02      	cmp	r2, #2
 800948c:	d81d      	bhi.n	80094ca <VAL_SetCircuit+0x72>
	{
		OutputRegister &= ~VAL_ALL_CIRCUIT_1; //Reset the valves in circuit 1
		OutputRegister |= VAL_CircuitSettings[newCircuitSetting]; //Set the valves in circuit 1
 800948e:	4916      	ldr	r1, [pc, #88]	; (80094e8 <VAL_SetCircuit+0x90>)
		OutputRegister &= ~VAL_ALL_CIRCUIT_1; //Reset the valves in circuit 1
 8009490:	780a      	ldrb	r2, [r1, #0]
 8009492:	f022 020f 	bic.w	r2, r2, #15
		OutputRegister |= VAL_CircuitSettings[newCircuitSetting]; //Set the valves in circuit 1
 8009496:	4815      	ldr	r0, [pc, #84]	; (80094ec <VAL_SetCircuit+0x94>)
 8009498:	5cc3      	ldrb	r3, [r0, r3]
 800949a:	4313      	orrs	r3, r2
 800949c:	700b      	strb	r3, [r1, #0]
 800949e:	4770      	bx	lr
		if (newIncludeS3) OutputRegister &= ~VAL_S3; //Reset the S3
 80094a0:	b121      	cbz	r1, 80094ac <VAL_SetCircuit+0x54>
 80094a2:	4a11      	ldr	r2, [pc, #68]	; (80094e8 <VAL_SetCircuit+0x90>)
 80094a4:	7813      	ldrb	r3, [r2, #0]
 80094a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094aa:	7013      	strb	r3, [r2, #0]
		OutputRegister &= ~VAL_ALL_CIRCUIT_2; //Reset the valves in circuit 2
 80094ac:	4a0e      	ldr	r2, [pc, #56]	; (80094e8 <VAL_SetCircuit+0x90>)
 80094ae:	7813      	ldrb	r3, [r2, #0]
 80094b0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80094b4:	7013      	strb	r3, [r2, #0]
 80094b6:	4770      	bx	lr
			OutputRegister = 0;
 80094b8:	4b0b      	ldr	r3, [pc, #44]	; (80094e8 <VAL_SetCircuit+0x90>)
 80094ba:	2200      	movs	r2, #0
 80094bc:	701a      	strb	r2, [r3, #0]
 80094be:	4770      	bx	lr
		OutputRegister |= VAL_CircuitSettings[newCircuitSetting]; //Set the valves in circuit 1 and 2
 80094c0:	4a0a      	ldr	r2, [pc, #40]	; (80094ec <VAL_SetCircuit+0x94>)
 80094c2:	5c12      	ldrb	r2, [r2, r0]
 80094c4:	4b08      	ldr	r3, [pc, #32]	; (80094e8 <VAL_SetCircuit+0x90>)
 80094c6:	701a      	strb	r2, [r3, #0]
 80094c8:	4770      	bx	lr
	}
	else if ((newCircuitSetting == CIRCUIT_2_MILK) || (newCircuitSetting == CIRCUIT_2_WATER))
 80094ca:	1f42      	subs	r2, r0, #5
 80094cc:	b2d2      	uxtb	r2, r2
 80094ce:	2a01      	cmp	r2, #1
 80094d0:	d900      	bls.n	80094d4 <VAL_SetCircuit+0x7c>
	{
		OutputRegister &= ~VAL_ALL_CIRCUIT_2; //Reset the valves in circuit 2
		OutputRegister |= VAL_CircuitSettings[newCircuitSetting]; //Set the valves in circuit 2
	}
}
 80094d2:	4770      	bx	lr
		OutputRegister |= VAL_CircuitSettings[newCircuitSetting]; //Set the valves in circuit 2
 80094d4:	4904      	ldr	r1, [pc, #16]	; (80094e8 <VAL_SetCircuit+0x90>)
		OutputRegister &= ~VAL_ALL_CIRCUIT_2; //Reset the valves in circuit 2
 80094d6:	780a      	ldrb	r2, [r1, #0]
 80094d8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
		OutputRegister |= VAL_CircuitSettings[newCircuitSetting]; //Set the valves in circuit 2
 80094dc:	4803      	ldr	r0, [pc, #12]	; (80094ec <VAL_SetCircuit+0x94>)
 80094de:	5cc3      	ldrb	r3, [r0, r3]
 80094e0:	4313      	orrs	r3, r2
 80094e2:	700b      	strb	r3, [r1, #0]
}
 80094e4:	e7f5      	b.n	80094d2 <VAL_SetCircuit+0x7a>
 80094e6:	bf00      	nop
 80094e8:	20000c40 	.word	0x20000c40
 80094ec:	20000064 	.word	0x20000064

080094f0 <VAL_Handle>:
void VAL_Handle(void)
{
	static uint8_t OutputRegisterOld = 255; //Switches all valves off at startup
	static uint8_t StepCounter = 0;

	if (DUMMYMODE) return; //In dummymode, don't switch on the valves
 80094f0:	4b36      	ldr	r3, [pc, #216]	; (80095cc <VAL_Handle+0xdc>)
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d168      	bne.n	80095ca <VAL_Handle+0xda>

	if (OutputRegister == OutputRegisterOld)
 80094f8:	4b35      	ldr	r3, [pc, #212]	; (80095d0 <VAL_Handle+0xe0>)
 80094fa:	781a      	ldrb	r2, [r3, #0]
 80094fc:	4b35      	ldr	r3, [pc, #212]	; (80095d4 <VAL_Handle+0xe4>)
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	429a      	cmp	r2, r3
 8009502:	d01a      	beq.n	800953a <VAL_Handle+0x4a>
{
 8009504:	b510      	push	{r4, lr}
	{
		StepCounter = 0;
		return;
	}

	if (StepCounter > 0) SRCLK595_TOGGLE(); //Toggle the clock pin
 8009506:	4b34      	ldr	r3, [pc, #208]	; (80095d8 <VAL_Handle+0xe8>)
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	b9d3      	cbnz	r3, 8009542 <VAL_Handle+0x52>
	if (StepCounter == 0)
	{
		SER595_L();
 800950c:	4c33      	ldr	r4, [pc, #204]	; (80095dc <VAL_Handle+0xec>)
 800950e:	2200      	movs	r2, #0
 8009510:	2140      	movs	r1, #64	; 0x40
 8009512:	4620      	mov	r0, r4
 8009514:	f004 fdc4 	bl	800e0a0 <HAL_GPIO_WritePin>
		RCLK595_L();
 8009518:	2200      	movs	r2, #0
 800951a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800951e:	4620      	mov	r0, r4
 8009520:	f004 fdbe 	bl	800e0a0 <HAL_GPIO_WritePin>
		SRCLK595_L(); //Set clock pulse low
 8009524:	2200      	movs	r2, #0
 8009526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800952a:	4620      	mov	r0, r4
 800952c:	f004 fdb8 	bl	800e0a0 <HAL_GPIO_WritePin>
	else if (StepCounter == 21)
	{
		RCLK595_L();
		OutputRegisterOld = OutputRegister;
	}
	StepCounter++;
 8009530:	4a29      	ldr	r2, [pc, #164]	; (80095d8 <VAL_Handle+0xe8>)
 8009532:	7813      	ldrb	r3, [r2, #0]
 8009534:	3301      	adds	r3, #1
 8009536:	7013      	strb	r3, [r2, #0]
}
 8009538:	bd10      	pop	{r4, pc}
		StepCounter = 0;
 800953a:	4b27      	ldr	r3, [pc, #156]	; (80095d8 <VAL_Handle+0xe8>)
 800953c:	2200      	movs	r2, #0
 800953e:	701a      	strb	r2, [r3, #0]
		return;
 8009540:	4770      	bx	lr
	if (StepCounter > 0) SRCLK595_TOGGLE(); //Toggle the clock pin
 8009542:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009546:	4825      	ldr	r0, [pc, #148]	; (80095dc <VAL_Handle+0xec>)
 8009548:	f004 fdb0 	bl	800e0ac <HAL_GPIO_TogglePin>
	if (StepCounter == 0)
 800954c:	4b22      	ldr	r3, [pc, #136]	; (80095d8 <VAL_Handle+0xe8>)
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d0db      	beq.n	800950c <VAL_Handle+0x1c>
	else if (StepCounter == 2)
 8009554:	2b02      	cmp	r3, #2
 8009556:	d016      	beq.n	8009586 <VAL_Handle+0x96>
	else if ((StepCounter >= 2)	&& (StepCounter < 20) && (StepCounter % 2 == 0)) //StepCounter is even and between the values
 8009558:	1e9a      	subs	r2, r3, #2
 800955a:	b2d2      	uxtb	r2, r2
 800955c:	2a11      	cmp	r2, #17
 800955e:	d818      	bhi.n	8009592 <VAL_Handle+0xa2>
 8009560:	f013 0f01 	tst.w	r3, #1
 8009564:	d1e4      	bne.n	8009530 <VAL_Handle+0x40>
		if ((OutputRegister >> (StepCounter/2-2)) & 0x01) //On
 8009566:	4a1a      	ldr	r2, [pc, #104]	; (80095d0 <VAL_Handle+0xe0>)
 8009568:	7812      	ldrb	r2, [r2, #0]
 800956a:	085b      	lsrs	r3, r3, #1
 800956c:	3b02      	subs	r3, #2
 800956e:	fa42 f303 	asr.w	r3, r2, r3
 8009572:	f013 0f01 	tst.w	r3, #1
			SER595_H();
 8009576:	bf14      	ite	ne
 8009578:	2201      	movne	r2, #1
			SER595_L();
 800957a:	2200      	moveq	r2, #0
 800957c:	2140      	movs	r1, #64	; 0x40
 800957e:	4817      	ldr	r0, [pc, #92]	; (80095dc <VAL_Handle+0xec>)
 8009580:	f004 fd8e 	bl	800e0a0 <HAL_GPIO_WritePin>
 8009584:	e7d4      	b.n	8009530 <VAL_Handle+0x40>
		SER595_H();
 8009586:	2201      	movs	r2, #1
 8009588:	2140      	movs	r1, #64	; 0x40
 800958a:	4814      	ldr	r0, [pc, #80]	; (80095dc <VAL_Handle+0xec>)
 800958c:	f004 fd88 	bl	800e0a0 <HAL_GPIO_WritePin>
 8009590:	e7ce      	b.n	8009530 <VAL_Handle+0x40>
	else if (StepCounter == 20)
 8009592:	2b14      	cmp	r3, #20
 8009594:	d00c      	beq.n	80095b0 <VAL_Handle+0xc0>
	else if (StepCounter == 21)
 8009596:	2b15      	cmp	r3, #21
 8009598:	d1ca      	bne.n	8009530 <VAL_Handle+0x40>
		RCLK595_L();
 800959a:	2200      	movs	r2, #0
 800959c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80095a0:	480e      	ldr	r0, [pc, #56]	; (80095dc <VAL_Handle+0xec>)
 80095a2:	f004 fd7d 	bl	800e0a0 <HAL_GPIO_WritePin>
		OutputRegisterOld = OutputRegister;
 80095a6:	4b0a      	ldr	r3, [pc, #40]	; (80095d0 <VAL_Handle+0xe0>)
 80095a8:	781a      	ldrb	r2, [r3, #0]
 80095aa:	4b0a      	ldr	r3, [pc, #40]	; (80095d4 <VAL_Handle+0xe4>)
 80095ac:	701a      	strb	r2, [r3, #0]
 80095ae:	e7bf      	b.n	8009530 <VAL_Handle+0x40>
		SER595_L();
 80095b0:	4c0a      	ldr	r4, [pc, #40]	; (80095dc <VAL_Handle+0xec>)
 80095b2:	2200      	movs	r2, #0
 80095b4:	2140      	movs	r1, #64	; 0x40
 80095b6:	4620      	mov	r0, r4
 80095b8:	f004 fd72 	bl	800e0a0 <HAL_GPIO_WritePin>
		RCLK595_H();
 80095bc:	2201      	movs	r2, #1
 80095be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80095c2:	4620      	mov	r0, r4
 80095c4:	f004 fd6c 	bl	800e0a0 <HAL_GPIO_WritePin>
 80095c8:	e7b2      	b.n	8009530 <VAL_Handle+0x40>
 80095ca:	4770      	bx	lr
 80095cc:	20000c48 	.word	0x20000c48
 80095d0:	20000c40 	.word	0x20000c40
 80095d4:	20000060 	.word	0x20000060
 80095d8:	20000c41 	.word	0x20000c41
 80095dc:	40020400 	.word	0x40020400

080095e0 <VAL_Init>:
{
 80095e0:	b570      	push	{r4, r5, r6, lr}
 80095e2:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095e4:	2400      	movs	r4, #0
 80095e6:	9403      	str	r4, [sp, #12]
 80095e8:	9404      	str	r4, [sp, #16]
 80095ea:	9405      	str	r4, [sp, #20]
 80095ec:	9406      	str	r4, [sp, #24]
 80095ee:	9407      	str	r4, [sp, #28]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80095f0:	4b16      	ldr	r3, [pc, #88]	; (800964c <VAL_Init+0x6c>)
 80095f2:	69da      	ldr	r2, [r3, #28]
 80095f4:	f042 0201 	orr.w	r2, r2, #1
 80095f8:	61da      	str	r2, [r3, #28]
 80095fa:	69da      	ldr	r2, [r3, #28]
 80095fc:	f002 0201 	and.w	r2, r2, #1
 8009600:	9201      	str	r2, [sp, #4]
 8009602:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009604:	69da      	ldr	r2, [r3, #28]
 8009606:	f042 0202 	orr.w	r2, r2, #2
 800960a:	61da      	str	r2, [r3, #28]
 800960c:	69db      	ldr	r3, [r3, #28]
 800960e:	f003 0302 	and.w	r3, r3, #2
 8009612:	9302      	str	r3, [sp, #8]
 8009614:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOB, SER595_Pin|EN595_Pin|RCLK595_Pin|SRCLK595_Pin, GPIO_PIN_RESET);
 8009616:	4d0e      	ldr	r5, [pc, #56]	; (8009650 <VAL_Init+0x70>)
 8009618:	4622      	mov	r2, r4
 800961a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800961e:	4628      	mov	r0, r5
 8009620:	f004 fd3e 	bl	800e0a0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = SER595_Pin|EN595_Pin|RCLK595_Pin|SRCLK595_Pin;
 8009624:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009628:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800962a:	2601      	movs	r6, #1
 800962c:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800962e:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009630:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009632:	a903      	add	r1, sp, #12
 8009634:	4628      	mov	r0, r5
 8009636:	f004 fc49 	bl	800decc <HAL_GPIO_Init>
	VAL_Handle();
 800963a:	f7ff ff59 	bl	80094f0 <VAL_Handle>
	EN595_H();
 800963e:	4632      	mov	r2, r6
 8009640:	2180      	movs	r1, #128	; 0x80
 8009642:	4628      	mov	r0, r5
 8009644:	f004 fd2c 	bl	800e0a0 <HAL_GPIO_WritePin>
}
 8009648:	b008      	add	sp, #32
 800964a:	bd70      	pop	{r4, r5, r6, pc}
 800964c:	40023800 	.word	0x40023800
 8009650:	40020400 	.word	0x40020400

08009654 <WAT_GetVolume>:
//-----------------------------------------------------------------------------
//! \brief      Returns the water tank volume
//! \details    Returns the water tank volume
//! \param[out]	uint16_t Volume
uint16_t WAT_GetVolume (void)
{
 8009654:	b508      	push	{r3, lr}
	WAT.Volume = (uint16_t) ANA_GetSensorValue(ADC_LS1);
 8009656:	2001      	movs	r0, #1
 8009658:	f7fd fd56 	bl	8007108 <ANA_GetSensorValue>
 800965c:	f7fd f940 	bl	80068e0 <__aeabi_f2uiz>
 8009660:	b280      	uxth	r0, r0
 8009662:	4b01      	ldr	r3, [pc, #4]	; (8009668 <WAT_GetVolume+0x14>)
 8009664:	8018      	strh	r0, [r3, #0]
	return WAT.Volume;
}
 8009666:	bd08      	pop	{r3, pc}
 8009668:	20000c44 	.word	0x20000c44

0800966c <WAT_Init>:
//! \brief      Initalizes the water tank module
//! \details    Initalizes the water tank module
//! \params		None
void WAT_Init (void)
{
	WAT.Area = 11925.0f; //For test tank. Final tank is 17686.0f; //Area of the water tank
 800966c:	4b02      	ldr	r3, [pc, #8]	; (8009678 <WAT_Init+0xc>)
 800966e:	f642 6295 	movw	r2, #11925	; 0x2e95
 8009672:	805a      	strh	r2, [r3, #2]
}
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	20000c44 	.word	0x20000c44

0800967c <WRK_GetAction>:
//! \brief      Routine to get an action to be executed
//! \details    Compares the required action with the active action
//! \details    Returns 1 and sets gActionAccepted if identical, Returns 0 if not
//! \param[in]  uint8_t ReqAction
uint8_t WRK_GetAction (uint8_t ReqAction)
{
 800967c:	4603      	mov	r3, r0
	uint8_t returnValue = 0;
	if (gAction > 0)
 800967e:	4a07      	ldr	r2, [pc, #28]	; (800969c <WRK_GetAction+0x20>)
 8009680:	7810      	ldrb	r0, [r2, #0]
 8009682:	b110      	cbz	r0, 800968a <WRK_GetAction+0xe>
	{
		if (ReqAction == gAction)
 8009684:	4298      	cmp	r0, r3
 8009686:	d001      	beq.n	800968c <WRK_GetAction+0x10>
	uint8_t returnValue = 0;
 8009688:	2000      	movs	r0, #0
			gActionAccepted = 1;
			returnValue = 1;
		}
	}
	return returnValue;
}
 800968a:	4770      	bx	lr
			gAction = 0;
 800968c:	4613      	mov	r3, r2
 800968e:	2200      	movs	r2, #0
 8009690:	701a      	strb	r2, [r3, #0]
			gActionAccepted = 1;
 8009692:	2001      	movs	r0, #1
 8009694:	4b02      	ldr	r3, [pc, #8]	; (80096a0 <WRK_GetAction+0x24>)
 8009696:	7018      	strb	r0, [r3, #0]
			returnValue = 1;
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	20000c6c 	.word	0x20000c6c
 80096a0:	20000c6d 	.word	0x20000c6d

080096a4 <WRK_GetEndConditions>:
//! \param[in]	uint8_t newRecipe
//! \param[out]	uint8_t ReturnValue (0 = not valid, > 1 is valid)
uint8_t WRK_GetEndConditions (uint8_t newEndCondition, uint16_t newValue, uint8_t newRecipe)
{
	uint64_t ReturnValue = 0;
	switch (newEndCondition)
 80096a4:	2803      	cmp	r0, #3
 80096a6:	d840      	bhi.n	800972a <WRK_GetEndConditions+0x86>
 80096a8:	e8df f000 	tbb	[pc, r0]
 80096ac:	31231502 	.word	0x31231502
	{
		case 0:
		{
			ReturnValue = (ActiveBlock.EndConditions1 & newValue);
 80096b0:	481f      	ldr	r0, [pc, #124]	; (8009730 <WRK_GetEndConditions+0x8c>)
 80096b2:	eb00 2302 	add.w	r3, r0, r2, lsl #8
 80096b6:	78db      	ldrb	r3, [r3, #3]
 80096b8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 80096c2:	4402      	add	r2, r0
 80096c4:	8e93      	ldrh	r3, [r2, #52]	; 0x34
 80096c6:	4019      	ands	r1, r3
 80096c8:	2300      	movs	r3, #0
			ReturnValue = (ActiveBlock.EndConditions4 & newValue);
			break;
		}
		default: break;
	}
	if (ReturnValue > 0)
 80096ca:	4608      	mov	r0, r1
 80096cc:	430b      	orrs	r3, r1
 80096ce:	d000      	beq.n	80096d2 <WRK_GetEndConditions+0x2e>
 80096d0:	2001      	movs	r0, #1
		ReturnValue = 1;
	return (uint8_t) ReturnValue;
}
 80096d2:	b2c0      	uxtb	r0, r0
 80096d4:	4770      	bx	lr
			ReturnValue = (ActiveBlock.EndConditions2 & newValue);
 80096d6:	4816      	ldr	r0, [pc, #88]	; (8009730 <WRK_GetEndConditions+0x8c>)
 80096d8:	eb00 2302 	add.w	r3, r0, r2, lsl #8
 80096dc:	78db      	ldrb	r3, [r3, #3]
 80096de:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 80096e8:	4402      	add	r2, r0
 80096ea:	8ed3      	ldrh	r3, [r2, #54]	; 0x36
 80096ec:	4019      	ands	r1, r3
 80096ee:	2300      	movs	r3, #0
			break;
 80096f0:	e7eb      	b.n	80096ca <WRK_GetEndConditions+0x26>
			ReturnValue = (ActiveBlock.EndConditions3 & newValue);
 80096f2:	480f      	ldr	r0, [pc, #60]	; (8009730 <WRK_GetEndConditions+0x8c>)
 80096f4:	eb00 2302 	add.w	r3, r0, r2, lsl #8
 80096f8:	78db      	ldrb	r3, [r3, #3]
 80096fa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8009704:	4402      	add	r2, r0
 8009706:	8f13      	ldrh	r3, [r2, #56]	; 0x38
 8009708:	4019      	ands	r1, r3
 800970a:	2300      	movs	r3, #0
			break;
 800970c:	e7dd      	b.n	80096ca <WRK_GetEndConditions+0x26>
			ReturnValue = (ActiveBlock.EndConditions4 & newValue);
 800970e:	4808      	ldr	r0, [pc, #32]	; (8009730 <WRK_GetEndConditions+0x8c>)
 8009710:	eb00 2302 	add.w	r3, r0, r2, lsl #8
 8009714:	78db      	ldrb	r3, [r3, #3]
 8009716:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8009720:	4402      	add	r2, r0
 8009722:	8f53      	ldrh	r3, [r2, #58]	; 0x3a
 8009724:	4019      	ands	r1, r3
 8009726:	2300      	movs	r3, #0
			break;
 8009728:	e7cf      	b.n	80096ca <WRK_GetEndConditions+0x26>
	switch (newEndCondition)
 800972a:	2000      	movs	r0, #0
 800972c:	e7d1      	b.n	80096d2 <WRK_GetEndConditions+0x2e>
 800972e:	bf00      	nop
 8009730:	20000678 	.word	0x20000678

08009734 <WRK_GetHardwareVersion>:
//-----------------------------------------------------------------------------
//! \brief      Returns the hardware version
//! \details    Makes 1 integer of the hardware version that can be sent by UART
//! \params		None
uint32_t WRK_GetHardwareVersion (void)
{
 8009734:	b510      	push	{r4, lr}
	return (HW0 + HW1*2 + HW2*4 + HW3*8);
 8009736:	4b10      	ldr	r3, [pc, #64]	; (8009778 <WRK_GetHardwareVersion+0x44>)
 8009738:	781c      	ldrb	r4, [r3, #0]
 800973a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800973e:	480f      	ldr	r0, [pc, #60]	; (800977c <WRK_GetHardwareVersion+0x48>)
 8009740:	f004 fca8 	bl	800e094 <HAL_GPIO_ReadPin>
 8009744:	2801      	cmp	r0, #1
 8009746:	bf0c      	ite	eq
 8009748:	2302      	moveq	r3, #2
 800974a:	2300      	movne	r3, #0
 800974c:	441c      	add	r4, r3
 800974e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009752:	480a      	ldr	r0, [pc, #40]	; (800977c <WRK_GetHardwareVersion+0x48>)
 8009754:	f004 fc9e 	bl	800e094 <HAL_GPIO_ReadPin>
 8009758:	2801      	cmp	r0, #1
 800975a:	bf0c      	ite	eq
 800975c:	2304      	moveq	r3, #4
 800975e:	2300      	movne	r3, #0
 8009760:	441c      	add	r4, r3
 8009762:	2104      	movs	r1, #4
 8009764:	4805      	ldr	r0, [pc, #20]	; (800977c <WRK_GetHardwareVersion+0x48>)
 8009766:	f004 fc95 	bl	800e094 <HAL_GPIO_ReadPin>
 800976a:	2801      	cmp	r0, #1
 800976c:	bf0c      	ite	eq
 800976e:	2008      	moveq	r0, #8
 8009770:	2000      	movne	r0, #0
}
 8009772:	4420      	add	r0, r4
 8009774:	bd10      	pop	{r4, pc}
 8009776:	bf00      	nop
 8009778:	20000c50 	.word	0x20000c50
 800977c:	40020400 	.word	0x40020400

08009780 <WRK_GetMainStatus>:
//! \details    Returns the main status
//! \param[out]	enuStatus WRK.MainStatus
enuStatus WRK_GetMainStatus (void)
{
	return WRK.MainStatus;
}
 8009780:	4b01      	ldr	r3, [pc, #4]	; (8009788 <WRK_GetMainStatus+0x8>)
 8009782:	7818      	ldrb	r0, [r3, #0]
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	20000c5c 	.word	0x20000c5c

0800978c <WRK_GetSoftwareVersion>:
//! \details    Makes 1 integer of the software version that can be sent by UART
//! \params		None
uint32_t WRK_GetSoftwareVersion (void)
{
	return (SW_VER_MAJOR << 12) + (SW_VER_MINOR << 8) + SW_VER_BUGFIX;
}
 800978c:	f242 200f 	movw	r0, #8719	; 0x220f
 8009790:	4770      	bx	lr
	...

08009794 <WRK_GetSubStatus>:
//! \details    Returns the sub status
//! \param[out]	enuStatus WRK.MainStatus
enuStatus WRK_GetSubStatus (void)
{
	return WRK.SubStatus;
}
 8009794:	4b01      	ldr	r3, [pc, #4]	; (800979c <WRK_GetSubStatus+0x8>)
 8009796:	7898      	ldrb	r0, [r3, #2]
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	20000c5c 	.word	0x20000c5c

080097a0 <WRK_HandleAction>:
//! \brief      Routine to initiate return message or timeout
//! \details    Checks if the command timed out or is accepted
//! \details    Initiates the sending of the respective return message
//! \params 	None
void WRK_HandleAction (void)
{
 80097a0:	b508      	push	{r3, lr}
	static uint8_t TickTime = 10;
	if (TickTime ++ < 99) return;
 80097a2:	4b1e      	ldr	r3, [pc, #120]	; (800981c <WRK_HandleAction+0x7c>)
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	2b62      	cmp	r3, #98	; 0x62
 80097a8:	d918      	bls.n	80097dc <WRK_HandleAction+0x3c>
	TickTime = 0;
 80097aa:	4b1c      	ldr	r3, [pc, #112]	; (800981c <WRK_HandleAction+0x7c>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	701a      	strb	r2, [r3, #0]

	if ((gAction > 0) || (gActionAccepted))
 80097b0:	4b1b      	ldr	r3, [pc, #108]	; (8009820 <WRK_HandleAction+0x80>)
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	b9b3      	cbnz	r3, 80097e4 <WRK_HandleAction+0x44>
 80097b6:	4b1b      	ldr	r3, [pc, #108]	; (8009824 <WRK_HandleAction+0x84>)
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	b193      	cbz	r3, 80097e2 <WRK_HandleAction+0x42>
	{
		WRK.CounterAction += 100;
 80097bc:	4a1a      	ldr	r2, [pc, #104]	; (8009828 <WRK_HandleAction+0x88>)
 80097be:	68d3      	ldr	r3, [r2, #12]
 80097c0:	3364      	adds	r3, #100	; 0x64
 80097c2:	60d3      	str	r3, [r2, #12]
		if (WRK.CounterAction > ACTIONTIMEOUT)
 80097c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80097c8:	d91f      	bls.n	800980a <WRK_HandleAction+0x6a>
		{
			if (gActionAccepted)
			{
				SER_SetStatus (0x01); //Action executed
 80097ca:	2001      	movs	r0, #1
 80097cc:	f002 fba2 	bl	800bf14 <SER_SetStatus>
			}
			else
			{
				SER_SetStatus (0x13); //Action timed out
			}
			gActionAccepted = 0;
 80097d0:	2300      	movs	r3, #0
 80097d2:	4a14      	ldr	r2, [pc, #80]	; (8009824 <WRK_HandleAction+0x84>)
 80097d4:	7013      	strb	r3, [r2, #0]
			gAction = 0;
 80097d6:	4a12      	ldr	r2, [pc, #72]	; (8009820 <WRK_HandleAction+0x80>)
 80097d8:	7013      	strb	r3, [r2, #0]
 80097da:	e002      	b.n	80097e2 <WRK_HandleAction+0x42>
	if (TickTime ++ < 99) return;
 80097dc:	3301      	adds	r3, #1
 80097de:	4a0f      	ldr	r2, [pc, #60]	; (800981c <WRK_HandleAction+0x7c>)
 80097e0:	7013      	strb	r3, [r2, #0]
			SER_SetStatus (0x01); //Action executed
			gActionAccepted = 0;
			gAction = 0;
		}
	}
}
 80097e2:	bd08      	pop	{r3, pc}
		WRK.CounterAction += 100;
 80097e4:	4a10      	ldr	r2, [pc, #64]	; (8009828 <WRK_HandleAction+0x88>)
 80097e6:	68d3      	ldr	r3, [r2, #12]
 80097e8:	3364      	adds	r3, #100	; 0x64
 80097ea:	60d3      	str	r3, [r2, #12]
		if (WRK.CounterAction > ACTIONTIMEOUT)
 80097ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80097f0:	d907      	bls.n	8009802 <WRK_HandleAction+0x62>
			if (gActionAccepted)
 80097f2:	4b0c      	ldr	r3, [pc, #48]	; (8009824 <WRK_HandleAction+0x84>)
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1e7      	bne.n	80097ca <WRK_HandleAction+0x2a>
				SER_SetStatus (0x13); //Action timed out
 80097fa:	2013      	movs	r0, #19
 80097fc:	f002 fb8a 	bl	800bf14 <SER_SetStatus>
 8009800:	e7e6      	b.n	80097d0 <WRK_HandleAction+0x30>
		else if (gActionAccepted)
 8009802:	4b08      	ldr	r3, [pc, #32]	; (8009824 <WRK_HandleAction+0x84>)
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d0eb      	beq.n	80097e2 <WRK_HandleAction+0x42>
			SER_SetStatus (0x01); //Action executed
 800980a:	2001      	movs	r0, #1
 800980c:	f002 fb82 	bl	800bf14 <SER_SetStatus>
			gActionAccepted = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	4a04      	ldr	r2, [pc, #16]	; (8009824 <WRK_HandleAction+0x84>)
 8009814:	7013      	strb	r3, [r2, #0]
			gAction = 0;
 8009816:	4a02      	ldr	r2, [pc, #8]	; (8009820 <WRK_HandleAction+0x80>)
 8009818:	7013      	strb	r3, [r2, #0]
 800981a:	e7e2      	b.n	80097e2 <WRK_HandleAction+0x42>
 800981c:	2000006e 	.word	0x2000006e
 8009820:	20000c6c 	.word	0x20000c6c
 8009824:	20000c6d 	.word	0x20000c6d
 8009828:	20000c5c 	.word	0x20000c5c

0800982c <WRK_HandleZeroCross>:
//-----------------------------------------------------------------------------
//! \brief      Handles the actions needed at zerocross
//! \details    Set TIM9, Efast and zerocross signals
//! \params		None
void WRK_HandleZeroCross(void)
{
 800982c:	b510      	push	{r4, lr}
	ZCR_SetZeroCross(TIM7->CNT);
 800982e:	4b23      	ldr	r3, [pc, #140]	; (80098bc <WRK_HandleZeroCross+0x90>)
 8009830:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009832:	f001 faa5 	bl	800ad80 <ZCR_SetZeroCross>
	HAL_TIM_OC_Stop_IT(&htim9, TIM_CHANNEL_1);
 8009836:	4c22      	ldr	r4, [pc, #136]	; (80098c0 <WRK_HandleZeroCross+0x94>)
 8009838:	2100      	movs	r1, #0
 800983a:	4620      	mov	r0, r4
 800983c:	f005 fc50 	bl	800f0e0 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_OC_Stop_IT(&htim9, TIM_CHANNEL_2);
 8009840:	2104      	movs	r1, #4
 8009842:	4620      	mov	r0, r4
 8009844:	f005 fc4c 	bl	800f0e0 <HAL_TIM_OC_Stop_IT>
	//Reset counter
	TIM9->CNT = 0;
 8009848:	4b1e      	ldr	r3, [pc, #120]	; (80098c4 <WRK_HandleZeroCross+0x98>)
 800984a:	2200      	movs	r2, #0
 800984c:	625a      	str	r2, [r3, #36]	; 0x24
	if (PUM[P1].ControlType == 0)
 800984e:	4b1e      	ldr	r3, [pc, #120]	; (80098c8 <WRK_HandleZeroCross+0x9c>)
 8009850:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8009854:	b9a3      	cbnz	r3, 8009880 <WRK_HandleZeroCross+0x54>
	{
		PUM_SetPumpGPIO (P1, sON);
 8009856:	2107      	movs	r1, #7
 8009858:	4610      	mov	r0, r2
 800985a:	f7ff f839 	bl	80088d0 <PUM_SetPumpGPIO>
		TIM9->CCR1 = 0;
 800985e:	4b19      	ldr	r3, [pc, #100]	; (80098c4 <WRK_HandleZeroCross+0x98>)
 8009860:	2200      	movs	r2, #0
 8009862:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		TIM9->CCR1 = 100 * (100 - PUM[P1].Percentage);
		HAL_TIM_OC_Start_IT(&htim9, TIM_CHANNEL_1);
	}
	if (PUM[P2].ControlType == 0)
 8009864:	4b18      	ldr	r3, [pc, #96]	; (80098c8 <WRK_HandleZeroCross+0x9c>)
 8009866:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800986a:	b9bb      	cbnz	r3, 800989c <WRK_HandleZeroCross+0x70>
	{
		PUM_SetPumpGPIO (P2, sON);
 800986c:	2107      	movs	r1, #7
 800986e:	2001      	movs	r0, #1
 8009870:	f7ff f82e 	bl	80088d0 <PUM_SetPumpGPIO>
		TIM9->CCR2 = 0;
 8009874:	4b13      	ldr	r3, [pc, #76]	; (80098c4 <WRK_HandleZeroCross+0x98>)
 8009876:	2200      	movs	r2, #0
 8009878:	639a      	str	r2, [r3, #56]	; 0x38
	else
	{
		TIM9->CCR2 = 100 * (100 - PUM[P2].Percentage);
		HAL_TIM_OC_Start_IT(&htim9, TIM_CHANNEL_2);
	}
	HEA_ResetEfast();
 800987a:	f7fd feaf 	bl	80075dc <HEA_ResetEfast>
}
 800987e:	bd10      	pop	{r4, pc}
		TIM9->CCR1 = 100 * (100 - PUM[P1].Percentage);
 8009880:	4b11      	ldr	r3, [pc, #68]	; (80098c8 <WRK_HandleZeroCross+0x9c>)
 8009882:	785b      	ldrb	r3, [r3, #1]
 8009884:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8009888:	2264      	movs	r2, #100	; 0x64
 800988a:	fb02 f303 	mul.w	r3, r2, r3
 800988e:	4a0d      	ldr	r2, [pc, #52]	; (80098c4 <WRK_HandleZeroCross+0x98>)
 8009890:	6353      	str	r3, [r2, #52]	; 0x34
		HAL_TIM_OC_Start_IT(&htim9, TIM_CHANNEL_1);
 8009892:	2100      	movs	r1, #0
 8009894:	480a      	ldr	r0, [pc, #40]	; (80098c0 <WRK_HandleZeroCross+0x94>)
 8009896:	f005 fb8f 	bl	800efb8 <HAL_TIM_OC_Start_IT>
 800989a:	e7e3      	b.n	8009864 <WRK_HandleZeroCross+0x38>
		TIM9->CCR2 = 100 * (100 - PUM[P2].Percentage);
 800989c:	4b0a      	ldr	r3, [pc, #40]	; (80098c8 <WRK_HandleZeroCross+0x9c>)
 800989e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80098a2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80098a6:	2264      	movs	r2, #100	; 0x64
 80098a8:	fb02 f303 	mul.w	r3, r2, r3
 80098ac:	4a05      	ldr	r2, [pc, #20]	; (80098c4 <WRK_HandleZeroCross+0x98>)
 80098ae:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_TIM_OC_Start_IT(&htim9, TIM_CHANNEL_2);
 80098b0:	2104      	movs	r1, #4
 80098b2:	4803      	ldr	r0, [pc, #12]	; (80098c0 <WRK_HandleZeroCross+0x94>)
 80098b4:	f005 fb80 	bl	800efb8 <HAL_TIM_OC_Start_IT>
 80098b8:	e7df      	b.n	800987a <WRK_HandleZeroCross+0x4e>
 80098ba:	bf00      	nop
 80098bc:	40001400 	.word	0x40001400
 80098c0:	20000af0 	.word	0x20000af0
 80098c4:	40010800 	.word	0x40010800
 80098c8:	20000570 	.word	0x20000570

080098cc <WRK_ResetAction>:
//! \brief      Routine to reset a pending action
//! \details    Resets the action and counter
//! \params 	None
void WRK_ResetAction (void)
{
	gAction = 0;
 80098cc:	2300      	movs	r3, #0
 80098ce:	4a03      	ldr	r2, [pc, #12]	; (80098dc <WRK_ResetAction+0x10>)
 80098d0:	7013      	strb	r3, [r2, #0]
	gActionAccepted = 0;
 80098d2:	4a03      	ldr	r2, [pc, #12]	; (80098e0 <WRK_ResetAction+0x14>)
 80098d4:	7013      	strb	r3, [r2, #0]
	WRK.CounterAction = 0;
 80098d6:	4a03      	ldr	r2, [pc, #12]	; (80098e4 <WRK_ResetAction+0x18>)
 80098d8:	60d3      	str	r3, [r2, #12]
}
 80098da:	4770      	bx	lr
 80098dc:	20000c6c 	.word	0x20000c6c
 80098e0:	20000c6d 	.word	0x20000c6d
 80098e4:	20000c5c 	.word	0x20000c5c

080098e8 <WRK_ResetAllModules>:
//-----------------------------------------------------------------------------
//! \brief      Handles the reset of all modules after recipe is finished
//! \details    Makes sure that no module is still active unexpectedly
//! \param[in]  uint8_t newRecipe
void WRK_ResetAllModules(uint8_t newRecipe)
{
 80098e8:	b510      	push	{r4, lr}
 80098ea:	4604      	mov	r4, r0
	if (gRecipe[newRecipe].UsingH1 == 1) HEA_Set(H1, sINACTIVE);
 80098ec:	4b45      	ldr	r3, [pc, #276]	; (8009a04 <WRK_ResetAllModules+0x11c>)
 80098ee:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 80098f2:	799b      	ldrb	r3, [r3, #6]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d049      	beq.n	800998c <WRK_ResetAllModules+0xa4>
	gRecipe[newRecipe].UsingH1 = 0;
 80098f8:	4b42      	ldr	r3, [pc, #264]	; (8009a04 <WRK_ResetAllModules+0x11c>)
 80098fa:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 80098fe:	2200      	movs	r2, #0
 8009900:	719a      	strb	r2, [r3, #6]
	if (gRecipe[newRecipe].UsingH2 == 1) HEA_Set(H2, sINACTIVE);
 8009902:	79db      	ldrb	r3, [r3, #7]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d046      	beq.n	8009996 <WRK_ResetAllModules+0xae>
	gRecipe[newRecipe].UsingH2 = 0;
 8009908:	4b3e      	ldr	r3, [pc, #248]	; (8009a04 <WRK_ResetAllModules+0x11c>)
 800990a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 800990e:	2200      	movs	r2, #0
 8009910:	71da      	strb	r2, [r3, #7]
	if (gRecipe[newRecipe].UsingH3 == 1) HEA_Set(H3, sINACTIVE);
 8009912:	7a1b      	ldrb	r3, [r3, #8]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d043      	beq.n	80099a0 <WRK_ResetAllModules+0xb8>
	gRecipe[newRecipe].UsingH3 = 0;
 8009918:	4b3a      	ldr	r3, [pc, #232]	; (8009a04 <WRK_ResetAllModules+0x11c>)
 800991a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 800991e:	2200      	movs	r2, #0
 8009920:	721a      	strb	r2, [r3, #8]
	if (gRecipe[newRecipe].UsingP1 == 1) PUM_Set(P1, sINACTIVE);
 8009922:	7a5b      	ldrb	r3, [r3, #9]
 8009924:	2b01      	cmp	r3, #1
 8009926:	d040      	beq.n	80099aa <WRK_ResetAllModules+0xc2>
	gRecipe[newRecipe].UsingP1 = 0;
 8009928:	4b36      	ldr	r3, [pc, #216]	; (8009a04 <WRK_ResetAllModules+0x11c>)
 800992a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 800992e:	2200      	movs	r2, #0
 8009930:	725a      	strb	r2, [r3, #9]
	if (gRecipe[newRecipe].UsingP2 == 1) PUM_Set(P2, sINACTIVE);
 8009932:	7a9b      	ldrb	r3, [r3, #10]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d03d      	beq.n	80099b4 <WRK_ResetAllModules+0xcc>
	gRecipe[newRecipe].UsingP2 = 0;
 8009938:	4b32      	ldr	r3, [pc, #200]	; (8009a04 <WRK_ResetAllModules+0x11c>)
 800993a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 800993e:	2200      	movs	r2, #0
 8009940:	729a      	strb	r2, [r3, #10]
	if (gRecipe[newRecipe].UsingP3 == 1) PUM_Set(P3, sINACTIVE);
 8009942:	7adb      	ldrb	r3, [r3, #11]
 8009944:	2b01      	cmp	r3, #1
 8009946:	d03a      	beq.n	80099be <WRK_ResetAllModules+0xd6>
	gRecipe[newRecipe].UsingP3 = 0;
 8009948:	4b2e      	ldr	r3, [pc, #184]	; (8009a04 <WRK_ResetAllModules+0x11c>)
 800994a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 800994e:	2200      	movs	r2, #0
 8009950:	72da      	strb	r2, [r3, #11]
	gRecipe[newRecipe].UsingS3 = 0;
 8009952:	731a      	strb	r2, [r3, #12]
	if (gRecipe[newRecipe].UsingCircuit1 == 1) VAL_SetCircuit(CIRCUIT_1_OFF, 1 - gRecipe[1 - newRecipe].UsingS3);
 8009954:	791b      	ldrb	r3, [r3, #4]
 8009956:	2b01      	cmp	r3, #1
 8009958:	d036      	beq.n	80099c8 <WRK_ResetAllModules+0xe0>
	gRecipe[newRecipe].UsingCircuit1 = 0;
 800995a:	4b2a      	ldr	r3, [pc, #168]	; (8009a04 <WRK_ResetAllModules+0x11c>)
 800995c:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009960:	2200      	movs	r2, #0
 8009962:	711a      	strb	r2, [r3, #4]
	if (gRecipe[newRecipe].UsingCircuit2 == 1) VAL_SetCircuit(CIRCUIT_2_OFF, 1 - gRecipe[1 - newRecipe].UsingS3);
 8009964:	795b      	ldrb	r3, [r3, #5]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d03b      	beq.n	80099e2 <WRK_ResetAllModules+0xfa>
	gRecipe[newRecipe].UsingCircuit2 = 0;
 800996a:	4b26      	ldr	r3, [pc, #152]	; (8009a04 <WRK_ResetAllModules+0x11c>)
 800996c:	eb03 2204 	add.w	r2, r3, r4, lsl #8
 8009970:	2100      	movs	r1, #0
 8009972:	7151      	strb	r1, [r2, #5]
	if (gRecipe[1 - newRecipe].UsingP3 == 0) AIR_Set(0);
 8009974:	f1c4 0201 	rsb	r2, r4, #1
 8009978:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800997c:	7adb      	ldrb	r3, [r3, #11]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d03c      	beq.n	80099fc <WRK_ResetAllModules+0x114>
	REC_Set(newRecipe, sINACTIVE);
 8009982:	2104      	movs	r1, #4
 8009984:	4620      	mov	r0, r4
 8009986:	f7ff f84f 	bl	8008a28 <REC_Set>
	//gRecipe[newRecipe].Active = 0;
	//gRecipe[newRecipe].CurrentBlock = 0;
}
 800998a:	bd10      	pop	{r4, pc}
	if (gRecipe[newRecipe].UsingH1 == 1) HEA_Set(H1, sINACTIVE);
 800998c:	2104      	movs	r1, #4
 800998e:	2000      	movs	r0, #0
 8009990:	f7fd fff2 	bl	8007978 <HEA_Set>
 8009994:	e7b0      	b.n	80098f8 <WRK_ResetAllModules+0x10>
	if (gRecipe[newRecipe].UsingH2 == 1) HEA_Set(H2, sINACTIVE);
 8009996:	2104      	movs	r1, #4
 8009998:	2001      	movs	r0, #1
 800999a:	f7fd ffed 	bl	8007978 <HEA_Set>
 800999e:	e7b3      	b.n	8009908 <WRK_ResetAllModules+0x20>
	if (gRecipe[newRecipe].UsingH3 == 1) HEA_Set(H3, sINACTIVE);
 80099a0:	2104      	movs	r1, #4
 80099a2:	2002      	movs	r0, #2
 80099a4:	f7fd ffe8 	bl	8007978 <HEA_Set>
 80099a8:	e7b6      	b.n	8009918 <WRK_ResetAllModules+0x30>
	if (gRecipe[newRecipe].UsingP1 == 1) PUM_Set(P1, sINACTIVE);
 80099aa:	2104      	movs	r1, #4
 80099ac:	4610      	mov	r0, r2
 80099ae:	f7fe ff23 	bl	80087f8 <PUM_Set>
 80099b2:	e7b9      	b.n	8009928 <WRK_ResetAllModules+0x40>
	if (gRecipe[newRecipe].UsingP2 == 1) PUM_Set(P2, sINACTIVE);
 80099b4:	2104      	movs	r1, #4
 80099b6:	2001      	movs	r0, #1
 80099b8:	f7fe ff1e 	bl	80087f8 <PUM_Set>
 80099bc:	e7bc      	b.n	8009938 <WRK_ResetAllModules+0x50>
	if (gRecipe[newRecipe].UsingP3 == 1) PUM_Set(P3, sINACTIVE);
 80099be:	2104      	movs	r1, #4
 80099c0:	2002      	movs	r0, #2
 80099c2:	f7fe ff19 	bl	80087f8 <PUM_Set>
 80099c6:	e7bf      	b.n	8009948 <WRK_ResetAllModules+0x60>
	if (gRecipe[newRecipe].UsingCircuit1 == 1) VAL_SetCircuit(CIRCUIT_1_OFF, 1 - gRecipe[1 - newRecipe].UsingS3);
 80099c8:	f1c4 0301 	rsb	r3, r4, #1
 80099cc:	4a0d      	ldr	r2, [pc, #52]	; (8009a04 <WRK_ResetAllModules+0x11c>)
 80099ce:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 80099d2:	7b19      	ldrb	r1, [r3, #12]
 80099d4:	f1c1 0101 	rsb	r1, r1, #1
 80099d8:	b2c9      	uxtb	r1, r1
 80099da:	2000      	movs	r0, #0
 80099dc:	f7ff fd3c 	bl	8009458 <VAL_SetCircuit>
 80099e0:	e7bb      	b.n	800995a <WRK_ResetAllModules+0x72>
	if (gRecipe[newRecipe].UsingCircuit2 == 1) VAL_SetCircuit(CIRCUIT_2_OFF, 1 - gRecipe[1 - newRecipe].UsingS3);
 80099e2:	f1c4 0301 	rsb	r3, r4, #1
 80099e6:	4a07      	ldr	r2, [pc, #28]	; (8009a04 <WRK_ResetAllModules+0x11c>)
 80099e8:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 80099ec:	7b19      	ldrb	r1, [r3, #12]
 80099ee:	f1c1 0101 	rsb	r1, r1, #1
 80099f2:	b2c9      	uxtb	r1, r1
 80099f4:	2004      	movs	r0, #4
 80099f6:	f7ff fd2f 	bl	8009458 <VAL_SetCircuit>
 80099fa:	e7b6      	b.n	800996a <WRK_ResetAllModules+0x82>
	if (gRecipe[1 - newRecipe].UsingP3 == 0) AIR_Set(0);
 80099fc:	4608      	mov	r0, r1
 80099fe:	f7fd fa67 	bl	8006ed0 <AIR_Set>
 8009a02:	e7be      	b.n	8009982 <WRK_ResetAllModules+0x9a>
 8009a04:	20000678 	.word	0x20000678

08009a08 <WRK_HandlePrepareRecipe>:
{
 8009a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a0c:	b09f      	sub	sp, #124	; 0x7c
 8009a0e:	4604      	mov	r4, r0
	if (PrepareCounter < 65535) PrepareCounter++; //1 tick = 100 ms
 8009a10:	4b67      	ldr	r3, [pc, #412]	; (8009bb0 <WRK_HandlePrepareRecipe+0x1a8>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d802      	bhi.n	8009a22 <WRK_HandlePrepareRecipe+0x1a>
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	4a64      	ldr	r2, [pc, #400]	; (8009bb0 <WRK_HandlePrepareRecipe+0x1a8>)
 8009a20:	6013      	str	r3, [r2, #0]
	if (WRK_GetAction(MTypeStopRecipe1 + newRecipe)) //Received Command 0x14, 0x15 or 0x16: Stop preparation
 8009a22:	f104 0014 	add.w	r0, r4, #20
 8009a26:	b2c0      	uxtb	r0, r0
 8009a28:	f7ff fe28 	bl	800967c <WRK_GetAction>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	b988      	cbnz	r0, 8009a54 <WRK_HandlePrepareRecipe+0x4c>
		switch (WRK.PrepareStatus[newRecipe])
 8009a30:	4b60      	ldr	r3, [pc, #384]	; (8009bb4 <WRK_HandlePrepareRecipe+0x1ac>)
 8009a32:	4423      	add	r3, r4
 8009a34:	791b      	ldrb	r3, [r3, #4]
 8009a36:	2b0a      	cmp	r3, #10
 8009a38:	d817      	bhi.n	8009a6a <WRK_HandlePrepareRecipe+0x62>
 8009a3a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009a3e:	0021      	.short	0x0021
 8009a40:	00210026 	.word	0x00210026
 8009a44:	02f30016 	.word	0x02f30016
 8009a48:	00160026 	.word	0x00160026
 8009a4c:	00160016 	.word	0x00160016
 8009a50:	00190016 	.word	0x00190016
		WRK_ResetAllModules(newRecipe);
 8009a54:	4620      	mov	r0, r4
 8009a56:	f7ff ff47 	bl	80098e8 <WRK_ResetAllModules>
		REC_Set(newRecipe, sINACTIVE);
 8009a5a:	2104      	movs	r1, #4
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	f7fe ffe3 	bl	8008a28 <REC_Set>
		WRK.PrepareStatus[newRecipe] = pINACTIVE;
 8009a62:	4854      	ldr	r0, [pc, #336]	; (8009bb4 <WRK_HandlePrepareRecipe+0x1ac>)
 8009a64:	4404      	add	r4, r0
 8009a66:	2302      	movs	r3, #2
 8009a68:	7123      	strb	r3, [r4, #4]
}
 8009a6a:	b01f      	add	sp, #124	; 0x7c
 8009a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				WRK_ResetAllModules(newRecipe);
 8009a70:	4620      	mov	r0, r4
 8009a72:	f7ff ff39 	bl	80098e8 <WRK_ResetAllModules>
				REC_Set(newRecipe, sINACTIVE);
 8009a76:	2104      	movs	r1, #4
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f7fe ffd5 	bl	8008a28 <REC_Set>
				break;
 8009a7e:	e7f4      	b.n	8009a6a <WRK_HandlePrepareRecipe+0x62>
				WRK.PrepareStatus[newRecipe] = pINITIALIZE;
 8009a80:	484c      	ldr	r0, [pc, #304]	; (8009bb4 <WRK_HandlePrepareRecipe+0x1ac>)
 8009a82:	4404      	add	r4, r0
 8009a84:	2301      	movs	r3, #1
 8009a86:	7123      	strb	r3, [r4, #4]
				break;
 8009a88:	e7ef      	b.n	8009a6a <WRK_HandlePrepareRecipe+0x62>
				Circuit1InUse = gRecipe[1-newRecipe].UsingCircuit1; //Circuit 1 available if not used in other recipe
 8009a8a:	f1c4 0301 	rsb	r3, r4, #1
 8009a8e:	494a      	ldr	r1, [pc, #296]	; (8009bb8 <WRK_HandlePrepareRecipe+0x1b0>)
 8009a90:	eb01 2303 	add.w	r3, r1, r3, lsl #8
 8009a94:	791f      	ldrb	r7, [r3, #4]
				Circuit2InUse = gRecipe[1-newRecipe].UsingCircuit2; //Circuit 2 available if not used in other recipe
 8009a96:	f893 c005 	ldrb.w	ip, [r3, #5]
				P3InUse = gRecipe[1-newRecipe].UsingP3; //P3 available if not used in other recipe
 8009a9a:	7ade      	ldrb	r6, [r3, #11]
				S3InUse = gRecipe[1-newRecipe].UsingS3; //S3 available if not used in other recipe
 8009a9c:	f893 e00c 	ldrb.w	lr, [r3, #12]
				gRecipe[newRecipe].UsingCircuit1 = 0;
 8009aa0:	eb01 2304 	add.w	r3, r1, r4, lsl #8
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	7118      	strb	r0, [r3, #4]
				gRecipe[newRecipe].UsingCircuit2 = 0;
 8009aa8:	7158      	strb	r0, [r3, #5]
				if  ((ActiveBlock.Valves > CIRCUIT_1_OFF)&&(ActiveBlock.Valves <= CIRCUIT_1_WATER)) //Circuit 1 only
 8009aaa:	78dd      	ldrb	r5, [r3, #3]
 8009aac:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009ab6:	4419      	add	r1, r3
 8009ab8:	f891 002e 	ldrb.w	r0, [r1, #46]	; 0x2e
 8009abc:	1e43      	subs	r3, r0, #1
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d812      	bhi.n	8009aea <WRK_HandlePrepareRecipe+0xe2>
					gRecipe[newRecipe].UsingCircuit1 = 1;
 8009ac4:	4b3c      	ldr	r3, [pc, #240]	; (8009bb8 <WRK_HandlePrepareRecipe+0x1b0>)
 8009ac6:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009aca:	2201      	movs	r2, #1
 8009acc:	711a      	strb	r2, [r3, #4]
				if ((gRecipe[newRecipe].UsingCircuit1 && Circuit1InUse) || (gRecipe[newRecipe].UsingCircuit2 && Circuit2InUse)) //Circuits intended cannot be used. Block cannot be executed at the moment
 8009ace:	bb6f      	cbnz	r7, 8009b2c <WRK_HandlePrepareRecipe+0x124>
 8009ad0:	4b39      	ldr	r3, [pc, #228]	; (8009bb8 <WRK_HandlePrepareRecipe+0x1b0>)
 8009ad2:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009ad6:	795b      	ldrb	r3, [r3, #5]
				else if ((S3InUse) && (((ActiveBlock.Valves == CIRCUIT_1_WATER)&&(gRecipe[newRecipe].UsingCircuit1)) || ((ActiveBlock.Valves == CIRCUIT_2_WATER)&&(gRecipe[newRecipe].UsingCircuit2))))
 8009ad8:	f1be 0f00 	cmp.w	lr, #0
 8009adc:	d02a      	beq.n	8009b34 <WRK_HandlePrepareRecipe+0x12c>
 8009ade:	2803      	cmp	r0, #3
 8009ae0:	d04c      	beq.n	8009b7c <WRK_HandlePrepareRecipe+0x174>
 8009ae2:	2806      	cmp	r0, #6
 8009ae4:	d126      	bne.n	8009b34 <WRK_HandlePrepareRecipe+0x12c>
 8009ae6:	b32b      	cbz	r3, 8009b34 <WRK_HandlePrepareRecipe+0x12c>
 8009ae8:	e04a      	b.n	8009b80 <WRK_HandlePrepareRecipe+0x178>
				else if  ((ActiveBlock.Valves > CIRCUIT_2_OFF)&&(ActiveBlock.Valves <= CIRCUIT_2_WATER)) //Circuit 1 only
 8009aea:	1f43      	subs	r3, r0, #5
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d90d      	bls.n	8009b0e <WRK_HandlePrepareRecipe+0x106>
				else if (ActiveBlock.Valves > CIRCUIT_1_2_OFF) //Circuit 1 and 2
 8009af2:	2807      	cmp	r0, #7
 8009af4:	d910      	bls.n	8009b18 <WRK_HandlePrepareRecipe+0x110>
					gRecipe[newRecipe].UsingCircuit1 = 1, gRecipe[newRecipe].UsingCircuit2 = 1;
 8009af6:	4b30      	ldr	r3, [pc, #192]	; (8009bb8 <WRK_HandlePrepareRecipe+0x1b0>)
 8009af8:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009afc:	2201      	movs	r2, #1
 8009afe:	711a      	strb	r2, [r3, #4]
 8009b00:	715a      	strb	r2, [r3, #5]
				if ((gRecipe[newRecipe].UsingCircuit1 && Circuit1InUse) || (gRecipe[newRecipe].UsingCircuit2 && Circuit2InUse)) //Circuits intended cannot be used. Block cannot be executed at the moment
 8009b02:	b99f      	cbnz	r7, 8009b2c <WRK_HandlePrepareRecipe+0x124>
 8009b04:	4b2c      	ldr	r3, [pc, #176]	; (8009bb8 <WRK_HandlePrepareRecipe+0x1b0>)
 8009b06:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009b0a:	795b      	ldrb	r3, [r3, #5]
 8009b0c:	e00b      	b.n	8009b26 <WRK_HandlePrepareRecipe+0x11e>
					gRecipe[newRecipe].UsingCircuit2 = 1;
 8009b0e:	4b2a      	ldr	r3, [pc, #168]	; (8009bb8 <WRK_HandlePrepareRecipe+0x1b0>)
 8009b10:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009b14:	2101      	movs	r1, #1
 8009b16:	7159      	strb	r1, [r3, #5]
				if ((gRecipe[newRecipe].UsingCircuit1 && Circuit1InUse) || (gRecipe[newRecipe].UsingCircuit2 && Circuit2InUse)) //Circuits intended cannot be used. Block cannot be executed at the moment
 8009b18:	4b27      	ldr	r3, [pc, #156]	; (8009bb8 <WRK_HandlePrepareRecipe+0x1b0>)
 8009b1a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009b1e:	795b      	ldrb	r3, [r3, #5]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f000 856a 	beq.w	800a5fa <WRK_HandlePrepareRecipe+0xbf2>
 8009b26:	f1bc 0f00 	cmp.w	ip, #0
 8009b2a:	d0d5      	beq.n	8009ad8 <WRK_HandlePrepareRecipe+0xd0>
					WRK.PrepareStatus[newRecipe] = pWAITFOROTHERRECIPE;
 8009b2c:	4b21      	ldr	r3, [pc, #132]	; (8009bb4 <WRK_HandlePrepareRecipe+0x1ac>)
 8009b2e:	4423      	add	r3, r4
 8009b30:	2105      	movs	r1, #5
 8009b32:	7119      	strb	r1, [r3, #4]
				if ((P3InUse) && (ActiveBlock.P3Flow > 0) && (((ActiveBlock.Valves == CIRCUIT_1_MILK)&&(gRecipe[newRecipe].UsingCircuit1)) || ((ActiveBlock.Valves == CIRCUIT_2_MILK)&&(gRecipe[newRecipe].UsingCircuit2))))
 8009b34:	b16e      	cbz	r6, 8009b52 <WRK_HandlePrepareRecipe+0x14a>
 8009b36:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8009b3a:	0223      	lsls	r3, r4, #8
 8009b3c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8009b40:	4d1d      	ldr	r5, [pc, #116]	; (8009bb8 <WRK_HandlePrepareRecipe+0x1b0>)
 8009b42:	441d      	add	r5, r3
 8009b44:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 8009b48:	b11b      	cbz	r3, 8009b52 <WRK_HandlePrepareRecipe+0x14a>
 8009b4a:	2802      	cmp	r0, #2
 8009b4c:	d01d      	beq.n	8009b8a <WRK_HandlePrepareRecipe+0x182>
 8009b4e:	2805      	cmp	r0, #5
 8009b50:	d022      	beq.n	8009b98 <WRK_HandlePrepareRecipe+0x190>
					VAL_SetCircuit(ActiveBlock.Valves,0); //Set valves by copying whole buffer
 8009b52:	2100      	movs	r1, #0
 8009b54:	f7ff fc80 	bl	8009458 <VAL_SetCircuit>
					if (newRecipe==RECIPE1)
 8009b58:	2c00      	cmp	r4, #0
 8009b5a:	d12f      	bne.n	8009bbc <WRK_HandlePrepareRecipe+0x1b4>
								(ActiveBlock.Valves == CIRCUIT_1_WATER) ||
 8009b5c:	4b16      	ldr	r3, [pc, #88]	; (8009bb8 <WRK_HandlePrepareRecipe+0x1b0>)
 8009b5e:	78da      	ldrb	r2, [r3, #3]
 8009b60:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8009b64:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009b68:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						if (
 8009b6c:	2b03      	cmp	r3, #3
 8009b6e:	d01a      	beq.n	8009ba6 <WRK_HandlePrepareRecipe+0x19e>
								(ActiveBlock.Valves == CIRCUIT_1_WATER) ||
 8009b70:	2b09      	cmp	r3, #9
 8009b72:	d018      	beq.n	8009ba6 <WRK_HandlePrepareRecipe+0x19e>
							gRecipe[newRecipe].UsingS3 = 0;
 8009b74:	4b10      	ldr	r3, [pc, #64]	; (8009bb8 <WRK_HandlePrepareRecipe+0x1b0>)
 8009b76:	2200      	movs	r2, #0
 8009b78:	731a      	strb	r2, [r3, #12]
 8009b7a:	e022      	b.n	8009bc2 <WRK_HandlePrepareRecipe+0x1ba>
				else if ((S3InUse) && (((ActiveBlock.Valves == CIRCUIT_1_WATER)&&(gRecipe[newRecipe].UsingCircuit1)) || ((ActiveBlock.Valves == CIRCUIT_2_WATER)&&(gRecipe[newRecipe].UsingCircuit2))))
 8009b7c:	2a00      	cmp	r2, #0
 8009b7e:	d0d9      	beq.n	8009b34 <WRK_HandlePrepareRecipe+0x12c>
					WRK.PrepareStatus[newRecipe] = pWAITFOROTHERRECIPE;
 8009b80:	4b0c      	ldr	r3, [pc, #48]	; (8009bb4 <WRK_HandlePrepareRecipe+0x1ac>)
 8009b82:	4423      	add	r3, r4
 8009b84:	2105      	movs	r1, #5
 8009b86:	7119      	strb	r1, [r3, #4]
 8009b88:	e7d4      	b.n	8009b34 <WRK_HandlePrepareRecipe+0x12c>
				if ((P3InUse) && (ActiveBlock.P3Flow > 0) && (((ActiveBlock.Valves == CIRCUIT_1_MILK)&&(gRecipe[newRecipe].UsingCircuit1)) || ((ActiveBlock.Valves == CIRCUIT_2_MILK)&&(gRecipe[newRecipe].UsingCircuit2))))
 8009b8a:	2a00      	cmp	r2, #0
 8009b8c:	d0e1      	beq.n	8009b52 <WRK_HandlePrepareRecipe+0x14a>
					WRK.PrepareStatus[newRecipe] = pWAITFOROTHERRECIPE;
 8009b8e:	4b09      	ldr	r3, [pc, #36]	; (8009bb4 <WRK_HandlePrepareRecipe+0x1ac>)
 8009b90:	441c      	add	r4, r3
 8009b92:	2305      	movs	r3, #5
 8009b94:	7123      	strb	r3, [r4, #4]
 8009b96:	e768      	b.n	8009a6a <WRK_HandlePrepareRecipe+0x62>
				if ((P3InUse) && (ActiveBlock.P3Flow > 0) && (((ActiveBlock.Valves == CIRCUIT_1_MILK)&&(gRecipe[newRecipe].UsingCircuit1)) || ((ActiveBlock.Valves == CIRCUIT_2_MILK)&&(gRecipe[newRecipe].UsingCircuit2))))
 8009b98:	4b07      	ldr	r3, [pc, #28]	; (8009bb8 <WRK_HandlePrepareRecipe+0x1b0>)
 8009b9a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009b9e:	795b      	ldrb	r3, [r3, #5]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d0d6      	beq.n	8009b52 <WRK_HandlePrepareRecipe+0x14a>
 8009ba4:	e7f3      	b.n	8009b8e <WRK_HandlePrepareRecipe+0x186>
							gRecipe[newRecipe].UsingS3 = 1;
 8009ba6:	4b04      	ldr	r3, [pc, #16]	; (8009bb8 <WRK_HandlePrepareRecipe+0x1b0>)
 8009ba8:	2201      	movs	r2, #1
 8009baa:	731a      	strb	r2, [r3, #12]
 8009bac:	e009      	b.n	8009bc2 <WRK_HandlePrepareRecipe+0x1ba>
 8009bae:	bf00      	nop
 8009bb0:	20000c54 	.word	0x20000c54
 8009bb4:	20000c5c 	.word	0x20000c5c
 8009bb8:	20000678 	.word	0x20000678
					else if (newRecipe==RECIPE2)
 8009bbc:	2c01      	cmp	r4, #1
 8009bbe:	f000 81a3 	beq.w	8009f08 <WRK_HandlePrepareRecipe+0x500>
					AIR_Set (ActiveBlock.P3Flow); //Pump 3 Percentage set
 8009bc2:	4dcd      	ldr	r5, [pc, #820]	; (8009ef8 <WRK_HandlePrepareRecipe+0x4f0>)
 8009bc4:	0226      	lsls	r6, r4, #8
 8009bc6:	eb05 2704 	add.w	r7, r5, r4, lsl #8
 8009bca:	78fb      	ldrb	r3, [r7, #3]
 8009bcc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009bd6:	442b      	add	r3, r5
 8009bd8:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
 8009bdc:	f7fd f978 	bl	8006ed0 <AIR_Set>
					if (ActiveBlock.P3Flow > 0)
 8009be0:	78fb      	ldrb	r3, [r7, #3]
 8009be2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009be6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8009bea:	4435      	add	r5, r6
 8009bec:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	f000 81a0 	beq.w	8009f36 <WRK_HandlePrepareRecipe+0x52e>
						AIR_Set(ActiveBlock.P3Flow); //Switch airpump on at x %
 8009bf6:	f7fd f96b 	bl	8006ed0 <AIR_Set>
						gRecipe[newRecipe].UsingP3 = 1;
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	72fa      	strb	r2, [r7, #11]
					if ((ActiveBlock.Valves == CIRCUIT_1_MILK)||(ActiveBlock.Valves == CIRCUIT_2_MILK)||(ActiveBlock.Valves == CIRCUIT_1_2_MILK))
 8009bfe:	49be      	ldr	r1, [pc, #760]	; (8009ef8 <WRK_HandlePrepareRecipe+0x4f0>)
 8009c00:	eb01 2304 	add.w	r3, r1, r4, lsl #8
 8009c04:	78da      	ldrb	r2, [r3, #3]
 8009c06:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009c10:	440b      	add	r3, r1
 8009c12:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009c16:	2b08      	cmp	r3, #8
 8009c18:	d818      	bhi.n	8009c4c <WRK_HandlePrepareRecipe+0x244>
 8009c1a:	f44f 7192 	mov.w	r1, #292	; 0x124
 8009c1e:	fa21 f303 	lsr.w	r3, r1, r3
 8009c22:	f013 0f01 	tst.w	r3, #1
 8009c26:	d011      	beq.n	8009c4c <WRK_HandlePrepareRecipe+0x244>
						WAN.SetTemperature = ActiveBlock.MFSetTemp*10;
 8009c28:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8009c2c:	0223      	lsls	r3, r4, #8
 8009c2e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009c32:	4ab1      	ldr	r2, [pc, #708]	; (8009ef8 <WRK_HandlePrepareRecipe+0x4f0>)
 8009c34:	441a      	add	r2, r3
 8009c36:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 8009c3a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8009c3e:	005b      	lsls	r3, r3, #1
 8009c40:	4aae      	ldr	r2, [pc, #696]	; (8009efc <WRK_HandlePrepareRecipe+0x4f4>)
 8009c42:	6093      	str	r3, [r2, #8]
						HEA_SetHeaterTemperature (H4, ActiveBlock.MFSetTemp,0); //Heater 4 temperature set (Milk foam)
 8009c44:	2200      	movs	r2, #0
 8009c46:	2003      	movs	r0, #3
 8009c48:	f7fd fea4 	bl	8007994 <HEA_SetHeaterTemperature>
					HEA_SetHeaterTemperature (H3, ActiveBlock.H3SetTemp * 10,0); //Heater 3 temperature set (Brew head) * 0.1 degrees
 8009c4c:	4daa      	ldr	r5, [pc, #680]	; (8009ef8 <WRK_HandlePrepareRecipe+0x4f0>)
 8009c4e:	0226      	lsls	r6, r4, #8
 8009c50:	eb05 2704 	add.w	r7, r5, r4, lsl #8
 8009c54:	78fb      	ldrb	r3, [r7, #3]
 8009c56:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009c60:	442b      	add	r3, r5
 8009c62:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8009c66:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	0049      	lsls	r1, r1, #1
 8009c6e:	2002      	movs	r0, #2
 8009c70:	f7fd fe90 	bl	8007994 <HEA_SetHeaterTemperature>
					if (ActiveBlock.H3SetTemp > 0) HEA_Set(H3, sACTIVE), gRecipe[newRecipe].UsingH3 = 1; else HEA_Set(H3, sINACTIVE), gRecipe[newRecipe].UsingH3 = 0;
 8009c74:	78fb      	ldrb	r3, [r7, #3]
 8009c76:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009c7a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8009c7e:	4435      	add	r5, r6
 8009c80:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f000 815f 	beq.w	8009f48 <WRK_HandlePrepareRecipe+0x540>
 8009c8a:	2103      	movs	r1, #3
 8009c8c:	2002      	movs	r0, #2
 8009c8e:	f7fd fe73 	bl	8007978 <HEA_Set>
 8009c92:	2201      	movs	r2, #1
 8009c94:	723a      	strb	r2, [r7, #8]
					if (gRecipe[newRecipe].UsingCircuit1) //Set and start the pumps and heater of the active block
 8009c96:	4b98      	ldr	r3, [pc, #608]	; (8009ef8 <WRK_HandlePrepareRecipe+0x4f0>)
 8009c98:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009c9c:	791b      	ldrb	r3, [r3, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f000 808d 	beq.w	8009dbe <WRK_HandlePrepareRecipe+0x3b6>
						if ((ActiveBlock.Valves == CIRCUIT_1_MILK)||(ActiveBlock.Valves == CIRCUIT_1_2_MILK))
 8009ca4:	4994      	ldr	r1, [pc, #592]	; (8009ef8 <WRK_HandlePrepareRecipe+0x4f0>)
 8009ca6:	eb01 2304 	add.w	r3, r1, r4, lsl #8
 8009caa:	78db      	ldrb	r3, [r3, #3]
 8009cac:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8009cb0:	0092      	lsls	r2, r2, #2
 8009cb2:	eb02 2204 	add.w	r2, r2, r4, lsl #8
 8009cb6:	440a      	add	r2, r1
 8009cb8:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8009cbc:	2a02      	cmp	r2, #2
 8009cbe:	d002      	beq.n	8009cc6 <WRK_HandlePrepareRecipe+0x2be>
 8009cc0:	2a08      	cmp	r2, #8
 8009cc2:	f040 814b 	bne.w	8009f5c <WRK_HandlePrepareRecipe+0x554>
							HEA_SetHeaterTemperature (H1, ActiveBlock.H1SetTemp * 10, 1); //Heater 1 temperature set (FTH1) * 0.1 degrees and steammode set
 8009cc6:	4d8c      	ldr	r5, [pc, #560]	; (8009ef8 <WRK_HandlePrepareRecipe+0x4f0>)
 8009cc8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009ccc:	0226      	lsls	r6, r4, #8
 8009cce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009cd2:	442b      	add	r3, r5
 8009cd4:	f893 1020 	ldrb.w	r1, [r3, #32]
 8009cd8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009cdc:	2201      	movs	r2, #1
 8009cde:	4091      	lsls	r1, r2
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	f7fd fe57 	bl	8007994 <HEA_SetHeaterTemperature>
							PUM_SetFlow (P1, ActiveBlock.P1Flow,1); //Pump 1 flow set
 8009ce6:	19ab      	adds	r3, r5, r6
 8009ce8:	78db      	ldrb	r3, [r3, #3]
 8009cea:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009cee:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8009cf2:	4435      	add	r5, r6
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	f7fe fdc0 	bl	8008880 <PUM_SetFlow>
						PUM_SetPressure (P1, ActiveBlock.P1Pressure*100); //Pump 1 pressure set
 8009d00:	4d7d      	ldr	r5, [pc, #500]	; (8009ef8 <WRK_HandlePrepareRecipe+0x4f0>)
 8009d02:	0226      	lsls	r6, r4, #8
 8009d04:	eb05 2704 	add.w	r7, r5, r4, lsl #8
 8009d08:	78fb      	ldrb	r3, [r7, #3]
 8009d0a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009d14:	442b      	add	r3, r5
 8009d16:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009d1a:	2164      	movs	r1, #100	; 0x64
 8009d1c:	fb03 f101 	mul.w	r1, r3, r1
 8009d20:	2000      	movs	r0, #0
 8009d22:	f7fe fda3 	bl	800886c <PUM_SetPressure>
						PUM_SetVolume (P1, ActiveBlock.P1Volume); //Pump 1 volume set
 8009d26:	78fb      	ldrb	r3, [r7, #3]
 8009d28:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009d2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d30:	442b      	add	r3, r5
 8009d32:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
 8009d34:	2000      	movs	r0, #0
 8009d36:	f7fe fd89 	bl	800884c <PUM_SetVolume>
						PUM_SetControlType (P1, ActiveBlock.ControlType1); //Pump 1 control type set
 8009d3a:	78fb      	ldrb	r3, [r7, #3]
 8009d3c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009d40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d44:	442b      	add	r3, r5
 8009d46:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	f7fe fd74 	bl	8008838 <PUM_SetControlType>
						if (ActiveBlock.H1SetTemp > 0) HEA_Set(H1, sACTIVE), gRecipe[newRecipe].UsingH1 = 1; else HEA_Set(H1, sINACTIVE), gRecipe[newRecipe].UsingH1 = 0;
 8009d50:	78fb      	ldrb	r3, [r7, #3]
 8009d52:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009d56:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8009d5a:	4435      	add	r5, r6
 8009d5c:	f895 3020 	ldrb.w	r3, [r5, #32]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f000 8119 	beq.w	8009f98 <WRK_HandlePrepareRecipe+0x590>
 8009d66:	2103      	movs	r1, #3
 8009d68:	2000      	movs	r0, #0
 8009d6a:	f7fd fe05 	bl	8007978 <HEA_Set>
 8009d6e:	2201      	movs	r2, #1
 8009d70:	71ba      	strb	r2, [r7, #6]
						if ((ActiveBlock.P1Flow > 0) || (ActiveBlock.P1Pressure > 0) || (ActiveBlock.P1Volume > 0)) PUM_Set(P1, sACTIVE), gRecipe[newRecipe].UsingP1 = 1; else PUM_Set(P1, sINACTIVE), gRecipe[newRecipe].UsingP1 = 0;
 8009d72:	4961      	ldr	r1, [pc, #388]	; (8009ef8 <WRK_HandlePrepareRecipe+0x4f0>)
 8009d74:	eb01 2304 	add.w	r3, r1, r4, lsl #8
 8009d78:	78da      	ldrb	r2, [r3, #3]
 8009d7a:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009d84:	440b      	add	r3, r1
 8009d86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d8a:	b97b      	cbnz	r3, 8009dac <WRK_HandlePrepareRecipe+0x3a4>
 8009d8c:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8009d90:	0220      	lsls	r0, r4, #8
 8009d92:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8009d96:	4b58      	ldr	r3, [pc, #352]	; (8009ef8 <WRK_HandlePrepareRecipe+0x4f0>)
 8009d98:	440b      	add	r3, r1
 8009d9a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009d9e:	b92b      	cbnz	r3, 8009dac <WRK_HandlePrepareRecipe+0x3a4>
 8009da0:	4a55      	ldr	r2, [pc, #340]	; (8009ef8 <WRK_HandlePrepareRecipe+0x4f0>)
 8009da2:	440a      	add	r2, r1
 8009da4:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f000 8100 	beq.w	8009fac <WRK_HandlePrepareRecipe+0x5a4>
 8009dac:	2103      	movs	r1, #3
 8009dae:	2000      	movs	r0, #0
 8009db0:	f7fe fd22 	bl	80087f8 <PUM_Set>
 8009db4:	4b50      	ldr	r3, [pc, #320]	; (8009ef8 <WRK_HandlePrepareRecipe+0x4f0>)
 8009db6:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009dba:	2201      	movs	r2, #1
 8009dbc:	725a      	strb	r2, [r3, #9]
					if (gRecipe[newRecipe].UsingCircuit2) //Set and start the pumps and heater of the active block
 8009dbe:	4b4e      	ldr	r3, [pc, #312]	; (8009ef8 <WRK_HandlePrepareRecipe+0x4f0>)
 8009dc0:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009dc4:	795b      	ldrb	r3, [r3, #5]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f000 808d 	beq.w	8009ee6 <WRK_HandlePrepareRecipe+0x4de>
						if ((ActiveBlock.Valves == CIRCUIT_2_MILK)||(ActiveBlock.Valves == CIRCUIT_1_2_MILK))
 8009dcc:	494a      	ldr	r1, [pc, #296]	; (8009ef8 <WRK_HandlePrepareRecipe+0x4f0>)
 8009dce:	eb01 2304 	add.w	r3, r1, r4, lsl #8
 8009dd2:	78db      	ldrb	r3, [r3, #3]
 8009dd4:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8009dd8:	0092      	lsls	r2, r2, #2
 8009dda:	eb02 2204 	add.w	r2, r2, r4, lsl #8
 8009dde:	440a      	add	r2, r1
 8009de0:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8009de4:	2a05      	cmp	r2, #5
 8009de6:	d002      	beq.n	8009dee <WRK_HandlePrepareRecipe+0x3e6>
 8009de8:	2a08      	cmp	r2, #8
 8009dea:	f040 80e9 	bne.w	8009fc0 <WRK_HandlePrepareRecipe+0x5b8>
							HEA_SetHeaterTemperature (H2, ActiveBlock.H2SetTemp * 10, 1); //Heater 2 temperature set (FTH2) * 0.1 degrees
 8009dee:	4d42      	ldr	r5, [pc, #264]	; (8009ef8 <WRK_HandlePrepareRecipe+0x4f0>)
 8009df0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009df4:	0226      	lsls	r6, r4, #8
 8009df6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009dfa:	442b      	add	r3, r5
 8009dfc:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8009e00:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009e04:	2201      	movs	r2, #1
 8009e06:	4091      	lsls	r1, r2
 8009e08:	4610      	mov	r0, r2
 8009e0a:	f7fd fdc3 	bl	8007994 <HEA_SetHeaterTemperature>
							PUM_SetFlow (P2, ActiveBlock.P2Flow,1); //Pump 2 flow set
 8009e0e:	19ab      	adds	r3, r5, r6
 8009e10:	78db      	ldrb	r3, [r3, #3]
 8009e12:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009e16:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8009e1a:	4435      	add	r5, r6
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 8009e22:	4610      	mov	r0, r2
 8009e24:	f7fe fd2c 	bl	8008880 <PUM_SetFlow>
						PUM_SetPressure (P2, ActiveBlock.P2Pressure*100); //Pump 2 pressure set
 8009e28:	4d33      	ldr	r5, [pc, #204]	; (8009ef8 <WRK_HandlePrepareRecipe+0x4f0>)
 8009e2a:	0226      	lsls	r6, r4, #8
 8009e2c:	eb05 2704 	add.w	r7, r5, r4, lsl #8
 8009e30:	78fb      	ldrb	r3, [r7, #3]
 8009e32:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009e3c:	442b      	add	r3, r5
 8009e3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e42:	2164      	movs	r1, #100	; 0x64
 8009e44:	fb03 f101 	mul.w	r1, r3, r1
 8009e48:	2001      	movs	r0, #1
 8009e4a:	f7fe fd0f 	bl	800886c <PUM_SetPressure>
						PUM_SetVolume (P2, ActiveBlock.P2Volume); //Pump 2 volume set
 8009e4e:	78fb      	ldrb	r3, [r7, #3]
 8009e50:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009e54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009e58:	442b      	add	r3, r5
 8009e5a:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8009e5c:	2001      	movs	r0, #1
 8009e5e:	f7fe fcf5 	bl	800884c <PUM_SetVolume>
						PUM_SetControlType (P2, ActiveBlock.ControlType2); //Pump 2 control type set
 8009e62:	78fb      	ldrb	r3, [r7, #3]
 8009e64:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009e68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009e6c:	442b      	add	r3, r5
 8009e6e:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
 8009e72:	2001      	movs	r0, #1
 8009e74:	f7fe fce0 	bl	8008838 <PUM_SetControlType>
						if (ActiveBlock.H2SetTemp > 0) HEA_Set(H2, sACTIVE), gRecipe[newRecipe].UsingH2 = 1; else HEA_Set(H2, sINACTIVE), gRecipe[newRecipe].UsingH2 = 0;
 8009e78:	78fb      	ldrb	r3, [r7, #3]
 8009e7a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009e7e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8009e82:	4435      	add	r5, r6
 8009e84:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f000 80b7 	beq.w	8009ffc <WRK_HandlePrepareRecipe+0x5f4>
 8009e8e:	2103      	movs	r1, #3
 8009e90:	2001      	movs	r0, #1
 8009e92:	f7fd fd71 	bl	8007978 <HEA_Set>
 8009e96:	2201      	movs	r2, #1
 8009e98:	71fa      	strb	r2, [r7, #7]
						if ((ActiveBlock.P2Flow > 0) || (ActiveBlock.P2Pressure > 0) || (ActiveBlock.P2Volume > 0)) PUM_Set(P2, sACTIVE), gRecipe[newRecipe].UsingP2 = 1; else  PUM_Set(P2, sINACTIVE), gRecipe[newRecipe].UsingP2 = 0;
 8009e9a:	4917      	ldr	r1, [pc, #92]	; (8009ef8 <WRK_HandlePrepareRecipe+0x4f0>)
 8009e9c:	eb01 2304 	add.w	r3, r1, r4, lsl #8
 8009ea0:	78da      	ldrb	r2, [r3, #3]
 8009ea2:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009eac:	440b      	add	r3, r1
 8009eae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009eb2:	b97b      	cbnz	r3, 8009ed4 <WRK_HandlePrepareRecipe+0x4cc>
 8009eb4:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8009eb8:	0220      	lsls	r0, r4, #8
 8009eba:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8009ebe:	4b0e      	ldr	r3, [pc, #56]	; (8009ef8 <WRK_HandlePrepareRecipe+0x4f0>)
 8009ec0:	440b      	add	r3, r1
 8009ec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ec6:	b92b      	cbnz	r3, 8009ed4 <WRK_HandlePrepareRecipe+0x4cc>
 8009ec8:	4a0b      	ldr	r2, [pc, #44]	; (8009ef8 <WRK_HandlePrepareRecipe+0x4f0>)
 8009eca:	440a      	add	r2, r1
 8009ecc:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	f000 809e 	beq.w	800a010 <WRK_HandlePrepareRecipe+0x608>
 8009ed4:	2103      	movs	r1, #3
 8009ed6:	2001      	movs	r0, #1
 8009ed8:	f7fe fc8e 	bl	80087f8 <PUM_Set>
 8009edc:	4b06      	ldr	r3, [pc, #24]	; (8009ef8 <WRK_HandlePrepareRecipe+0x4f0>)
 8009ede:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	729a      	strb	r2, [r3, #10]
					PrepareCounter = 0; //Reset the counter used for timing
 8009ee6:	4b06      	ldr	r3, [pc, #24]	; (8009f00 <WRK_HandlePrepareRecipe+0x4f8>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	601a      	str	r2, [r3, #0]
					WRK.PrepareStatus[newRecipe] = pWAITFORCONDITIONS;
 8009eec:	4805      	ldr	r0, [pc, #20]	; (8009f04 <WRK_HandlePrepareRecipe+0x4fc>)
 8009eee:	4404      	add	r4, r0
 8009ef0:	2304      	movs	r3, #4
 8009ef2:	7123      	strb	r3, [r4, #4]
 8009ef4:	e5b9      	b.n	8009a6a <WRK_HandlePrepareRecipe+0x62>
 8009ef6:	bf00      	nop
 8009ef8:	20000678 	.word	0x20000678
 8009efc:	20000a24 	.word	0x20000a24
 8009f00:	20000c54 	.word	0x20000c54
 8009f04:	20000c5c 	.word	0x20000c5c
								(ActiveBlock.Valves == CIRCUIT_2_WATER) ||
 8009f08:	4baf      	ldr	r3, [pc, #700]	; (800a1c8 <WRK_HandlePrepareRecipe+0x7c0>)
 8009f0a:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
 8009f0e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8009f12:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009f16:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
						if (
 8009f1a:	2b06      	cmp	r3, #6
 8009f1c:	d006      	beq.n	8009f2c <WRK_HandlePrepareRecipe+0x524>
								(ActiveBlock.Valves == CIRCUIT_2_WATER) ||
 8009f1e:	2b09      	cmp	r3, #9
 8009f20:	d004      	beq.n	8009f2c <WRK_HandlePrepareRecipe+0x524>
							gRecipe[newRecipe].UsingS3 = 0;
 8009f22:	4ba9      	ldr	r3, [pc, #676]	; (800a1c8 <WRK_HandlePrepareRecipe+0x7c0>)
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8009f2a:	e64a      	b.n	8009bc2 <WRK_HandlePrepareRecipe+0x1ba>
							gRecipe[newRecipe].UsingS3 = 1;
 8009f2c:	4ba6      	ldr	r3, [pc, #664]	; (800a1c8 <WRK_HandlePrepareRecipe+0x7c0>)
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8009f34:	e645      	b.n	8009bc2 <WRK_HandlePrepareRecipe+0x1ba>
						AIR_Set(0); //Switch airpump off
 8009f36:	2000      	movs	r0, #0
 8009f38:	f7fc ffca 	bl	8006ed0 <AIR_Set>
						gRecipe[newRecipe].UsingP3 = 0;
 8009f3c:	4ba2      	ldr	r3, [pc, #648]	; (800a1c8 <WRK_HandlePrepareRecipe+0x7c0>)
 8009f3e:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009f42:	2200      	movs	r2, #0
 8009f44:	72da      	strb	r2, [r3, #11]
 8009f46:	e65a      	b.n	8009bfe <WRK_HandlePrepareRecipe+0x1f6>
					if (ActiveBlock.H3SetTemp > 0) HEA_Set(H3, sACTIVE), gRecipe[newRecipe].UsingH3 = 1; else HEA_Set(H3, sINACTIVE), gRecipe[newRecipe].UsingH3 = 0;
 8009f48:	2104      	movs	r1, #4
 8009f4a:	2002      	movs	r0, #2
 8009f4c:	f7fd fd14 	bl	8007978 <HEA_Set>
 8009f50:	4b9d      	ldr	r3, [pc, #628]	; (800a1c8 <WRK_HandlePrepareRecipe+0x7c0>)
 8009f52:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009f56:	2200      	movs	r2, #0
 8009f58:	721a      	strb	r2, [r3, #8]
 8009f5a:	e69c      	b.n	8009c96 <WRK_HandlePrepareRecipe+0x28e>
							HEA_SetHeaterTemperature (H1, ActiveBlock.H1SetTemp * 10, 0); //Heater 1 temperature set (FTH1) * 0.1 degrees and steammode set
 8009f5c:	4d9a      	ldr	r5, [pc, #616]	; (800a1c8 <WRK_HandlePrepareRecipe+0x7c0>)
 8009f5e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009f62:	0226      	lsls	r6, r4, #8
 8009f64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009f68:	442b      	add	r3, r5
 8009f6a:	f893 1020 	ldrb.w	r1, [r3, #32]
 8009f6e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009f72:	2200      	movs	r2, #0
 8009f74:	0049      	lsls	r1, r1, #1
 8009f76:	4610      	mov	r0, r2
 8009f78:	f7fd fd0c 	bl	8007994 <HEA_SetHeaterTemperature>
							PUM_SetFlow (P1, ActiveBlock.P1Flow,0); //Pump 1 flow set
 8009f7c:	19ab      	adds	r3, r5, r6
 8009f7e:	78db      	ldrb	r3, [r3, #3]
 8009f80:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009f84:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8009f88:	4435      	add	r5, r6
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 8009f90:	4610      	mov	r0, r2
 8009f92:	f7fe fc75 	bl	8008880 <PUM_SetFlow>
 8009f96:	e6b3      	b.n	8009d00 <WRK_HandlePrepareRecipe+0x2f8>
						if (ActiveBlock.H1SetTemp > 0) HEA_Set(H1, sACTIVE), gRecipe[newRecipe].UsingH1 = 1; else HEA_Set(H1, sINACTIVE), gRecipe[newRecipe].UsingH1 = 0;
 8009f98:	2104      	movs	r1, #4
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	f7fd fcec 	bl	8007978 <HEA_Set>
 8009fa0:	4b89      	ldr	r3, [pc, #548]	; (800a1c8 <WRK_HandlePrepareRecipe+0x7c0>)
 8009fa2:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	719a      	strb	r2, [r3, #6]
 8009faa:	e6e2      	b.n	8009d72 <WRK_HandlePrepareRecipe+0x36a>
						if ((ActiveBlock.P1Flow > 0) || (ActiveBlock.P1Pressure > 0) || (ActiveBlock.P1Volume > 0)) PUM_Set(P1, sACTIVE), gRecipe[newRecipe].UsingP1 = 1; else PUM_Set(P1, sINACTIVE), gRecipe[newRecipe].UsingP1 = 0;
 8009fac:	2104      	movs	r1, #4
 8009fae:	2000      	movs	r0, #0
 8009fb0:	f7fe fc22 	bl	80087f8 <PUM_Set>
 8009fb4:	4b84      	ldr	r3, [pc, #528]	; (800a1c8 <WRK_HandlePrepareRecipe+0x7c0>)
 8009fb6:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009fba:	2200      	movs	r2, #0
 8009fbc:	725a      	strb	r2, [r3, #9]
 8009fbe:	e6fe      	b.n	8009dbe <WRK_HandlePrepareRecipe+0x3b6>
							HEA_SetHeaterTemperature (H2, ActiveBlock.H2SetTemp * 10, 0); //Heater 2 temperature set (FTH2) * 0.1 degrees
 8009fc0:	4d81      	ldr	r5, [pc, #516]	; (800a1c8 <WRK_HandlePrepareRecipe+0x7c0>)
 8009fc2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009fc6:	0226      	lsls	r6, r4, #8
 8009fc8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009fcc:	442b      	add	r3, r5
 8009fce:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8009fd2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	0049      	lsls	r1, r1, #1
 8009fda:	2001      	movs	r0, #1
 8009fdc:	f7fd fcda 	bl	8007994 <HEA_SetHeaterTemperature>
							PUM_SetFlow (P2, ActiveBlock.P2Flow,0); //Pump 2 flow set
 8009fe0:	19ab      	adds	r3, r5, r6
 8009fe2:	78db      	ldrb	r3, [r3, #3]
 8009fe4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009fe8:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8009fec:	4435      	add	r5, r6
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 8009ff4:	2001      	movs	r0, #1
 8009ff6:	f7fe fc43 	bl	8008880 <PUM_SetFlow>
 8009ffa:	e715      	b.n	8009e28 <WRK_HandlePrepareRecipe+0x420>
						if (ActiveBlock.H2SetTemp > 0) HEA_Set(H2, sACTIVE), gRecipe[newRecipe].UsingH2 = 1; else HEA_Set(H2, sINACTIVE), gRecipe[newRecipe].UsingH2 = 0;
 8009ffc:	2104      	movs	r1, #4
 8009ffe:	2001      	movs	r0, #1
 800a000:	f7fd fcba 	bl	8007978 <HEA_Set>
 800a004:	4b70      	ldr	r3, [pc, #448]	; (800a1c8 <WRK_HandlePrepareRecipe+0x7c0>)
 800a006:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 800a00a:	2200      	movs	r2, #0
 800a00c:	71da      	strb	r2, [r3, #7]
 800a00e:	e744      	b.n	8009e9a <WRK_HandlePrepareRecipe+0x492>
						if ((ActiveBlock.P2Flow > 0) || (ActiveBlock.P2Pressure > 0) || (ActiveBlock.P2Volume > 0)) PUM_Set(P2, sACTIVE), gRecipe[newRecipe].UsingP2 = 1; else  PUM_Set(P2, sINACTIVE), gRecipe[newRecipe].UsingP2 = 0;
 800a010:	2104      	movs	r1, #4
 800a012:	2001      	movs	r0, #1
 800a014:	f7fe fbf0 	bl	80087f8 <PUM_Set>
 800a018:	4b6b      	ldr	r3, [pc, #428]	; (800a1c8 <WRK_HandlePrepareRecipe+0x7c0>)
 800a01a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 800a01e:	2200      	movs	r2, #0
 800a020:	729a      	strb	r2, [r3, #10]
 800a022:	e760      	b.n	8009ee6 <WRK_HandlePrepareRecipe+0x4de>
				if (DUMMYMODE)
 800a024:	4b69      	ldr	r3, [pc, #420]	; (800a1cc <WRK_HandlePrepareRecipe+0x7c4>)
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	931b      	str	r3, [sp, #108]	; 0x6c
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f000 80fc 	beq.w	800a228 <WRK_HandlePrepareRecipe+0x820>
					if (HEA[H1].GetTemperature < HEA[H1].SetTemperature) //Temperature H1 not reached yet
 800a030:	4a67      	ldr	r2, [pc, #412]	; (800a1d0 <WRK_HandlePrepareRecipe+0x7c8>)
 800a032:	6893      	ldr	r3, [r2, #8]
 800a034:	6852      	ldr	r2, [r2, #4]
 800a036:	4293      	cmp	r3, r2
 800a038:	f080 80bc 	bcs.w	800a1b4 <WRK_HandlePrepareRecipe+0x7ac>
						if (HEA[H1].SetTemperature < 10) HEA[H1].SetTemperature  = 10; //Otherwise no temperature increase
 800a03c:	2a09      	cmp	r2, #9
 800a03e:	d802      	bhi.n	800a046 <WRK_HandlePrepareRecipe+0x63e>
 800a040:	4a63      	ldr	r2, [pc, #396]	; (800a1d0 <WRK_HandlePrepareRecipe+0x7c8>)
 800a042:	210a      	movs	r1, #10
 800a044:	6051      	str	r1, [r2, #4]
						HEA[H1].GetTemperature  += HEA[H1].SetTemperature / 10; //Add temperature in 1 second
 800a046:	4a62      	ldr	r2, [pc, #392]	; (800a1d0 <WRK_HandlePrepareRecipe+0x7c8>)
 800a048:	6851      	ldr	r1, [r2, #4]
 800a04a:	4a62      	ldr	r2, [pc, #392]	; (800a1d4 <WRK_HandlePrepareRecipe+0x7cc>)
 800a04c:	fba2 0201 	umull	r0, r2, r2, r1
 800a050:	eb03 03d2 	add.w	r3, r3, r2, lsr #3
						if (HEA[H1].GetTemperature > HEA[H1].SetTemperature) HEA[H1].GetTemperature  = HEA[H1].SetTemperature ;
 800a054:	4299      	cmp	r1, r3
						HEA[H1].GetTemperature  += HEA[H1].SetTemperature / 10; //Add temperature in 1 second
 800a056:	bf27      	ittee	cs
 800a058:	4a5d      	ldrcs	r2, [pc, #372]	; (800a1d0 <WRK_HandlePrepareRecipe+0x7c8>)
 800a05a:	6093      	strcs	r3, [r2, #8]
						if (HEA[H1].GetTemperature > HEA[H1].SetTemperature) HEA[H1].GetTemperature  = HEA[H1].SetTemperature ;
 800a05c:	4b5c      	ldrcc	r3, [pc, #368]	; (800a1d0 <WRK_HandlePrepareRecipe+0x7c8>)
 800a05e:	6099      	strcc	r1, [r3, #8]
					if (HEA[H2].GetTemperature < HEA[H2].SetTemperature) //Temperature H2 not reached yet
 800a060:	4a5b      	ldr	r2, [pc, #364]	; (800a1d0 <WRK_HandlePrepareRecipe+0x7c8>)
 800a062:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800a064:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a066:	4293      	cmp	r3, r2
 800a068:	f080 80bf 	bcs.w	800a1ea <WRK_HandlePrepareRecipe+0x7e2>
						if (HEA[H2].SetTemperature < 10) HEA[H2].SetTemperature  = 10; //Otherwise no temperature increase
 800a06c:	2a09      	cmp	r2, #9
 800a06e:	d802      	bhi.n	800a076 <WRK_HandlePrepareRecipe+0x66e>
 800a070:	4a57      	ldr	r2, [pc, #348]	; (800a1d0 <WRK_HandlePrepareRecipe+0x7c8>)
 800a072:	210a      	movs	r1, #10
 800a074:	6651      	str	r1, [r2, #100]	; 0x64
						HEA[H2].GetTemperature  += HEA[H2].SetTemperature / 10; //Add temperature in 1 second
 800a076:	4a56      	ldr	r2, [pc, #344]	; (800a1d0 <WRK_HandlePrepareRecipe+0x7c8>)
 800a078:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800a07a:	4a56      	ldr	r2, [pc, #344]	; (800a1d4 <WRK_HandlePrepareRecipe+0x7cc>)
 800a07c:	fba2 0201 	umull	r0, r2, r2, r1
 800a080:	eb03 03d2 	add.w	r3, r3, r2, lsr #3
						if (HEA[H2].GetTemperature > HEA[H2].SetTemperature) HEA[H2].GetTemperature  = HEA[H2].SetTemperature ;
 800a084:	4299      	cmp	r1, r3
						HEA[H2].GetTemperature  += HEA[H2].SetTemperature / 10; //Add temperature in 1 second
 800a086:	bf27      	ittee	cs
 800a088:	4a51      	ldrcs	r2, [pc, #324]	; (800a1d0 <WRK_HandlePrepareRecipe+0x7c8>)
 800a08a:	6693      	strcs	r3, [r2, #104]	; 0x68
						if (HEA[H2].GetTemperature > HEA[H2].SetTemperature) HEA[H2].GetTemperature  = HEA[H2].SetTemperature ;
 800a08c:	4b50      	ldrcc	r3, [pc, #320]	; (800a1d0 <WRK_HandlePrepareRecipe+0x7c8>)
 800a08e:	6699      	strcc	r1, [r3, #104]	; 0x68
					if (HEA[H3].GetTemperature < HEA[H3].SetTemperature) //Temperature H3 not reached yet
 800a090:	4a4f      	ldr	r2, [pc, #316]	; (800a1d0 <WRK_HandlePrepareRecipe+0x7c8>)
 800a092:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 800a096:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
 800a09a:	4293      	cmp	r3, r2
 800a09c:	f080 80b2 	bcs.w	800a204 <WRK_HandlePrepareRecipe+0x7fc>
						if (HEA[H3].SetTemperature < 10) HEA[H3].SetTemperature  = 10; //Otherwise no temperature increase
 800a0a0:	2a09      	cmp	r2, #9
 800a0a2:	d803      	bhi.n	800a0ac <WRK_HandlePrepareRecipe+0x6a4>
 800a0a4:	4a4a      	ldr	r2, [pc, #296]	; (800a1d0 <WRK_HandlePrepareRecipe+0x7c8>)
 800a0a6:	210a      	movs	r1, #10
 800a0a8:	f8c2 10c4 	str.w	r1, [r2, #196]	; 0xc4
						HEA[H3].GetTemperature  += HEA[H3].SetTemperature / 10; //Add temperature in 1 second
 800a0ac:	4a48      	ldr	r2, [pc, #288]	; (800a1d0 <WRK_HandlePrepareRecipe+0x7c8>)
 800a0ae:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 800a0b2:	4a48      	ldr	r2, [pc, #288]	; (800a1d4 <WRK_HandlePrepareRecipe+0x7cc>)
 800a0b4:	fba2 0201 	umull	r0, r2, r2, r1
 800a0b8:	eb03 03d2 	add.w	r3, r3, r2, lsr #3
						if (HEA[H3].GetTemperature > HEA[H3].SetTemperature) HEA[H3].GetTemperature  = HEA[H3].SetTemperature ;
 800a0bc:	4299      	cmp	r1, r3
						HEA[H3].GetTemperature  += HEA[H3].SetTemperature / 10; //Add temperature in 1 second
 800a0be:	bf27      	ittee	cs
 800a0c0:	4a43      	ldrcs	r2, [pc, #268]	; (800a1d0 <WRK_HandlePrepareRecipe+0x7c8>)
 800a0c2:	f8c2 30c8 	strcs.w	r3, [r2, #200]	; 0xc8
						if (HEA[H3].GetTemperature > HEA[H3].SetTemperature) HEA[H3].GetTemperature  = HEA[H3].SetTemperature ;
 800a0c6:	4b42      	ldrcc	r3, [pc, #264]	; (800a1d0 <WRK_HandlePrepareRecipe+0x7c8>)
 800a0c8:	f8c3 10c8 	strcc.w	r1, [r3, #200]	; 0xc8
					if (WAN.GetTemperature < WAN.SetTemperature) //Temperature milk not reached yet
 800a0cc:	4a42      	ldr	r2, [pc, #264]	; (800a1d8 <WRK_HandlePrepareRecipe+0x7d0>)
 800a0ce:	6853      	ldr	r3, [r2, #4]
 800a0d0:	6892      	ldr	r2, [r2, #8]
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d211      	bcs.n	800a0fa <WRK_HandlePrepareRecipe+0x6f2>
						if (WAN.SetTemperature < 10) WAN.SetTemperature  = 10; //Otherwise no temperature increase
 800a0d6:	2a09      	cmp	r2, #9
 800a0d8:	d802      	bhi.n	800a0e0 <WRK_HandlePrepareRecipe+0x6d8>
 800a0da:	4a3f      	ldr	r2, [pc, #252]	; (800a1d8 <WRK_HandlePrepareRecipe+0x7d0>)
 800a0dc:	210a      	movs	r1, #10
 800a0de:	6091      	str	r1, [r2, #8]
						WAN.GetTemperature  += WAN.SetTemperature/400;  //Add temperature in 40 second
 800a0e0:	4a3d      	ldr	r2, [pc, #244]	; (800a1d8 <WRK_HandlePrepareRecipe+0x7d0>)
 800a0e2:	6891      	ldr	r1, [r2, #8]
 800a0e4:	4a3d      	ldr	r2, [pc, #244]	; (800a1dc <WRK_HandlePrepareRecipe+0x7d4>)
 800a0e6:	fba2 0201 	umull	r0, r2, r2, r1
 800a0ea:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
						if (WAN.GetTemperature > WAN.SetTemperature) WAN.GetTemperature  = WAN.SetTemperature ;
 800a0ee:	4299      	cmp	r1, r3
						WAN.GetTemperature  += WAN.SetTemperature/400;  //Add temperature in 40 second
 800a0f0:	bf27      	ittee	cs
 800a0f2:	4a39      	ldrcs	r2, [pc, #228]	; (800a1d8 <WRK_HandlePrepareRecipe+0x7d0>)
 800a0f4:	6053      	strcs	r3, [r2, #4]
						if (WAN.GetTemperature > WAN.SetTemperature) WAN.GetTemperature  = WAN.SetTemperature ;
 800a0f6:	4b38      	ldrcc	r3, [pc, #224]	; (800a1d8 <WRK_HandlePrepareRecipe+0x7d0>)
 800a0f8:	6059      	strcc	r1, [r3, #4]
					if ((PUM[P1].GetVolume < PUM[P1].SetVolume) && (PUM[P1].SetFlow) && (PUM[P1].SetControlType)) //Volume P1 not reached yet
 800a0fa:	4b39      	ldr	r3, [pc, #228]	; (800a1e0 <WRK_HandlePrepareRecipe+0x7d8>)
 800a0fc:	6999      	ldr	r1, [r3, #24]
 800a0fe:	69da      	ldr	r2, [r3, #28]
 800a100:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a104:	4281      	cmp	r1, r0
 800a106:	eb72 0503 	sbcs.w	r5, r2, r3
 800a10a:	d21e      	bcs.n	800a14a <WRK_HandlePrepareRecipe+0x742>
 800a10c:	4d34      	ldr	r5, [pc, #208]	; (800a1e0 <WRK_HandlePrepareRecipe+0x7d8>)
 800a10e:	686d      	ldr	r5, [r5, #4]
 800a110:	b1dd      	cbz	r5, 800a14a <WRK_HandlePrepareRecipe+0x742>
 800a112:	4e33      	ldr	r6, [pc, #204]	; (800a1e0 <WRK_HandlePrepareRecipe+0x7d8>)
 800a114:	f896 6038 	ldrb.w	r6, [r6, #56]	; 0x38
 800a118:	b1be      	cbz	r6, 800a14a <WRK_HandlePrepareRecipe+0x742>
						PUM[P1].GetFlowTimeBased = PUM[P1].SetFlow;
 800a11a:	4f31      	ldr	r7, [pc, #196]	; (800a1e0 <WRK_HandlePrepareRecipe+0x7d8>)
 800a11c:	60fd      	str	r5, [r7, #12]
						PUM[P1].GetPressure = PUM[P1].SetPressure;
 800a11e:	693e      	ldr	r6, [r7, #16]
 800a120:	617e      	str	r6, [r7, #20]
						if (PUM[P1].SetFlow < 10) PUM[P1].SetFlow = 10; //Otherwise no volume counting
 800a122:	2d09      	cmp	r5, #9
 800a124:	d801      	bhi.n	800a12a <WRK_HandlePrepareRecipe+0x722>
 800a126:	260a      	movs	r6, #10
 800a128:	607e      	str	r6, [r7, #4]
						PUM[P1].GetVolume += PUM[P1].SetFlow / 10; //Add volume per 100 ms.
 800a12a:	4d2d      	ldr	r5, [pc, #180]	; (800a1e0 <WRK_HandlePrepareRecipe+0x7d8>)
 800a12c:	686d      	ldr	r5, [r5, #4]
 800a12e:	4e29      	ldr	r6, [pc, #164]	; (800a1d4 <WRK_HandlePrepareRecipe+0x7cc>)
 800a130:	fba6 6505 	umull	r6, r5, r6, r5
 800a134:	08ed      	lsrs	r5, r5, #3
 800a136:	1869      	adds	r1, r5, r1
 800a138:	f142 0200 	adc.w	r2, r2, #0
						if (PUM[P1].GetVolume > PUM[P1].SetVolume) PUM[P1].GetVolume = PUM[P1].SetVolume;
 800a13c:	4288      	cmp	r0, r1
 800a13e:	eb73 0502 	sbcs.w	r5, r3, r2
 800a142:	d367      	bcc.n	800a214 <WRK_HandlePrepareRecipe+0x80c>
						PUM[P1].GetVolume += PUM[P1].SetFlow / 10; //Add volume per 100 ms.
 800a144:	4b26      	ldr	r3, [pc, #152]	; (800a1e0 <WRK_HandlePrepareRecipe+0x7d8>)
 800a146:	6199      	str	r1, [r3, #24]
 800a148:	61da      	str	r2, [r3, #28]
					if ((PUM[P2].GetVolume < PUM[P2].SetVolume) && (PUM[P2].SetFlow) && (PUM[P2].SetControlType)) //Volume P2 not reached yet
 800a14a:	4b25      	ldr	r3, [pc, #148]	; (800a1e0 <WRK_HandlePrepareRecipe+0x7d8>)
 800a14c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800a150:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a154:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 800a158:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a15c:	4281      	cmp	r1, r0
 800a15e:	eb72 0503 	sbcs.w	r5, r2, r3
 800a162:	f080 8081 	bcs.w	800a268 <WRK_HandlePrepareRecipe+0x860>
 800a166:	4d1e      	ldr	r5, [pc, #120]	; (800a1e0 <WRK_HandlePrepareRecipe+0x7d8>)
 800a168:	6fed      	ldr	r5, [r5, #124]	; 0x7c
 800a16a:	2d00      	cmp	r5, #0
 800a16c:	d07c      	beq.n	800a268 <WRK_HandlePrepareRecipe+0x860>
 800a16e:	4e1c      	ldr	r6, [pc, #112]	; (800a1e0 <WRK_HandlePrepareRecipe+0x7d8>)
 800a170:	f896 60b0 	ldrb.w	r6, [r6, #176]	; 0xb0
 800a174:	2e00      	cmp	r6, #0
 800a176:	d077      	beq.n	800a268 <WRK_HandlePrepareRecipe+0x860>
						PUM[P2].GetFlowTimeBased = PUM[P2].SetFlow;
 800a178:	4f19      	ldr	r7, [pc, #100]	; (800a1e0 <WRK_HandlePrepareRecipe+0x7d8>)
 800a17a:	f8c7 5084 	str.w	r5, [r7, #132]	; 0x84
						PUM[P2].GetPressure = PUM[P2].SetPressure;
 800a17e:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
 800a182:	f8c7 608c 	str.w	r6, [r7, #140]	; 0x8c
						if (PUM[P2].SetFlow < 10) PUM[P2].SetFlow = 10; //Otherwise no volume counting
 800a186:	2d09      	cmp	r5, #9
 800a188:	d801      	bhi.n	800a18e <WRK_HandlePrepareRecipe+0x786>
 800a18a:	260a      	movs	r6, #10
 800a18c:	67fe      	str	r6, [r7, #124]	; 0x7c
						PUM[P2].GetVolume += PUM[P2].SetFlow / 10; //Add volume per 100 ms.
 800a18e:	4d14      	ldr	r5, [pc, #80]	; (800a1e0 <WRK_HandlePrepareRecipe+0x7d8>)
 800a190:	6fed      	ldr	r5, [r5, #124]	; 0x7c
 800a192:	4e10      	ldr	r6, [pc, #64]	; (800a1d4 <WRK_HandlePrepareRecipe+0x7cc>)
 800a194:	fba6 6505 	umull	r6, r5, r6, r5
 800a198:	08ed      	lsrs	r5, r5, #3
 800a19a:	1869      	adds	r1, r5, r1
 800a19c:	f142 0200 	adc.w	r2, r2, #0
						if (PUM[P2].GetVolume > PUM[P2].SetVolume) PUM[P2].GetVolume = PUM[P2].SetVolume;
 800a1a0:	4288      	cmp	r0, r1
 800a1a2:	eb73 0502 	sbcs.w	r5, r3, r2
 800a1a6:	d339      	bcc.n	800a21c <WRK_HandlePrepareRecipe+0x814>
						PUM[P2].GetVolume += PUM[P2].SetFlow / 10; //Add volume per 100 ms.
 800a1a8:	4b0d      	ldr	r3, [pc, #52]	; (800a1e0 <WRK_HandlePrepareRecipe+0x7d8>)
 800a1aa:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
 800a1ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800a1b2:	e059      	b.n	800a268 <WRK_HandlePrepareRecipe+0x860>
					else if (HEA[H1].GetTemperature > HEA[H1].SetTemperature) //Temperature H1 too high
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	f67f af53 	bls.w	800a060 <WRK_HandlePrepareRecipe+0x658>
						if (HEA[H1].GetTemperature >  HEA[H1].SetTemperature - 5)
 800a1ba:	1f51      	subs	r1, r2, #5
 800a1bc:	428b      	cmp	r3, r1
 800a1be:	d911      	bls.n	800a1e4 <WRK_HandlePrepareRecipe+0x7dc>
							HEA[H1].GetTemperature -= 5;
 800a1c0:	3b05      	subs	r3, #5
 800a1c2:	4a03      	ldr	r2, [pc, #12]	; (800a1d0 <WRK_HandlePrepareRecipe+0x7c8>)
 800a1c4:	6093      	str	r3, [r2, #8]
 800a1c6:	e74b      	b.n	800a060 <WRK_HandlePrepareRecipe+0x658>
 800a1c8:	20000678 	.word	0x20000678
 800a1cc:	20000c48 	.word	0x20000c48
 800a1d0:	20000290 	.word	0x20000290
 800a1d4:	cccccccd 	.word	0xcccccccd
 800a1d8:	20000a24 	.word	0x20000a24
 800a1dc:	51eb851f 	.word	0x51eb851f
 800a1e0:	20000570 	.word	0x20000570
							HEA[H1].GetTemperature = HEA[H1].SetTemperature;
 800a1e4:	4ba7      	ldr	r3, [pc, #668]	; (800a484 <WRK_HandlePrepareRecipe+0xa7c>)
 800a1e6:	609a      	str	r2, [r3, #8]
 800a1e8:	e73a      	b.n	800a060 <WRK_HandlePrepareRecipe+0x658>
					else if (HEA[H2].GetTemperature > HEA[H2].SetTemperature) //Temperature H2 too high
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	f67f af50 	bls.w	800a090 <WRK_HandlePrepareRecipe+0x688>
						if (HEA[H2].GetTemperature >  HEA[H2].SetTemperature - 5)
 800a1f0:	1f51      	subs	r1, r2, #5
 800a1f2:	428b      	cmp	r3, r1
 800a1f4:	d903      	bls.n	800a1fe <WRK_HandlePrepareRecipe+0x7f6>
							HEA[H2].GetTemperature -= 5;
 800a1f6:	3b05      	subs	r3, #5
 800a1f8:	4aa2      	ldr	r2, [pc, #648]	; (800a484 <WRK_HandlePrepareRecipe+0xa7c>)
 800a1fa:	6693      	str	r3, [r2, #104]	; 0x68
 800a1fc:	e748      	b.n	800a090 <WRK_HandlePrepareRecipe+0x688>
							HEA[H2].GetTemperature = HEA[H2].SetTemperature;
 800a1fe:	4ba1      	ldr	r3, [pc, #644]	; (800a484 <WRK_HandlePrepareRecipe+0xa7c>)
 800a200:	669a      	str	r2, [r3, #104]	; 0x68
 800a202:	e745      	b.n	800a090 <WRK_HandlePrepareRecipe+0x688>
					else if (HEA[H3].GetTemperature > HEA[H3].SetTemperature) //Temperature H3 too high
 800a204:	4293      	cmp	r3, r2
 800a206:	f67f af61 	bls.w	800a0cc <WRK_HandlePrepareRecipe+0x6c4>
							HEA[H3].GetTemperature --;
 800a20a:	3b01      	subs	r3, #1
 800a20c:	4a9d      	ldr	r2, [pc, #628]	; (800a484 <WRK_HandlePrepareRecipe+0xa7c>)
 800a20e:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
 800a212:	e75b      	b.n	800a0cc <WRK_HandlePrepareRecipe+0x6c4>
						if (PUM[P1].GetVolume > PUM[P1].SetVolume) PUM[P1].GetVolume = PUM[P1].SetVolume;
 800a214:	4a9c      	ldr	r2, [pc, #624]	; (800a488 <WRK_HandlePrepareRecipe+0xa80>)
 800a216:	6190      	str	r0, [r2, #24]
 800a218:	61d3      	str	r3, [r2, #28]
 800a21a:	e796      	b.n	800a14a <WRK_HandlePrepareRecipe+0x742>
						if (PUM[P2].GetVolume > PUM[P2].SetVolume) PUM[P2].GetVolume = PUM[P2].SetVolume;
 800a21c:	4a9a      	ldr	r2, [pc, #616]	; (800a488 <WRK_HandlePrepareRecipe+0xa80>)
 800a21e:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
 800a222:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a226:	e01f      	b.n	800a268 <WRK_HandlePrepareRecipe+0x860>
				else if (DUMMYMODEH3) //Only H3 is missing
 800a228:	4b98      	ldr	r3, [pc, #608]	; (800a48c <WRK_HandlePrepareRecipe+0xa84>)
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	b1e3      	cbz	r3, 800a268 <WRK_HandlePrepareRecipe+0x860>
					if (HEA[H3].GetTemperature < HEA[H3].SetTemperature) //Temperature H3 not reached yet
 800a22e:	4a95      	ldr	r2, [pc, #596]	; (800a484 <WRK_HandlePrepareRecipe+0xa7c>)
 800a230:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 800a234:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
 800a238:	4293      	cmp	r3, r2
 800a23a:	d262      	bcs.n	800a302 <WRK_HandlePrepareRecipe+0x8fa>
						if (HEA[H3].SetTemperature < 10) HEA[H3].SetTemperature  = 10; //Otherwise no temperature increase
 800a23c:	2a09      	cmp	r2, #9
 800a23e:	d803      	bhi.n	800a248 <WRK_HandlePrepareRecipe+0x840>
 800a240:	4a90      	ldr	r2, [pc, #576]	; (800a484 <WRK_HandlePrepareRecipe+0xa7c>)
 800a242:	210a      	movs	r1, #10
 800a244:	f8c2 10c4 	str.w	r1, [r2, #196]	; 0xc4
						HEA[H3].GetTemperature  += HEA[H3].SetTemperature / 10; //Add temperature in 1 second
 800a248:	4a8e      	ldr	r2, [pc, #568]	; (800a484 <WRK_HandlePrepareRecipe+0xa7c>)
 800a24a:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 800a24e:	4a90      	ldr	r2, [pc, #576]	; (800a490 <WRK_HandlePrepareRecipe+0xa88>)
 800a250:	fba2 0201 	umull	r0, r2, r2, r1
 800a254:	eb03 03d2 	add.w	r3, r3, r2, lsr #3
						if (HEA[H3].GetTemperature > HEA[H3].SetTemperature) HEA[H3].GetTemperature  = HEA[H3].SetTemperature ;
 800a258:	4299      	cmp	r1, r3
						HEA[H3].GetTemperature  += HEA[H3].SetTemperature / 10; //Add temperature in 1 second
 800a25a:	bf27      	ittee	cs
 800a25c:	4a89      	ldrcs	r2, [pc, #548]	; (800a484 <WRK_HandlePrepareRecipe+0xa7c>)
 800a25e:	f8c2 30c8 	strcs.w	r3, [r2, #200]	; 0xc8
						if (HEA[H3].GetTemperature > HEA[H3].SetTemperature) HEA[H3].GetTemperature  = HEA[H3].SetTemperature ;
 800a262:	4b88      	ldrcc	r3, [pc, #544]	; (800a484 <WRK_HandlePrepareRecipe+0xa7c>)
 800a264:	f8c3 10c8 	strcc.w	r1, [r3, #200]	; 0xc8
					if ((WRK_GetEndConditions(i,MStatPressure1Reached, newRecipe)) && (PUM[P1].GetPressure < PUM[P1].SetPressure)) //Pressure P1 not reached yet
 800a268:	4b87      	ldr	r3, [pc, #540]	; (800a488 <WRK_HandlePrepareRecipe+0xa80>)
 800a26a:	695a      	ldr	r2, [r3, #20]
 800a26c:	920d      	str	r2, [sp, #52]	; 0x34
 800a26e:	691a      	ldr	r2, [r3, #16]
 800a270:	920e      	str	r2, [sp, #56]	; 0x38
					if ((WRK_GetEndConditions(i,MStatPressure2Reached, newRecipe)) && (PUM[P2].GetPressure < PUM[P2].SetPressure)) //Pressure P1 not reached yet
 800a272:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a276:	920f      	str	r2, [sp, #60]	; 0x3c
 800a278:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a27c:	9210      	str	r2, [sp, #64]	; 0x40
					if ((WRK_GetEndConditions(i,MStatFlow1Reached, newRecipe)) && (PUM[P1].GetFlow < PUM[P1].SetFlow)) //Flow P1 not reached yet
 800a27e:	689a      	ldr	r2, [r3, #8]
 800a280:	9211      	str	r2, [sp, #68]	; 0x44
 800a282:	685a      	ldr	r2, [r3, #4]
 800a284:	9212      	str	r2, [sp, #72]	; 0x48
					if ((WRK_GetEndConditions(i,MStatFlow2Reached, newRecipe)) && (PUM[P2].GetFlow < PUM[P2].SetFlow)) //Flow P2 not reached yet
 800a286:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a28a:	9213      	str	r2, [sp, #76]	; 0x4c
 800a28c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a28e:	9214      	str	r2, [sp, #80]	; 0x50
					if ((WRK_GetEndConditions(i,MStatVolume1Reached, newRecipe)) && (PUM[P1].GetVolume < PUM[P1].SetVolume)) //Volume P1 not reached yet
 800a290:	699a      	ldr	r2, [r3, #24]
 800a292:	9205      	str	r2, [sp, #20]
 800a294:	69da      	ldr	r2, [r3, #28]
 800a296:	9206      	str	r2, [sp, #24]
 800a298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a29a:	9207      	str	r2, [sp, #28]
 800a29c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a29e:	9208      	str	r2, [sp, #32]
					if ((WRK_GetEndConditions(i,MStatVolume2Reached, newRecipe)) && (PUM[P2].GetVolume < PUM[P2].SetVolume)) //Volume P2 not reached yet
 800a2a0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a2a4:	9209      	str	r2, [sp, #36]	; 0x24
 800a2a6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a2aa:	920a      	str	r2, [sp, #40]	; 0x28
 800a2ac:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800a2b0:	920b      	str	r2, [sp, #44]	; 0x2c
 800a2b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a2b6:	930c      	str	r3, [sp, #48]	; 0x30
					if ((WRK_GetEndConditions(i,MStatTemperature1Reached, newRecipe)) && (HEA[H1].GetTemperature < HEA[H1].SetTemperature)) //Temperature H1 not reached yet
 800a2b8:	4b72      	ldr	r3, [pc, #456]	; (800a484 <WRK_HandlePrepareRecipe+0xa7c>)
 800a2ba:	689a      	ldr	r2, [r3, #8]
 800a2bc:	9215      	str	r2, [sp, #84]	; 0x54
 800a2be:	685a      	ldr	r2, [r3, #4]
 800a2c0:	9202      	str	r2, [sp, #8]
					if ((WRK_GetEndConditions(i,MStatTemperature2Reached, newRecipe)) && (HEA[H2].GetTemperature < HEA[H2].SetTemperature)) //Temperature H2 not reached yet
 800a2c2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a2c4:	9216      	str	r2, [sp, #88]	; 0x58
 800a2c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a2c8:	9203      	str	r2, [sp, #12]
					if ((WRK_GetEndConditions(i,MStatTemperature3Reached, newRecipe)) && (HEA[H3].GetTemperature < HEA[H3].SetTemperature)) //Temperature H3 not reached yet
 800a2ca:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800a2ce:	9217      	str	r2, [sp, #92]	; 0x5c
 800a2d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a2d4:	9301      	str	r3, [sp, #4]
					if ((WRK_GetEndConditions(i,MStatTemperature4Reached, newRecipe)) && (WAN.GetTemperature < WAN.SetTemperature)) //Temperature H4 not reached yet
 800a2d6:	4b6f      	ldr	r3, [pc, #444]	; (800a494 <WRK_HandlePrepareRecipe+0xa8c>)
 800a2d8:	685a      	ldr	r2, [r3, #4]
 800a2da:	9218      	str	r2, [sp, #96]	; 0x60
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	9304      	str	r3, [sp, #16]
					if ((WRK_GetEndConditions(i,MStatTimePassed, newRecipe)) && (PrepareCounter < ActiveBlock.Time)) //Time is not passed yet
 800a2e0:	4b6d      	ldr	r3, [pc, #436]	; (800a498 <WRK_HandlePrepareRecipe+0xa90>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	9319      	str	r3, [sp, #100]	; 0x64
 800a2e6:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 800a2ea:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800a2ee:	464e      	mov	r6, r9
					EndConditionsMet[i] = 1; //Set to 1 (Accepted, as the checks only can set to 0
 800a2f0:	f04f 0a01 	mov.w	sl, #1
						EndConditionsMet[i] = 0;
 800a2f4:	2700      	movs	r7, #0
					if ((WRK_GetEndConditions(i,MStatTimePassed, newRecipe)) && (PrepareCounter < ActiveBlock.Time)) //Time is not passed yet
 800a2f6:	0223      	lsls	r3, r4, #8
 800a2f8:	931a      	str	r3, [sp, #104]	; 0x68
 800a2fa:	4b68      	ldr	r3, [pc, #416]	; (800a49c <WRK_HandlePrepareRecipe+0xa94>)
 800a2fc:	eb03 2804 	add.w	r8, r3, r4, lsl #8
 800a300:	e009      	b.n	800a316 <WRK_HandlePrepareRecipe+0x90e>
					else if (HEA[H3].GetTemperature > HEA[H3].SetTemperature) //Temperature H3 too high
 800a302:	4293      	cmp	r3, r2
 800a304:	d9b0      	bls.n	800a268 <WRK_HandlePrepareRecipe+0x860>
							HEA[H3].GetTemperature --;
 800a306:	3b01      	subs	r3, #1
 800a308:	4a5e      	ldr	r2, [pc, #376]	; (800a484 <WRK_HandlePrepareRecipe+0xa7c>)
 800a30a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
 800a30e:	e7ab      	b.n	800a268 <WRK_HandlePrepareRecipe+0x860>
				for (uint8_t i = 0; i< 4; i++)
 800a310:	455e      	cmp	r6, fp
 800a312:	f000 80c5 	beq.w	800a4a0 <WRK_HandlePrepareRecipe+0xa98>
 800a316:	eba6 0509 	sub.w	r5, r6, r9
 800a31a:	b2ed      	uxtb	r5, r5
					EndConditionsMet[i] = 1; //Set to 1 (Accepted, as the checks only can set to 0
 800a31c:	f806 ab01 	strb.w	sl, [r6], #1
					if ((WRK_GetEndConditions(i,MStatPressure1Reached, newRecipe)) && (PUM[P1].GetPressure < PUM[P1].SetPressure)) //Pressure P1 not reached yet
 800a320:	4622      	mov	r2, r4
 800a322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a326:	4628      	mov	r0, r5
 800a328:	f7ff f9bc 	bl	80096a4 <WRK_GetEndConditions>
 800a32c:	b128      	cbz	r0, 800a33a <WRK_HandlePrepareRecipe+0x932>
 800a32e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a330:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a332:	4293      	cmp	r3, r2
						EndConditionsMet[i] = 0;
 800a334:	bf38      	it	cc
 800a336:	f806 7c01 	strbcc.w	r7, [r6, #-1]
					if ((WRK_GetEndConditions(i,MStatPressure2Reached, newRecipe)) && (PUM[P2].GetPressure < PUM[P2].SetPressure)) //Pressure P1 not reached yet
 800a33a:	4622      	mov	r2, r4
 800a33c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a340:	4628      	mov	r0, r5
 800a342:	f7ff f9af 	bl	80096a4 <WRK_GetEndConditions>
 800a346:	b128      	cbz	r0, 800a354 <WRK_HandlePrepareRecipe+0x94c>
 800a348:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a34a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a34c:	4293      	cmp	r3, r2
						EndConditionsMet[i] = 0;
 800a34e:	bf38      	it	cc
 800a350:	f806 7c01 	strbcc.w	r7, [r6, #-1]
					if ((WRK_GetEndConditions(i,MStatFlow1Reached, newRecipe)) && (PUM[P1].GetFlow < PUM[P1].SetFlow)) //Flow P1 not reached yet
 800a354:	4622      	mov	r2, r4
 800a356:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a35a:	4628      	mov	r0, r5
 800a35c:	f7ff f9a2 	bl	80096a4 <WRK_GetEndConditions>
 800a360:	b128      	cbz	r0, 800a36e <WRK_HandlePrepareRecipe+0x966>
 800a362:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a364:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a366:	4293      	cmp	r3, r2
						EndConditionsMet[i] = 0;
 800a368:	bf38      	it	cc
 800a36a:	f806 7c01 	strbcc.w	r7, [r6, #-1]
					if ((WRK_GetEndConditions(i,MStatFlow2Reached, newRecipe)) && (PUM[P2].GetFlow < PUM[P2].SetFlow)) //Flow P2 not reached yet
 800a36e:	4622      	mov	r2, r4
 800a370:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a374:	4628      	mov	r0, r5
 800a376:	f7ff f995 	bl	80096a4 <WRK_GetEndConditions>
 800a37a:	b128      	cbz	r0, 800a388 <WRK_HandlePrepareRecipe+0x980>
 800a37c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a37e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a380:	4293      	cmp	r3, r2
						EndConditionsMet[i] = 0;
 800a382:	bf38      	it	cc
 800a384:	f806 7c01 	strbcc.w	r7, [r6, #-1]
					if ((WRK_GetEndConditions(i,MStatVolume1Reached, newRecipe)) && (PUM[P1].GetVolume < PUM[P1].SetVolume)) //Volume P1 not reached yet
 800a388:	4622      	mov	r2, r4
 800a38a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a38e:	4628      	mov	r0, r5
 800a390:	f7ff f988 	bl	80096a4 <WRK_GetEndConditions>
 800a394:	b140      	cbz	r0, 800a3a8 <WRK_HandlePrepareRecipe+0x9a0>
 800a396:	9b05      	ldr	r3, [sp, #20]
 800a398:	9a07      	ldr	r2, [sp, #28]
 800a39a:	4293      	cmp	r3, r2
 800a39c:	9b06      	ldr	r3, [sp, #24]
 800a39e:	9a08      	ldr	r2, [sp, #32]
 800a3a0:	4193      	sbcs	r3, r2
						EndConditionsMet[i] = 0;
 800a3a2:	bf38      	it	cc
 800a3a4:	f806 7c01 	strbcc.w	r7, [r6, #-1]
					if ((WRK_GetEndConditions(i,MStatVolume2Reached, newRecipe)) && (PUM[P2].GetVolume < PUM[P2].SetVolume)) //Volume P2 not reached yet
 800a3a8:	4622      	mov	r2, r4
 800a3aa:	2180      	movs	r1, #128	; 0x80
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	f7ff f979 	bl	80096a4 <WRK_GetEndConditions>
 800a3b2:	b140      	cbz	r0, 800a3c6 <WRK_HandlePrepareRecipe+0x9be>
 800a3b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3be:	4193      	sbcs	r3, r2
						EndConditionsMet[i] = 0;
 800a3c0:	bf38      	it	cc
 800a3c2:	f806 7c01 	strbcc.w	r7, [r6, #-1]
					if ((WRK_GetEndConditions(i,MStatTemperature1Reached, newRecipe)) && (HEA[H1].GetTemperature < HEA[H1].SetTemperature)) //Temperature H1 not reached yet
 800a3c6:	4622      	mov	r2, r4
 800a3c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	f7ff f969 	bl	80096a4 <WRK_GetEndConditions>
 800a3d2:	b128      	cbz	r0, 800a3e0 <WRK_HandlePrepareRecipe+0x9d8>
 800a3d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3d6:	9a02      	ldr	r2, [sp, #8]
 800a3d8:	4293      	cmp	r3, r2
						EndConditionsMet[i] = 0;
 800a3da:	bf38      	it	cc
 800a3dc:	f806 7c01 	strbcc.w	r7, [r6, #-1]
					if ((WRK_GetEndConditions(i,MStatTemperature2Reached, newRecipe)) && (HEA[H2].GetTemperature < HEA[H2].SetTemperature)) //Temperature H2 not reached yet
 800a3e0:	4622      	mov	r2, r4
 800a3e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	f7ff f95c 	bl	80096a4 <WRK_GetEndConditions>
 800a3ec:	b128      	cbz	r0, 800a3fa <WRK_HandlePrepareRecipe+0x9f2>
 800a3ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a3f0:	9a03      	ldr	r2, [sp, #12]
 800a3f2:	4293      	cmp	r3, r2
						EndConditionsMet[i] = 0;
 800a3f4:	bf38      	it	cc
 800a3f6:	f806 7c01 	strbcc.w	r7, [r6, #-1]
					if ((WRK_GetEndConditions(i,MStatTemperature3Reached, newRecipe)) && (HEA[H3].GetTemperature < HEA[H3].SetTemperature)) //Temperature H3 not reached yet
 800a3fa:	4622      	mov	r2, r4
 800a3fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a400:	4628      	mov	r0, r5
 800a402:	f7ff f94f 	bl	80096a4 <WRK_GetEndConditions>
 800a406:	b128      	cbz	r0, 800a414 <WRK_HandlePrepareRecipe+0xa0c>
 800a408:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a40a:	9a01      	ldr	r2, [sp, #4]
 800a40c:	4293      	cmp	r3, r2
						EndConditionsMet[i] = 0;
 800a40e:	bf38      	it	cc
 800a410:	f806 7c01 	strbcc.w	r7, [r6, #-1]
					if ((WRK_GetEndConditions(i,MStatTemperature4Reached, newRecipe)) && (WAN.GetTemperature < WAN.SetTemperature)) //Temperature H4 not reached yet
 800a414:	4622      	mov	r2, r4
 800a416:	2140      	movs	r1, #64	; 0x40
 800a418:	4628      	mov	r0, r5
 800a41a:	f7ff f943 	bl	80096a4 <WRK_GetEndConditions>
 800a41e:	b128      	cbz	r0, 800a42c <WRK_HandlePrepareRecipe+0xa24>
 800a420:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a422:	9a04      	ldr	r2, [sp, #16]
 800a424:	4293      	cmp	r3, r2
						EndConditionsMet[i] = 0;
 800a426:	bf38      	it	cc
 800a428:	f806 7c01 	strbcc.w	r7, [r6, #-1]
					if ((WRK_GetEndConditions(i,MStatTimePassed, newRecipe)) && (PrepareCounter < ActiveBlock.Time)) //Time is not passed yet
 800a42c:	4622      	mov	r2, r4
 800a42e:	2120      	movs	r1, #32
 800a430:	4628      	mov	r0, r5
 800a432:	f7ff f937 	bl	80096a4 <WRK_GetEndConditions>
 800a436:	b170      	cbz	r0, 800a456 <WRK_HandlePrepareRecipe+0xa4e>
 800a438:	f898 3003 	ldrb.w	r3, [r8, #3]
 800a43c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800a440:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a442:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a446:	4a15      	ldr	r2, [pc, #84]	; (800a49c <WRK_HandlePrepareRecipe+0xa94>)
 800a448:	4413      	add	r3, r2
 800a44a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a44c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a44e:	4293      	cmp	r3, r2
						EndConditionsMet[i] = 0;
 800a450:	bf88      	it	hi
 800a452:	f806 7c01 	strbhi.w	r7, [r6, #-1]
					if ((WRK_GetEndConditions(i,MStatTotalVolumeReached, newRecipe)) && ((gRecipe[newRecipe].SetTotalVolume) < (gRecipe[newRecipe].GetTotalVolume))) //Volume P1 + P2 not reached yet
 800a456:	4622      	mov	r2, r4
 800a458:	2110      	movs	r1, #16
 800a45a:	4628      	mov	r0, r5
 800a45c:	f7ff f922 	bl	80096a4 <WRK_GetEndConditions>
 800a460:	2800      	cmp	r0, #0
 800a462:	f43f af55 	beq.w	800a310 <WRK_HandlePrepareRecipe+0x908>
 800a466:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800a46a:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800a46e:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800a472:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800a476:	4288      	cmp	r0, r1
 800a478:	eb72 0303 	sbcs.w	r3, r2, r3
						EndConditionsMet[i] = 0;
 800a47c:	bf38      	it	cc
 800a47e:	f806 7c01 	strbcc.w	r7, [r6, #-1]
 800a482:	e745      	b.n	800a310 <WRK_HandlePrepareRecipe+0x908>
 800a484:	20000290 	.word	0x20000290
 800a488:	20000570 	.word	0x20000570
 800a48c:	20000c4a 	.word	0x20000c4a
 800a490:	cccccccd 	.word	0xcccccccd
 800a494:	20000a24 	.word	0x20000a24
 800a498:	20000c54 	.word	0x20000c54
 800a49c:	20000678 	.word	0x20000678
				if ((PUM[P1].Status == sUNITERROR) || (PUM[P2].Status == sUNITERROR))// || (PUM[P3].Status == sUNITERROR))
 800a4a0:	4b57      	ldr	r3, [pc, #348]	; (800a600 <WRK_HandlePrepareRecipe+0xbf8>)
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	2b14      	cmp	r3, #20
 800a4a6:	d024      	beq.n	800a4f2 <WRK_HandlePrepareRecipe+0xaea>
 800a4a8:	4b55      	ldr	r3, [pc, #340]	; (800a600 <WRK_HandlePrepareRecipe+0xbf8>)
 800a4aa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a4ae:	2b14      	cmp	r3, #20
 800a4b0:	d01f      	beq.n	800a4f2 <WRK_HandlePrepareRecipe+0xaea>
				else if (
 800a4b2:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d021      	beq.n	800a4fe <WRK_HandlePrepareRecipe+0xaf6>
							((EndConditionsMet[0] == 1) && (ActiveBlock.EndConditions1>0))||
 800a4ba:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d06a      	beq.n	800a598 <WRK_HandlePrepareRecipe+0xb90>
							((EndConditionsMet[1] == 1) && (ActiveBlock.EndConditions2>0))||
 800a4c2:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d074      	beq.n	800a5b4 <WRK_HandlePrepareRecipe+0xbac>
							((EndConditionsMet[2] == 1) && (ActiveBlock.EndConditions3>0))||
 800a4ca:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	f47f aacb 	bne.w	8009a6a <WRK_HandlePrepareRecipe+0x62>
							((EndConditionsMet[3] == 1) && (ActiveBlock.EndConditions4>0))
 800a4d4:	4a4b      	ldr	r2, [pc, #300]	; (800a604 <WRK_HandlePrepareRecipe+0xbfc>)
 800a4d6:	eb02 2304 	add.w	r3, r2, r4, lsl #8
 800a4da:	78db      	ldrb	r3, [r3, #3]
 800a4dc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 800a4e6:	4413      	add	r3, r2
 800a4e8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f43f aabd 	beq.w	8009a6a <WRK_HandlePrepareRecipe+0x62>
 800a4f0:	e012      	b.n	800a518 <WRK_HandlePrepareRecipe+0xb10>
					WRK.PrepareStatus[newRecipe] = pERROR;
 800a4f2:	4845      	ldr	r0, [pc, #276]	; (800a608 <WRK_HandlePrepareRecipe+0xc00>)
 800a4f4:	4404      	add	r4, r0
 800a4f6:	230a      	movs	r3, #10
 800a4f8:	7123      	strb	r3, [r4, #4]
 800a4fa:	f7ff bab6 	b.w	8009a6a <WRK_HandlePrepareRecipe+0x62>
							((EndConditionsMet[0] == 1) && (ActiveBlock.EndConditions1>0))||
 800a4fe:	4a41      	ldr	r2, [pc, #260]	; (800a604 <WRK_HandlePrepareRecipe+0xbfc>)
 800a500:	eb02 2304 	add.w	r3, r2, r4, lsl #8
 800a504:	78db      	ldrb	r3, [r3, #3]
 800a506:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 800a510:	4413      	add	r3, r2
 800a512:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800a514:	2b00      	cmp	r3, #0
 800a516:	d0d0      	beq.n	800a4ba <WRK_HandlePrepareRecipe+0xab2>
					if (DUMMYMODE)
 800a518:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d058      	beq.n	800a5d0 <WRK_HandlePrepareRecipe+0xbc8>
						if (PUM[P1].GetVolume >= PUM[P1].SetVolume)
 800a51e:	9b05      	ldr	r3, [sp, #20]
 800a520:	9a07      	ldr	r2, [sp, #28]
 800a522:	4293      	cmp	r3, r2
 800a524:	9b06      	ldr	r3, [sp, #24]
 800a526:	9a08      	ldr	r2, [sp, #32]
 800a528:	4193      	sbcs	r3, r2
 800a52a:	d303      	bcc.n	800a534 <WRK_HandlePrepareRecipe+0xb2c>
							PUM[P1].GetFlowTimeBased = 0;
 800a52c:	4b34      	ldr	r3, [pc, #208]	; (800a600 <WRK_HandlePrepareRecipe+0xbf8>)
 800a52e:	2200      	movs	r2, #0
 800a530:	60da      	str	r2, [r3, #12]
							PUM[P1].GetPressure = 0;
 800a532:	615a      	str	r2, [r3, #20]
						if (PUM[P2].GetVolume >= PUM[P2].SetVolume)
 800a534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a536:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a538:	4293      	cmp	r3, r2
 800a53a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a53c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a53e:	4193      	sbcs	r3, r2
 800a540:	d305      	bcc.n	800a54e <WRK_HandlePrepareRecipe+0xb46>
							PUM[P2].GetFlowTimeBased = 0;
 800a542:	4b2f      	ldr	r3, [pc, #188]	; (800a600 <WRK_HandlePrepareRecipe+0xbf8>)
 800a544:	2200      	movs	r2, #0
 800a546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
							PUM[P2].GetPressure = 0;
 800a54a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						if (HEA[H1].SetTemperature == 0) HEA[H1].GetTemperature = 0; //Switch off in dummy
 800a54e:	9b02      	ldr	r3, [sp, #8]
 800a550:	b913      	cbnz	r3, 800a558 <WRK_HandlePrepareRecipe+0xb50>
 800a552:	4b2e      	ldr	r3, [pc, #184]	; (800a60c <WRK_HandlePrepareRecipe+0xc04>)
 800a554:	2200      	movs	r2, #0
 800a556:	609a      	str	r2, [r3, #8]
						if (HEA[H2].SetTemperature == 0) HEA[H2].GetTemperature = 0; //Switch off in dummy
 800a558:	9b03      	ldr	r3, [sp, #12]
 800a55a:	b913      	cbnz	r3, 800a562 <WRK_HandlePrepareRecipe+0xb5a>
 800a55c:	4b2b      	ldr	r3, [pc, #172]	; (800a60c <WRK_HandlePrepareRecipe+0xc04>)
 800a55e:	2200      	movs	r2, #0
 800a560:	669a      	str	r2, [r3, #104]	; 0x68
						if (HEA[H3].SetTemperature == 0) HEA[H3].GetTemperature = 0; //Switch off in dummy
 800a562:	9b01      	ldr	r3, [sp, #4]
 800a564:	b91b      	cbnz	r3, 800a56e <WRK_HandlePrepareRecipe+0xb66>
 800a566:	4b29      	ldr	r3, [pc, #164]	; (800a60c <WRK_HandlePrepareRecipe+0xc04>)
 800a568:	2200      	movs	r2, #0
 800a56a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
						if (WAN.SetTemperature == 0) WAN.GetTemperature = 0; //Switch off in dummy
 800a56e:	9b04      	ldr	r3, [sp, #16]
 800a570:	b913      	cbnz	r3, 800a578 <WRK_HandlePrepareRecipe+0xb70>
 800a572:	4b27      	ldr	r3, [pc, #156]	; (800a610 <WRK_HandlePrepareRecipe+0xc08>)
 800a574:	2200      	movs	r2, #0
 800a576:	605a      	str	r2, [r3, #4]
					gRecipe[newRecipe].CurrentBlock ++;
 800a578:	4a22      	ldr	r2, [pc, #136]	; (800a604 <WRK_HandlePrepareRecipe+0xbfc>)
 800a57a:	eb02 2204 	add.w	r2, r2, r4, lsl #8
 800a57e:	78d3      	ldrb	r3, [r2, #3]
 800a580:	3301      	adds	r3, #1
 800a582:	b2db      	uxtb	r3, r3
 800a584:	70d3      	strb	r3, [r2, #3]
					if (gRecipe[newRecipe].CurrentBlock >= gRecipe[newRecipe].Blocks) //This was the last recipe block. Recipe ended
 800a586:	7892      	ldrb	r2, [r2, #2]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d92d      	bls.n	800a5e8 <WRK_HandlePrepareRecipe+0xbe0>
						WRK.PrepareStatus[newRecipe] = pINITIALIZE; //Check and start next block. Leave all heaters and pumps ACTIVE. The next block will stop them if needed
 800a58c:	4b1e      	ldr	r3, [pc, #120]	; (800a608 <WRK_HandlePrepareRecipe+0xc00>)
 800a58e:	441c      	add	r4, r3
 800a590:	2301      	movs	r3, #1
 800a592:	7123      	strb	r3, [r4, #4]
}
 800a594:	f7ff ba69 	b.w	8009a6a <WRK_HandlePrepareRecipe+0x62>
							((EndConditionsMet[1] == 1) && (ActiveBlock.EndConditions2>0))||
 800a598:	4a1a      	ldr	r2, [pc, #104]	; (800a604 <WRK_HandlePrepareRecipe+0xbfc>)
 800a59a:	eb02 2304 	add.w	r3, r2, r4, lsl #8
 800a59e:	78db      	ldrb	r3, [r3, #3]
 800a5a0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 800a5aa:	4413      	add	r3, r2
 800a5ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1b2      	bne.n	800a518 <WRK_HandlePrepareRecipe+0xb10>
 800a5b2:	e786      	b.n	800a4c2 <WRK_HandlePrepareRecipe+0xaba>
							((EndConditionsMet[2] == 1) && (ActiveBlock.EndConditions3>0))||
 800a5b4:	4a13      	ldr	r2, [pc, #76]	; (800a604 <WRK_HandlePrepareRecipe+0xbfc>)
 800a5b6:	eb02 2304 	add.w	r3, r2, r4, lsl #8
 800a5ba:	78db      	ldrb	r3, [r3, #3]
 800a5bc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 800a5c6:	4413      	add	r3, r2
 800a5c8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1a4      	bne.n	800a518 <WRK_HandlePrepareRecipe+0xb10>
 800a5ce:	e77c      	b.n	800a4ca <WRK_HandlePrepareRecipe+0xac2>
					else if (DUMMYMODEH3)
 800a5d0:	4b10      	ldr	r3, [pc, #64]	; (800a614 <WRK_HandlePrepareRecipe+0xc0c>)
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d0cf      	beq.n	800a578 <WRK_HandlePrepareRecipe+0xb70>
						if (HEA[H3].SetTemperature == 0) HEA[H3].GetTemperature = 0; //Switch off in dummy
 800a5d8:	9b01      	ldr	r3, [sp, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1cc      	bne.n	800a578 <WRK_HandlePrepareRecipe+0xb70>
 800a5de:	4b0b      	ldr	r3, [pc, #44]	; (800a60c <WRK_HandlePrepareRecipe+0xc04>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800a5e6:	e7c7      	b.n	800a578 <WRK_HandlePrepareRecipe+0xb70>
						WRK_ResetAllModules(newRecipe); //Switch off the pumps and heaters used by this block
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	f7ff f97d 	bl	80098e8 <WRK_ResetAllModules>
						WRK.PrepareStatus[newRecipe] = pINACTIVE;
 800a5ee:	4b06      	ldr	r3, [pc, #24]	; (800a608 <WRK_HandlePrepareRecipe+0xc00>)
 800a5f0:	441c      	add	r4, r3
 800a5f2:	2302      	movs	r3, #2
 800a5f4:	7123      	strb	r3, [r4, #4]
 800a5f6:	f7ff ba38 	b.w	8009a6a <WRK_HandlePrepareRecipe+0x62>
				if ((gRecipe[newRecipe].UsingCircuit1 && Circuit1InUse) || (gRecipe[newRecipe].UsingCircuit2 && Circuit2InUse)) //Circuits intended cannot be used. Block cannot be executed at the moment
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	f7ff ba6c 	b.w	8009ad8 <WRK_HandlePrepareRecipe+0xd0>
 800a600:	20000570 	.word	0x20000570
 800a604:	20000678 	.word	0x20000678
 800a608:	20000c5c 	.word	0x20000c5c
 800a60c:	20000290 	.word	0x20000290
 800a610:	20000a24 	.word	0x20000a24
 800a614:	20000c4a 	.word	0x20000c4a

0800a618 <WRK_SetAction>:
//-----------------------------------------------------------------------------
//! \brief      Routine to set an action to be executed by the work module
//! \details    Sets the action and resets the counter. Checks if a command can be executed
//! \params 	None
void WRK_SetAction (uint8_t newAction)
{
 800a618:	b508      	push	{r3, lr}
	//check commands validity before try executing
	if ((newAction == MTypeStartRecipe1) && (gRecipe[RECIPE1].Valid == 0)) //Start recipe, but no recipe loaded
 800a61a:	2811      	cmp	r0, #17
 800a61c:	d00f      	beq.n	800a63e <WRK_SetAction+0x26>
	{
		SER_SetStatus (MStatNoValidRecipe); //No valid recipe loaded
	}
	else if ((newAction == MTypeStartRecipe2) &&  (gRecipe[RECIPE2].Valid == 0)) //Start recipe, but no recipe loaded
 800a61e:	2812      	cmp	r0, #18
 800a620:	d022      	beq.n	800a668 <WRK_SetAction+0x50>
	{
		SER_SetStatus (MStatNoValidRecipe); //No valid recipe loaded
	}
	else if ((newAction == MTypeStartRecipe3) &&  (gRecipe[RECIPE3].Valid == 0)) //Start recipe, but no recipe loaded
 800a622:	2813      	cmp	r0, #19
 800a624:	d029      	beq.n	800a67a <WRK_SetAction+0x62>
	{
		SER_SetStatus (MStatNoValidRecipe); //No valid recipe loaded
	}
	else if ((newAction == MTypeStopRecipe1) && (gRecipe[RECIPE1].Active == 0)) //Stop recipe, but recipe is not active
 800a626:	2814      	cmp	r0, #20
 800a628:	d030      	beq.n	800a68c <WRK_SetAction+0x74>
	{
		SER_SetStatus (MStatRecipeNotActive); //No valid recipe loaded
	}
	else if ((newAction == MTypeStopRecipe2) && (gRecipe[RECIPE2].Active == 0)) //Stop recipe, but recipe is not active
 800a62a:	2815      	cmp	r0, #21
 800a62c:	d136      	bne.n	800a69c <WRK_SetAction+0x84>
 800a62e:	4b25      	ldr	r3, [pc, #148]	; (800a6c4 <WRK_SetAction+0xac>)
 800a630:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800a634:	b963      	cbnz	r3, 800a650 <WRK_SetAction+0x38>
	{
		SER_SetStatus (MStatRecipeNotActive); //No valid recipe loaded
 800a636:	2017      	movs	r0, #23
 800a638:	f001 fc6c 	bl	800bf14 <SER_SetStatus>
 800a63c:	e00f      	b.n	800a65e <WRK_SetAction+0x46>
	if ((newAction == MTypeStartRecipe1) && (gRecipe[RECIPE1].Valid == 0)) //Start recipe, but no recipe loaded
 800a63e:	4b21      	ldr	r3, [pc, #132]	; (800a6c4 <WRK_SetAction+0xac>)
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	b16b      	cbz	r3, 800a660 <WRK_SetAction+0x48>
	}
	else if ((newAction == MTypeStopRecipe3) && (gRecipe[RECIPE3].Active == 0)) //Stop recipe, but recipe is not active
	{
		SER_SetStatus (MStatRecipeNotActive); //No valid recipe loaded
	}
	else if (((newAction == MTypeStartRecipe1) || (newAction == MTypeStartRecipe2) || (newAction == MTypeStartRecipe3))  && ((ZCR.Status == sUNITERROR) || (ZCR.Status == sINACTIVE)) && (!DUMMYMODE)) //Start recipe, but no zerocross detected
 800a644:	4b20      	ldr	r3, [pc, #128]	; (800a6c8 <WRK_SetAction+0xb0>)
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800a64c:	2b04      	cmp	r3, #4
 800a64e:	d030      	beq.n	800a6b2 <WRK_SetAction+0x9a>
	{
		SER_SetStatus (MStatNoZeroCross); //No zero cross detected. Cannot start heaters or pumps
	}
	else //Commands can be executed. Try executing
	{
		gAction = newAction;
 800a650:	4b1e      	ldr	r3, [pc, #120]	; (800a6cc <WRK_SetAction+0xb4>)
 800a652:	7018      	strb	r0, [r3, #0]
		gActionAccepted = 0;
 800a654:	2300      	movs	r3, #0
 800a656:	4a1e      	ldr	r2, [pc, #120]	; (800a6d0 <WRK_SetAction+0xb8>)
 800a658:	7013      	strb	r3, [r2, #0]
		WRK.CounterAction = 0;
 800a65a:	4a1e      	ldr	r2, [pc, #120]	; (800a6d4 <WRK_SetAction+0xbc>)
 800a65c:	60d3      	str	r3, [r2, #12]
	}

}
 800a65e:	bd08      	pop	{r3, pc}
		SER_SetStatus (MStatNoValidRecipe); //No valid recipe loaded
 800a660:	2016      	movs	r0, #22
 800a662:	f001 fc57 	bl	800bf14 <SER_SetStatus>
 800a666:	e7fa      	b.n	800a65e <WRK_SetAction+0x46>
	else if ((newAction == MTypeStartRecipe2) &&  (gRecipe[RECIPE2].Valid == 0)) //Start recipe, but no recipe loaded
 800a668:	4b16      	ldr	r3, [pc, #88]	; (800a6c4 <WRK_SetAction+0xac>)
 800a66a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1e8      	bne.n	800a644 <WRK_SetAction+0x2c>
		SER_SetStatus (MStatNoValidRecipe); //No valid recipe loaded
 800a672:	2016      	movs	r0, #22
 800a674:	f001 fc4e 	bl	800bf14 <SER_SetStatus>
 800a678:	e7f1      	b.n	800a65e <WRK_SetAction+0x46>
	else if ((newAction == MTypeStartRecipe3) &&  (gRecipe[RECIPE3].Valid == 0)) //Start recipe, but no recipe loaded
 800a67a:	4b12      	ldr	r3, [pc, #72]	; (800a6c4 <WRK_SetAction+0xac>)
 800a67c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1df      	bne.n	800a644 <WRK_SetAction+0x2c>
		SER_SetStatus (MStatNoValidRecipe); //No valid recipe loaded
 800a684:	2016      	movs	r0, #22
 800a686:	f001 fc45 	bl	800bf14 <SER_SetStatus>
 800a68a:	e7e8      	b.n	800a65e <WRK_SetAction+0x46>
	else if ((newAction == MTypeStopRecipe1) && (gRecipe[RECIPE1].Active == 0)) //Stop recipe, but recipe is not active
 800a68c:	4b0d      	ldr	r3, [pc, #52]	; (800a6c4 <WRK_SetAction+0xac>)
 800a68e:	785b      	ldrb	r3, [r3, #1]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d1dd      	bne.n	800a650 <WRK_SetAction+0x38>
		SER_SetStatus (MStatRecipeNotActive); //No valid recipe loaded
 800a694:	2017      	movs	r0, #23
 800a696:	f001 fc3d 	bl	800bf14 <SER_SetStatus>
 800a69a:	e7e0      	b.n	800a65e <WRK_SetAction+0x46>
	else if ((newAction == MTypeStopRecipe3) && (gRecipe[RECIPE3].Active == 0)) //Stop recipe, but recipe is not active
 800a69c:	2816      	cmp	r0, #22
 800a69e:	d1d7      	bne.n	800a650 <WRK_SetAction+0x38>
 800a6a0:	4b08      	ldr	r3, [pc, #32]	; (800a6c4 <WRK_SetAction+0xac>)
 800a6a2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1d2      	bne.n	800a650 <WRK_SetAction+0x38>
		SER_SetStatus (MStatRecipeNotActive); //No valid recipe loaded
 800a6aa:	2017      	movs	r0, #23
 800a6ac:	f001 fc32 	bl	800bf14 <SER_SetStatus>
 800a6b0:	e7d5      	b.n	800a65e <WRK_SetAction+0x46>
	else if (((newAction == MTypeStartRecipe1) || (newAction == MTypeStartRecipe2) || (newAction == MTypeStartRecipe3))  && ((ZCR.Status == sUNITERROR) || (ZCR.Status == sINACTIVE)) && (!DUMMYMODE)) //Start recipe, but no zerocross detected
 800a6b2:	4b09      	ldr	r3, [pc, #36]	; (800a6d8 <WRK_SetAction+0xc0>)
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1ca      	bne.n	800a650 <WRK_SetAction+0x38>
		SER_SetStatus (MStatNoZeroCross); //No zero cross detected. Cannot start heaters or pumps
 800a6ba:	2018      	movs	r0, #24
 800a6bc:	f001 fc2a 	bl	800bf14 <SER_SetStatus>
 800a6c0:	e7cd      	b.n	800a65e <WRK_SetAction+0x46>
 800a6c2:	bf00      	nop
 800a6c4:	20000678 	.word	0x20000678
 800a6c8:	20000c70 	.word	0x20000c70
 800a6cc:	20000c6c 	.word	0x20000c6c
 800a6d0:	20000c6d 	.word	0x20000c6d
 800a6d4:	20000c5c 	.word	0x20000c5c
 800a6d8:	20000c48 	.word	0x20000c48

0800a6dc <WRK_SetDummyMode>:
//! \brief      Set selected dummy mode
//! \details    Used to set the dummymode and store variables in EEprom
//! \param[in]	uint8_t newAddress
//! \Param[in]	uint8_t newValue
void WRK_SetDummyMode (uint8_t newAddress, uint8_t newValue)
{
 800a6dc:	b508      	push	{r3, lr}
	switch (newAddress)
 800a6de:	2801      	cmp	r0, #1
 800a6e0:	d008      	beq.n	800a6f4 <WRK_SetDummyMode+0x18>
 800a6e2:	2802      	cmp	r0, #2
 800a6e4:	d009      	beq.n	800a6fa <WRK_SetDummyMode+0x1e>
 800a6e6:	b110      	cbz	r0, 800a6ee <WRK_SetDummyMode+0x12>
			DUMMYMODEH3 = newValue;
			break;
		}
		default: break;
	}
	EEP_WriteEEPROM (newAddress, newValue);
 800a6e8:	f000 fb9e 	bl	800ae28 <EEP_WriteEEPROM>
}
 800a6ec:	bd08      	pop	{r3, pc}
			DUMMYMODE = newValue;
 800a6ee:	4b04      	ldr	r3, [pc, #16]	; (800a700 <WRK_SetDummyMode+0x24>)
 800a6f0:	7019      	strb	r1, [r3, #0]
			break;
 800a6f2:	e7f9      	b.n	800a6e8 <WRK_SetDummyMode+0xc>
			DUMMYMODEFILTER = newValue;
 800a6f4:	4b03      	ldr	r3, [pc, #12]	; (800a704 <WRK_SetDummyMode+0x28>)
 800a6f6:	7019      	strb	r1, [r3, #0]
			break;
 800a6f8:	e7f6      	b.n	800a6e8 <WRK_SetDummyMode+0xc>
			DUMMYMODEH3 = newValue;
 800a6fa:	4b03      	ldr	r3, [pc, #12]	; (800a708 <WRK_SetDummyMode+0x2c>)
 800a6fc:	7019      	strb	r1, [r3, #0]
			break;
 800a6fe:	e7f3      	b.n	800a6e8 <WRK_SetDummyMode+0xc>
 800a700:	20000c48 	.word	0x20000c48
 800a704:	20000c49 	.word	0x20000c49
 800a708:	20000c4a 	.word	0x20000c4a

0800a70c <WRK_SetMainStatus>:
//! \brief      Handles the main status setting
//! \details    Set the status and saves to old status. Sets the sub status to UNDEFINED
//! \param[in]  enuStatus newStatus
void WRK_SetMainStatus (enuStatus newStatus)
{
	WRK.MainStatusOld = WRK.MainStatus;
 800a70c:	4b04      	ldr	r3, [pc, #16]	; (800a720 <WRK_SetMainStatus+0x14>)
 800a70e:	781a      	ldrb	r2, [r3, #0]
 800a710:	705a      	strb	r2, [r3, #1]
	WRK.MainStatus = newStatus;
 800a712:	7018      	strb	r0, [r3, #0]
	WRK.SubStatusOld = WRK.SubStatus;
 800a714:	789a      	ldrb	r2, [r3, #2]
 800a716:	70da      	strb	r2, [r3, #3]
	WRK.SubStatus = sUNDEFINED;
 800a718:	2200      	movs	r2, #0
 800a71a:	709a      	strb	r2, [r3, #2]
}
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	20000c5c 	.word	0x20000c5c

0800a724 <WRK_HandleUndefined>:
{
 800a724:	b510      	push	{r4, lr}
 800a726:	b088      	sub	sp, #32
	LED_Set(OUTLETLED, SWITCHEDOFF, 0, 0, 0, 0, 0, 0, 0, 0, 0); //Switched off)
 800a728:	2400      	movs	r4, #0
 800a72a:	9406      	str	r4, [sp, #24]
 800a72c:	9405      	str	r4, [sp, #20]
 800a72e:	9404      	str	r4, [sp, #16]
 800a730:	9403      	str	r4, [sp, #12]
 800a732:	9402      	str	r4, [sp, #8]
 800a734:	9401      	str	r4, [sp, #4]
 800a736:	9400      	str	r4, [sp, #0]
 800a738:	4623      	mov	r3, r4
 800a73a:	4622      	mov	r2, r4
 800a73c:	4621      	mov	r1, r4
 800a73e:	2002      	movs	r0, #2
 800a740:	f000 fe72 	bl	800b428 <LED_Set>
	LED_Set(WATERTANKLEDS, SWITCHEDOFF, 0, 0, 0, 0, 0, 0, 0, 0, 0); //Switched off)
 800a744:	9406      	str	r4, [sp, #24]
 800a746:	9405      	str	r4, [sp, #20]
 800a748:	9404      	str	r4, [sp, #16]
 800a74a:	9403      	str	r4, [sp, #12]
 800a74c:	9402      	str	r4, [sp, #8]
 800a74e:	9401      	str	r4, [sp, #4]
 800a750:	9400      	str	r4, [sp, #0]
 800a752:	4623      	mov	r3, r4
 800a754:	4622      	mov	r2, r4
 800a756:	4621      	mov	r1, r4
 800a758:	4620      	mov	r0, r4
 800a75a:	f000 fe65 	bl	800b428 <LED_Set>
	LED_Set(STANDBYLED, SWITCHEDOFF, 0, 0, 0, 0, 0, 0, 0, 0, 0); //Switched off)
 800a75e:	9406      	str	r4, [sp, #24]
 800a760:	9405      	str	r4, [sp, #20]
 800a762:	9404      	str	r4, [sp, #16]
 800a764:	9403      	str	r4, [sp, #12]
 800a766:	9402      	str	r4, [sp, #8]
 800a768:	9401      	str	r4, [sp, #4]
 800a76a:	9400      	str	r4, [sp, #0]
 800a76c:	4623      	mov	r3, r4
 800a76e:	4622      	mov	r2, r4
 800a770:	4621      	mov	r1, r4
 800a772:	2003      	movs	r0, #3
 800a774:	f000 fe58 	bl	800b428 <LED_Set>
	VAL_SetCircuit (CIRCUIT_1_2_OFF,1);
 800a778:	2101      	movs	r1, #1
 800a77a:	2007      	movs	r0, #7
 800a77c:	f7fe fe6c 	bl	8009458 <VAL_SetCircuit>
	WRK_SetMainStatus(sSTANDBY);
 800a780:	2005      	movs	r0, #5
 800a782:	f7ff ffc3 	bl	800a70c <WRK_SetMainStatus>
}
 800a786:	b008      	add	sp, #32
 800a788:	bd10      	pop	{r4, pc}
	...

0800a78c <WRK_Init>:
{
 800a78c:	b570      	push	{r4, r5, r6, lr}
 800a78e:	b088      	sub	sp, #32
	if ((WRK_GetHardwareVersion() < HARDWAREVERSIONMINIMUM) && (!DUMMYMODE))
 800a790:	f7fe ffd0 	bl	8009734 <WRK_GetHardwareVersion>
 800a794:	2801      	cmp	r0, #1
 800a796:	d910      	bls.n	800a7ba <WRK_Init+0x2e>
	DUMMYMODE = EEP_ReadEEPROM (WRK_DUMMYMODE);
 800a798:	2000      	movs	r0, #0
 800a79a:	f000 fb5a 	bl	800ae52 <EEP_ReadEEPROM>
 800a79e:	4b20      	ldr	r3, [pc, #128]	; (800a820 <WRK_Init+0x94>)
 800a7a0:	7018      	strb	r0, [r3, #0]
	DUMMYMODEFILTER = EEP_ReadEEPROM (WRK_DUMMYMODEFILTER);
 800a7a2:	2001      	movs	r0, #1
 800a7a4:	f000 fb55 	bl	800ae52 <EEP_ReadEEPROM>
 800a7a8:	4b1e      	ldr	r3, [pc, #120]	; (800a824 <WRK_Init+0x98>)
 800a7aa:	7018      	strb	r0, [r3, #0]
	DUMMYMODEH3 = EEP_ReadEEPROM (WRK_DUMMYMODEH3);
 800a7ac:	2002      	movs	r0, #2
 800a7ae:	f000 fb50 	bl	800ae52 <EEP_ReadEEPROM>
 800a7b2:	4b1d      	ldr	r3, [pc, #116]	; (800a828 <WRK_Init+0x9c>)
 800a7b4:	7018      	strb	r0, [r3, #0]
}
 800a7b6:	b008      	add	sp, #32
 800a7b8:	bd70      	pop	{r4, r5, r6, pc}
	if ((WRK_GetHardwareVersion() < HARDWAREVERSIONMINIMUM) && (!DUMMYMODE))
 800a7ba:	4b19      	ldr	r3, [pc, #100]	; (800a820 <WRK_Init+0x94>)
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d1ea      	bne.n	800a798 <WRK_Init+0xc>
		LED_Set(STANDBYLED, BLINKING, 255, 0, 0, 255, 100, 100, 0, 0, 0);
 800a7c2:	2400      	movs	r4, #0
 800a7c4:	9406      	str	r4, [sp, #24]
 800a7c6:	9405      	str	r4, [sp, #20]
 800a7c8:	9404      	str	r4, [sp, #16]
 800a7ca:	2664      	movs	r6, #100	; 0x64
 800a7cc:	9603      	str	r6, [sp, #12]
 800a7ce:	9602      	str	r6, [sp, #8]
 800a7d0:	25ff      	movs	r5, #255	; 0xff
 800a7d2:	9501      	str	r5, [sp, #4]
 800a7d4:	9400      	str	r4, [sp, #0]
 800a7d6:	4623      	mov	r3, r4
 800a7d8:	462a      	mov	r2, r5
 800a7da:	2102      	movs	r1, #2
 800a7dc:	2003      	movs	r0, #3
 800a7de:	f000 fe23 	bl	800b428 <LED_Set>
		LED_Set(OUTLETLED, BLINKING, 255, 0, 0, 255, 100, 100, 0, 0, 0);
 800a7e2:	9406      	str	r4, [sp, #24]
 800a7e4:	9405      	str	r4, [sp, #20]
 800a7e6:	9404      	str	r4, [sp, #16]
 800a7e8:	9603      	str	r6, [sp, #12]
 800a7ea:	9602      	str	r6, [sp, #8]
 800a7ec:	9501      	str	r5, [sp, #4]
 800a7ee:	9400      	str	r4, [sp, #0]
 800a7f0:	4623      	mov	r3, r4
 800a7f2:	462a      	mov	r2, r5
 800a7f4:	2102      	movs	r1, #2
 800a7f6:	4608      	mov	r0, r1
 800a7f8:	f000 fe16 	bl	800b428 <LED_Set>
		LED_Set(WATERTANKLEDS, BLINKING, 255, 0, 0, 255, 100, 100, 0, 0, 0);
 800a7fc:	9406      	str	r4, [sp, #24]
 800a7fe:	9405      	str	r4, [sp, #20]
 800a800:	9404      	str	r4, [sp, #16]
 800a802:	9603      	str	r6, [sp, #12]
 800a804:	9602      	str	r6, [sp, #8]
 800a806:	9501      	str	r5, [sp, #4]
 800a808:	9400      	str	r4, [sp, #0]
 800a80a:	4623      	mov	r3, r4
 800a80c:	462a      	mov	r2, r5
 800a80e:	2102      	movs	r1, #2
 800a810:	4620      	mov	r0, r4
 800a812:	f000 fe09 	bl	800b428 <LED_Set>
		WRK_SetMainStatus(sHARDWAREINCOMPATIBLE);
 800a816:	2015      	movs	r0, #21
 800a818:	f7ff ff78 	bl	800a70c <WRK_SetMainStatus>
 800a81c:	e7bc      	b.n	800a798 <WRK_Init+0xc>
 800a81e:	bf00      	nop
 800a820:	20000c48 	.word	0x20000c48
 800a824:	20000c49 	.word	0x20000c49
 800a828:	20000c4a 	.word	0x20000c4a

0800a82c <WRK_SetSubStatus>:
//! \brief      Handles the sub status setting
//! \details    Set the status and saves to old status.
//! \param      Non
void WRK_SetSubStatus (enuStatus newStatus)
{
	WRK.SubStatusOld = WRK.SubStatus;
 800a82c:	4b02      	ldr	r3, [pc, #8]	; (800a838 <WRK_SetSubStatus+0xc>)
 800a82e:	789a      	ldrb	r2, [r3, #2]
 800a830:	70da      	strb	r2, [r3, #3]
	WRK.SubStatus = newStatus;
 800a832:	7098      	strb	r0, [r3, #2]
}
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	20000c5c 	.word	0x20000c5c

0800a83c <WRK_HandleIdle>:
{
 800a83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a83e:	b089      	sub	sp, #36	; 0x24
	if (gRecipe[RECIPE3].RecipeBlocks[0].H3SetTemp > 0)
 800a840:	4a3f      	ldr	r2, [pc, #252]	; (800a940 <WRK_HandleIdle+0x104>)
 800a842:	f892 3222 	ldrb.w	r3, [r2, #546]	; 0x222
 800a846:	fab3 f383 	clz	r3, r3
 800a84a:	095b      	lsrs	r3, r3, #5
 800a84c:	425b      	negs	r3, r3
 800a84e:	f882 3203 	strb.w	r3, [r2, #515]	; 0x203
	switch (WRK.SubStatus)
 800a852:	4b3c      	ldr	r3, [pc, #240]	; (800a944 <WRK_HandleIdle+0x108>)
 800a854:	789b      	ldrb	r3, [r3, #2]
 800a856:	b11b      	cbz	r3, 800a860 <WRK_HandleIdle+0x24>
 800a858:	2b06      	cmp	r3, #6
 800a85a:	d039      	beq.n	800a8d0 <WRK_HandleIdle+0x94>
}
 800a85c:	b009      	add	sp, #36	; 0x24
 800a85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LED_Set(STANDBYLED, FADEIN, 255, 255, 255, 50, 0, 0, 5, 0, 0); //On White
 800a860:	2400      	movs	r4, #0
 800a862:	9406      	str	r4, [sp, #24]
 800a864:	9405      	str	r4, [sp, #20]
 800a866:	2705      	movs	r7, #5
 800a868:	9704      	str	r7, [sp, #16]
 800a86a:	9403      	str	r4, [sp, #12]
 800a86c:	9402      	str	r4, [sp, #8]
 800a86e:	2632      	movs	r6, #50	; 0x32
 800a870:	9601      	str	r6, [sp, #4]
 800a872:	25ff      	movs	r5, #255	; 0xff
 800a874:	9500      	str	r5, [sp, #0]
 800a876:	462b      	mov	r3, r5
 800a878:	462a      	mov	r2, r5
 800a87a:	2104      	movs	r1, #4
 800a87c:	2003      	movs	r0, #3
 800a87e:	f000 fdd3 	bl	800b428 <LED_Set>
			LED_Set(WATERTANKLEDS, FADEIN, 0, 0, 255, 50, 0, 0, 5, 0, 0); //Breathing blue
 800a882:	9406      	str	r4, [sp, #24]
 800a884:	9405      	str	r4, [sp, #20]
 800a886:	9704      	str	r7, [sp, #16]
 800a888:	9403      	str	r4, [sp, #12]
 800a88a:	9402      	str	r4, [sp, #8]
 800a88c:	9601      	str	r6, [sp, #4]
 800a88e:	9500      	str	r5, [sp, #0]
 800a890:	4623      	mov	r3, r4
 800a892:	4622      	mov	r2, r4
 800a894:	2104      	movs	r1, #4
 800a896:	4620      	mov	r0, r4
 800a898:	f000 fdc6 	bl	800b428 <LED_Set>
			HAL_TIM_Base_Start_IT(&htim9);
 800a89c:	4d2a      	ldr	r5, [pc, #168]	; (800a948 <WRK_HandleIdle+0x10c>)
 800a89e:	4628      	mov	r0, r5
 800a8a0:	f004 fb30 	bl	800ef04 <HAL_TIM_Base_Start_IT>
			HAL_TIM_OC_Start_IT(&htim9, TIM_CHANNEL_1);
 800a8a4:	4621      	mov	r1, r4
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	f004 fb86 	bl	800efb8 <HAL_TIM_OC_Start_IT>
			HEA_SetHeaterTemperature (H3, gRecipe[RECIPE3].RecipeBlocks[0].H3SetTemp * 10,0); //Heater 3 temperature set (Brew head) * 0.1 degrees
 800a8ac:	4b24      	ldr	r3, [pc, #144]	; (800a940 <WRK_HandleIdle+0x104>)
 800a8ae:	f893 1222 	ldrb.w	r1, [r3, #546]	; 0x222
 800a8b2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a8b6:	4622      	mov	r2, r4
 800a8b8:	0049      	lsls	r1, r1, #1
 800a8ba:	2002      	movs	r0, #2
 800a8bc:	f7fd f86a 	bl	8007994 <HEA_SetHeaterTemperature>
			HEA_Set(H3, sACTIVE);
 800a8c0:	2103      	movs	r1, #3
 800a8c2:	2002      	movs	r0, #2
 800a8c4:	f7fd f858 	bl	8007978 <HEA_Set>
			WRK_SetSubStatus (sWAIT);
 800a8c8:	2006      	movs	r0, #6
 800a8ca:	f7ff ffaf 	bl	800a82c <WRK_SetSubStatus>
			break;
 800a8ce:	e7c5      	b.n	800a85c <WRK_HandleIdle+0x20>
			if (WRK_GetAction(MTypeStandby)) //Received Switch to STANDBY command
 800a8d0:	2053      	movs	r0, #83	; 0x53
 800a8d2:	f7fe fed3 	bl	800967c <WRK_GetAction>
 800a8d6:	b150      	cbz	r0, 800a8ee <WRK_HandleIdle+0xb2>
				WRK_SetMainStatus(sSTANDBY);
 800a8d8:	2005      	movs	r0, #5
 800a8da:	f7ff ff17 	bl	800a70c <WRK_SetMainStatus>
				HEA[i].EfastOffset = HEA[i].EfastCounterOld;
 800a8de:	4b1b      	ldr	r3, [pc, #108]	; (800a94c <WRK_HandleIdle+0x110>)
 800a8e0:	69da      	ldr	r2, [r3, #28]
 800a8e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a8e6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a8e8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 800a8ec:	e7b6      	b.n	800a85c <WRK_HandleIdle+0x20>
			else if (WRK_GetAction(MTypeSwitchOn)) //Received Switch to IDLE command
 800a8ee:	2052      	movs	r0, #82	; 0x52
 800a8f0:	f7fe fec4 	bl	800967c <WRK_GetAction>
 800a8f4:	b118      	cbz	r0, 800a8fe <WRK_HandleIdle+0xc2>
				WRK.MainStatus = sIDLE; //Not really needed, but put here to respond to UART quickly, since otherwise a time out would occur
 800a8f6:	4b13      	ldr	r3, [pc, #76]	; (800a944 <WRK_HandleIdle+0x108>)
 800a8f8:	2202      	movs	r2, #2
 800a8fa:	701a      	strb	r2, [r3, #0]
 800a8fc:	e7ef      	b.n	800a8de <WRK_HandleIdle+0xa2>
			else if (WRK_GetAction(MTypeStartRecipe1)) //Received Command 0x11: Start recipe 1
 800a8fe:	2011      	movs	r0, #17
 800a900:	f7fe febc 	bl	800967c <WRK_GetAction>
 800a904:	b158      	cbz	r0, 800a91e <WRK_HandleIdle+0xe2>
				REC_Set(RECIPE1, sACTIVE);
 800a906:	2103      	movs	r1, #3
 800a908:	2000      	movs	r0, #0
 800a90a:	f7fe f88d 	bl	8008a28 <REC_Set>
				REC_Set(RECIPE3, sINACTIVE);
 800a90e:	2104      	movs	r1, #4
 800a910:	2002      	movs	r0, #2
 800a912:	f7fe f889 	bl	8008a28 <REC_Set>
				WRK_SetMainStatus(sPREPARE);
 800a916:	2013      	movs	r0, #19
 800a918:	f7ff fef8 	bl	800a70c <WRK_SetMainStatus>
 800a91c:	e7df      	b.n	800a8de <WRK_HandleIdle+0xa2>
			else if (WRK_GetAction(MTypeStartRecipe2)) //Received Command 0x12: Start recipe 2
 800a91e:	2012      	movs	r0, #18
 800a920:	f7fe feac 	bl	800967c <WRK_GetAction>
 800a924:	2800      	cmp	r0, #0
 800a926:	d0da      	beq.n	800a8de <WRK_HandleIdle+0xa2>
				REC_Set(RECIPE2, sACTIVE);
 800a928:	2103      	movs	r1, #3
 800a92a:	2001      	movs	r0, #1
 800a92c:	f7fe f87c 	bl	8008a28 <REC_Set>
				REC_Set(RECIPE3, sINACTIVE);
 800a930:	2104      	movs	r1, #4
 800a932:	2002      	movs	r0, #2
 800a934:	f7fe f878 	bl	8008a28 <REC_Set>
				WRK_SetMainStatus(sPREPARE);
 800a938:	2013      	movs	r0, #19
 800a93a:	f7ff fee7 	bl	800a70c <WRK_SetMainStatus>
 800a93e:	e7ce      	b.n	800a8de <WRK_HandleIdle+0xa2>
 800a940:	20000678 	.word	0x20000678
 800a944:	20000c5c 	.word	0x20000c5c
 800a948:	20000af0 	.word	0x20000af0
 800a94c:	20000290 	.word	0x20000290

0800a950 <WRK_HandlePrepare>:
{
 800a950:	b508      	push	{r3, lr}
	switch (WRK.SubStatus)
 800a952:	4b35      	ldr	r3, [pc, #212]	; (800aa28 <WRK_HandlePrepare+0xd8>)
 800a954:	789b      	ldrb	r3, [r3, #2]
 800a956:	b113      	cbz	r3, 800a95e <WRK_HandlePrepare+0xe>
 800a958:	2b03      	cmp	r3, #3
 800a95a:	d014      	beq.n	800a986 <WRK_HandlePrepare+0x36>
}
 800a95c:	bd08      	pop	{r3, pc}
			if ((gRecipe[RECIPE1].Active == 0) && (gRecipe[RECIPE2].Active == 0))
 800a95e:	4b33      	ldr	r3, [pc, #204]	; (800aa2c <WRK_HandlePrepare+0xdc>)
 800a960:	785a      	ldrb	r2, [r3, #1]
 800a962:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800a966:	4313      	orrs	r3, r2
 800a968:	d003      	beq.n	800a972 <WRK_HandlePrepare+0x22>
				WRK_SetSubStatus (sACTIVE);
 800a96a:	2003      	movs	r0, #3
 800a96c:	f7ff ff5e 	bl	800a82c <WRK_SetSubStatus>
 800a970:	e7f4      	b.n	800a95c <WRK_HandlePrepare+0xc>
				WRK_ResetAllModules(RECIPE1);
 800a972:	2000      	movs	r0, #0
 800a974:	f7fe ffb8 	bl	80098e8 <WRK_ResetAllModules>
				WRK_ResetAllModules(RECIPE2);
 800a978:	2001      	movs	r0, #1
 800a97a:	f7fe ffb5 	bl	80098e8 <WRK_ResetAllModules>
				WRK_SetMainStatus(sIDLE);
 800a97e:	2002      	movs	r0, #2
 800a980:	f7ff fec4 	bl	800a70c <WRK_SetMainStatus>
 800a984:	e7ea      	b.n	800a95c <WRK_HandlePrepare+0xc>
				if (gRecipe[i].Active == 1) //Recipe x started
 800a986:	4b29      	ldr	r3, [pc, #164]	; (800aa2c <WRK_HandlePrepare+0xdc>)
 800a988:	785b      	ldrb	r3, [r3, #1]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d014      	beq.n	800a9b8 <WRK_HandlePrepare+0x68>
 800a98e:	4b27      	ldr	r3, [pc, #156]	; (800aa2c <WRK_HandlePrepare+0xdc>)
 800a990:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800a994:	2b01      	cmp	r3, #1
 800a996:	d013      	beq.n	800a9c0 <WRK_HandlePrepare+0x70>
			if ((gRecipe[RECIPE1].Active == 0) && (gRecipe[RECIPE2].Active == 0))
 800a998:	4b24      	ldr	r3, [pc, #144]	; (800aa2c <WRK_HandlePrepare+0xdc>)
 800a99a:	785a      	ldrb	r2, [r3, #1]
 800a99c:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	d011      	beq.n	800a9c8 <WRK_HandlePrepare+0x78>
			if (WRK_GetAction(MTypeStartRecipe1)) //Received Command 0x11: Start recipe 1
 800a9a4:	2011      	movs	r0, #17
 800a9a6:	f7fe fe69 	bl	800967c <WRK_GetAction>
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	d031      	beq.n	800aa12 <WRK_HandlePrepare+0xc2>
				REC_Set(RECIPE1, sACTIVE);
 800a9ae:	2103      	movs	r1, #3
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	f7fe f839 	bl	8008a28 <REC_Set>
 800a9b6:	e7d1      	b.n	800a95c <WRK_HandlePrepare+0xc>
					WRK_HandlePrepareRecipe(i);
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	f7ff f825 	bl	8009a08 <WRK_HandlePrepareRecipe>
 800a9be:	e7e6      	b.n	800a98e <WRK_HandlePrepare+0x3e>
 800a9c0:	2001      	movs	r0, #1
 800a9c2:	f7ff f821 	bl	8009a08 <WRK_HandlePrepareRecipe>
 800a9c6:	e7e7      	b.n	800a998 <WRK_HandlePrepare+0x48>
				WRK_ResetAllModules(RECIPE1);
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	f7fe ff8d 	bl	80098e8 <WRK_ResetAllModules>
				WRK_ResetAllModules(RECIPE2);
 800a9ce:	2001      	movs	r0, #1
 800a9d0:	f7fe ff8a 	bl	80098e8 <WRK_ResetAllModules>
				if (DUMMYMODE)
 800a9d4:	4b16      	ldr	r3, [pc, #88]	; (800aa30 <WRK_HandlePrepare+0xe0>)
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	b193      	cbz	r3, 800aa00 <WRK_HandlePrepare+0xb0>
					HEA[H1].GetTemperature = 0;
 800a9da:	4a16      	ldr	r2, [pc, #88]	; (800aa34 <WRK_HandlePrepare+0xe4>)
 800a9dc:	2300      	movs	r3, #0
 800a9de:	6093      	str	r3, [r2, #8]
					HEA[H2].GetTemperature = 0;
 800a9e0:	6693      	str	r3, [r2, #104]	; 0x68
					HEA[H3].GetTemperature = 0;
 800a9e2:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
					WAN.GetTemperature = 0;
 800a9e6:	4a14      	ldr	r2, [pc, #80]	; (800aa38 <WRK_HandlePrepare+0xe8>)
 800a9e8:	6053      	str	r3, [r2, #4]
					PUM[P1].GetFlowTimeBased = 0;
 800a9ea:	4a14      	ldr	r2, [pc, #80]	; (800aa3c <WRK_HandlePrepare+0xec>)
 800a9ec:	60d3      	str	r3, [r2, #12]
					PUM[P1].GetPressure = 0;
 800a9ee:	6153      	str	r3, [r2, #20]
					PUM[P2].GetFlowTimeBased = 0;
 800a9f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
					PUM[P2].GetPressure = 0;
 800a9f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
				WRK_SetMainStatus(sIDLE);
 800a9f8:	2002      	movs	r0, #2
 800a9fa:	f7ff fe87 	bl	800a70c <WRK_SetMainStatus>
 800a9fe:	e7d1      	b.n	800a9a4 <WRK_HandlePrepare+0x54>
				else if (DUMMYMODEH3)
 800aa00:	4b0f      	ldr	r3, [pc, #60]	; (800aa40 <WRK_HandlePrepare+0xf0>)
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d0f7      	beq.n	800a9f8 <WRK_HandlePrepare+0xa8>
					HEA[H3].GetTemperature = 0;
 800aa08:	4b0a      	ldr	r3, [pc, #40]	; (800aa34 <WRK_HandlePrepare+0xe4>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800aa10:	e7f2      	b.n	800a9f8 <WRK_HandlePrepare+0xa8>
			else if (WRK_GetAction(MTypeStartRecipe2)) //Received Command 0x12: Start recipe 2
 800aa12:	2012      	movs	r0, #18
 800aa14:	f7fe fe32 	bl	800967c <WRK_GetAction>
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	d09f      	beq.n	800a95c <WRK_HandlePrepare+0xc>
				REC_Set(RECIPE2, sACTIVE);
 800aa1c:	2103      	movs	r1, #3
 800aa1e:	2001      	movs	r0, #1
 800aa20:	f7fe f802 	bl	8008a28 <REC_Set>
}
 800aa24:	e79a      	b.n	800a95c <WRK_HandlePrepare+0xc>
 800aa26:	bf00      	nop
 800aa28:	20000c5c 	.word	0x20000c5c
 800aa2c:	20000678 	.word	0x20000678
 800aa30:	20000c48 	.word	0x20000c48
 800aa34:	20000290 	.word	0x20000290
 800aa38:	20000a24 	.word	0x20000a24
 800aa3c:	20000570 	.word	0x20000570
 800aa40:	20000c4a 	.word	0x20000c4a

0800aa44 <WRK_HandleStandby>:
{
 800aa44:	b500      	push	{lr}
 800aa46:	b089      	sub	sp, #36	; 0x24
	switch (WRK.SubStatus)
 800aa48:	4b45      	ldr	r3, [pc, #276]	; (800ab60 <WRK_HandleStandby+0x11c>)
 800aa4a:	789b      	ldrb	r3, [r3, #2]
 800aa4c:	b123      	cbz	r3, 800aa58 <WRK_HandleStandby+0x14>
 800aa4e:	2b06      	cmp	r3, #6
 800aa50:	d05e      	beq.n	800ab10 <WRK_HandleStandby+0xcc>
}
 800aa52:	b009      	add	sp, #36	; 0x24
 800aa54:	f85d fb04 	ldr.w	pc, [sp], #4
			if (LED[WATERTANKLEDS].Effect == SWITCHEDON)
 800aa58:	4b42      	ldr	r3, [pc, #264]	; (800ab64 <WRK_HandleStandby+0x120>)
 800aa5a:	7c1b      	ldrb	r3, [r3, #16]
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d017      	beq.n	800aa90 <WRK_HandleStandby+0x4c>
			else if (LED[WATERTANKLEDS].Effect != FADEOUT)
 800aa60:	2b05      	cmp	r3, #5
 800aa62:	d125      	bne.n	800aab0 <WRK_HandleStandby+0x6c>
			if (LED[STANDBYLED].Effect == SWITCHEDON)
 800aa64:	4b3f      	ldr	r3, [pc, #252]	; (800ab64 <WRK_HandleStandby+0x120>)
 800aa66:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d02e      	beq.n	800aacc <WRK_HandleStandby+0x88>
			else if (LED[STANDBYLED].Effect != FADEOUT)
 800aa6e:	2b05      	cmp	r3, #5
 800aa70:	d13e      	bne.n	800aaf0 <WRK_HandleStandby+0xac>
			VAL_SetCircuit (CIRCUIT_1_2_OFF,1);
 800aa72:	2101      	movs	r1, #1
 800aa74:	2007      	movs	r0, #7
 800aa76:	f7fe fcef 	bl	8009458 <VAL_SetCircuit>
			HEA_Set(H3, sINACTIVE);
 800aa7a:	2104      	movs	r1, #4
 800aa7c:	2002      	movs	r0, #2
 800aa7e:	f7fc ff7b 	bl	8007978 <HEA_Set>
			ZCR_Set (sINACTIVE);
 800aa82:	2004      	movs	r0, #4
 800aa84:	f000 f960 	bl	800ad48 <ZCR_Set>
			WRK_SetSubStatus (sWAIT);
 800aa88:	2006      	movs	r0, #6
 800aa8a:	f7ff fecf 	bl	800a82c <WRK_SetSubStatus>
			break;
 800aa8e:	e7e0      	b.n	800aa52 <WRK_HandleStandby+0xe>
				LED_Set(WATERTANKLEDS, FADEOUT, 0, 0, 0, LED[WATERTANKLEDS].Intensity, 0, 0, 5, 0, 0); //Fade out)
 800aa90:	2000      	movs	r0, #0
 800aa92:	9006      	str	r0, [sp, #24]
 800aa94:	9005      	str	r0, [sp, #20]
 800aa96:	2105      	movs	r1, #5
 800aa98:	9104      	str	r1, [sp, #16]
 800aa9a:	9003      	str	r0, [sp, #12]
 800aa9c:	9002      	str	r0, [sp, #8]
 800aa9e:	4b31      	ldr	r3, [pc, #196]	; (800ab64 <WRK_HandleStandby+0x120>)
 800aaa0:	7d1b      	ldrb	r3, [r3, #20]
 800aaa2:	9301      	str	r3, [sp, #4]
 800aaa4:	9000      	str	r0, [sp, #0]
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	f000 fcbd 	bl	800b428 <LED_Set>
 800aaae:	e7d9      	b.n	800aa64 <WRK_HandleStandby+0x20>
				LED_Set(WATERTANKLEDS, SWITCHEDOFF, 0, 0, 0, 0, 0, 0, 0, 0, 0); //Switched off)
 800aab0:	2000      	movs	r0, #0
 800aab2:	9006      	str	r0, [sp, #24]
 800aab4:	9005      	str	r0, [sp, #20]
 800aab6:	9004      	str	r0, [sp, #16]
 800aab8:	9003      	str	r0, [sp, #12]
 800aaba:	9002      	str	r0, [sp, #8]
 800aabc:	9001      	str	r0, [sp, #4]
 800aabe:	9000      	str	r0, [sp, #0]
 800aac0:	4603      	mov	r3, r0
 800aac2:	4602      	mov	r2, r0
 800aac4:	4601      	mov	r1, r0
 800aac6:	f000 fcaf 	bl	800b428 <LED_Set>
 800aaca:	e7cb      	b.n	800aa64 <WRK_HandleStandby+0x20>
				LED_Set(STANDBYLED, FADEOUT, 255, 255, 255, LED[STANDBYLED].Intensity, 0, 0, 5, 0, 0); //Fade out
 800aacc:	2300      	movs	r3, #0
 800aace:	9306      	str	r3, [sp, #24]
 800aad0:	9305      	str	r3, [sp, #20]
 800aad2:	2105      	movs	r1, #5
 800aad4:	9104      	str	r1, [sp, #16]
 800aad6:	9303      	str	r3, [sp, #12]
 800aad8:	9302      	str	r3, [sp, #8]
 800aada:	4b22      	ldr	r3, [pc, #136]	; (800ab64 <WRK_HandleStandby+0x120>)
 800aadc:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 800aae0:	9301      	str	r3, [sp, #4]
 800aae2:	22ff      	movs	r2, #255	; 0xff
 800aae4:	9200      	str	r2, [sp, #0]
 800aae6:	4613      	mov	r3, r2
 800aae8:	2003      	movs	r0, #3
 800aaea:	f000 fc9d 	bl	800b428 <LED_Set>
 800aaee:	e7c0      	b.n	800aa72 <WRK_HandleStandby+0x2e>
				LED_Set(STANDBYLED, BREATHING, 255, 0, 0, 50, 0, 0, 5, 0, 0); //Breathing Red
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	9306      	str	r3, [sp, #24]
 800aaf4:	9305      	str	r3, [sp, #20]
 800aaf6:	2205      	movs	r2, #5
 800aaf8:	9204      	str	r2, [sp, #16]
 800aafa:	9303      	str	r3, [sp, #12]
 800aafc:	9302      	str	r3, [sp, #8]
 800aafe:	2232      	movs	r2, #50	; 0x32
 800ab00:	9201      	str	r2, [sp, #4]
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	22ff      	movs	r2, #255	; 0xff
 800ab06:	2103      	movs	r1, #3
 800ab08:	4608      	mov	r0, r1
 800ab0a:	f000 fc8d 	bl	800b428 <LED_Set>
 800ab0e:	e7b0      	b.n	800aa72 <WRK_HandleStandby+0x2e>
			if (LED[STANDBYLED].Effect == SWITCHEDOFF)
 800ab10:	4b14      	ldr	r3, [pc, #80]	; (800ab64 <WRK_HandleStandby+0x120>)
 800ab12:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800ab16:	b153      	cbz	r3, 800ab2e <WRK_HandleStandby+0xea>
			if (WRK_GetAction(MTypeSwitchOn)) //Received Switch to IDLE command
 800ab18:	2052      	movs	r0, #82	; 0x52
 800ab1a:	f7fe fdaf 	bl	800967c <WRK_GetAction>
 800ab1e:	b1a8      	cbz	r0, 800ab4c <WRK_HandleStandby+0x108>
				ZCR_Set (sACTIVE);
 800ab20:	2003      	movs	r0, #3
 800ab22:	f000 f911 	bl	800ad48 <ZCR_Set>
				WRK_SetMainStatus(sIDLE);
 800ab26:	2002      	movs	r0, #2
 800ab28:	f7ff fdf0 	bl	800a70c <WRK_SetMainStatus>
 800ab2c:	e791      	b.n	800aa52 <WRK_HandleStandby+0xe>
				LED_Set(STANDBYLED, BREATHING, 255, 0, 0, 50, 0, 0, 5, 0, 0); //Breathing Red
 800ab2e:	9306      	str	r3, [sp, #24]
 800ab30:	9305      	str	r3, [sp, #20]
 800ab32:	2205      	movs	r2, #5
 800ab34:	9204      	str	r2, [sp, #16]
 800ab36:	9303      	str	r3, [sp, #12]
 800ab38:	9302      	str	r3, [sp, #8]
 800ab3a:	2232      	movs	r2, #50	; 0x32
 800ab3c:	9201      	str	r2, [sp, #4]
 800ab3e:	9300      	str	r3, [sp, #0]
 800ab40:	22ff      	movs	r2, #255	; 0xff
 800ab42:	2103      	movs	r1, #3
 800ab44:	4608      	mov	r0, r1
 800ab46:	f000 fc6f 	bl	800b428 <LED_Set>
 800ab4a:	e7e5      	b.n	800ab18 <WRK_HandleStandby+0xd4>
			else if (WRK_GetAction(MTypeStandby)) //Received Switch to STANDBY command
 800ab4c:	2053      	movs	r0, #83	; 0x53
 800ab4e:	f7fe fd95 	bl	800967c <WRK_GetAction>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	f43f af7d 	beq.w	800aa52 <WRK_HandleStandby+0xe>
				WRK.MainStatus = sSTANDBY; //Not really needed, but put here to respond to UART quickly, since otherwise a time out would occur
 800ab58:	4b01      	ldr	r3, [pc, #4]	; (800ab60 <WRK_HandleStandby+0x11c>)
 800ab5a:	2205      	movs	r2, #5
 800ab5c:	701a      	strb	r2, [r3, #0]
}
 800ab5e:	e778      	b.n	800aa52 <WRK_HandleStandby+0xe>
 800ab60:	20000c5c 	.word	0x20000c5c
 800ab64:	20000d40 	.word	0x20000d40

0800ab68 <WRK_HandleSequence>:
{
 800ab68:	b508      	push	{r3, lr}
	if (TickTimer ++ < 99) return; //100 ms interval
 800ab6a:	4b31      	ldr	r3, [pc, #196]	; (800ac30 <WRK_HandleSequence+0xc8>)
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	2b62      	cmp	r3, #98	; 0x62
 800ab70:	d927      	bls.n	800abc2 <WRK_HandleSequence+0x5a>
	TickTimer = 0;
 800ab72:	4b2f      	ldr	r3, [pc, #188]	; (800ac30 <WRK_HandleSequence+0xc8>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	701a      	strb	r2, [r3, #0]
	if (H3Counter < 65535)
 800ab78:	4b2e      	ldr	r3, [pc, #184]	; (800ac34 <WRK_HandleSequence+0xcc>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d802      	bhi.n	800ab8a <WRK_HandleSequence+0x22>
		H3Counter ++;
 800ab84:	3301      	adds	r3, #1
 800ab86:	4a2b      	ldr	r2, [pc, #172]	; (800ac34 <WRK_HandleSequence+0xcc>)
 800ab88:	6013      	str	r3, [r2, #0]
	if ((WRK.MainStatus != sUNDEFINED) && (WRK.MainStatus != sSTANDBY))
 800ab8a:	4b2b      	ldr	r3, [pc, #172]	; (800ac38 <WRK_HandleSequence+0xd0>)
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	b10b      	cbz	r3, 800ab94 <WRK_HandleSequence+0x2c>
 800ab90:	2b05      	cmp	r3, #5
 800ab92:	d11a      	bne.n	800abca <WRK_HandleSequence+0x62>
		H3Counter = 0;
 800ab94:	4b27      	ldr	r3, [pc, #156]	; (800ac34 <WRK_HandleSequence+0xcc>)
 800ab96:	2200      	movs	r2, #0
 800ab98:	601a      	str	r2, [r3, #0]
		REC_Set(RECIPE3, sINACTIVE);
 800ab9a:	2104      	movs	r1, #4
 800ab9c:	2002      	movs	r0, #2
 800ab9e:	f7fd ff43 	bl	8008a28 <REC_Set>
	switch (WRK.MainStatus)
 800aba2:	4b25      	ldr	r3, [pc, #148]	; (800ac38 <WRK_HandleSequence+0xd0>)
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	2b13      	cmp	r3, #19
 800aba8:	d80e      	bhi.n	800abc8 <WRK_HandleSequence+0x60>
 800abaa:	e8df f003 	tbb	[pc, r3]
 800abae:	0d34      	.short	0x0d34
 800abb0:	370d0d3a 	.word	0x370d0d3a
 800abb4:	0d0d0d0d 	.word	0x0d0d0d0d
 800abb8:	0d0d0d0d 	.word	0x0d0d0d0d
 800abbc:	0d0d0d0d 	.word	0x0d0d0d0d
 800abc0:	3d0d      	.short	0x3d0d
	if (TickTimer ++ < 99) return; //100 ms interval
 800abc2:	3301      	adds	r3, #1
 800abc4:	4a1a      	ldr	r2, [pc, #104]	; (800ac30 <WRK_HandleSequence+0xc8>)
 800abc6:	7013      	strb	r3, [r2, #0]
}
 800abc8:	bd08      	pop	{r3, pc}
		if (WRK_GetAction(MTypeStartRecipe3)) //Received Command 0x13: Start recipe 3
 800abca:	2013      	movs	r0, #19
 800abcc:	f7fe fd56 	bl	800967c <WRK_GetAction>
 800abd0:	b9a0      	cbnz	r0, 800abfc <WRK_HandleSequence+0x94>
		if (WRK_GetAction(MTypeStopRecipe3)) //Received Command 0x16: Stop recipe 3
 800abd2:	2016      	movs	r0, #22
 800abd4:	f7fe fd52 	bl	800967c <WRK_GetAction>
 800abd8:	b9c0      	cbnz	r0, 800ac0c <WRK_HandleSequence+0xa4>
		if (gRecipe[RECIPE3].RecipeBlocks[0].Time > 0)
 800abda:	4b18      	ldr	r3, [pc, #96]	; (800ac3c <WRK_HandleSequence+0xd4>)
 800abdc:	f8b3 3230 	ldrh.w	r3, [r3, #560]	; 0x230
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d0de      	beq.n	800aba2 <WRK_HandleSequence+0x3a>
			if (H3Counter >= gRecipe[RECIPE3].RecipeBlocks[0].Time) //Time is x100 ms, H3Counter also
 800abe4:	4a13      	ldr	r2, [pc, #76]	; (800ac34 <WRK_HandleSequence+0xcc>)
 800abe6:	6812      	ldr	r2, [r2, #0]
 800abe8:	4293      	cmp	r3, r2
 800abea:	d8da      	bhi.n	800aba2 <WRK_HandleSequence+0x3a>
				H3Counter = 0;
 800abec:	4b11      	ldr	r3, [pc, #68]	; (800ac34 <WRK_HandleSequence+0xcc>)
 800abee:	2200      	movs	r2, #0
 800abf0:	601a      	str	r2, [r3, #0]
				REC_Set(RECIPE3, sINACTIVE);
 800abf2:	2104      	movs	r1, #4
 800abf4:	2002      	movs	r0, #2
 800abf6:	f7fd ff17 	bl	8008a28 <REC_Set>
 800abfa:	e7d2      	b.n	800aba2 <WRK_HandleSequence+0x3a>
			REC_Set(RECIPE3, sACTIVE);
 800abfc:	2103      	movs	r1, #3
 800abfe:	2002      	movs	r0, #2
 800ac00:	f7fd ff12 	bl	8008a28 <REC_Set>
			H3Counter = 0;
 800ac04:	4b0b      	ldr	r3, [pc, #44]	; (800ac34 <WRK_HandleSequence+0xcc>)
 800ac06:	2200      	movs	r2, #0
 800ac08:	601a      	str	r2, [r3, #0]
 800ac0a:	e7e2      	b.n	800abd2 <WRK_HandleSequence+0x6a>
			REC_Set(RECIPE3, sINACTIVE);
 800ac0c:	2104      	movs	r1, #4
 800ac0e:	2002      	movs	r0, #2
 800ac10:	f7fd ff0a 	bl	8008a28 <REC_Set>
 800ac14:	e7e1      	b.n	800abda <WRK_HandleSequence+0x72>
			WRK_HandleUndefined();
 800ac16:	f7ff fd85 	bl	800a724 <WRK_HandleUndefined>
			break;
 800ac1a:	e7d5      	b.n	800abc8 <WRK_HandleSequence+0x60>
			WRK_HandleStandby();
 800ac1c:	f7ff ff12 	bl	800aa44 <WRK_HandleStandby>
			break;
 800ac20:	e7d2      	b.n	800abc8 <WRK_HandleSequence+0x60>
			WRK_HandleIdle ();
 800ac22:	f7ff fe0b 	bl	800a83c <WRK_HandleIdle>
			break;
 800ac26:	e7cf      	b.n	800abc8 <WRK_HandleSequence+0x60>
			WRK_HandlePrepare ();
 800ac28:	f7ff fe92 	bl	800a950 <WRK_HandlePrepare>
			break;
 800ac2c:	e7cc      	b.n	800abc8 <WRK_HandleSequence+0x60>
 800ac2e:	bf00      	nop
 800ac30:	2000006f 	.word	0x2000006f
 800ac34:	20000c4c 	.word	0x20000c4c
 800ac38:	20000c5c 	.word	0x20000c5c
 800ac3c:	20000678 	.word	0x20000678

0800ac40 <WRK_HandleTickTime>:
{
 800ac40:	b508      	push	{r3, lr}
	TickTime ++;
 800ac42:	4a15      	ldr	r2, [pc, #84]	; (800ac98 <WRK_HandleTickTime+0x58>)
 800ac44:	8813      	ldrh	r3, [r2, #0]
 800ac46:	3301      	adds	r3, #1
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	8013      	strh	r3, [r2, #0]
	if (!Initialized) return;
 800ac4c:	4a13      	ldr	r2, [pc, #76]	; (800ac9c <WRK_HandleTickTime+0x5c>)
 800ac4e:	7812      	ldrb	r2, [r2, #0]
 800ac50:	b1da      	cbz	r2, 800ac8a <WRK_HandleTickTime+0x4a>
	if (TickTime >= 999)
 800ac52:	f240 32e6 	movw	r2, #998	; 0x3e6
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d818      	bhi.n	800ac8c <WRK_HandleTickTime+0x4c>
	AM_HandleSensor();
 800ac5a:	f7fc f9bb 	bl	8006fd4 <AM_HandleSensor>
	VAL_Handle();
 800ac5e:	f7fe fc47 	bl	80094f0 <VAL_Handle>
	SER_Handle();
 800ac62:	f002 f8a9 	bl	800cdb8 <SER_Handle>
	LED_Handle();
 800ac66:	f000 fd51 	bl	800b70c <LED_Handle>
	WRK_HandleSequence();
 800ac6a:	f7ff ff7d 	bl	800ab68 <WRK_HandleSequence>
	WRK_HandleAction();
 800ac6e:	f7fe fd97 	bl	80097a0 <WRK_HandleAction>
	ZCR_Handle();
 800ac72:	f000 f815 	bl	800aca0 <ZCR_Handle>
	PUM_Handle();
 800ac76:	f7fd fd73 	bl	8008760 <PUM_Handle>
	BTN_Handle();
 800ac7a:	f7fd ff79 	bl	8008b70 <BTN_Handle>
	HEA_Handle();
 800ac7e:	f7fc fe69 	bl	8007954 <HEA_Handle>
	HEA_HandleEfast();
 800ac82:	f7fc fca9 	bl	80075d8 <HEA_HandleEfast>
	WAN_Handle();
 800ac86:	f7fe f85f 	bl	8008d48 <WAN_Handle>
}
 800ac8a:	bd08      	pop	{r3, pc}
		AM_UpdateValues();
 800ac8c:	f7fc f962 	bl	8006f54 <AM_UpdateValues>
		TickTime = 0;
 800ac90:	4b01      	ldr	r3, [pc, #4]	; (800ac98 <WRK_HandleTickTime+0x58>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	801a      	strh	r2, [r3, #0]
 800ac96:	e7e0      	b.n	800ac5a <WRK_HandleTickTime+0x1a>
 800ac98:	20000c58 	.word	0x20000c58
 800ac9c:	20000c51 	.word	0x20000c51

0800aca0 <ZCR_Handle>:
//! \params 	None
void ZCR_Handle(void)
{
	static uint8_t TickTimer=40;

	if (DUMMYMODE)
 800aca0:	4b24      	ldr	r3, [pc, #144]	; (800ad34 <ZCR_Handle+0x94>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	b993      	cbnz	r3, 800accc <ZCR_Handle+0x2c>
	{
		ZCR.Status = sACTIVE;
		return;
	}
	if (TickTimer ++ < 99) return; //100 ms interval
 800aca6:	4b24      	ldr	r3, [pc, #144]	; (800ad38 <ZCR_Handle+0x98>)
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	2b62      	cmp	r3, #98	; 0x62
 800acac:	d912      	bls.n	800acd4 <ZCR_Handle+0x34>
	TickTimer = 0;
 800acae:	4b22      	ldr	r3, [pc, #136]	; (800ad38 <ZCR_Handle+0x98>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	701a      	strb	r2, [r3, #0]
	if (ZCR.Status == sACTIVE)
 800acb4:	4b21      	ldr	r3, [pc, #132]	; (800ad3c <ZCR_Handle+0x9c>)
 800acb6:	781a      	ldrb	r2, [r3, #0]
 800acb8:	2a03      	cmp	r2, #3
 800acba:	d00f      	beq.n	800acdc <ZCR_Handle+0x3c>
	{
		if (ZCR.WatchDog < 2) ZCR.WatchDog ++;
	}
	else
	{
		ZCR.WatchDog = 0;
 800acbc:	4b1f      	ldr	r3, [pc, #124]	; (800ad3c <ZCR_Handle+0x9c>)
 800acbe:	2100      	movs	r1, #0
 800acc0:	7419      	strb	r1, [r3, #16]
		ZCR.Frequency  = 0;
		ZCR.TimingValue = 0;
		ZCR.TimingValueOld = 0;
		ZCR.Pulses = 0;
	}
	else if (ZCR.TimingValue > ZCR.TimingValueOld)
 800acc2:	6859      	ldr	r1, [r3, #4]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	4299      	cmp	r1, r3
 800acc8:	d81a      	bhi.n	800ad00 <ZCR_Handle+0x60>
 800acca:	4770      	bx	lr
		ZCR.Status = sACTIVE;
 800accc:	4b1b      	ldr	r3, [pc, #108]	; (800ad3c <ZCR_Handle+0x9c>)
 800acce:	2203      	movs	r2, #3
 800acd0:	701a      	strb	r2, [r3, #0]
		return;
 800acd2:	4770      	bx	lr
	if (TickTimer ++ < 99) return; //100 ms interval
 800acd4:	3301      	adds	r3, #1
 800acd6:	4a18      	ldr	r2, [pc, #96]	; (800ad38 <ZCR_Handle+0x98>)
 800acd8:	7013      	strb	r3, [r2, #0]
 800acda:	4770      	bx	lr
		if (ZCR.WatchDog < 2) ZCR.WatchDog ++;
 800acdc:	7c1b      	ldrb	r3, [r3, #16]
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d805      	bhi.n	800acee <ZCR_Handle+0x4e>
 800ace2:	3301      	adds	r3, #1
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	4a15      	ldr	r2, [pc, #84]	; (800ad3c <ZCR_Handle+0x9c>)
 800ace8:	7413      	strb	r3, [r2, #16]
	if (ZCR.WatchDog >= 2) //200 ms no zero cross detected.
 800acea:	2b01      	cmp	r3, #1
 800acec:	d91b      	bls.n	800ad26 <ZCR_Handle+0x86>
		ZCR.Status = sUNITERROR;
 800acee:	4b13      	ldr	r3, [pc, #76]	; (800ad3c <ZCR_Handle+0x9c>)
 800acf0:	2214      	movs	r2, #20
 800acf2:	701a      	strb	r2, [r3, #0]
		ZCR.Frequency  = 0;
 800acf4:	2200      	movs	r2, #0
 800acf6:	805a      	strh	r2, [r3, #2]
		ZCR.TimingValue = 0;
 800acf8:	605a      	str	r2, [r3, #4]
		ZCR.TimingValueOld = 0;
 800acfa:	609a      	str	r2, [r3, #8]
		ZCR.Pulses = 0;
 800acfc:	60da      	str	r2, [r3, #12]
 800acfe:	4770      	bx	lr
	{
		if (ZCR.Status == sUNITERROR) ZCR.Status = sACTIVE; //Again pulses. ZCR is active again
 800ad00:	2a14      	cmp	r2, #20
 800ad02:	d00c      	beq.n	800ad1e <ZCR_Handle+0x7e>
		ZCR.Pulses = ZCR.TimingValue - ZCR.TimingValueOld;
 800ad04:	1ac9      	subs	r1, r1, r3
 800ad06:	4a0d      	ldr	r2, [pc, #52]	; (800ad3c <ZCR_Handle+0x9c>)
 800ad08:	60d1      	str	r1, [r2, #12]
		if (ZCR.Pulses != 0)
		{
			ZCR.Frequency = ((5000000/ZCR.Pulses)+5)/10 ;
 800ad0a:	4b0d      	ldr	r3, [pc, #52]	; (800ad40 <ZCR_Handle+0xa0>)
 800ad0c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad10:	3305      	adds	r3, #5
 800ad12:	490c      	ldr	r1, [pc, #48]	; (800ad44 <ZCR_Handle+0xa4>)
 800ad14:	fba1 1303 	umull	r1, r3, r1, r3
 800ad18:	08db      	lsrs	r3, r3, #3
 800ad1a:	8053      	strh	r3, [r2, #2]
 800ad1c:	4770      	bx	lr
		if (ZCR.Status == sUNITERROR) ZCR.Status = sACTIVE; //Again pulses. ZCR is active again
 800ad1e:	4a07      	ldr	r2, [pc, #28]	; (800ad3c <ZCR_Handle+0x9c>)
 800ad20:	2003      	movs	r0, #3
 800ad22:	7010      	strb	r0, [r2, #0]
 800ad24:	e7ee      	b.n	800ad04 <ZCR_Handle+0x64>
	else if (ZCR.TimingValue > ZCR.TimingValueOld)
 800ad26:	4b05      	ldr	r3, [pc, #20]	; (800ad3c <ZCR_Handle+0x9c>)
 800ad28:	6859      	ldr	r1, [r3, #4]
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	4299      	cmp	r1, r3
 800ad2e:	d8e9      	bhi.n	800ad04 <ZCR_Handle+0x64>
		}
	}
}
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	20000c48 	.word	0x20000c48
 800ad38:	20000070 	.word	0x20000070
 800ad3c:	20000c70 	.word	0x20000c70
 800ad40:	004c4b40 	.word	0x004c4b40
 800ad44:	cccccccd 	.word	0xcccccccd

0800ad48 <ZCR_Set>:
//-----------------------------------------------------------------------------
//! \brief      Routine to switch zerocross on or off
//! \details    Zerocross is needed to control heaters and pumps.
//! \params 	enuStatus newStatus
void ZCR_Set(enuStatus newStatus)
{
 800ad48:	b508      	push	{r3, lr}
	ZCR.Status = newStatus;
 800ad4a:	4b0b      	ldr	r3, [pc, #44]	; (800ad78 <ZCR_Set+0x30>)
 800ad4c:	7018      	strb	r0, [r3, #0]
	if (newStatus == sACTIVE)
 800ad4e:	2803      	cmp	r0, #3
 800ad50:	d00b      	beq.n	800ad6a <ZCR_Set+0x22>
	{
		ENZC_ON();
	}
	else
	{
		ENZC_OFF();
 800ad52:	2200      	movs	r2, #0
 800ad54:	2101      	movs	r1, #1
 800ad56:	4809      	ldr	r0, [pc, #36]	; (800ad7c <ZCR_Set+0x34>)
 800ad58:	f003 f9a2 	bl	800e0a0 <HAL_GPIO_WritePin>
		ZCR.Frequency = 0;
 800ad5c:	4b06      	ldr	r3, [pc, #24]	; (800ad78 <ZCR_Set+0x30>)
 800ad5e:	2200      	movs	r2, #0
 800ad60:	805a      	strh	r2, [r3, #2]
		ZCR.TimingValue = 0;
 800ad62:	605a      	str	r2, [r3, #4]
		ZCR.TimingValueOld = 0;
 800ad64:	609a      	str	r2, [r3, #8]
		ZCR.Pulses = 0;
 800ad66:	60da      	str	r2, [r3, #12]
	}
}
 800ad68:	bd08      	pop	{r3, pc}
		ENZC_ON();
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	4611      	mov	r1, r2
 800ad6e:	4803      	ldr	r0, [pc, #12]	; (800ad7c <ZCR_Set+0x34>)
 800ad70:	f003 f996 	bl	800e0a0 <HAL_GPIO_WritePin>
 800ad74:	e7f8      	b.n	800ad68 <ZCR_Set+0x20>
 800ad76:	bf00      	nop
 800ad78:	20000c70 	.word	0x20000c70
 800ad7c:	40020000 	.word	0x40020000

0800ad80 <ZCR_SetZeroCross>:
//! \brief      Routine to set timing of zero cross
//! \details    Timing is used to calculate frequency and control the timers for phase cutting
//! \params 	None
void ZCR_SetZeroCross(uint32_t newCounter)
{
	if ((ZCR.Status == sACTIVE) || (ZCR.Status == sUNITERROR))
 800ad80:	4b06      	ldr	r3, [pc, #24]	; (800ad9c <ZCR_SetZeroCross+0x1c>)
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	2b03      	cmp	r3, #3
 800ad86:	d001      	beq.n	800ad8c <ZCR_SetZeroCross+0xc>
 800ad88:	2b14      	cmp	r3, #20
 800ad8a:	d103      	bne.n	800ad94 <ZCR_SetZeroCross+0x14>
	{
		ZCR.TimingValueOld = ZCR.TimingValue;
 800ad8c:	4b03      	ldr	r3, [pc, #12]	; (800ad9c <ZCR_SetZeroCross+0x1c>)
 800ad8e:	685a      	ldr	r2, [r3, #4]
 800ad90:	609a      	str	r2, [r3, #8]
		ZCR.TimingValue = newCounter;
 800ad92:	6058      	str	r0, [r3, #4]
	}
	ZCR.WatchDog = 0;
 800ad94:	4b01      	ldr	r3, [pc, #4]	; (800ad9c <ZCR_SetZeroCross+0x1c>)
 800ad96:	2200      	movs	r2, #0
 800ad98:	741a      	strb	r2, [r3, #16]

}
 800ad9a:	4770      	bx	lr
 800ad9c:	20000c70 	.word	0x20000c70

0800ada0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ada0:	480c      	ldr	r0, [pc, #48]	; (800add4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800ada2:	490d      	ldr	r1, [pc, #52]	; (800add8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800ada4:	4a0d      	ldr	r2, [pc, #52]	; (800addc <LoopFillZerobss+0x1a>)
  movs r3, #0
 800ada6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ada8:	e002      	b.n	800adb0 <LoopCopyDataInit>

0800adaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800adaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800adac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800adae:	3304      	adds	r3, #4

0800adb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800adb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800adb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800adb4:	d3f9      	bcc.n	800adaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800adb6:	4a0a      	ldr	r2, [pc, #40]	; (800ade0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800adb8:	4c0a      	ldr	r4, [pc, #40]	; (800ade4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800adba:	2300      	movs	r3, #0
  b LoopFillZerobss
 800adbc:	e001      	b.n	800adc2 <LoopFillZerobss>

0800adbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800adbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800adc0:	3204      	adds	r2, #4

0800adc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800adc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800adc4:	d3fb      	bcc.n	800adbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800adc6:	f7fe f8e7 	bl	8008f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800adca:	f005 f917 	bl	800fffc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800adce:	f7fd f897 	bl	8007f00 <main>
  bx lr
 800add2:	4770      	bx	lr
  ldr r0, =_sdata
 800add4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800add8:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 800addc:	08011378 	.word	0x08011378
  ldr r2, =_sbss
 800ade0:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 800ade4:	200012a8 	.word	0x200012a8

0800ade8 <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ade8:	e7fe      	b.n	800ade8 <COMP_ACQ_IRQHandler>
	...

0800adec <CalculateCRC8>:
//! \param[out]	uint8_t	crc		CRC value that is calculated
uint8_t CalculateCRC8(uint8_t *pData, uint8_t size)
{
	uint8_t crc = 0;
	uint8_t AsciiCode;
	for (uint8_t i = 0; i < size; i++)
 800adec:	b1b9      	cbz	r1, 800ae1e <CalculateCRC8+0x32>
{
 800adee:	b510      	push	{r4, lr}
 800adf0:	4684      	mov	ip, r0
 800adf2:	eb00 0e01 	add.w	lr, r0, r1
	for (uint8_t i = 0; i < size; i++)
 800adf6:	4601      	mov	r1, r0
	uint8_t crc = 0;
 800adf8:	2000      	movs	r0, #0
	{
		AsciiCode = *pData++;
		if (AsciiCode >= 97) AsciiCode -= 32; //make sure all letters are capitals for the crc calculation
		if ((i!=6) && (i!=7)) //Don't calculate the CRC value itself
		{
			crc = table_crc8[crc ^ AsciiCode];
 800adfa:	4c0a      	ldr	r4, [pc, #40]	; (800ae24 <CalculateCRC8+0x38>)
		AsciiCode = *pData++;
 800adfc:	f811 3b01 	ldrb.w	r3, [r1], #1
		if (AsciiCode >= 97) AsciiCode -= 32; //make sure all letters are capitals for the crc calculation
 800ae00:	2b60      	cmp	r3, #96	; 0x60
 800ae02:	bf84      	itt	hi
 800ae04:	3b20      	subhi	r3, #32
 800ae06:	b2db      	uxtbhi	r3, r3
		if ((i!=6) && (i!=7)) //Don't calculate the CRC value itself
 800ae08:	1fca      	subs	r2, r1, #7
 800ae0a:	eba2 020c 	sub.w	r2, r2, ip
 800ae0e:	b2d2      	uxtb	r2, r2
 800ae10:	2a01      	cmp	r2, #1
			crc = table_crc8[crc ^ AsciiCode];
 800ae12:	bf84      	itt	hi
 800ae14:	4043      	eorhi	r3, r0
 800ae16:	5ce0      	ldrbhi	r0, [r4, r3]
	for (uint8_t i = 0; i < size; i++)
 800ae18:	4571      	cmp	r1, lr
 800ae1a:	d1ef      	bne.n	800adfc <CalculateCRC8+0x10>
		}
	}
	return crc;
}
 800ae1c:	bd10      	pop	{r4, pc}
	uint8_t crc = 0;
 800ae1e:	4608      	mov	r0, r1
}
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	08011234 	.word	0x08011234

0800ae28 <EEP_WriteEEPROM>:
  Description:  	Used to store variables in EEprom
  Parameters:   	enuVariable newVariable, uint32_t newValue
  Return value: 	None
***************************************************************/
void EEP_WriteEEPROM (uint32_t newAddress, uint32_t newValue)
{
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	460d      	mov	r5, r1
    uint32_t Address = 0x8080000 + (4 * newAddress);
 800ae2c:	f100 7000 	add.w	r0, r0, #33554432	; 0x2000000
 800ae30:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800ae34:	0084      	lsls	r4, r0, #2
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800ae36:	f002 ff1f 	bl	800dc78 <HAL_FLASHEx_DATAEEPROM_Unlock>
    HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD,Address);
 800ae3a:	4621      	mov	r1, r4
 800ae3c:	2002      	movs	r0, #2
 800ae3e:	f002 ff39 	bl	800dcb4 <HAL_FLASHEx_DATAEEPROM_Erase>
    HAL_FLASHEx_DATAEEPROM_Program (FLASH_TYPEPROGRAMDATA_WORD, Address, newValue);
 800ae42:	462a      	mov	r2, r5
 800ae44:	4621      	mov	r1, r4
 800ae46:	2002      	movs	r0, #2
 800ae48:	f002 ff52 	bl	800dcf0 <HAL_FLASHEx_DATAEEPROM_Program>
    HAL_FLASHEx_DATAEEPROM_Lock();
 800ae4c:	f002 ff28 	bl	800dca0 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800ae50:	bd38      	pop	{r3, r4, r5, pc}

0800ae52 <EEP_ReadEEPROM>:
  Parameters:   	enuVariable newVariable
  Return value: 	None
***************************************************************/
uint32_t EEP_ReadEEPROM (int8_t newAddress)
{
    return (*(__IO uint32_t*) (0x08080000 + (4 * (uint32_t) newAddress)));
 800ae52:	f100 7000 	add.w	r0, r0, #33554432	; 0x2000000
 800ae56:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800ae5a:	0080      	lsls	r0, r0, #2
 800ae5c:	6800      	ldr	r0, [r0, #0]
}
 800ae5e:	4770      	bx	lr

0800ae60 <FIL_GetStatus>:
uint8_t FIL_GetStatus (void)
{
	//uint8_t ReturnValue = 0; //0 means no filter

	//uint8_t Match = 0;
	if (DUMMYMODEFILTER)
 800ae60:	4b25      	ldr	r3, [pc, #148]	; (800aef8 <FIL_GetStatus+0x98>)
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	b12b      	cbz	r3, 800ae72 <FIL_GetStatus+0x12>
	{
		FIL.Type = 1;
 800ae66:	4b25      	ldr	r3, [pc, #148]	; (800aefc <FIL_GetStatus+0x9c>)
 800ae68:	2201      	movs	r2, #1
 800ae6a:	705a      	strb	r2, [r3, #1]
		}
		*/
	}
	//FIL.Type = ReturnValue;
	return FIL.Type;
}
 800ae6c:	4b23      	ldr	r3, [pc, #140]	; (800aefc <FIL_GetStatus+0x9c>)
 800ae6e:	7858      	ldrb	r0, [r3, #1]
 800ae70:	4770      	bx	lr
		if (HAL0 <= HAL_NEG_THRESHOLD) //HAL0 is negative
 800ae72:	4b23      	ldr	r3, [pc, #140]	; (800af00 <FIL_GetStatus+0xa0>)
 800ae74:	8a5b      	ldrh	r3, [r3, #18]
 800ae76:	f240 52aa 	movw	r2, #1450	; 0x5aa
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d818      	bhi.n	800aeb0 <FIL_GetStatus+0x50>
			HAL_Status[0] = -1;
 800ae7e:	4b21      	ldr	r3, [pc, #132]	; (800af04 <FIL_GetStatus+0xa4>)
 800ae80:	22ff      	movs	r2, #255	; 0xff
 800ae82:	701a      	strb	r2, [r3, #0]
		if (HAL1 <= HAL_NEG_THRESHOLD) //HAL1 is negative
 800ae84:	4b1e      	ldr	r3, [pc, #120]	; (800af00 <FIL_GetStatus+0xa0>)
 800ae86:	8a9b      	ldrh	r3, [r3, #20]
 800ae88:	f240 52aa 	movw	r2, #1450	; 0x5aa
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d818      	bhi.n	800aec2 <FIL_GetStatus+0x62>
			HAL_Status[1] = -1;
 800ae90:	4b1c      	ldr	r3, [pc, #112]	; (800af04 <FIL_GetStatus+0xa4>)
 800ae92:	22ff      	movs	r2, #255	; 0xff
 800ae94:	705a      	strb	r2, [r3, #1]
			FIL.Type = 1;
 800ae96:	4b19      	ldr	r3, [pc, #100]	; (800aefc <FIL_GetStatus+0x9c>)
 800ae98:	2201      	movs	r2, #1
 800ae9a:	705a      	strb	r2, [r3, #1]
		if (HAL2 <= HAL_NEG_THRESHOLD) //HAL2 is negative
 800ae9c:	4b18      	ldr	r3, [pc, #96]	; (800af00 <FIL_GetStatus+0xa0>)
 800ae9e:	8a1b      	ldrh	r3, [r3, #16]
 800aea0:	f240 52aa 	movw	r2, #1450	; 0x5aa
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d81d      	bhi.n	800aee4 <FIL_GetStatus+0x84>
			HAL_Status[2] = -1;
 800aea8:	4b16      	ldr	r3, [pc, #88]	; (800af04 <FIL_GetStatus+0xa4>)
 800aeaa:	22ff      	movs	r2, #255	; 0xff
 800aeac:	709a      	strb	r2, [r3, #2]
 800aeae:	e7dd      	b.n	800ae6c <FIL_GetStatus+0xc>
		else if (HAL0 >= HAL_POS_THRESHOLD) //HAL0 is positive
 800aeb0:	f240 6271 	movw	r2, #1649	; 0x671
 800aeb4:	4293      	cmp	r3, r2
			HAL_Status[0] = 1;
 800aeb6:	4b13      	ldr	r3, [pc, #76]	; (800af04 <FIL_GetStatus+0xa4>)
 800aeb8:	bf8c      	ite	hi
 800aeba:	2201      	movhi	r2, #1
			HAL_Status[0] = 0;
 800aebc:	2200      	movls	r2, #0
 800aebe:	701a      	strb	r2, [r3, #0]
 800aec0:	e7e0      	b.n	800ae84 <FIL_GetStatus+0x24>
		else if (HAL1 >= HAL_POS_THRESHOLD) //HAL1 is positive
 800aec2:	f240 6271 	movw	r2, #1649	; 0x671
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d906      	bls.n	800aed8 <FIL_GetStatus+0x78>
			HAL_Status[1] = 1;
 800aeca:	4b0e      	ldr	r3, [pc, #56]	; (800af04 <FIL_GetStatus+0xa4>)
 800aecc:	2201      	movs	r2, #1
 800aece:	705a      	strb	r2, [r3, #1]
			FIL.Type = 2;
 800aed0:	4b0a      	ldr	r3, [pc, #40]	; (800aefc <FIL_GetStatus+0x9c>)
 800aed2:	2202      	movs	r2, #2
 800aed4:	705a      	strb	r2, [r3, #1]
 800aed6:	e7e1      	b.n	800ae9c <FIL_GetStatus+0x3c>
			HAL_Status[1] = 0;
 800aed8:	2300      	movs	r3, #0
 800aeda:	4a0a      	ldr	r2, [pc, #40]	; (800af04 <FIL_GetStatus+0xa4>)
 800aedc:	7053      	strb	r3, [r2, #1]
			FIL.Type = 0;
 800aede:	4a07      	ldr	r2, [pc, #28]	; (800aefc <FIL_GetStatus+0x9c>)
 800aee0:	7053      	strb	r3, [r2, #1]
 800aee2:	e7db      	b.n	800ae9c <FIL_GetStatus+0x3c>
		else if (HAL2 >= HAL_POS_THRESHOLD) //HAL2 is positive
 800aee4:	f240 6271 	movw	r2, #1649	; 0x671
 800aee8:	4293      	cmp	r3, r2
			HAL_Status[2] = 1;
 800aeea:	4b06      	ldr	r3, [pc, #24]	; (800af04 <FIL_GetStatus+0xa4>)
 800aeec:	bf8c      	ite	hi
 800aeee:	2201      	movhi	r2, #1
			HAL_Status[2] = 0;
 800aef0:	2200      	movls	r2, #0
 800aef2:	709a      	strb	r2, [r3, #2]
 800aef4:	e7ba      	b.n	800ae6c <FIL_GetStatus+0xc>
 800aef6:	bf00      	nop
 800aef8:	20000c49 	.word	0x20000c49
 800aefc:	20000c84 	.word	0x20000c84
 800af00:	20000268 	.word	0x20000268
 800af04:	20000c88 	.word	0x20000c88

0800af08 <FLA_SetStatus>:
//! \brief      Sets the status of the selected partition
//! \details    Sets the status and stores in EEprom
//! \param[in]	enuPartition newPartition
//! \param[in]	enuFLA newStatus
void FLA_SetStatus (enuPartition newPartition, enuFLA newStatus)
{
 800af08:	b508      	push	{r3, lr}
	FLA[(uint8_t) newPartition].Status = newStatus;
 800af0a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800af0e:	4b11      	ldr	r3, [pc, #68]	; (800af54 <FLA_SetStatus+0x4c>)
 800af10:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800af14:	7119      	strb	r1, [r3, #4]
	if (newPartition == pApplication)
 800af16:	2801      	cmp	r0, #1
 800af18:	d008      	beq.n	800af2c <FLA_SetStatus+0x24>
		EEP_WriteEEPROM(FLA_APPLICATIONSTATUS, FLA[pApplication].Status);
	else if (newPartition == pUpdate)
 800af1a:	2802      	cmp	r0, #2
 800af1c:	d00c      	beq.n	800af38 <FLA_SetStatus+0x30>
		EEP_WriteEEPROM(FLA_UPGRADESTATUS, FLA[pUpdate].Status);
	else if (newPartition == pRollBack)
 800af1e:	2803      	cmp	r0, #3
 800af20:	d010      	beq.n	800af44 <FLA_SetStatus+0x3c>
{
 800af22:	f242 7310 	movw	r3, #10000	; 0x2710
		EEP_WriteEEPROM(FLA_ROLLBACKSTATUS, FLA[pRollBack].Status);
	for(uint32_t Counter = 0; Counter<10000; Counter++)
 800af26:	3b01      	subs	r3, #1
 800af28:	d1fd      	bne.n	800af26 <FLA_SetStatus+0x1e>
	{

	}
}
 800af2a:	bd08      	pop	{r3, pc}
		EEP_WriteEEPROM(FLA_APPLICATIONSTATUS, FLA[pApplication].Status);
 800af2c:	4b09      	ldr	r3, [pc, #36]	; (800af54 <FLA_SetStatus+0x4c>)
 800af2e:	7c19      	ldrb	r1, [r3, #16]
 800af30:	201f      	movs	r0, #31
 800af32:	f7ff ff79 	bl	800ae28 <EEP_WriteEEPROM>
 800af36:	e7f4      	b.n	800af22 <FLA_SetStatus+0x1a>
		EEP_WriteEEPROM(FLA_UPGRADESTATUS, FLA[pUpdate].Status);
 800af38:	4b06      	ldr	r3, [pc, #24]	; (800af54 <FLA_SetStatus+0x4c>)
 800af3a:	7f19      	ldrb	r1, [r3, #28]
 800af3c:	2025      	movs	r0, #37	; 0x25
 800af3e:	f7ff ff73 	bl	800ae28 <EEP_WriteEEPROM>
 800af42:	e7ee      	b.n	800af22 <FLA_SetStatus+0x1a>
		EEP_WriteEEPROM(FLA_ROLLBACKSTATUS, FLA[pRollBack].Status);
 800af44:	4b03      	ldr	r3, [pc, #12]	; (800af54 <FLA_SetStatus+0x4c>)
 800af46:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800af4a:	2021      	movs	r0, #33	; 0x21
 800af4c:	f7ff ff6c 	bl	800ae28 <EEP_WriteEEPROM>
 800af50:	e7e7      	b.n	800af22 <FLA_SetStatus+0x1a>
 800af52:	bf00      	nop
 800af54:	20000c90 	.word	0x20000c90

0800af58 <FLA_RestorePartition>:
{
 800af58:	b508      	push	{r3, lr}
	if (FLA[pRollBack].Status == fVALID)
 800af5a:	4b0d      	ldr	r3, [pc, #52]	; (800af90 <FLA_RestorePartition+0x38>)
 800af5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af60:	2b01      	cmp	r3, #1
 800af62:	d004      	beq.n	800af6e <FLA_RestorePartition+0x16>
		SER_SendReturnMessage (10,MStatImageNotValid);
 800af64:	211a      	movs	r1, #26
 800af66:	200a      	movs	r0, #10
 800af68:	f000 ff7a 	bl	800be60 <SER_SendReturnMessage>
}
 800af6c:	bd08      	pop	{r3, pc}
		FLA_SetStatus(pApplication,fROLLBACK);
 800af6e:	2104      	movs	r1, #4
 800af70:	2001      	movs	r0, #1
 800af72:	f7ff ffc9 	bl	800af08 <FLA_SetStatus>
		DataLength = SER_FillBuffer(10, Message.MType);
 800af76:	4b07      	ldr	r3, [pc, #28]	; (800af94 <FLA_RestorePartition+0x3c>)
 800af78:	78d9      	ldrb	r1, [r3, #3]
 800af7a:	200a      	movs	r0, #10
 800af7c:	f001 f866 	bl	800c04c <SER_FillBuffer>
		SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800af80:	300a      	adds	r0, #10
 800af82:	2101      	movs	r1, #1
 800af84:	b2c0      	uxtb	r0, r0
 800af86:	f000 ff6b 	bl	800be60 <SER_SendReturnMessage>
		HAL_NVIC_SystemReset();
 800af8a:	f002 fc13 	bl	800d7b4 <HAL_NVIC_SystemReset>
 800af8e:	e7ed      	b.n	800af6c <FLA_RestorePartition+0x14>
 800af90:	20000c90 	.word	0x20000c90
 800af94:	20001014 	.word	0x20001014

0800af98 <FLA_HandleUpgradeApplication>:
{
 800af98:	b508      	push	{r3, lr}
	if (FLA[pUpdate].Status == fVALID)
 800af9a:	4b0d      	ldr	r3, [pc, #52]	; (800afd0 <FLA_HandleUpgradeApplication+0x38>)
 800af9c:	7f1b      	ldrb	r3, [r3, #28]
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d004      	beq.n	800afac <FLA_HandleUpgradeApplication+0x14>
		SER_SendReturnMessage (10,MStatImageNotValid);
 800afa2:	211a      	movs	r1, #26
 800afa4:	200a      	movs	r0, #10
 800afa6:	f000 ff5b 	bl	800be60 <SER_SendReturnMessage>
}
 800afaa:	bd08      	pop	{r3, pc}
		FLA_SetStatus(pApplication,fUPDATING);
 800afac:	2102      	movs	r1, #2
 800afae:	2001      	movs	r0, #1
 800afb0:	f7ff ffaa 	bl	800af08 <FLA_SetStatus>
		DataLength = SER_FillBuffer(10, Message.MType);
 800afb4:	4b07      	ldr	r3, [pc, #28]	; (800afd4 <FLA_HandleUpgradeApplication+0x3c>)
 800afb6:	78d9      	ldrb	r1, [r3, #3]
 800afb8:	200a      	movs	r0, #10
 800afba:	f001 f847 	bl	800c04c <SER_FillBuffer>
		SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800afbe:	300a      	adds	r0, #10
 800afc0:	2101      	movs	r1, #1
 800afc2:	b2c0      	uxtb	r0, r0
 800afc4:	f000 ff4c 	bl	800be60 <SER_SendReturnMessage>
		HAL_NVIC_SystemReset();
 800afc8:	f002 fbf4 	bl	800d7b4 <HAL_NVIC_SystemReset>
 800afcc:	e7ed      	b.n	800afaa <FLA_HandleUpgradeApplication+0x12>
 800afce:	bf00      	nop
 800afd0:	20000c90 	.word	0x20000c90
 800afd4:	20001014 	.word	0x20001014

0800afd8 <FLA_SetVersion>:
//! \brief      Sets the version of the selected partition
//! \details    Sets the version and stores in EEprom
//! \param[in]	enuPartition newPartition
//! \param[in]	uint32_t newVersion
void FLA_SetVersion (enuPartition newPartition, uint32_t newVersion)
{
 800afd8:	b508      	push	{r3, lr}
	FLA[(uint8_t) newPartition].Version = newVersion;
 800afda:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800afde:	4b13      	ldr	r3, [pc, #76]	; (800b02c <FLA_SetVersion+0x54>)
 800afe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if (newPartition == pApplication)
 800afe4:	2801      	cmp	r0, #1
 800afe6:	d009      	beq.n	800affc <FLA_SetVersion+0x24>
		EEP_WriteEEPROM(FLA_APPLICATIONVERSION, FLA[pApplication].Version);
	else if (newPartition == pUpdate)
 800afe8:	2802      	cmp	r0, #2
 800afea:	d00c      	beq.n	800b006 <FLA_SetVersion+0x2e>
		EEP_WriteEEPROM(FLA_UPGRADEVERSION, FLA[pUpdate].Version);
	else if (newPartition == pRollBack)
 800afec:	2803      	cmp	r0, #3
 800afee:	d010      	beq.n	800b012 <FLA_SetVersion+0x3a>
		EEP_WriteEEPROM(FLA_ROLLBACKVERSION, FLA[pRollBack].Version);
	else if (newPartition == pBootloader)
 800aff0:	b1a8      	cbz	r0, 800b01e <FLA_SetVersion+0x46>
{
 800aff2:	f242 7310 	movw	r3, #10000	; 0x2710
		EEP_WriteEEPROM(FLA_BOOTLOADERVERSION, FLA[pBootloader].Version);
	for(uint32_t Counter = 0; Counter<10000; Counter++)
 800aff6:	3b01      	subs	r3, #1
 800aff8:	d1fd      	bne.n	800aff6 <FLA_SetVersion+0x1e>
	{

	}
}
 800affa:	bd08      	pop	{r3, pc}
		EEP_WriteEEPROM(FLA_APPLICATIONVERSION, FLA[pApplication].Version);
 800affc:	68d9      	ldr	r1, [r3, #12]
 800affe:	201e      	movs	r0, #30
 800b000:	f7ff ff12 	bl	800ae28 <EEP_WriteEEPROM>
 800b004:	e7f5      	b.n	800aff2 <FLA_SetVersion+0x1a>
		EEP_WriteEEPROM(FLA_UPGRADEVERSION, FLA[pUpdate].Version);
 800b006:	4b09      	ldr	r3, [pc, #36]	; (800b02c <FLA_SetVersion+0x54>)
 800b008:	6999      	ldr	r1, [r3, #24]
 800b00a:	2022      	movs	r0, #34	; 0x22
 800b00c:	f7ff ff0c 	bl	800ae28 <EEP_WriteEEPROM>
 800b010:	e7ef      	b.n	800aff2 <FLA_SetVersion+0x1a>
		EEP_WriteEEPROM(FLA_ROLLBACKVERSION, FLA[pRollBack].Version);
 800b012:	4b06      	ldr	r3, [pc, #24]	; (800b02c <FLA_SetVersion+0x54>)
 800b014:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b016:	2020      	movs	r0, #32
 800b018:	f7ff ff06 	bl	800ae28 <EEP_WriteEEPROM>
 800b01c:	e7e9      	b.n	800aff2 <FLA_SetVersion+0x1a>
		EEP_WriteEEPROM(FLA_BOOTLOADERVERSION, FLA[pBootloader].Version);
 800b01e:	4b03      	ldr	r3, [pc, #12]	; (800b02c <FLA_SetVersion+0x54>)
 800b020:	6819      	ldr	r1, [r3, #0]
 800b022:	2026      	movs	r0, #38	; 0x26
 800b024:	f7ff ff00 	bl	800ae28 <EEP_WriteEEPROM>
 800b028:	e7e3      	b.n	800aff2 <FLA_SetVersion+0x1a>
 800b02a:	bf00      	nop
 800b02c:	20000c90 	.word	0x20000c90

0800b030 <FLA_ErasePage>:
//-----------------------------------------------------------------------------
//! \brief      Erases a flash page
//! \details    Erases a flash page
//! \param[in] 	uint8_t NewAdress (FLA_FACTORYADDRESS or FLA_UPGRADEADDRESS)
HAL_StatusTypeDef FLA_ErasePage (uint32_t NewAddress)
{
 800b030:	b510      	push	{r4, lr}
 800b032:	b084      	sub	sp, #16
	HAL_StatusTypeDef  flashstatus;
	FLASH_EraseInitTypeDef s_eraseinit;
	uint32_t page_error = 0;
 800b034:	2300      	movs	r3, #0
 800b036:	9300      	str	r3, [sp, #0]

	s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800b038:	9301      	str	r3, [sp, #4]
	s_eraseinit.PageAddress = NewAddress;
 800b03a:	9002      	str	r0, [sp, #8]
	s_eraseinit.NbPages     = 1;
 800b03c:	2301      	movs	r3, #1
 800b03e:	9303      	str	r3, [sp, #12]
	//Unlock flash
	HAL_FLASH_Unlock();
 800b040:	f002 fd7c 	bl	800db3c <HAL_FLASH_Unlock>
	flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800b044:	4669      	mov	r1, sp
 800b046:	a801      	add	r0, sp, #4
 800b048:	f002 fefa 	bl	800de40 <HAL_FLASHEx_Erase>
 800b04c:	4604      	mov	r4, r0
	//Unlock flash
	HAL_FLASH_Lock();
 800b04e:	f002 fda3 	bl	800db98 <HAL_FLASH_Lock>
	return flashstatus;
}
 800b052:	4620      	mov	r0, r4
 800b054:	b004      	add	sp, #16
 800b056:	bd10      	pop	{r4, pc}

0800b058 <FLA_WriteBlock>:
//-----------------------------------------------------------------------------
//! \brief      Writes a certain amount of data to a flash page
//! \details    Writes a certain amount of data to a flash page with the contents of Imagedata
//! \param[in] 	uint32_t NewAdress StartAddress for the first byte
HAL_StatusTypeDef FLA_WriteBlock (uint32_t NewAddress)
{
 800b058:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_StatusTypeDef  flashstatus;
	uint8_t Counter;
	for (uint16_t i=0; i<FLA_BLOCKSIZE; i+=4)
 800b05c:	4b1e      	ldr	r3, [pc, #120]	; (800b0d8 <FLA_WriteBlock+0x80>)
 800b05e:	f103 0b40 	add.w	fp, r3, #64	; 0x40
{
 800b062:	4699      	mov	r9, r3
 800b064:	eba0 0a03 	sub.w	sl, r0, r3
	{
		uint32_t Value = ImageData[i] + (ImageData[i+1]<<8) + (ImageData[i+2]<<16) + (ImageData[i+3]<<24);
		HAL_FLASH_Unlock();
		flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, NewAddress + i, Value);
 800b068:	2702      	movs	r7, #2
 800b06a:	e005      	b.n	800b078 <FLA_WriteBlock+0x20>
		while ((flashstatus != HAL_OK) && (Counter < 100))
		{
			Counter ++;
			flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, NewAddress + i, Value);
		}
		if (Counter == 100)
 800b06c:	2c64      	cmp	r4, #100	; 0x64
 800b06e:	d029      	beq.n	800b0c4 <FLA_WriteBlock+0x6c>
	for (uint16_t i=0; i<FLA_BLOCKSIZE; i+=4)
 800b070:	f109 0904 	add.w	r9, r9, #4
 800b074:	45d9      	cmp	r9, fp
 800b076:	d028      	beq.n	800b0ca <FLA_WriteBlock+0x72>
		uint32_t Value = ImageData[i] + (ImageData[i+1]<<8) + (ImageData[i+2]<<16) + (ImageData[i+3]<<24);
 800b078:	f899 3001 	ldrb.w	r3, [r9, #1]
 800b07c:	f899 5000 	ldrb.w	r5, [r9]
 800b080:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 800b084:	f899 3002 	ldrb.w	r3, [r9, #2]
 800b088:	eb05 4503 	add.w	r5, r5, r3, lsl #16
 800b08c:	f899 3003 	ldrb.w	r3, [r9, #3]
 800b090:	eb05 6503 	add.w	r5, r5, r3, lsl #24
		HAL_FLASH_Unlock();
 800b094:	f002 fd52 	bl	800db3c <HAL_FLASH_Unlock>
		flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, NewAddress + i, Value);
 800b098:	eb0a 0609 	add.w	r6, sl, r9
 800b09c:	462a      	mov	r2, r5
 800b09e:	4631      	mov	r1, r6
 800b0a0:	4638      	mov	r0, r7
 800b0a2:	f002 fdc9 	bl	800dc38 <HAL_FLASH_Program>
		while ((flashstatus != HAL_OK) && (Counter < 100))
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	d0e2      	beq.n	800b070 <FLA_WriteBlock+0x18>
		Counter = 0;
 800b0aa:	2400      	movs	r4, #0
			Counter ++;
 800b0ac:	3401      	adds	r4, #1
 800b0ae:	b2e4      	uxtb	r4, r4
			flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, NewAddress + i, Value);
 800b0b0:	462a      	mov	r2, r5
 800b0b2:	4631      	mov	r1, r6
 800b0b4:	4638      	mov	r0, r7
 800b0b6:	f002 fdbf 	bl	800dc38 <HAL_FLASH_Program>
		while ((flashstatus != HAL_OK) && (Counter < 100))
 800b0ba:	4680      	mov	r8, r0
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	d0d5      	beq.n	800b06c <FLA_WriteBlock+0x14>
 800b0c0:	2c64      	cmp	r4, #100	; 0x64
 800b0c2:	d1f3      	bne.n	800b0ac <FLA_WriteBlock+0x54>
		{
			HAL_FLASH_Lock();
 800b0c4:	f002 fd68 	bl	800db98 <HAL_FLASH_Lock>
			return flashstatus; //Tried 100 times to write. Return error and break off
 800b0c8:	e003      	b.n	800b0d2 <FLA_WriteBlock+0x7a>
		}
	}
	HAL_FLASH_Lock();
 800b0ca:	f002 fd65 	bl	800db98 <HAL_FLASH_Lock>
	return flashstatus;
 800b0ce:	f04f 0800 	mov.w	r8, #0
}
 800b0d2:	4640      	mov	r0, r8
 800b0d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0d8:	20000cc0 	.word	0x20000cc0

0800b0dc <FLA_VerifyBlock>:
//! \brief      Verifies a flash page and compares to the data buffer
//! \details    Verifies a flash page and compares to the data buffer
//! \param[in] 	uint8_t NewAdress (FLA_FACTORYADDRESS or FLA_UPGRADEADDRESS)
//! \param[out]	uint8_t ReturnValue (0 = Failed, 1 = success)
uint8_t FLA_VerifyBlock (uint32_t NewAddress)
{
 800b0dc:	b530      	push	{r4, r5, lr}
	uint32_t FlashContent;
	uint8_t ReturnValue = 1;

	for (uint16_t i = 0; i<FLA_BLOCKSIZE; i+=4)
 800b0de:	4910      	ldr	r1, [pc, #64]	; (800b120 <FLA_VerifyBlock+0x44>)
 800b0e0:	4c10      	ldr	r4, [pc, #64]	; (800b124 <FLA_VerifyBlock+0x48>)
{
 800b0e2:	2500      	movs	r5, #0
 800b0e4:	e004      	b.n	800b0f0 <FLA_VerifyBlock+0x14>
	for (uint16_t i = 0; i<FLA_BLOCKSIZE; i+=4)
 800b0e6:	3504      	adds	r5, #4
 800b0e8:	3104      	adds	r1, #4
 800b0ea:	3404      	adds	r4, #4
 800b0ec:	2d40      	cmp	r5, #64	; 0x40
 800b0ee:	d012      	beq.n	800b116 <FLA_VerifyBlock+0x3a>
	{
		FlashContent = (*(__IO uint32_t*) (NewAddress + i));
 800b0f0:	5943      	ldr	r3, [r0, r5]
		ImageDataVerify[i] = (uint8_t) FlashContent;
 800b0f2:	700b      	strb	r3, [r1, #0]
		ImageDataVerify[i+1] = (uint8_t) (FlashContent >> 8);
 800b0f4:	0a1a      	lsrs	r2, r3, #8
 800b0f6:	704a      	strb	r2, [r1, #1]
		ImageDataVerify[i+2] = (uint8_t) (FlashContent >> 16);
 800b0f8:	0c1a      	lsrs	r2, r3, #16
 800b0fa:	708a      	strb	r2, [r1, #2]
		ImageDataVerify[i+3] = (uint8_t) (FlashContent >> 24);
 800b0fc:	0e1b      	lsrs	r3, r3, #24
 800b0fe:	70cb      	strb	r3, [r1, #3]
		for (uint8_t j=0; j<4; j++)
 800b100:	1f23      	subs	r3, r4, #4
		ImageDataVerify[i+3] = (uint8_t) (FlashContent >> 24);
 800b102:	460a      	mov	r2, r1
		{
			if (ImageData[i+j] != ImageDataVerify[i+j])
 800b104:	f813 eb01 	ldrb.w	lr, [r3], #1
 800b108:	f812 cb01 	ldrb.w	ip, [r2], #1
 800b10c:	45e6      	cmp	lr, ip
 800b10e:	d104      	bne.n	800b11a <FLA_VerifyBlock+0x3e>
		for (uint8_t j=0; j<4; j++)
 800b110:	42a3      	cmp	r3, r4
 800b112:	d1f7      	bne.n	800b104 <FLA_VerifyBlock+0x28>
 800b114:	e7e7      	b.n	800b0e6 <FLA_VerifyBlock+0xa>
				ReturnValue = 0;
				return ReturnValue;
			}
		}
	}
	return ReturnValue;
 800b116:	2001      	movs	r0, #1
 800b118:	e000      	b.n	800b11c <FLA_VerifyBlock+0x40>
				return ReturnValue;
 800b11a:	2000      	movs	r0, #0
}
 800b11c:	bd30      	pop	{r4, r5, pc}
 800b11e:	bf00      	nop
 800b120:	20000d00 	.word	0x20000d00
 800b124:	20000cc4 	.word	0x20000cc4

0800b128 <FLA_HandleSendPartitionBlock>:
{
 800b128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_IWDG_Refresh(&hiwdg);
 800b12c:	486a      	ldr	r0, [pc, #424]	; (800b2d8 <FLA_HandleSendPartitionBlock+0x1b0>)
 800b12e:	f003 f806 	bl	800e13e <HAL_IWDG_Refresh>
	if (SER_GetValue (12,4)> FLA_LENGTH / FLA_BLOCKSIZE)
 800b132:	2104      	movs	r1, #4
 800b134:	200c      	movs	r0, #12
 800b136:	f000 fef3 	bl	800bf20 <SER_GetValue>
 800b13a:	f5b0 6f9c 	cmp.w	r0, #1248	; 0x4e0
 800b13e:	d814      	bhi.n	800b16a <FLA_HandleSendPartitionBlock+0x42>
	if (SER_GetValue (16,4) == 0)
 800b140:	2104      	movs	r1, #4
 800b142:	2010      	movs	r0, #16
 800b144:	f000 feec 	bl	800bf20 <SER_GetValue>
 800b148:	bb08      	cbnz	r0, 800b18e <FLA_HandleSendPartitionBlock+0x66>
		if ((SER_GetValue (20 ,2) != 0x00) || (SER_GetValue (22 ,2) != 0x80) || (SER_GetValue (24 ,2) != 0x00) || (SER_GetValue (26 ,2) != 0x20))
 800b14a:	2102      	movs	r1, #2
 800b14c:	2014      	movs	r0, #20
 800b14e:	f000 fee7 	bl	800bf20 <SER_GetValue>
 800b152:	b928      	cbnz	r0, 800b160 <FLA_HandleSendPartitionBlock+0x38>
 800b154:	2102      	movs	r1, #2
 800b156:	2016      	movs	r0, #22
 800b158:	f000 fee2 	bl	800bf20 <SER_GetValue>
 800b15c:	2880      	cmp	r0, #128	; 0x80
 800b15e:	d00a      	beq.n	800b176 <FLA_HandleSendPartitionBlock+0x4e>
			SER_SendReturnMessage (10,MStatImageCorrupt);
 800b160:	211f      	movs	r1, #31
 800b162:	200a      	movs	r0, #10
 800b164:	f000 fe7c 	bl	800be60 <SER_SendReturnMessage>
			return;
 800b168:	e003      	b.n	800b172 <FLA_HandleSendPartitionBlock+0x4a>
		SER_SendReturnMessage (10,MStatImageTooBig);
 800b16a:	211e      	movs	r1, #30
 800b16c:	200a      	movs	r0, #10
 800b16e:	f000 fe77 	bl	800be60 <SER_SendReturnMessage>
}
 800b172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((SER_GetValue (20 ,2) != 0x00) || (SER_GetValue (22 ,2) != 0x80) || (SER_GetValue (24 ,2) != 0x00) || (SER_GetValue (26 ,2) != 0x20))
 800b176:	2102      	movs	r1, #2
 800b178:	2018      	movs	r0, #24
 800b17a:	f000 fed1 	bl	800bf20 <SER_GetValue>
 800b17e:	2800      	cmp	r0, #0
 800b180:	d1ee      	bne.n	800b160 <FLA_HandleSendPartitionBlock+0x38>
 800b182:	2102      	movs	r1, #2
 800b184:	201a      	movs	r0, #26
 800b186:	f000 fecb 	bl	800bf20 <SER_GetValue>
 800b18a:	2820      	cmp	r0, #32
 800b18c:	d1e8      	bne.n	800b160 <FLA_HandleSendPartitionBlock+0x38>
	FLA[pUpdate].NrOfBlocks = SER_GetValue (12,4);
 800b18e:	2104      	movs	r1, #4
 800b190:	200c      	movs	r0, #12
 800b192:	f000 fec5 	bl	800bf20 <SER_GetValue>
 800b196:	4601      	mov	r1, r0
 800b198:	4c50      	ldr	r4, [pc, #320]	; (800b2dc <FLA_HandleSendPartitionBlock+0x1b4>)
 800b19a:	8420      	strh	r0, [r4, #32]
	EEP_WriteEEPROM(FLA_UPGRADENROFBLOCKS, FLA[pUpdate].NrOfBlocks);
 800b19c:	2024      	movs	r0, #36	; 0x24
 800b19e:	f7ff fe43 	bl	800ae28 <EEP_WriteEEPROM>
	NrOfBlocks = FLA[pUpdate].NrOfBlocks;
 800b1a2:	f8b4 8020 	ldrh.w	r8, [r4, #32]
	CurrentBlockOld = FLA[pUpdate].LastBlock;
 800b1a6:	8be2      	ldrh	r2, [r4, #30]
 800b1a8:	4b4d      	ldr	r3, [pc, #308]	; (800b2e0 <FLA_HandleSendPartitionBlock+0x1b8>)
 800b1aa:	801a      	strh	r2, [r3, #0]
	FLA[pUpdate].LastBlock = SER_GetValue (16,4);
 800b1ac:	2104      	movs	r1, #4
 800b1ae:	2010      	movs	r0, #16
 800b1b0:	f000 feb6 	bl	800bf20 <SER_GetValue>
 800b1b4:	4601      	mov	r1, r0
 800b1b6:	83e0      	strh	r0, [r4, #30]
	EEP_WriteEEPROM(FLA_UPGRADELASTBLOCK, FLA[pUpdate].LastBlock);
 800b1b8:	2023      	movs	r0, #35	; 0x23
 800b1ba:	f7ff fe35 	bl	800ae28 <EEP_WriteEEPROM>
	CurrentBlock = FLA[pUpdate].LastBlock;
 800b1be:	8be4      	ldrh	r4, [r4, #30]
	if (CurrentBlock == 0) //First data received
 800b1c0:	b164      	cbz	r4, 800b1dc <FLA_HandleSendPartitionBlock+0xb4>
	if ((CurrentBlock < NrOfBlocks) && (CurrentBlock - CurrentBlockOld <= 1) && (CurrentBlockOld <= CurrentBlock)) //Valid block numbers
 800b1c2:	45a0      	cmp	r8, r4
 800b1c4:	d905      	bls.n	800b1d2 <FLA_HandleSendPartitionBlock+0xaa>
 800b1c6:	46a1      	mov	r9, r4
 800b1c8:	4b45      	ldr	r3, [pc, #276]	; (800b2e0 <FLA_HandleSendPartitionBlock+0x1b8>)
 800b1ca:	881b      	ldrh	r3, [r3, #0]
 800b1cc:	1ae2      	subs	r2, r4, r3
 800b1ce:	2a01      	cmp	r2, #1
 800b1d0:	dd2a      	ble.n	800b228 <FLA_HandleSendPartitionBlock+0x100>
		SER_SendReturnMessage (10,MStatBlockNrError);
 800b1d2:	2114      	movs	r1, #20
 800b1d4:	200a      	movs	r0, #10
 800b1d6:	f000 fe43 	bl	800be60 <SER_SendReturnMessage>
 800b1da:	e7ca      	b.n	800b172 <FLA_HandleSendPartitionBlock+0x4a>
		FLA_SetVersion(pUpdate, SER_GetValue(8,4));
 800b1dc:	2104      	movs	r1, #4
 800b1de:	2008      	movs	r0, #8
 800b1e0:	f000 fe9e 	bl	800bf20 <SER_GetValue>
 800b1e4:	4601      	mov	r1, r0
 800b1e6:	2002      	movs	r0, #2
 800b1e8:	f7ff fef6 	bl	800afd8 <FLA_SetVersion>
		FLA_SetStatus(pUpdate, fUPDATING);
 800b1ec:	2102      	movs	r1, #2
 800b1ee:	4608      	mov	r0, r1
 800b1f0:	f7ff fe8a 	bl	800af08 <FLA_SetStatus>
		memset(ImageData, 0, FLA_BLOCKSIZE); //Clear the array to zero before filling the block
 800b1f4:	2240      	movs	r2, #64	; 0x40
 800b1f6:	2100      	movs	r1, #0
 800b1f8:	483a      	ldr	r0, [pc, #232]	; (800b2e4 <FLA_HandleSendPartitionBlock+0x1bc>)
 800b1fa:	f004 ff23 	bl	8010044 <memset>
		CurrentBlockOld = 0;
 800b1fe:	4b38      	ldr	r3, [pc, #224]	; (800b2e0 <FLA_HandleSendPartitionBlock+0x1b8>)
 800b200:	2200      	movs	r2, #0
 800b202:	801a      	strh	r2, [r3, #0]
	if ((CurrentBlock < NrOfBlocks) && (CurrentBlock - CurrentBlockOld <= 1) && (CurrentBlockOld <= CurrentBlock)) //Valid block numbers
 800b204:	f1b8 0f00 	cmp.w	r8, #0
 800b208:	d0e3      	beq.n	800b1d2 <FLA_HandleSendPartitionBlock+0xaa>
		CurrentBlockOld = CurrentBlock;
 800b20a:	4b35      	ldr	r3, [pc, #212]	; (800b2e0 <FLA_HandleSendPartitionBlock+0x1b8>)
 800b20c:	801c      	strh	r4, [r3, #0]
		if (FLA[pUpdate].Version == SER_GetValue(8,4))
 800b20e:	4b33      	ldr	r3, [pc, #204]	; (800b2dc <FLA_HandleSendPartitionBlock+0x1b4>)
 800b210:	699c      	ldr	r4, [r3, #24]
 800b212:	2104      	movs	r1, #4
 800b214:	2008      	movs	r0, #8
 800b216:	f000 fe83 	bl	800bf20 <SER_GetValue>
 800b21a:	4284      	cmp	r4, r0
 800b21c:	d034      	beq.n	800b288 <FLA_HandleSendPartitionBlock+0x160>
			SER_SendReturnMessage (10,MStatWrongVersion);
 800b21e:	2119      	movs	r1, #25
 800b220:	200a      	movs	r0, #10
 800b222:	f000 fe1d 	bl	800be60 <SER_SendReturnMessage>
		if (FLA[pUpdate].Version == SER_GetValue(8,4))
 800b226:	e7a4      	b.n	800b172 <FLA_HandleSendPartitionBlock+0x4a>
	if ((CurrentBlock < NrOfBlocks) && (CurrentBlock - CurrentBlockOld <= 1) && (CurrentBlockOld <= CurrentBlock)) //Valid block numbers
 800b228:	42a3      	cmp	r3, r4
 800b22a:	d8d2      	bhi.n	800b1d2 <FLA_HandleSendPartitionBlock+0xaa>
		CurrentBlockOld = CurrentBlock;
 800b22c:	4b2c      	ldr	r3, [pc, #176]	; (800b2e0 <FLA_HandleSendPartitionBlock+0x1b8>)
 800b22e:	801c      	strh	r4, [r3, #0]
		if (FLA[pUpdate].Version == SER_GetValue(8,4))
 800b230:	4b2a      	ldr	r3, [pc, #168]	; (800b2dc <FLA_HandleSendPartitionBlock+0x1b4>)
 800b232:	699d      	ldr	r5, [r3, #24]
 800b234:	2104      	movs	r1, #4
 800b236:	2008      	movs	r0, #8
 800b238:	f000 fe72 	bl	800bf20 <SER_GetValue>
 800b23c:	4285      	cmp	r5, r0
 800b23e:	d1ee      	bne.n	800b21e <FLA_HandleSendPartitionBlock+0xf6>
		CurrentAddress = FLA_UPGRADEADDRESS + (CurrentBlock * FLA_BLOCKSIZE);
 800b240:	f504 1a00 	add.w	sl, r4, #2097152	; 0x200000
 800b244:	f50a 6ac8 	add.w	sl, sl, #1600	; 0x640
 800b248:	ea4f 1a8a 	mov.w	sl, sl, lsl #6
			if (CurrentBlock % FLA_BLOCKSPERPAGE == 0)//new page
 800b24c:	f014 0f03 	tst.w	r4, #3
 800b250:	d01e      	beq.n	800b290 <FLA_HandleSendPartitionBlock+0x168>
			for (uint8_t i = 0; i<FLA_BLOCKSIZE; i++)
 800b252:	4e24      	ldr	r6, [pc, #144]	; (800b2e4 <FLA_HandleSendPartitionBlock+0x1bc>)
 800b254:	1e75      	subs	r5, r6, #1
 800b256:	363f      	adds	r6, #63	; 0x3f
		CurrentAddress = FLA_UPGRADEADDRESS + (CurrentBlock * FLA_BLOCKSIZE);
 800b258:	2414      	movs	r4, #20
				ImageData[i] = SER_GetValue (20 + (i * 2),2);
 800b25a:	2702      	movs	r7, #2
 800b25c:	4639      	mov	r1, r7
 800b25e:	4620      	mov	r0, r4
 800b260:	f000 fe5e 	bl	800bf20 <SER_GetValue>
 800b264:	f805 0f01 	strb.w	r0, [r5, #1]!
			for (uint8_t i = 0; i<FLA_BLOCKSIZE; i++)
 800b268:	3402      	adds	r4, #2
 800b26a:	b2e4      	uxtb	r4, r4
 800b26c:	42b5      	cmp	r5, r6
 800b26e:	d1f5      	bne.n	800b25c <FLA_HandleSendPartitionBlock+0x134>
			FLA_WriteBlock (CurrentAddress);
 800b270:	4650      	mov	r0, sl
 800b272:	f7ff fef1 	bl	800b058 <FLA_WriteBlock>
			if (FLA_VerifyBlock (CurrentAddress) == 0)
 800b276:	4650      	mov	r0, sl
 800b278:	f7ff ff30 	bl	800b0dc <FLA_VerifyBlock>
 800b27c:	b9b8      	cbnz	r0, 800b2ae <FLA_HandleSendPartitionBlock+0x186>
				SER_SendReturnMessage (10,MStatVerifyError);
 800b27e:	211b      	movs	r1, #27
 800b280:	200a      	movs	r0, #10
 800b282:	f000 fded 	bl	800be60 <SER_SendReturnMessage>
				return;
 800b286:	e774      	b.n	800b172 <FLA_HandleSendPartitionBlock+0x4a>
	if ((CurrentBlock < NrOfBlocks) && (CurrentBlock - CurrentBlockOld <= 1) && (CurrentBlockOld <= CurrentBlock)) //Valid block numbers
 800b288:	f04f 0900 	mov.w	r9, #0
		CurrentAddress = FLA_UPGRADEADDRESS + (CurrentBlock * FLA_BLOCKSIZE);
 800b28c:	f8df a058 	ldr.w	sl, [pc, #88]	; 800b2e8 <FLA_HandleSendPartitionBlock+0x1c0>
				if (FLA_ErasePage (CurrentAddress) != HAL_OK)
 800b290:	4650      	mov	r0, sl
 800b292:	f7ff fecd 	bl	800b030 <FLA_ErasePage>
 800b296:	b928      	cbnz	r0, 800b2a4 <FLA_HandleSendPartitionBlock+0x17c>
				memset(ImageData, 0, FLA_BLOCKSIZE);
 800b298:	2240      	movs	r2, #64	; 0x40
 800b29a:	2100      	movs	r1, #0
 800b29c:	4811      	ldr	r0, [pc, #68]	; (800b2e4 <FLA_HandleSendPartitionBlock+0x1bc>)
 800b29e:	f004 fed1 	bl	8010044 <memset>
 800b2a2:	e7d6      	b.n	800b252 <FLA_HandleSendPartitionBlock+0x12a>
					SER_SendReturnMessage (10,MStatErasePageError);
 800b2a4:	211c      	movs	r1, #28
 800b2a6:	200a      	movs	r0, #10
 800b2a8:	f000 fdda 	bl	800be60 <SER_SendReturnMessage>
					return;
 800b2ac:	e761      	b.n	800b172 <FLA_HandleSendPartitionBlock+0x4a>
				DataLength = SER_FillBuffer(10, Message.MType);
 800b2ae:	4b0f      	ldr	r3, [pc, #60]	; (800b2ec <FLA_HandleSendPartitionBlock+0x1c4>)
 800b2b0:	78d9      	ldrb	r1, [r3, #3]
 800b2b2:	200a      	movs	r0, #10
 800b2b4:	f000 feca 	bl	800c04c <SER_FillBuffer>
				SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800b2b8:	300a      	adds	r0, #10
 800b2ba:	2101      	movs	r1, #1
 800b2bc:	b2c0      	uxtb	r0, r0
 800b2be:	f000 fdcf 	bl	800be60 <SER_SendReturnMessage>
				if (CurrentBlock == NrOfBlocks - 1) //Last block
 800b2c2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b2c6:	45c8      	cmp	r8, r9
 800b2c8:	f47f af53 	bne.w	800b172 <FLA_HandleSendPartitionBlock+0x4a>
					FLA_SetStatus(pUpdate, fVALID);
 800b2cc:	2101      	movs	r1, #1
 800b2ce:	2002      	movs	r0, #2
 800b2d0:	f7ff fe1a 	bl	800af08 <FLA_SetStatus>
 800b2d4:	e74d      	b.n	800b172 <FLA_HandleSendPartitionBlock+0x4a>
 800b2d6:	bf00      	nop
 800b2d8:	200003bc 	.word	0x200003bc
 800b2dc:	20000c90 	.word	0x20000c90
 800b2e0:	20000c8c 	.word	0x20000c8c
 800b2e4:	20000cc0 	.word	0x20000cc0
 800b2e8:	08019000 	.word	0x08019000
 800b2ec:	20001014 	.word	0x20001014

0800b2f0 <FLA_Init>:
//-----------------------------------------------------------------------------
//! \brief      Initalizes the flash module
//! \details    Initalizes the flash module
//! \params		None
void FLA_Init (void)
{
 800b2f0:	b510      	push	{r4, lr}
#ifdef BOOTLOADER
	FLA_SetVersion(pBootloader,WRK_GetSoftwareVersion());
	FLA[pApplication].Version = EEP_ReadEEPROM(FLA_APPLICATIONVERSION);
	FLA[pApplication].Status = EEP_ReadEEPROM(FLA_APPLICATIONSTATUS);
#else
	FLA[pBootloader].Version = EEP_ReadEEPROM(FLA_BOOTLOADERVERSION);
 800b2f2:	2026      	movs	r0, #38	; 0x26
 800b2f4:	f7ff fdad 	bl	800ae52 <EEP_ReadEEPROM>
 800b2f8:	4c15      	ldr	r4, [pc, #84]	; (800b350 <FLA_Init+0x60>)
 800b2fa:	6020      	str	r0, [r4, #0]
	FLA[pApplication].Version = WRK_GetSoftwareVersion();
 800b2fc:	f7fe fa46 	bl	800978c <WRK_GetSoftwareVersion>
 800b300:	4601      	mov	r1, r0
 800b302:	60e0      	str	r0, [r4, #12]
	FLA[pApplication].Status = fVALID;
 800b304:	2301      	movs	r3, #1
 800b306:	7423      	strb	r3, [r4, #16]
	//Write current application version
	EEP_WriteEEPROM(FLA_APPLICATIONVERSION, FLA[pApplication].Version);
 800b308:	201e      	movs	r0, #30
 800b30a:	f7ff fd8d 	bl	800ae28 <EEP_WriteEEPROM>
	EEP_WriteEEPROM(FLA_APPLICATIONSTATUS, FLA[pApplication].Status);
 800b30e:	7c21      	ldrb	r1, [r4, #16]
 800b310:	201f      	movs	r0, #31
 800b312:	f7ff fd89 	bl	800ae28 <EEP_WriteEEPROM>
#endif
	FLA[pRollBack].Version = EEP_ReadEEPROM(FLA_ROLLBACKVERSION);
 800b316:	2020      	movs	r0, #32
 800b318:	f7ff fd9b 	bl	800ae52 <EEP_ReadEEPROM>
 800b31c:	6260      	str	r0, [r4, #36]	; 0x24
	FLA[pRollBack].Status = EEP_ReadEEPROM(FLA_ROLLBACKSTATUS);
 800b31e:	2021      	movs	r0, #33	; 0x21
 800b320:	f7ff fd97 	bl	800ae52 <EEP_ReadEEPROM>
 800b324:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	FLA[pUpdate].Version = EEP_ReadEEPROM(FLA_UPGRADEVERSION);
 800b328:	2022      	movs	r0, #34	; 0x22
 800b32a:	f7ff fd92 	bl	800ae52 <EEP_ReadEEPROM>
 800b32e:	61a0      	str	r0, [r4, #24]
	FLA[pUpdate].LastBlock = EEP_ReadEEPROM(FLA_UPGRADELASTBLOCK);
 800b330:	2023      	movs	r0, #35	; 0x23
 800b332:	f7ff fd8e 	bl	800ae52 <EEP_ReadEEPROM>
 800b336:	83e0      	strh	r0, [r4, #30]
	FLA[pUpdate].NrOfBlocks = EEP_ReadEEPROM(FLA_UPGRADENROFBLOCKS);
 800b338:	2024      	movs	r0, #36	; 0x24
 800b33a:	f7ff fd8a 	bl	800ae52 <EEP_ReadEEPROM>
 800b33e:	8420      	strh	r0, [r4, #32]
	FLA[pUpdate].Status = EEP_ReadEEPROM(FLA_UPGRADESTATUS);
 800b340:	2025      	movs	r0, #37	; 0x25
 800b342:	f7ff fd86 	bl	800ae52 <EEP_ReadEEPROM>
 800b346:	7720      	strb	r0, [r4, #28]
	FLA[pRollBack].NrOfBlocks = FLA_LENGTH / FLA_BLOCKSIZE;
 800b348:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
 800b34c:	85a3      	strh	r3, [r4, #44]	; 0x2c
}
 800b34e:	bd10      	pop	{r4, pc}
 800b350:	20000c90 	.word	0x20000c90

0800b354 <LED_StorePrevious>:
//! \LED container
stcLed LED[WS2812_NUM];
stcLed LEDPREVIOUS[WS2812_NUM];

void LED_StorePrevious (uint8_t newLED)
{
 800b354:	b570      	push	{r4, r5, r6, lr}
	uint8_t	FirstLED;
	uint8_t	LastLED;

	FirstLED = newLED;
	LastLED = newLED;
	if (newLED == WATERTANKLEDS) LastLED ++;
 800b356:	4686      	mov	lr, r0
 800b358:	2801      	cmp	r0, #1
 800b35a:	bf38      	it	cc
 800b35c:	f04f 0e01 	movcc.w	lr, #1
	for (uint8_t i = FirstLED; i<= LastLED; i ++)
	{
		LEDPREVIOUS[i].BreathInterval = LED[i].BreathInterval;
 800b360:	4d15      	ldr	r5, [pc, #84]	; (800b3b8 <LED_StorePrevious+0x64>)
 800b362:	4c16      	ldr	r4, [pc, #88]	; (800b3bc <LED_StorePrevious+0x68>)
 800b364:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
 800b368:	eb05 0cc2 	add.w	ip, r5, r2, lsl #3
 800b36c:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
 800b370:	f893 6028 	ldrb.w	r6, [r3, #40]	; 0x28
 800b374:	f88c 6028 	strb.w	r6, [ip, #40]	; 0x28
		LEDPREVIOUS[i].FadeInInterval = LED[i].FadeInInterval;
 800b378:	f893 602c 	ldrb.w	r6, [r3, #44]	; 0x2c
 800b37c:	f88c 602c 	strb.w	r6, [ip, #44]	; 0x2c
		LEDPREVIOUS[i].FadeOutInterval = LED[i].FadeOutInterval;
 800b380:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
 800b384:	f88c 6030 	strb.w	r6, [ip, #48]	; 0x30
		LEDPREVIOUS[i].BlinkTimeOn = LED[i].BlinkTimeOn;
 800b388:	8b1e      	ldrh	r6, [r3, #24]
 800b38a:	f8ac 6018 	strh.w	r6, [ip, #24]
		LEDPREVIOUS[i].BlinkTimeOff = LED[i].BlinkTimeOff;
 800b38e:	8c1e      	ldrh	r6, [r3, #32]
 800b390:	f8ac 6020 	strh.w	r6, [ip, #32]
		LEDPREVIOUS[i].Effect = LED[i].Effect;
 800b394:	7c1b      	ldrb	r3, [r3, #16]
 800b396:	f88c 3010 	strb.w	r3, [ip, #16]
		LEDPREVIOUS[i].Color = LED[i].Color;
 800b39a:	f854 3032 	ldr.w	r3, [r4, r2, lsl #3]
 800b39e:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
		LEDPREVIOUS[i].Intensity = LED[i].Intensity;
 800b3a2:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
 800b3a6:	7d1b      	ldrb	r3, [r3, #20]
 800b3a8:	f88c 3014 	strb.w	r3, [ip, #20]
	for (uint8_t i = FirstLED; i<= LastLED; i ++)
 800b3ac:	3001      	adds	r0, #1
 800b3ae:	b2c0      	uxtb	r0, r0
 800b3b0:	4570      	cmp	r0, lr
 800b3b2:	d9d7      	bls.n	800b364 <LED_StorePrevious+0x10>
	}
}
 800b3b4:	bd70      	pop	{r4, r5, r6, pc}
 800b3b6:	bf00      	nop
 800b3b8:	20000ea8 	.word	0x20000ea8
 800b3bc:	20000d40 	.word	0x20000d40

0800b3c0 <LED_RestorePrevious>:
void LED_RestorePrevious (uint8_t newLED)
{
 800b3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t	FirstLED;
	uint8_t	LastLED;

	FirstLED = newLED;
	LastLED = newLED;
	if (newLED == WATERTANKLEDS) LastLED ++;
 800b3c2:	4606      	mov	r6, r0
 800b3c4:	2801      	cmp	r0, #1
 800b3c6:	bf38      	it	cc
 800b3c8:	2601      	movcc	r6, #1
	for (uint8_t i = FirstLED; i<= LastLED; i ++)
	{
		LED[i].BreathInterval = LEDPREVIOUS[i].BreathInterval;
 800b3ca:	4c15      	ldr	r4, [pc, #84]	; (800b420 <LED_RestorePrevious+0x60>)
 800b3cc:	4d15      	ldr	r5, [pc, #84]	; (800b424 <LED_RestorePrevious+0x64>)
		LED[i].BlinkTimeOn = LEDPREVIOUS[i].BlinkTimeOn;
		LED[i].BlinkTimeOff = LEDPREVIOUS[i].BlinkTimeOff;
		LED[i].Effect = LEDPREVIOUS[i].Effect;
		LED[i].Color = LEDPREVIOUS[i].Color;
		LED[i].Intensity = LEDPREVIOUS[i].Intensity;
		LED[i].TimeCycleCounter = 0;
 800b3ce:	f04f 0e00 	mov.w	lr, #0
		LED[i].BreathInterval = LEDPREVIOUS[i].BreathInterval;
 800b3d2:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 800b3d6:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 800b3da:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 800b3de:	f892 7028 	ldrb.w	r7, [r2, #40]	; 0x28
 800b3e2:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
		LED[i].FadeInInterval = LEDPREVIOUS[i].FadeInInterval;
 800b3e6:	f892 702c 	ldrb.w	r7, [r2, #44]	; 0x2c
 800b3ea:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
		LED[i].FadeOutInterval = LEDPREVIOUS[i].FadeOutInterval;
 800b3ee:	f892 7030 	ldrb.w	r7, [r2, #48]	; 0x30
 800b3f2:	f883 7030 	strb.w	r7, [r3, #48]	; 0x30
		LED[i].BlinkTimeOn = LEDPREVIOUS[i].BlinkTimeOn;
 800b3f6:	8b17      	ldrh	r7, [r2, #24]
 800b3f8:	831f      	strh	r7, [r3, #24]
		LED[i].BlinkTimeOff = LEDPREVIOUS[i].BlinkTimeOff;
 800b3fa:	8c17      	ldrh	r7, [r2, #32]
 800b3fc:	841f      	strh	r7, [r3, #32]
		LED[i].Effect = LEDPREVIOUS[i].Effect;
 800b3fe:	7c17      	ldrb	r7, [r2, #16]
 800b400:	741f      	strb	r7, [r3, #16]
		LED[i].Color = LEDPREVIOUS[i].Color;
 800b402:	f855 7031 	ldr.w	r7, [r5, r1, lsl #3]
 800b406:	f844 7031 	str.w	r7, [r4, r1, lsl #3]
		LED[i].Intensity = LEDPREVIOUS[i].Intensity;
 800b40a:	7d12      	ldrb	r2, [r2, #20]
 800b40c:	751a      	strb	r2, [r3, #20]
		LED[i].TimeCycleCounter = 0;
 800b40e:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 800b412:	f8a3 e036 	strh.w	lr, [r3, #54]	; 0x36
	for (uint8_t i = FirstLED; i<= LastLED; i ++)
 800b416:	3001      	adds	r0, #1
 800b418:	b2c0      	uxtb	r0, r0
 800b41a:	42b0      	cmp	r0, r6
 800b41c:	d9d9      	bls.n	800b3d2 <LED_RestorePrevious+0x12>
	}
}
 800b41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b420:	20000d40 	.word	0x20000d40
 800b424:	20000ea8 	.word	0x20000ea8

0800b428 <LED_Set>:
//! \param[in]  uint8_t newLED, enuLedEffect newEffect, uint8_t newR
//! \param[in]  uint8_t newG, uint8_t newB, uint8_t newIntensity
//! \param[in]  uint16_t newBlinkTimeOn, uint16_t newBlinkTimeOff, uint8_t newStepTime
//! \param[in]  uint16_t newTimeCycles, uint8_t newRestorePrevious
void LED_Set (uint8_t newLED, uint8_t newEffect, uint8_t newR, uint8_t newG, uint8_t newB, uint8_t newIntensity, uint16_t newBlinkTimeOn, uint16_t newBlinkTimeOff, uint8_t newStepTime, uint16_t newTimeCycles, uint8_t newRestorePrevious)
{
 800b428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b42c:	b085      	sub	sp, #20
 800b42e:	4604      	mov	r4, r0
 800b430:	460d      	mov	r5, r1
 800b432:	4616      	mov	r6, r2
 800b434:	469a      	mov	sl, r3
 800b436:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800b43a:	9300      	str	r3, [sp, #0]
 800b43c:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 800b440:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800b444:	9301      	str	r3, [sp, #4]
 800b446:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800b44a:	9302      	str	r3, [sp, #8]
 800b44c:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 800b450:	f8bd b04c 	ldrh.w	fp, [sp, #76]	; 0x4c
 800b454:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800b458:	9303      	str	r3, [sp, #12]
	uint8_t	FirstLED;
	uint8_t	LastLED;

	FirstLED = newLED;
	LastLED = newLED;
	if (newLED == WATERTANKLEDS) LastLED ++;
 800b45a:	4607      	mov	r7, r0
 800b45c:	2801      	cmp	r0, #1
 800b45e:	bf38      	it	cc
 800b460:	2701      	movcc	r7, #1
	//Store previous setting if previous setting needs to be restored and TimeCycles > 0 and Effect != FADEIN or FADEOUT or SWITCHEDOFF
	//Restore previous is only done for SWITCHEDON, BLINKING and BREATHING. Others will be ignored.
	if ((newTimeCycles > 0) &&(newRestorePrevious) && (newEffect != FADEIN) && (newEffect != FADEOUT) && (newEffect != SWITCHEDOFF))
 800b462:	f1bb 0f00 	cmp.w	fp, #0
 800b466:	d008      	beq.n	800b47a <LED_Set+0x52>
 800b468:	b123      	cbz	r3, 800b474 <LED_Set+0x4c>
 800b46a:	1f0b      	subs	r3, r1, #4
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d900      	bls.n	800b474 <LED_Set+0x4c>
 800b472:	b999      	cbnz	r1, 800b49c <LED_Set+0x74>
	{
		LED_StorePrevious (newLED);
	}

	for (uint8_t i = FirstLED; i<= LastLED; i ++)
 800b474:	42a7      	cmp	r7, r4
 800b476:	f0c0 808a 	bcc.w	800b58e <LED_Set+0x166>
			LED[i].BlinkTimeOffNext = newBlinkTimeOff;
		}
		LED[i].EffectNext = newEffect;
		if (newR + newB + newG > 0) //If all are 0 color is unchanged
		{
			LED[i].ColorNext = newR << 16 | newG << 8 | newB;
 800b47a:	9900      	ldr	r1, [sp, #0]
 800b47c:	ea41 230a 	orr.w	r3, r1, sl, lsl #8
 800b480:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800b484:	9300      	str	r3, [sp, #0]
			LED[i].RestorePreviousNext = newRestorePrevious;
			LED[i].Counter = 0;
		}
		else
		{
			LED[i].TimeCyclesNext = 0;
 800b486:	4b43      	ldr	r3, [pc, #268]	; (800b594 <LED_Set+0x16c>)
 800b488:	2200      	movs	r2, #0
		if (((newEffect == SWITCHEDON) || (newEffect == BLINKING) || (newEffect == BREATHING)) && (newTimeCycles > 0))
 800b48a:	f105 3cff 	add.w	ip, r5, #4294967295
 800b48e:	fa5f fc8c 	uxtb.w	ip, ip
		if (newR + newB + newG > 0) //If all are 0 color is unchanged
 800b492:	440e      	add	r6, r1
 800b494:	4456      	add	r6, sl
 800b496:	46be      	mov	lr, r7
 800b498:	46b2      	mov	sl, r6
 800b49a:	e044      	b.n	800b526 <LED_Set+0xfe>
		LED_StorePrevious (newLED);
 800b49c:	f7ff ff5a 	bl	800b354 <LED_StorePrevious>
 800b4a0:	e7e8      	b.n	800b474 <LED_Set+0x4c>
		if (newEffect == BREATHING) LED[i].BreathIntervalNext = newStepTime;
 800b4a2:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800b4a6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b4aa:	f8a1 802a 	strh.w	r8, [r1, #42]	; 0x2a
		if (newEffect == BLINKING)
 800b4ae:	2d02      	cmp	r5, #2
 800b4b0:	d143      	bne.n	800b53a <LED_Set+0x112>
			LED[i].BlinkTimeOnNext = newBlinkTimeOn;
 800b4b2:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800b4b6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800b4ba:	9901      	ldr	r1, [sp, #4]
 800b4bc:	61c1      	str	r1, [r0, #28]
			LED[i].BlinkTimeOffNext = newBlinkTimeOff;
 800b4be:	9e02      	ldr	r6, [sp, #8]
 800b4c0:	6246      	str	r6, [r0, #36]	; 0x24
		LED[i].EffectNext = newEffect;
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	8245      	strh	r5, [r0, #18]
		if (newR + newB + newG > 0) //If all are 0 color is unchanged
 800b4c6:	f1ba 0f00 	cmp.w	sl, #0
 800b4ca:	d042      	beq.n	800b552 <LED_Set+0x12a>
 800b4cc:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800b4d0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800b4d4:	9f00      	ldr	r7, [sp, #0]
 800b4d6:	6087      	str	r7, [r0, #8]
 800b4d8:	2700      	movs	r7, #0
 800b4da:	60c7      	str	r7, [r0, #12]
		LED[i].IntensityNext = newIntensity;
 800b4dc:	f8a0 9016 	strh.w	r9, [r0, #22]
		if (((newEffect == SWITCHEDON) || (newEffect == BLINKING) || (newEffect == BREATHING)) && (newTimeCycles > 0))
 800b4e0:	e047      	b.n	800b572 <LED_Set+0x14a>
		if (newEffect == FADEOUT) LED[i].FadeOutIntervalNext= newStepTime;
 800b4e2:	2d05      	cmp	r5, #5
 800b4e4:	d1e3      	bne.n	800b4ae <LED_Set+0x86>
 800b4e6:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800b4ea:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800b4ee:	f8a0 8032 	strh.w	r8, [r0, #50]	; 0x32
		LED[i].EffectNext = newEffect;
 800b4f2:	4621      	mov	r1, r4
 800b4f4:	8245      	strh	r5, [r0, #18]
		if (newR + newB + newG > 0) //If all are 0 color is unchanged
 800b4f6:	f1ba 0f00 	cmp.w	sl, #0
 800b4fa:	d02a      	beq.n	800b552 <LED_Set+0x12a>
 800b4fc:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800b500:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800b504:	9f00      	ldr	r7, [sp, #0]
 800b506:	6087      	str	r7, [r0, #8]
 800b508:	2700      	movs	r7, #0
 800b50a:	60c7      	str	r7, [r0, #12]
		LED[i].IntensityNext = newIntensity;
 800b50c:	f8a0 9016 	strh.w	r9, [r0, #22]
			LED[i].TimeCyclesNext = 0;
 800b510:	eb01 00c1 	add.w	r0, r1, r1, lsl #3
 800b514:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800b518:	6402      	str	r2, [r0, #64]	; 0x40
			LED[i].RestorePreviousNext = 0;
 800b51a:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
	for (uint8_t i = FirstLED; i<= LastLED; i ++)
 800b51e:	3401      	adds	r4, #1
 800b520:	b2e4      	uxtb	r4, r4
 800b522:	45a6      	cmp	lr, r4
 800b524:	d333      	bcc.n	800b58e <LED_Set+0x166>
		if (newEffect == BREATHING) LED[i].BreathIntervalNext = newStepTime;
 800b526:	2d03      	cmp	r5, #3
 800b528:	d0bb      	beq.n	800b4a2 <LED_Set+0x7a>
		if (newEffect == FADEIN) LED[i].FadeInIntervalNext= newStepTime;
 800b52a:	2d04      	cmp	r5, #4
 800b52c:	d1d9      	bne.n	800b4e2 <LED_Set+0xba>
 800b52e:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800b532:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b536:	f8a1 802e 	strh.w	r8, [r1, #46]	; 0x2e
		LED[i].EffectNext = newEffect;
 800b53a:	4621      	mov	r1, r4
 800b53c:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800b540:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800b544:	8245      	strh	r5, [r0, #18]
		if (newR + newB + newG > 0) //If all are 0 color is unchanged
 800b546:	f1ba 0f00 	cmp.w	sl, #0
 800b54a:	d002      	beq.n	800b552 <LED_Set+0x12a>
			LED[i].ColorNext = newR << 16 | newG << 8 | newB;
 800b54c:	9f00      	ldr	r7, [sp, #0]
 800b54e:	2600      	movs	r6, #0
 800b550:	e004      	b.n	800b55c <LED_Set+0x134>
			LED[i].ColorNext = LED[i].Color;
 800b552:	eb01 00c1 	add.w	r0, r1, r1, lsl #3
 800b556:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
 800b55a:	4616      	mov	r6, r2
 800b55c:	eb01 00c1 	add.w	r0, r1, r1, lsl #3
 800b560:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800b564:	6087      	str	r7, [r0, #8]
 800b566:	60c6      	str	r6, [r0, #12]
		LED[i].IntensityNext = newIntensity;
 800b568:	f8a0 9016 	strh.w	r9, [r0, #22]
		if (((newEffect == SWITCHEDON) || (newEffect == BLINKING) || (newEffect == BREATHING)) && (newTimeCycles > 0))
 800b56c:	f1bc 0f02 	cmp.w	ip, #2
 800b570:	d8ce      	bhi.n	800b510 <LED_Set+0xe8>
 800b572:	f1bb 0f00 	cmp.w	fp, #0
 800b576:	d0cb      	beq.n	800b510 <LED_Set+0xe8>
			LED[i].TimeCyclesNext = newTimeCycles;
 800b578:	eb01 00c1 	add.w	r0, r1, r1, lsl #3
 800b57c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800b580:	f8c0 b040 	str.w	fp, [r0, #64]	; 0x40
			LED[i].RestorePreviousNext = newRestorePrevious;
 800b584:	9e03      	ldr	r6, [sp, #12]
 800b586:	f8a0 6046 	strh.w	r6, [r0, #70]	; 0x46
			LED[i].Counter = 0;
 800b58a:	8682      	strh	r2, [r0, #52]	; 0x34
 800b58c:	e7c7      	b.n	800b51e <LED_Set+0xf6>
		}
	}
}
 800b58e:	b005      	add	sp, #20
 800b590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b594:	20000d40 	.word	0x20000d40

0800b598 <LED_SetNext>:
void LED_SetNext (uint8_t newLED)
{
 800b598:	b430      	push	{r4, r5}
	if (LED[newLED].EffectNext == -1)
 800b59a:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
 800b59e:	4b3f      	ldr	r3, [pc, #252]	; (800b69c <LED_SetNext+0x104>)
 800b5a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5a4:	f9b3 1012 	ldrsh.w	r1, [r3, #18]
 800b5a8:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b5ac:	d017      	beq.n	800b5de <LED_SetNext+0x46>
		LED[newLED].FadeOutIntervalNext = -1;
		LED[newLED].TimeCyclesNext = -1;
		LED[newLED].RestorePreviousNext = -1;
		return;
	}
	else if (LED[newLED].EffectNext  == BREATHING)
 800b5ae:	2903      	cmp	r1, #3
 800b5b0:	d02a      	beq.n	800b608 <LED_SetNext+0x70>
	{
		LED[newLED].BreathInterval = LED[newLED].BreathIntervalNext;
		LED[newLED].BreathIntervalNext = -1;
	}
	else if (LED[newLED].EffectNext == FADEIN)
 800b5b2:	2904      	cmp	r1, #4
 800b5b4:	d058      	beq.n	800b668 <LED_SetNext+0xd0>
	{
		LED[newLED].FadeInInterval = LED[newLED].FadeInIntervalNext;
		LED[newLED].FadeInIntervalNext = -1;
	}
	else if (LED[newLED].EffectNext == FADEOUT)
 800b5b6:	2905      	cmp	r1, #5
 800b5b8:	d062      	beq.n	800b680 <LED_SetNext+0xe8>
	{
		LED[newLED].FadeOutInterval = LED[newLED].FadeOutIntervalNext;
		LED[newLED].FadeOutIntervalNext = -1;
		LED[newLED].FadeIntensity = 255;
	}
	else if (LED[newLED].EffectNext == BLINKING)
 800b5ba:	2902      	cmp	r1, #2
 800b5bc:	d12f      	bne.n	800b61e <LED_SetNext+0x86>
	{
		LED[newLED].BlinkTimeOn = LED[newLED].BlinkTimeOnNext;
 800b5be:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800b5c2:	4a36      	ldr	r2, [pc, #216]	; (800b69c <LED_SetNext+0x104>)
 800b5c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b5c8:	69da      	ldr	r2, [r3, #28]
 800b5ca:	831a      	strh	r2, [r3, #24]
		LED[newLED].BlinkTimeOnNext = -1;
 800b5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d0:	61da      	str	r2, [r3, #28]
		LED[newLED].BlinkTimeOff = LED[newLED].BlinkTimeOffNext ;
 800b5d2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b5d4:	841c      	strh	r4, [r3, #32]
		LED[newLED].BlinkTimeOffNext = -1;
 800b5d6:	625a      	str	r2, [r3, #36]	; 0x24
		LED[newLED].Counter = 0;
 800b5d8:	2200      	movs	r2, #0
 800b5da:	869a      	strh	r2, [r3, #52]	; 0x34
 800b5dc:	e01f      	b.n	800b61e <LED_SetNext+0x86>
		LED[newLED].ColorNext = -1;
 800b5de:	492f      	ldr	r1, [pc, #188]	; (800b69c <LED_SetNext+0x104>)
 800b5e0:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 800b5e4:	f04f 34ff 	mov.w	r4, #4294967295
 800b5e8:	f04f 35ff 	mov.w	r5, #4294967295
 800b5ec:	e9c3 4502 	strd	r4, r5, [r3, #8]
		LED[newLED].IntensityNext = -1;
 800b5f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5f4:	82da      	strh	r2, [r3, #22]
		LED[newLED].BlinkTimeOnNext = -1;
 800b5f6:	61dc      	str	r4, [r3, #28]
		LED[newLED].BlinkTimeOffNext = -1;
 800b5f8:	625c      	str	r4, [r3, #36]	; 0x24
		LED[newLED].BreathIntervalNext = -1;
 800b5fa:	855a      	strh	r2, [r3, #42]	; 0x2a
		LED[newLED].FadeInIntervalNext = -1;
 800b5fc:	85da      	strh	r2, [r3, #46]	; 0x2e
		LED[newLED].FadeOutIntervalNext = -1;
 800b5fe:	865a      	strh	r2, [r3, #50]	; 0x32
		LED[newLED].TimeCyclesNext = -1;
 800b600:	641c      	str	r4, [r3, #64]	; 0x40
		LED[newLED].RestorePreviousNext = -1;
 800b602:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		return;
 800b606:	e02d      	b.n	800b664 <LED_SetNext+0xcc>
		LED[newLED].BreathInterval = LED[newLED].BreathIntervalNext;
 800b608:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800b60c:	4a23      	ldr	r2, [pc, #140]	; (800b69c <LED_SetNext+0x104>)
 800b60e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b612:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b614:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		LED[newLED].BreathIntervalNext = -1;
 800b618:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b61c:	855a      	strh	r2, [r3, #42]	; 0x2a
	}
	LED[newLED].Effect = LED[newLED].EffectNext ;
 800b61e:	4a1f      	ldr	r2, [pc, #124]	; (800b69c <LED_SetNext+0x104>)
 800b620:	eb00 0cc0 	add.w	ip, r0, r0, lsl #3
 800b624:	eb02 03cc 	add.w	r3, r2, ip, lsl #3
 800b628:	7419      	strb	r1, [r3, #16]
	LED[newLED].EffectNext = -1;
 800b62a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b62e:	8259      	strh	r1, [r3, #18]
	LED[newLED].Color = LED[newLED].ColorNext ;
 800b630:	689c      	ldr	r4, [r3, #8]
 800b632:	f842 403c 	str.w	r4, [r2, ip, lsl #3]
	LED[newLED].ColorNext = -1;
 800b636:	f04f 34ff 	mov.w	r4, #4294967295
 800b63a:	f04f 35ff 	mov.w	r5, #4294967295
 800b63e:	e9c3 4502 	strd	r4, r5, [r3, #8]
	LED[newLED].Intensity = LED[newLED].IntensityNext ;
 800b642:	8adc      	ldrh	r4, [r3, #22]
 800b644:	751c      	strb	r4, [r3, #20]
	LED[newLED].IntensityNext = -1;
 800b646:	82d9      	strh	r1, [r3, #22]
	LED[newLED].TimeCycles = LED[newLED].TimeCyclesNext;
 800b648:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800b64a:	879c      	strh	r4, [r3, #60]	; 0x3c
	LED[newLED].TimeCyclesNext = -1;
 800b64c:	f04f 34ff 	mov.w	r4, #4294967295
 800b650:	641c      	str	r4, [r3, #64]	; 0x40
	LED[newLED].RestorePrevious = LED[newLED].RestorePreviousNext;
 800b652:	f8b3 c046 	ldrh.w	ip, [r3, #70]	; 0x46
 800b656:	f883 c044 	strb.w	ip, [r3, #68]	; 0x44
	LED[newLED].RestorePreviousNext = -1;
 800b65a:	f8a3 1046 	strh.w	r1, [r3, #70]	; 0x46
	LED[newLED].TimeCycleCounter = 0;
 800b65e:	4618      	mov	r0, r3
 800b660:	2300      	movs	r3, #0
 800b662:	86c3      	strh	r3, [r0, #54]	; 0x36
}
 800b664:	bc30      	pop	{r4, r5}
 800b666:	4770      	bx	lr
		LED[newLED].FadeInInterval = LED[newLED].FadeInIntervalNext;
 800b668:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800b66c:	4a0b      	ldr	r2, [pc, #44]	; (800b69c <LED_SetNext+0x104>)
 800b66e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b672:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800b674:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		LED[newLED].FadeInIntervalNext = -1;
 800b678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b67c:	85da      	strh	r2, [r3, #46]	; 0x2e
 800b67e:	e7ce      	b.n	800b61e <LED_SetNext+0x86>
		LED[newLED].FadeOutInterval = LED[newLED].FadeOutIntervalNext;
 800b680:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800b684:	4a05      	ldr	r2, [pc, #20]	; (800b69c <LED_SetNext+0x104>)
 800b686:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b68a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b68c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		LED[newLED].FadeOutIntervalNext = -1;
 800b690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b694:	865a      	strh	r2, [r3, #50]	; 0x32
		LED[newLED].FadeIntensity = 255;
 800b696:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800b69a:	e7c0      	b.n	800b61e <LED_SetNext+0x86>
 800b69c:	20000d40 	.word	0x20000d40

0800b6a0 <LED_Init>:
//-----------------------------------------------------------------------------
//! \brief      Initializes the LED module
//! \details    Set all LED off
//! \params     None
void LED_Init(void)
{
 800b6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	WS2812_CloseAll();
 800b6a4:	f001 fc9c 	bl	800cfe0 <WS2812_CloseAll>
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 800b6a8:	4b17      	ldr	r3, [pc, #92]	; (800b708 <LED_Init+0x68>)
 800b6aa:	f503 78b4 	add.w	r8, r3, #360	; 0x168
	{
		LED[i].Effect = SWITCHEDOFF;
 800b6ae:	2100      	movs	r1, #0
		LED[i].EffectNext = NONE;
 800b6b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
		LED[i].Color = 0;
		LED[i].ColorNext = -1;
 800b6b4:	f04f 34ff 	mov.w	r4, #4294967295
 800b6b8:	f04f 35ff 	mov.w	r5, #4294967295
		LED[i].Intensity = 0;
		LED[i].IntensityNext = -1;
		LED[i].BlinkTimeOn = 500;
 800b6bc:	f44f 7cfa 	mov.w	ip, #500	; 0x1f4
		LED[i].BlinkTimeOnNext = -1;
 800b6c0:	f04f 30ff 	mov.w	r0, #4294967295
		LED[i].BlinkTimeOff = 500;
		LED[i].BlinkTimeOffNext = -1;
		LED[i].BreathInterval = 5;
 800b6c4:	2705      	movs	r7, #5
		LED[i].BreathIntervalNext = -1;
		LED[i].FadeInInterval = 10;
 800b6c6:	260a      	movs	r6, #10
		LED[i].FadeInIntervalNext = -1;
		LED[i].FadeOutInterval = 20;
 800b6c8:	f04f 0e14 	mov.w	lr, #20
		LED[i].Effect = SWITCHEDOFF;
 800b6cc:	7419      	strb	r1, [r3, #16]
		LED[i].EffectNext = NONE;
 800b6ce:	825a      	strh	r2, [r3, #18]
		LED[i].Color = 0;
 800b6d0:	6019      	str	r1, [r3, #0]
		LED[i].ColorNext = -1;
 800b6d2:	e9c3 4502 	strd	r4, r5, [r3, #8]
		LED[i].Intensity = 0;
 800b6d6:	7519      	strb	r1, [r3, #20]
		LED[i].IntensityNext = -1;
 800b6d8:	82da      	strh	r2, [r3, #22]
		LED[i].BlinkTimeOn = 500;
 800b6da:	f8a3 c018 	strh.w	ip, [r3, #24]
		LED[i].BlinkTimeOnNext = -1;
 800b6de:	61d8      	str	r0, [r3, #28]
		LED[i].BlinkTimeOff = 500;
 800b6e0:	f8a3 c020 	strh.w	ip, [r3, #32]
		LED[i].BlinkTimeOffNext = -1;
 800b6e4:	6258      	str	r0, [r3, #36]	; 0x24
		LED[i].BreathInterval = 5;
 800b6e6:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
		LED[i].BreathIntervalNext = -1;
 800b6ea:	855a      	strh	r2, [r3, #42]	; 0x2a
		LED[i].FadeInInterval = 10;
 800b6ec:	f883 602c 	strb.w	r6, [r3, #44]	; 0x2c
		LED[i].FadeInIntervalNext = -1;
 800b6f0:	85da      	strh	r2, [r3, #46]	; 0x2e
		LED[i].FadeOutInterval = 20;
 800b6f2:	f883 e030 	strb.w	lr, [r3, #48]	; 0x30
		LED[i].FadeOutIntervalNext = -1;
 800b6f6:	865a      	strh	r2, [r3, #50]	; 0x32
		LED[i].TimeCycles = 0;
 800b6f8:	8799      	strh	r1, [r3, #60]	; 0x3c
		LED[i].RestorePrevious = 0;
 800b6fa:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 800b6fe:	3348      	adds	r3, #72	; 0x48
 800b700:	4543      	cmp	r3, r8
 800b702:	d1e3      	bne.n	800b6cc <LED_Init+0x2c>
	}
}
 800b704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b708:	20000d40 	.word	0x20000d40

0800b70c <LED_Handle>:
//-----------------------------------------------------------------------------
//! \brief      Handles the LED control
//! \details    Calculates the intensity of the LED and sets if needed
//! \params		None
void LED_Handle (void)
{
 800b70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t NeedsUpdate = 0;


	for (uint8_t i = 0; i < WS2812_NUM;i++)
 800b710:	2500      	movs	r5, #0
	{
		NeedsUpdate= 0;
		if (i==1) i=2;
		if (LED[i].Color != LED[i].ColorOld)
 800b712:	4eae      	ldr	r6, [pc, #696]	; (800b9cc <LED_Handle+0x2c0>)
			{
				if (LED[i].FadeIntensity > 0)
				{
					LED[i].FadeIntensity --;
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) LED[0].FadeIntensity) / 255);
					WS2812_Set(i, LED[i].Color,((uint32_t) LED[i].Intensity * (uint32_t) LED[i].FadeIntensity) / 255);
 800b714:	4fae      	ldr	r7, [pc, #696]	; (800b9d0 <LED_Handle+0x2c4>)
									if ((LEDPREVIOUS[i].Effect != BREATHING) && (LEDPREVIOUS[i].Effect != FADEIN))
 800b716:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 800b9d4 <LED_Handle+0x2c8>
 800b71a:	e09a      	b.n	800b852 <LED_Handle+0x146>
		else if (LED[i].Intensity != LED[i].IntensityOld)
 800b71c:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800b720:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b724:	7d1a      	ldrb	r2, [r3, #20]
 800b726:	7d5b      	ldrb	r3, [r3, #21]
 800b728:	4293      	cmp	r3, r2
 800b72a:	d006      	beq.n	800b73a <LED_Handle+0x2e>
			LED[i].IntensityOld = LED[i].Intensity;
 800b72c:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800b730:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b734:	755a      	strb	r2, [r3, #21]
			NeedsUpdate = 1;
 800b736:	2201      	movs	r2, #1
 800b738:	e09c      	b.n	800b874 <LED_Handle+0x168>
		else if (LED[i].Effect != LED[i].EffectOld)
 800b73a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800b73e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b742:	7c1a      	ldrb	r2, [r3, #16]
 800b744:	7c5b      	ldrb	r3, [r3, #17]
 800b746:	4293      	cmp	r3, r2
 800b748:	d016      	beq.n	800b778 <LED_Handle+0x6c>
			LED[i].Counter = 0;
 800b74a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800b74e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b752:	2100      	movs	r1, #0
 800b754:	8699      	strh	r1, [r3, #52]	; 0x34
			LED[i].BreathIntensity = 0;
 800b756:	8719      	strh	r1, [r3, #56]	; 0x38
			if (LED[i].Effect == FADEOUT) LED[i].FadeIntensity = 255;
 800b758:	2a05      	cmp	r2, #5
			LED[i].FadeIntensity = 0;
 800b75a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800b75e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
			if (LED[i].Effect == FADEOUT) LED[i].FadeIntensity = 255;
 800b762:	bf08      	it	eq
 800b764:	21ff      	moveq	r1, #255	; 0xff
 800b766:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
			LED[i].EffectOld = LED[i].Effect;
 800b76a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800b76e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b772:	745a      	strb	r2, [r3, #17]
			NeedsUpdate = 1;
 800b774:	2201      	movs	r2, #1
 800b776:	e07d      	b.n	800b874 <LED_Handle+0x168>
		NeedsUpdate= 0;
 800b778:	2200      	movs	r2, #0
 800b77a:	e07b      	b.n	800b874 <LED_Handle+0x168>
			if (LED[i].Counter >= LED[i].BlinkTimeOn + LED[i].BlinkTimeOff) //Needs to switch off
 800b77c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b780:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b784:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 800b786:	8b18      	ldrh	r0, [r3, #24]
 800b788:	8c1b      	ldrh	r3, [r3, #32]
 800b78a:	4403      	add	r3, r0
 800b78c:	4299      	cmp	r1, r3
 800b78e:	f2c0 8090 	blt.w	800b8b2 <LED_Handle+0x1a6>
				if (LED[i].TimeCycles > 0)
 800b792:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b796:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b79a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b79c:	b303      	cbz	r3, 800b7e0 <LED_Handle+0xd4>
					if (LED[i].TimeCycleCounter >= LED[i].TimeCycles)
 800b79e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800b7a2:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800b7a6:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d319      	bcc.n	800b7e0 <LED_Handle+0xd4>
						if (LED[i].RestorePrevious)
 800b7ac:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b7b0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b7b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b7b8:	b163      	cbz	r3, 800b7d4 <LED_Handle+0xc8>
							if ((LEDPREVIOUS[i].Effect != BREATHING) && (LEDPREVIOUS[i].Effect != FADEIN))
 800b7ba:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b7be:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800b7c2:	7c1b      	ldrb	r3, [r3, #16]
 800b7c4:	3b03      	subs	r3, #3
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d909      	bls.n	800b7e0 <LED_Handle+0xd4>
							LED_RestorePrevious(i);
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	f7ff fdf7 	bl	800b3c0 <LED_RestorePrevious>
 800b7d2:	e005      	b.n	800b7e0 <LED_Handle+0xd4>
							LED[i].Effect = SWITCHEDOFF;
 800b7d4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b7d8:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b7dc:	2200      	movs	r2, #0
 800b7de:	741a      	strb	r2, [r3, #16]
				LED[i].Counter = 0;
 800b7e0:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b7e4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	869a      	strh	r2, [r3, #52]	; 0x34
				NeedsUpdate = 1;
 800b7ec:	2201      	movs	r2, #1
			LED[i].Counter ++;
 800b7ee:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b7f2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b7f6:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 800b7f8:	3101      	adds	r1, #1
 800b7fa:	8699      	strh	r1, [r3, #52]	; 0x34
		if (NeedsUpdate)
 800b7fc:	b30a      	cbz	r2, 800b842 <LED_Handle+0x136>
			if (LED[i].Effect == SWITCHEDOFF)
 800b7fe:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b802:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b806:	7c1b      	ldrb	r3, [r3, #16]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f040 820c 	bne.w	800bc26 <LED_Handle+0x51a>
				if (i==0) WS2812_Set(1, LED[0].Color,0);//Also other water tank LED
 800b80e:	2d00      	cmp	r5, #0
 800b810:	f000 8203 	beq.w	800bc1a <LED_Handle+0x50e>
				WS2812_Set(i, LED[i].Color,0);
 800b814:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b818:	2200      	movs	r2, #0
 800b81a:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
 800b81e:	4628      	mov	r0, r5
 800b820:	f001 fb16 	bl	800ce50 <WS2812_Set>
				}
			}
			WS2812_Show();
 800b824:	f001 fbd0 	bl	800cfc8 <WS2812_Show>
			LED[i].EffectOld = LED[i].Effect;
 800b828:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b82c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b830:	7c1a      	ldrb	r2, [r3, #16]
 800b832:	745a      	strb	r2, [r3, #17]
			LED[i].IntensityOld = LED[i].Intensity;
 800b834:	7d1a      	ldrb	r2, [r3, #20]
 800b836:	755a      	strb	r2, [r3, #21]
			LED[i].ColorOld = LED[i].Color;
 800b838:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800b83c:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
 800b840:	605a      	str	r2, [r3, #4]
	for (uint8_t i = 0; i < WS2812_NUM;i++)
 800b842:	3501      	adds	r5, #1
 800b844:	b2ed      	uxtb	r5, r5
 800b846:	2d04      	cmp	r5, #4
 800b848:	f200 82f2 	bhi.w	800be30 <LED_Handle+0x724>
		if (i==1) i=2;
 800b84c:	2d01      	cmp	r5, #1
 800b84e:	bf08      	it	eq
 800b850:	2502      	moveq	r5, #2
		if (LED[i].Color != LED[i].ColorOld)
 800b852:	462c      	mov	r4, r5
 800b854:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800b858:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800b85c:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
 800b860:	6852      	ldr	r2, [r2, #4]
 800b862:	4293      	cmp	r3, r2
 800b864:	f43f af5a 	beq.w	800b71c <LED_Handle+0x10>
			LED[i].ColorOld = LED[i].Color;
 800b868:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800b86c:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800b870:	6053      	str	r3, [r2, #4]
			NeedsUpdate = 1;
 800b872:	2201      	movs	r2, #1
		if (LED[i].Effect == BLINKING)
 800b874:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b878:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b87c:	7c1b      	ldrb	r3, [r3, #16]
 800b87e:	2b02      	cmp	r3, #2
 800b880:	f43f af7c 	beq.w	800b77c <LED_Handle+0x70>
		else if (LED[i].Effect == BREATHING)
 800b884:	2b03      	cmp	r3, #3
 800b886:	d050      	beq.n	800b92a <LED_Handle+0x21e>
		else if (LED[i].Effect == FADEIN)
 800b888:	2b04      	cmp	r3, #4
 800b88a:	f000 80a5 	beq.w	800b9d8 <LED_Handle+0x2cc>
		else if (LED[i].Effect == FADEOUT)
 800b88e:	2b05      	cmp	r3, #5
 800b890:	f000 80f7 	beq.w	800ba82 <LED_Handle+0x376>
		else if (LED[i].Effect == SWITCHEDOFF)
 800b894:	2b00      	cmp	r3, #0
 800b896:	f040 8142 	bne.w	800bb1e <LED_Handle+0x412>
			if (LED[i].EffectNext > SWITCHEDOFF)
 800b89a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b89e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b8a2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	f300 812f 	bgt.w	800bb0a <LED_Handle+0x3fe>
		if (NeedsUpdate)
 800b8ac:	2a00      	cmp	r2, #0
 800b8ae:	d1ae      	bne.n	800b80e <LED_Handle+0x102>
 800b8b0:	e7c7      	b.n	800b842 <LED_Handle+0x136>
			else if (LED[i].Counter == LED[i].BlinkTimeOn) //Needs to switch on
 800b8b2:	4281      	cmp	r1, r0
 800b8b4:	d003      	beq.n	800b8be <LED_Handle+0x1b2>
				NeedsUpdate = 1;
 800b8b6:	2900      	cmp	r1, #0
 800b8b8:	bf08      	it	eq
 800b8ba:	2201      	moveq	r2, #1
 800b8bc:	e797      	b.n	800b7ee <LED_Handle+0xe2>
				if (LED[i].TimeCycles > 0)
 800b8be:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b8c2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b8c6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b8c8:	b36b      	cbz	r3, 800b926 <LED_Handle+0x21a>
					if (LED[i].TimeCycleCounter >= LED[i].TimeCycles)
 800b8ca:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800b8ce:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800b8d2:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d81e      	bhi.n	800b916 <LED_Handle+0x20a>
						if (LED[i].RestorePrevious)
 800b8d8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b8dc:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b8e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8e4:	b17b      	cbz	r3, 800b906 <LED_Handle+0x1fa>
							if  ((LEDPREVIOUS[i].Effect == BREATHING) || (LEDPREVIOUS[i].Effect == FADEIN))
 800b8e6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b8ea:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800b8ee:	7c1b      	ldrb	r3, [r3, #16]
 800b8f0:	3b03      	subs	r3, #3
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d901      	bls.n	800b8fc <LED_Handle+0x1f0>
				NeedsUpdate = 1;
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	e778      	b.n	800b7ee <LED_Handle+0xe2>
								LED_RestorePrevious(i);
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	f7ff fd5f 	bl	800b3c0 <LED_RestorePrevious>
				NeedsUpdate = 1;
 800b902:	2201      	movs	r2, #1
 800b904:	e773      	b.n	800b7ee <LED_Handle+0xe2>
							LED[i].Effect = SWITCHEDOFF;
 800b906:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b90a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b90e:	2200      	movs	r2, #0
 800b910:	741a      	strb	r2, [r3, #16]
				NeedsUpdate = 1;
 800b912:	2201      	movs	r2, #1
 800b914:	e76b      	b.n	800b7ee <LED_Handle+0xe2>
						LED[i].TimeCycleCounter ++;
 800b916:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b91a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b91e:	3201      	adds	r2, #1
 800b920:	86da      	strh	r2, [r3, #54]	; 0x36
				NeedsUpdate = 1;
 800b922:	2201      	movs	r2, #1
 800b924:	e763      	b.n	800b7ee <LED_Handle+0xe2>
 800b926:	2201      	movs	r2, #1
 800b928:	e761      	b.n	800b7ee <LED_Handle+0xe2>
			LED[i].Counter ++;
 800b92a:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800b92e:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800b932:	8e8b      	ldrh	r3, [r1, #52]	; 0x34
 800b934:	3301      	adds	r3, #1
 800b936:	b29b      	uxth	r3, r3
 800b938:	868b      	strh	r3, [r1, #52]	; 0x34
			if (LED[i].Counter >= LED[i].BreathInterval)
 800b93a:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 800b93e:	4299      	cmp	r1, r3
 800b940:	f200 826e 	bhi.w	800be20 <LED_Handle+0x714>
				LED[i].Counter = 0;
 800b944:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b948:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b94c:	2200      	movs	r2, #0
 800b94e:	869a      	strh	r2, [r3, #52]	; 0x34
				LED[i].BreathIntensity ++;
 800b950:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800b954:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800b958:	8f13      	ldrh	r3, [r2, #56]	; 0x38
 800b95a:	3301      	adds	r3, #1
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	8713      	strh	r3, [r2, #56]	; 0x38
				if (LED[i].BreathIntensity > 510)
 800b960:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800b964:	f240 8114 	bls.w	800bb90 <LED_Handle+0x484>
					if ((LED[i].EffectNext != SWITCHEDON) && (LED[i].EffectNext != FADEOUT))
 800b968:	f9b2 3012 	ldrsh.w	r3, [r2, #18]
 800b96c:	f023 0304 	bic.w	r3, r3, #4
 800b970:	2b01      	cmp	r3, #1
 800b972:	d002      	beq.n	800b97a <LED_Handle+0x26e>
						LED_SetNext (i);
 800b974:	4628      	mov	r0, r5
 800b976:	f7ff fe0f 	bl	800b598 <LED_SetNext>
					LED[i].BreathIntensity = 0;
 800b97a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b97e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b982:	2200      	movs	r2, #0
 800b984:	871a      	strh	r2, [r3, #56]	; 0x38
					if (LED[i].TimeCycles > 0)
 800b986:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f000 81ed 	beq.w	800bd68 <LED_Handle+0x65c>
						if (LED[i].TimeCycleCounter >= LED[i].TimeCycles)
 800b98e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800b992:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800b996:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 800b998:	4293      	cmp	r3, r2
 800b99a:	f200 81ac 	bhi.w	800bcf6 <LED_Handle+0x5ea>
							if (LED[i].RestorePrevious)
 800b99e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b9a2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b9a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f000 819c 	beq.w	800bce8 <LED_Handle+0x5dc>
								if  ((LEDPREVIOUS[i].Effect == BREATHING) || (LEDPREVIOUS[i].Effect == FADEIN))
 800b9b0:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b9b4:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800b9b8:	7c1b      	ldrb	r3, [r3, #16]
 800b9ba:	3b03      	subs	r3, #3
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	f200 81d2 	bhi.w	800bd68 <LED_Handle+0x65c>
									LED_RestorePrevious(i);
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	f7ff fcfb 	bl	800b3c0 <LED_RestorePrevious>
 800b9ca:	e0e1      	b.n	800bb90 <LED_Handle+0x484>
 800b9cc:	20000d40 	.word	0x20000d40
 800b9d0:	80808081 	.word	0x80808081
 800b9d4:	20000ea8 	.word	0x20000ea8
			if (LED[i].FadeIntensity < 255)
 800b9d8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800b9dc:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b9e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b9e4:	2bff      	cmp	r3, #255	; 0xff
 800b9e6:	d035      	beq.n	800ba54 <LED_Handle+0x348>
				LED[i].Counter ++;
 800b9e8:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800b9ec:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800b9f0:	8e8b      	ldrh	r3, [r1, #52]	; 0x34
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	868b      	strh	r3, [r1, #52]	; 0x34
				if (LED[i].Counter >= LED[i].FadeInInterval)
 800b9f8:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 800b9fc:	4299      	cmp	r1, r3
 800b9fe:	f200 820b 	bhi.w	800be18 <LED_Handle+0x70c>
					LED[i].Counter = 0;
 800ba02:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800ba06:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	869a      	strh	r2, [r3, #52]	; 0x34
				if (LED[i].FadeIntensity < 255)
 800ba0e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800ba12:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800ba16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
					LED[i].FadeIntensity ++;
 800ba1a:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800ba1e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800ba22:	3301      	adds	r3, #1
 800ba24:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) LED[0].FadeIntensity) / 255);
 800ba28:	2d00      	cmp	r5, #0
 800ba2a:	f000 81d9 	beq.w	800bde0 <LED_Handle+0x6d4>
					WS2812_Set(i, LED[i].Color,((uint32_t) LED[i].Intensity * (uint32_t) LED[i].FadeIntensity) / 255);
 800ba2e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800ba32:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 800ba36:	7d0a      	ldrb	r2, [r1, #20]
 800ba38:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800ba3c:	fb01 f202 	mul.w	r2, r1, r2
 800ba40:	fba7 1202 	umull	r1, r2, r7, r2
 800ba44:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 800ba48:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	f001 f9ff 	bl	800ce50 <WS2812_Set>
 800ba52:	e6e7      	b.n	800b824 <LED_Handle+0x118>
				LED[i].Effect = SWITCHEDON;
 800ba54:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800ba58:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800ba5c:	2101      	movs	r1, #1
 800ba5e:	7419      	strb	r1, [r3, #16]
		if (NeedsUpdate)
 800ba60:	2a00      	cmp	r2, #0
 800ba62:	f43f aeee 	beq.w	800b842 <LED_Handle+0x136>
				if (i==0) WS2812_Set(1, LED[0].Color,LED[0].Intensity);//Also other water tank LED
 800ba66:	2d00      	cmp	r5, #0
 800ba68:	f000 80fe 	beq.w	800bc68 <LED_Handle+0x55c>
				WS2812_Set(i, LED[i].Color,LED[i].Intensity);
 800ba6c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800ba70:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800ba74:	7d12      	ldrb	r2, [r2, #20]
 800ba76:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	f001 f9e8 	bl	800ce50 <WS2812_Set>
 800ba80:	e6d0      	b.n	800b824 <LED_Handle+0x118>
			if (LED[i].FadeIntensity > 0)
 800ba82:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800ba86:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800ba8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ba8e:	b3ab      	cbz	r3, 800bafc <LED_Handle+0x3f0>
				LED[i].Counter ++;
 800ba90:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800ba94:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800ba98:	8e8b      	ldrh	r3, [r1, #52]	; 0x34
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	868b      	strh	r3, [r1, #52]	; 0x34
				if (LED[i].Counter >= LED[i].FadeOutInterval)
 800baa0:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 800baa4:	4299      	cmp	r1, r3
 800baa6:	f200 81bf 	bhi.w	800be28 <LED_Handle+0x71c>
					LED[i].Counter = 0;
 800baaa:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800baae:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bab2:	2200      	movs	r2, #0
 800bab4:	869a      	strh	r2, [r3, #52]	; 0x34
				if (LED[i].FadeIntensity > 0)
 800bab6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800baba:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800babe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
					LED[i].FadeIntensity --;
 800bac2:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800bac6:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800baca:	3b01      	subs	r3, #1
 800bacc:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) LED[0].FadeIntensity) / 255);
 800bad0:	2d00      	cmp	r5, #0
 800bad2:	f000 8193 	beq.w	800bdfc <LED_Handle+0x6f0>
					WS2812_Set(i, LED[i].Color,((uint32_t) LED[i].Intensity * (uint32_t) LED[i].FadeIntensity) / 255);
 800bad6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bada:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 800bade:	7d0a      	ldrb	r2, [r1, #20]
 800bae0:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800bae4:	fb01 f202 	mul.w	r2, r1, r2
 800bae8:	fba7 1202 	umull	r1, r2, r7, r2
 800baec:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 800baf0:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
 800baf4:	4628      	mov	r0, r5
 800baf6:	f001 f9ab 	bl	800ce50 <WS2812_Set>
 800bafa:	e693      	b.n	800b824 <LED_Handle+0x118>
				LED[i].Effect = SWITCHEDOFF;
 800bafc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bb00:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bb04:	2100      	movs	r1, #0
 800bb06:	7419      	strb	r1, [r3, #16]
 800bb08:	e6d0      	b.n	800b8ac <LED_Handle+0x1a0>
				LED_SetNext(i);
 800bb0a:	4628      	mov	r0, r5
 800bb0c:	f7ff fd44 	bl	800b598 <LED_SetNext>
				LED[i].BreathIntensity = 0; // Make sure breathing is starting with breathing up
 800bb10:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bb14:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bb18:	2200      	movs	r2, #0
 800bb1a:	871a      	strh	r2, [r3, #56]	; 0x38
		if (NeedsUpdate)
 800bb1c:	e66f      	b.n	800b7fe <LED_Handle+0xf2>
		else if (LED[i].Effect == SWITCHEDON)
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d003      	beq.n	800bb2a <LED_Handle+0x41e>
		if (NeedsUpdate)
 800bb22:	2a00      	cmp	r2, #0
 800bb24:	f43f ae8d 	beq.w	800b842 <LED_Handle+0x136>
 800bb28:	e67c      	b.n	800b824 <LED_Handle+0x118>
			if (LED[i].TimeCycles > 0)
 800bb2a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bb2e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bb32:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d05e      	beq.n	800bbf6 <LED_Handle+0x4ea>
				if (LED[i].TimeCycleCounter > LED[i].TimeCycles)
 800bb38:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800bb3c:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800bb40:	8ec9      	ldrh	r1, [r1, #54]	; 0x36
 800bb42:	428b      	cmp	r3, r1
 800bb44:	d250      	bcs.n	800bbe8 <LED_Handle+0x4dc>
					if (LED[i].RestorePrevious)
 800bb46:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bb4a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bb4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d13b      	bne.n	800bbce <LED_Handle+0x4c2>
						LED[i].Effect = SWITCHEDOFF;
 800bb56:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bb5a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bb5e:	2200      	movs	r2, #0
 800bb60:	741a      	strb	r2, [r3, #16]
			if (LED[i].EffectNext > SWITCHEDOFF)
 800bb62:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bb66:	4293      	cmp	r3, r2
 800bb68:	f77f ae51 	ble.w	800b80e <LED_Handle+0x102>
				LED_SetNext(i);
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	f7ff fd13 	bl	800b598 <LED_SetNext>
				if (LED[i].Effect == BREATHING)
 800bb72:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bb76:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bb7a:	7c1b      	ldrb	r3, [r3, #16]
 800bb7c:	2b03      	cmp	r3, #3
 800bb7e:	f47f ae3e 	bne.w	800b7fe <LED_Handle+0xf2>
					LED[i].BreathIntensity = 255; //Make sure breathing starts with breathing down
 800bb82:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bb86:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
				LED[i].BreathIntensity ++;
 800bb8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb8e:	871a      	strh	r2, [r3, #56]	; 0x38
				if (LED[i].BreathIntensity <= 255)
 800bb90:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bb94:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bb98:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800bb9a:	2bff      	cmp	r3, #255	; 0xff
 800bb9c:	f240 80b2 	bls.w	800bd04 <LED_Handle+0x5f8>
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) (510-LED[i].BreathIntensity) / 255));//Also other water tank LED
 800bba0:	2d00      	cmp	r5, #0
 800bba2:	f000 8105 	beq.w	800bdb0 <LED_Handle+0x6a4>
					WS2812_Set(i, LED[i].Color,(uint8_t) ((uint32_t) LED[i].Intensity * (uint32_t) (510-LED[i].BreathIntensity) / 255));
 800bba6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bbaa:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 800bbae:	8f0a      	ldrh	r2, [r1, #56]	; 0x38
 800bbb0:	f5c2 72ff 	rsb	r2, r2, #510	; 0x1fe
 800bbb4:	7d09      	ldrb	r1, [r1, #20]
 800bbb6:	fb01 f202 	mul.w	r2, r1, r2
 800bbba:	fba7 1202 	umull	r1, r2, r7, r2
 800bbbe:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 800bbc2:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	f001 f942 	bl	800ce50 <WS2812_Set>
 800bbcc:	e62a      	b.n	800b824 <LED_Handle+0x118>
						LED_RestorePrevious(i);
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f7ff fbf6 	bl	800b3c0 <LED_RestorePrevious>
			if (LED[i].EffectNext > SWITCHEDOFF)
 800bbd4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bbd8:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bbdc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	f77f ae0c 	ble.w	800b7fe <LED_Handle+0xf2>
 800bbe6:	e7c1      	b.n	800bb6c <LED_Handle+0x460>
					LED[i].TimeCycleCounter ++;
 800bbe8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bbec:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bbf0:	3101      	adds	r1, #1
 800bbf2:	86d9      	strh	r1, [r3, #54]	; 0x36
 800bbf4:	e005      	b.n	800bc02 <LED_Handle+0x4f6>
				LED[i].TimeCycleCounter = 0;
 800bbf6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bbfa:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bbfe:	2100      	movs	r1, #0
 800bc00:	86d9      	strh	r1, [r3, #54]	; 0x36
			if (LED[i].EffectNext > SWITCHEDOFF)
 800bc02:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bc06:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bc0a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	dcac      	bgt.n	800bb6c <LED_Handle+0x460>
		if (NeedsUpdate)
 800bc12:	2a00      	cmp	r2, #0
 800bc14:	f47f af27 	bne.w	800ba66 <LED_Handle+0x35a>
 800bc18:	e613      	b.n	800b842 <LED_Handle+0x136>
				if (i==0) WS2812_Set(1, LED[0].Color,0);//Also other water tank LED
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	6831      	ldr	r1, [r6, #0]
 800bc1e:	2001      	movs	r0, #1
 800bc20:	f001 f916 	bl	800ce50 <WS2812_Set>
 800bc24:	e5f6      	b.n	800b814 <LED_Handle+0x108>
			else if (LED[i].Effect == SWITCHEDON)
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	f43f af1d 	beq.w	800ba66 <LED_Handle+0x35a>
			else if (LED[i].Effect == BLINKING)
 800bc2c:	2b02      	cmp	r3, #2
 800bc2e:	d149      	bne.n	800bcc4 <LED_Handle+0x5b8>
				if (LED[i].Counter >= LED[i].BlinkTimeOn) //Is on, needs to switch off
 800bc30:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bc34:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bc38:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800bc3a:	8b1b      	ldrh	r3, [r3, #24]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d323      	bcc.n	800bc88 <LED_Handle+0x57c>
					if ((LED[i].EffectNext == SWITCHEDON) || (LED[i].EffectNext == FADEOUT))
 800bc40:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bc44:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bc48:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bc4c:	f023 0304 	bic.w	r3, r3, #4
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d00f      	beq.n	800bc74 <LED_Handle+0x568>
						if (i==0) WS2812_Set(1, LED[0].Color,0);//Also other water tank LED
 800bc54:	b195      	cbz	r5, 800bc7c <LED_Handle+0x570>
						WS2812_Set(i, LED[i].Color,0);
 800bc56:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
 800bc60:	4628      	mov	r0, r5
 800bc62:	f001 f8f5 	bl	800ce50 <WS2812_Set>
 800bc66:	e5dd      	b.n	800b824 <LED_Handle+0x118>
				if (i==0) WS2812_Set(1, LED[0].Color,LED[0].Intensity);//Also other water tank LED
 800bc68:	7d32      	ldrb	r2, [r6, #20]
 800bc6a:	6831      	ldr	r1, [r6, #0]
 800bc6c:	2001      	movs	r0, #1
 800bc6e:	f001 f8ef 	bl	800ce50 <WS2812_Set>
 800bc72:	e6fb      	b.n	800ba6c <LED_Handle+0x360>
						LED_SetNext (i);
 800bc74:	4628      	mov	r0, r5
 800bc76:	f7ff fc8f 	bl	800b598 <LED_SetNext>
 800bc7a:	e5d3      	b.n	800b824 <LED_Handle+0x118>
						if (i==0) WS2812_Set(1, LED[0].Color,0);//Also other water tank LED
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	6831      	ldr	r1, [r6, #0]
 800bc80:	2001      	movs	r0, #1
 800bc82:	f001 f8e5 	bl	800ce50 <WS2812_Set>
 800bc86:	e7e6      	b.n	800bc56 <LED_Handle+0x54a>
					if (((LED[i].EffectNext != SWITCHEDON) || (LED[i].EffectNext != FADEOUT)) && (LED[i].EffectNext >=0))
 800bc88:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bc8c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bc90:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	da0b      	bge.n	800bcb0 <LED_Handle+0x5a4>
						if (i==0) WS2812_Set(1, LED[0].Color,LED[0].Intensity);//Also other water tank LED
 800bc98:	b175      	cbz	r5, 800bcb8 <LED_Handle+0x5ac>
						WS2812_Set(i, LED[i].Color,LED[i].Intensity);
 800bc9a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bc9e:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800bca2:	7d12      	ldrb	r2, [r2, #20]
 800bca4:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
 800bca8:	4628      	mov	r0, r5
 800bcaa:	f001 f8d1 	bl	800ce50 <WS2812_Set>
 800bcae:	e5b9      	b.n	800b824 <LED_Handle+0x118>
						LED_SetNext (i);
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	f7ff fc71 	bl	800b598 <LED_SetNext>
 800bcb6:	e5b5      	b.n	800b824 <LED_Handle+0x118>
						if (i==0) WS2812_Set(1, LED[0].Color,LED[0].Intensity);//Also other water tank LED
 800bcb8:	7d32      	ldrb	r2, [r6, #20]
 800bcba:	6831      	ldr	r1, [r6, #0]
 800bcbc:	2001      	movs	r0, #1
 800bcbe:	f001 f8c7 	bl	800ce50 <WS2812_Set>
 800bcc2:	e7ea      	b.n	800bc9a <LED_Handle+0x58e>
			else if (LED[i].Effect == BREATHING)
 800bcc4:	2b03      	cmp	r3, #3
 800bcc6:	f43f ae43 	beq.w	800b950 <LED_Handle+0x244>
			else if (LED[i].Effect == FADEIN)
 800bcca:	2b04      	cmp	r3, #4
 800bccc:	d07e      	beq.n	800bdcc <LED_Handle+0x6c0>
			else if (LED[i].Effect == FADEOUT)
 800bcce:	2b05      	cmp	r3, #5
 800bcd0:	f47f ada8 	bne.w	800b824 <LED_Handle+0x118>
				if (LED[i].FadeIntensity > 0)
 800bcd4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bcd8:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bcdc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f43f ad9f 	beq.w	800b824 <LED_Handle+0x118>
 800bce6:	e6ec      	b.n	800bac2 <LED_Handle+0x3b6>
								LED[i].Effect = SWITCHEDOFF;
 800bce8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bcec:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	741a      	strb	r2, [r3, #16]
 800bcf4:	e038      	b.n	800bd68 <LED_Handle+0x65c>
							LED[i].TimeCycleCounter ++;
 800bcf6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bcfa:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bcfe:	3201      	adds	r2, #1
 800bd00:	86da      	strh	r2, [r3, #54]	; 0x36
 800bd02:	e031      	b.n	800bd68 <LED_Handle+0x65c>
					if (LED[i].BreathIntensity == 255) //LED at max intensity. If Next is SWITCHED ON or FadeOut, switch to next
 800bd04:	d130      	bne.n	800bd68 <LED_Handle+0x65c>
						if (LED[i].TimeCycles > 0)
 800bd06:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bd0a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bd0e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bd10:	b303      	cbz	r3, 800bd54 <LED_Handle+0x648>
							if (LED[i].TimeCycleCounter >= LED[i].TimeCycles)
 800bd12:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800bd16:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800bd1a:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d319      	bcc.n	800bd54 <LED_Handle+0x648>
								if (LED[i].RestorePrevious)
 800bd20:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bd24:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bd28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd2c:	b163      	cbz	r3, 800bd48 <LED_Handle+0x63c>
									if ((LEDPREVIOUS[i].Effect != BREATHING) && (LEDPREVIOUS[i].Effect != FADEIN))
 800bd2e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bd32:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800bd36:	7c1b      	ldrb	r3, [r3, #16]
 800bd38:	3b03      	subs	r3, #3
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d909      	bls.n	800bd54 <LED_Handle+0x648>
									LED_RestorePrevious(i);
 800bd40:	4628      	mov	r0, r5
 800bd42:	f7ff fb3d 	bl	800b3c0 <LED_RestorePrevious>
 800bd46:	e005      	b.n	800bd54 <LED_Handle+0x648>
									LED[i].Effect = SWITCHEDOFF;
 800bd48:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bd4c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bd50:	2200      	movs	r2, #0
 800bd52:	741a      	strb	r2, [r3, #16]
						if ((LED[i].EffectNext == SWITCHEDON) || (LED[i].EffectNext == FADEOUT))
 800bd54:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bd58:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bd5c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bd60:	f023 0304 	bic.w	r3, r3, #4
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d012      	beq.n	800bd8e <LED_Handle+0x682>
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) LED[0].BreathIntensity) / 255);//Also other water tank LED
 800bd68:	b1ad      	cbz	r5, 800bd96 <LED_Handle+0x68a>
					WS2812_Set(i, LED[i].Color,((uint32_t) LED[i].Intensity * (uint32_t) LED[i].BreathIntensity) / 255);
 800bd6a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bd6e:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 800bd72:	7d0a      	ldrb	r2, [r1, #20]
 800bd74:	8f09      	ldrh	r1, [r1, #56]	; 0x38
 800bd76:	fb01 f202 	mul.w	r2, r1, r2
 800bd7a:	fba7 1202 	umull	r1, r2, r7, r2
 800bd7e:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 800bd82:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
 800bd86:	4628      	mov	r0, r5
 800bd88:	f001 f862 	bl	800ce50 <WS2812_Set>
 800bd8c:	e54a      	b.n	800b824 <LED_Handle+0x118>
							LED_SetNext (i);
 800bd8e:	4628      	mov	r0, r5
 800bd90:	f7ff fc02 	bl	800b598 <LED_SetNext>
 800bd94:	e7e8      	b.n	800bd68 <LED_Handle+0x65c>
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) LED[0].BreathIntensity) / 255);//Also other water tank LED
 800bd96:	7d32      	ldrb	r2, [r6, #20]
 800bd98:	8f33      	ldrh	r3, [r6, #56]	; 0x38
 800bd9a:	fb03 f202 	mul.w	r2, r3, r2
 800bd9e:	fba7 3202 	umull	r3, r2, r7, r2
 800bda2:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 800bda6:	6831      	ldr	r1, [r6, #0]
 800bda8:	2001      	movs	r0, #1
 800bdaa:	f001 f851 	bl	800ce50 <WS2812_Set>
 800bdae:	e7dc      	b.n	800bd6a <LED_Handle+0x65e>
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) (510-LED[i].BreathIntensity) / 255));//Also other water tank LED
 800bdb0:	7d32      	ldrb	r2, [r6, #20]
 800bdb2:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 800bdb6:	fb02 f303 	mul.w	r3, r2, r3
 800bdba:	fba7 3203 	umull	r3, r2, r7, r3
 800bdbe:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 800bdc2:	6831      	ldr	r1, [r6, #0]
 800bdc4:	2001      	movs	r0, #1
 800bdc6:	f001 f843 	bl	800ce50 <WS2812_Set>
 800bdca:	e6ec      	b.n	800bba6 <LED_Handle+0x49a>
				if (LED[i].FadeIntensity < 255)
 800bdcc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800bdd0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800bdd4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bdd8:	2bff      	cmp	r3, #255	; 0xff
 800bdda:	f43f ad23 	beq.w	800b824 <LED_Handle+0x118>
 800bdde:	e61c      	b.n	800ba1a <LED_Handle+0x30e>
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) LED[0].FadeIntensity) / 255);
 800bde0:	7d32      	ldrb	r2, [r6, #20]
 800bde2:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
 800bde6:	fb03 f202 	mul.w	r2, r3, r2
 800bdea:	fba7 3202 	umull	r3, r2, r7, r2
 800bdee:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 800bdf2:	6831      	ldr	r1, [r6, #0]
 800bdf4:	2001      	movs	r0, #1
 800bdf6:	f001 f82b 	bl	800ce50 <WS2812_Set>
 800bdfa:	e618      	b.n	800ba2e <LED_Handle+0x322>
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) LED[0].FadeIntensity) / 255);
 800bdfc:	7d32      	ldrb	r2, [r6, #20]
 800bdfe:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
 800be02:	fb03 f202 	mul.w	r2, r3, r2
 800be06:	fba7 3202 	umull	r3, r2, r7, r2
 800be0a:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 800be0e:	6831      	ldr	r1, [r6, #0]
 800be10:	2001      	movs	r0, #1
 800be12:	f001 f81d 	bl	800ce50 <WS2812_Set>
 800be16:	e65e      	b.n	800bad6 <LED_Handle+0x3ca>
		if (NeedsUpdate)
 800be18:	2a00      	cmp	r2, #0
 800be1a:	f43f ad12 	beq.w	800b842 <LED_Handle+0x136>
 800be1e:	e5f6      	b.n	800ba0e <LED_Handle+0x302>
 800be20:	2a00      	cmp	r2, #0
 800be22:	f43f ad0e 	beq.w	800b842 <LED_Handle+0x136>
 800be26:	e593      	b.n	800b950 <LED_Handle+0x244>
 800be28:	2a00      	cmp	r2, #0
 800be2a:	f43f ad0a 	beq.w	800b842 <LED_Handle+0x136>
 800be2e:	e642      	b.n	800bab6 <LED_Handle+0x3aa>
		}
	}
}
 800be30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800be34 <SER_Init>:
//-----------------------------------------------------------------------------
//! \brief      Initiates the serial unit
//! \details    Sets up Message buffer. Starts UART
//! \param      None
void SER_Init (void)
{
 800be34:	b510      	push	{r4, lr}
	Message.RxBuffer ='\000';
 800be36:	4c07      	ldr	r4, [pc, #28]	; (800be54 <SER_Init+0x20>)
 800be38:	2300      	movs	r3, #0
 800be3a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Receive_DMA(&huart3, &Message.RxBuffer, 1);
 800be3c:	2201      	movs	r2, #1
 800be3e:	4621      	mov	r1, r4
 800be40:	4805      	ldr	r0, [pc, #20]	; (800be58 <SER_Init+0x24>)
 800be42:	f004 f8b9 	bl	800ffb8 <HAL_UART_Receive_DMA>
	//__HAL_UART_ENABLE_IT(&huart3,UART_IT_IDLE);
	HAL_UART_Receive_DMA(&huart2, &Message.RxBuffer, 1);
 800be46:	2201      	movs	r2, #1
 800be48:	4621      	mov	r1, r4
 800be4a:	4804      	ldr	r0, [pc, #16]	; (800be5c <SER_Init+0x28>)
 800be4c:	f004 f8b4 	bl	800ffb8 <HAL_UART_Receive_DMA>
}
 800be50:	bd10      	pop	{r4, pc}
 800be52:	bf00      	nop
 800be54:	20001014 	.word	0x20001014
 800be58:	20000bfc 	.word	0x20000bfc
 800be5c:	20000bb8 	.word	0x20000bb8

0800be60 <SER_SendReturnMessage>:
//! \brief      Sends a return message to the corresponding UART
//! \details    Calculates CRC, fills the buffer and sends the buffer
//! \param[in]  uint8_t newLength	Length of the message
//! \param[in]  uint8_t newStatus	Status of the return message
void SER_SendReturnMessage (uint8_t newLength, uint8_t newStatus)
{
 800be60:	b570      	push	{r4, r5, r6, lr}
 800be62:	4604      	mov	r4, r0
 800be64:	460d      	mov	r5, r1
	uint8_t newCRC;
	//Fill length in data buffer
	Message.RxData[2]=UTL_Dec2Asc(newLength / 16);
 800be66:	0900      	lsrs	r0, r0, #4
 800be68:	f000 ffe7 	bl	800ce3a <UTL_Dec2Asc>
 800be6c:	4e23      	ldr	r6, [pc, #140]	; (800befc <SER_SendReturnMessage+0x9c>)
 800be6e:	72f0      	strb	r0, [r6, #11]
	Message.RxData[3]=UTL_Dec2Asc(newLength % 16);
 800be70:	f004 000f 	and.w	r0, r4, #15
 800be74:	f000 ffe1 	bl	800ce3a <UTL_Dec2Asc>
 800be78:	7330      	strb	r0, [r6, #12]
	//Fill status in data buffer
	if (newLength > 8)
 800be7a:	2c08      	cmp	r4, #8
 800be7c:	d825      	bhi.n	800beca <SER_SendReturnMessage+0x6a>
	{
		Message.RxData[8]=UTL_Dec2Asc(newStatus / 16);
		Message.RxData[9]=UTL_Dec2Asc(newStatus % 16);
	}
	//Calculate CRC and store it in data buffer
	newCRC = CalculateCRC8(Message.RxData, newLength);
 800be7e:	4e1f      	ldr	r6, [pc, #124]	; (800befc <SER_SendReturnMessage+0x9c>)
 800be80:	4621      	mov	r1, r4
 800be82:	f106 0009 	add.w	r0, r6, #9
 800be86:	f7fe ffb1 	bl	800adec <CalculateCRC8>
 800be8a:	4605      	mov	r5, r0
	Message.RxData[6]= UTL_Dec2Asc(newCRC / 16);
 800be8c:	f3c0 1007 	ubfx	r0, r0, #4, #8
 800be90:	f000 ffd3 	bl	800ce3a <UTL_Dec2Asc>
 800be94:	73f0      	strb	r0, [r6, #15]
	Message.RxData[7]= UTL_Dec2Asc(newCRC % 16);
 800be96:	f005 000f 	and.w	r0, r5, #15
 800be9a:	f000 ffce 	bl	800ce3a <UTL_Dec2Asc>
 800be9e:	7430      	strb	r0, [r6, #16]
	//Send data

	if (UartReturn==2)
 800bea0:	4b17      	ldr	r3, [pc, #92]	; (800bf00 <SER_SendReturnMessage+0xa0>)
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	2b02      	cmp	r3, #2
 800bea6:	d01a      	beq.n	800bede <SER_SendReturnMessage+0x7e>
		HAL_UART_Transmit(&huart2, Message.RxData,newLength,100);
	else if (UartReturn==3)
 800bea8:	2b03      	cmp	r3, #3
 800beaa:	d020      	beq.n	800beee <SER_SendReturnMessage+0x8e>
		HAL_UART_Transmit(&huart3, Message.RxData,newLength,100);
	//Empty data buffer
	Message.Length = 0;
 800beac:	4813      	ldr	r0, [pc, #76]	; (800befc <SER_SendReturnMessage+0x9c>)
 800beae:	2400      	movs	r4, #0
 800beb0:	7084      	strb	r4, [r0, #2]
	Message.MType = 0;
 800beb2:	70c4      	strb	r4, [r0, #3]
	Message.Counter = 0;
 800beb4:	80c4      	strh	r4, [r0, #6]
	Message.CRCValue = 0;
 800beb6:	7104      	strb	r4, [r0, #4]
	Message.RxBuffer = 0;
 800beb8:	f800 4b09 	strb.w	r4, [r0], #9
	memset(Message.RxData, 0, sizeof(Message.RxData));
 800bebc:	22ff      	movs	r2, #255	; 0xff
 800bebe:	4621      	mov	r1, r4
 800bec0:	f004 f8c0 	bl	8010044 <memset>
	SER_Busy = 0;
 800bec4:	4b0f      	ldr	r3, [pc, #60]	; (800bf04 <SER_SendReturnMessage+0xa4>)
 800bec6:	701c      	strb	r4, [r3, #0]
}
 800bec8:	bd70      	pop	{r4, r5, r6, pc}
		Message.RxData[8]=UTL_Dec2Asc(newStatus / 16);
 800beca:	0928      	lsrs	r0, r5, #4
 800becc:	f000 ffb5 	bl	800ce3a <UTL_Dec2Asc>
 800bed0:	7470      	strb	r0, [r6, #17]
		Message.RxData[9]=UTL_Dec2Asc(newStatus % 16);
 800bed2:	f005 000f 	and.w	r0, r5, #15
 800bed6:	f000 ffb0 	bl	800ce3a <UTL_Dec2Asc>
 800beda:	74b0      	strb	r0, [r6, #18]
 800bedc:	e7cf      	b.n	800be7e <SER_SendReturnMessage+0x1e>
		HAL_UART_Transmit(&huart2, Message.RxData,newLength,100);
 800bede:	2364      	movs	r3, #100	; 0x64
 800bee0:	4622      	mov	r2, r4
 800bee2:	f106 0109 	add.w	r1, r6, #9
 800bee6:	4808      	ldr	r0, [pc, #32]	; (800bf08 <SER_SendReturnMessage+0xa8>)
 800bee8:	f003 fd65 	bl	800f9b6 <HAL_UART_Transmit>
 800beec:	e7de      	b.n	800beac <SER_SendReturnMessage+0x4c>
		HAL_UART_Transmit(&huart3, Message.RxData,newLength,100);
 800beee:	2364      	movs	r3, #100	; 0x64
 800bef0:	4622      	mov	r2, r4
 800bef2:	4906      	ldr	r1, [pc, #24]	; (800bf0c <SER_SendReturnMessage+0xac>)
 800bef4:	4806      	ldr	r0, [pc, #24]	; (800bf10 <SER_SendReturnMessage+0xb0>)
 800bef6:	f003 fd5e 	bl	800f9b6 <HAL_UART_Transmit>
 800befa:	e7d7      	b.n	800beac <SER_SendReturnMessage+0x4c>
 800befc:	20001014 	.word	0x20001014
 800bf00:	2000111d 	.word	0x2000111d
 800bf04:	2000111c 	.word	0x2000111c
 800bf08:	20000bb8 	.word	0x20000bb8
 800bf0c:	2000101d 	.word	0x2000101d
 800bf10:	20000bfc 	.word	0x20000bfc

0800bf14 <SER_SetStatus>:
{
 800bf14:	b508      	push	{r3, lr}
 800bf16:	4601      	mov	r1, r0
	SER_SendReturnMessage (10, newStatus);
 800bf18:	200a      	movs	r0, #10
 800bf1a:	f7ff ffa1 	bl	800be60 <SER_SendReturnMessage>
}
 800bf1e:	bd08      	pop	{r3, pc}

0800bf20 <SER_GetValue>:
//! \param[in]  uint8_t newUart			Uart number
//! \param[in]  uint8_t newStartByte	Start byte of the hex string
//! \param[in]  uint8_t newLength		Length of the hex string [2 or 4 bytes]
//! \param[out]	uint16_t ReturnValue
uint16_t SER_GetValue (uint8_t newStartByte, uint8_t newLength)
{
 800bf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t returnValue = 0;
	if (newLength == 1)
 800bf22:	2901      	cmp	r1, #1
 800bf24:	d005      	beq.n	800bf32 <SER_GetValue+0x12>
		returnValue = UTL_Asc2Dec(Message.RxData[newStartByte]);
	else if (newLength == 2)
 800bf26:	2902      	cmp	r1, #2
 800bf28:	d00a      	beq.n	800bf40 <SER_GetValue+0x20>
		returnValue = UTL_Asc2Dec(Message.RxData[newStartByte]) * 16 + UTL_Asc2Dec(Message.RxData[newStartByte + 1]);
	else if (newLength == 4)//4 bytes
 800bf2a:	2904      	cmp	r1, #4
 800bf2c:	d015      	beq.n	800bf5a <SER_GetValue+0x3a>
	uint16_t returnValue = 0;
 800bf2e:	2000      	movs	r0, #0
		returnValue = UTL_Asc2Dec(Message.RxData[newStartByte]) * 4096 + UTL_Asc2Dec(Message.RxData[newStartByte + 1]) * 256 + UTL_Asc2Dec(Message.RxData[newStartByte + 2]) * 16 + UTL_Asc2Dec(Message.RxData[newStartByte + 3]);
	return returnValue;
}
 800bf30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		returnValue = UTL_Asc2Dec(Message.RxData[newStartByte]);
 800bf32:	4b16      	ldr	r3, [pc, #88]	; (800bf8c <SER_GetValue+0x6c>)
 800bf34:	4418      	add	r0, r3
 800bf36:	7a40      	ldrb	r0, [r0, #9]
 800bf38:	f000 ff68 	bl	800ce0c <UTL_Asc2Dec>
 800bf3c:	b280      	uxth	r0, r0
 800bf3e:	e7f7      	b.n	800bf30 <SER_GetValue+0x10>
		returnValue = UTL_Asc2Dec(Message.RxData[newStartByte]) * 16 + UTL_Asc2Dec(Message.RxData[newStartByte + 1]);
 800bf40:	4c12      	ldr	r4, [pc, #72]	; (800bf8c <SER_GetValue+0x6c>)
 800bf42:	4404      	add	r4, r0
 800bf44:	7a60      	ldrb	r0, [r4, #9]
 800bf46:	f000 ff61 	bl	800ce0c <UTL_Asc2Dec>
 800bf4a:	4605      	mov	r5, r0
 800bf4c:	7aa0      	ldrb	r0, [r4, #10]
 800bf4e:	f000 ff5d 	bl	800ce0c <UTL_Asc2Dec>
 800bf52:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800bf56:	b280      	uxth	r0, r0
 800bf58:	e7ea      	b.n	800bf30 <SER_GetValue+0x10>
		returnValue = UTL_Asc2Dec(Message.RxData[newStartByte]) * 4096 + UTL_Asc2Dec(Message.RxData[newStartByte + 1]) * 256 + UTL_Asc2Dec(Message.RxData[newStartByte + 2]) * 16 + UTL_Asc2Dec(Message.RxData[newStartByte + 3]);
 800bf5a:	4c0c      	ldr	r4, [pc, #48]	; (800bf8c <SER_GetValue+0x6c>)
 800bf5c:	4404      	add	r4, r0
 800bf5e:	7a60      	ldrb	r0, [r4, #9]
 800bf60:	f000 ff54 	bl	800ce0c <UTL_Asc2Dec>
 800bf64:	4607      	mov	r7, r0
 800bf66:	7aa0      	ldrb	r0, [r4, #10]
 800bf68:	f000 ff50 	bl	800ce0c <UTL_Asc2Dec>
 800bf6c:	4606      	mov	r6, r0
 800bf6e:	7ae0      	ldrb	r0, [r4, #11]
 800bf70:	f000 ff4c 	bl	800ce0c <UTL_Asc2Dec>
 800bf74:	4605      	mov	r5, r0
 800bf76:	7b20      	ldrb	r0, [r4, #12]
 800bf78:	f000 ff48 	bl	800ce0c <UTL_Asc2Dec>
 800bf7c:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800bf80:	eb05 1506 	add.w	r5, r5, r6, lsl #4
 800bf84:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800bf88:	b280      	uxth	r0, r0
 800bf8a:	e7d1      	b.n	800bf30 <SER_GetValue+0x10>
 800bf8c:	20001014 	.word	0x20001014

0800bf90 <SER_FillData>:
//! \details    Fills the buffer with converted characters
//! \param[in]  uint8_t newPosition		Position in the array
//! \Param[in]	uint8_t newByteCount	1 byte = 2 hex positions
//! \Param[in]	uint64_t newValue
void SER_FillData (uint8_t newPosition, uint8_t newByteCount, uint64_t newValue)
{
 800bf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf94:	b083      	sub	sp, #12
 800bf96:	9000      	str	r0, [sp, #0]
 800bf98:	9201      	str	r2, [sp, #4]
 800bf9a:	461f      	mov	r7, r3
	uint64_t CompareValue;
	if (newByteCount == 1) CompareValue = 0xF0;
	if (newByteCount == 2) CompareValue = 0xF000;
 800bf9c:	2902      	cmp	r1, #2
 800bf9e:	d04b      	beq.n	800c038 <SER_FillData+0xa8>
	if (newByteCount == 4) CompareValue = 0xF0000000;
 800bfa0:	2904      	cmp	r1, #4
 800bfa2:	d105      	bne.n	800bfb0 <SER_FillData+0x20>
	if (newByteCount == 8) CompareValue = 0xF000000000000000;

	for (uint8_t i = 0; i < (newByteCount * 2); i++)
 800bfa4:	ea4f 0841 	mov.w	r8, r1, lsl #1
	if (newByteCount == 4) CompareValue = 0xF0000000;
 800bfa8:	f04f 4970 	mov.w	r9, #4026531840	; 0xf0000000
 800bfac:	2600      	movs	r6, #0
 800bfae:	e007      	b.n	800bfc0 <SER_FillData+0x30>
	if (newByteCount == 8) CompareValue = 0xF000000000000000;
 800bfb0:	2908      	cmp	r1, #8
 800bfb2:	d13d      	bne.n	800c030 <SER_FillData+0xa0>
 800bfb4:	f04f 0900 	mov.w	r9, #0
 800bfb8:	f04f 4670 	mov.w	r6, #4026531840	; 0xf0000000
	for (uint8_t i = 0; i < (newByteCount * 2); i++)
 800bfbc:	f04f 0810 	mov.w	r8, #16
 800bfc0:	2400      	movs	r4, #0
 800bfc2:	4620      	mov	r0, r4
	{
		Message.RxData[newPosition + i] = UTL_Dec2Asc(((newValue & (CompareValue >> i*4)) >> (4 * ((newByteCount * 2) - 1 - i))));
 800bfc4:	f108 3bff 	add.w	fp, r8, #4294967295
 800bfc8:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800c048 <SER_FillData+0xb8>
 800bfcc:	9b00      	ldr	r3, [sp, #0]
 800bfce:	181d      	adds	r5, r3, r0
 800bfd0:	0083      	lsls	r3, r0, #2
 800bfd2:	f1c3 0c20 	rsb	ip, r3, #32
 800bfd6:	f1a3 0120 	sub.w	r1, r3, #32
 800bfda:	fa29 f203 	lsr.w	r2, r9, r3
 800bfde:	fa06 fc0c 	lsl.w	ip, r6, ip
 800bfe2:	ea42 020c 	orr.w	r2, r2, ip
 800bfe6:	fa26 f101 	lsr.w	r1, r6, r1
 800bfea:	430a      	orrs	r2, r1
 800bfec:	fa26 f303 	lsr.w	r3, r6, r3
 800bff0:	9901      	ldr	r1, [sp, #4]
 800bff2:	400a      	ands	r2, r1
 800bff4:	403b      	ands	r3, r7
 800bff6:	ebab 0000 	sub.w	r0, fp, r0
 800bffa:	0080      	lsls	r0, r0, #2
 800bffc:	f1c0 0c20 	rsb	ip, r0, #32
 800c000:	f1a0 0120 	sub.w	r1, r0, #32
 800c004:	fa22 f000 	lsr.w	r0, r2, r0
 800c008:	fa03 fc0c 	lsl.w	ip, r3, ip
 800c00c:	ea40 000c 	orr.w	r0, r0, ip
 800c010:	fa23 f101 	lsr.w	r1, r3, r1
 800c014:	4308      	orrs	r0, r1
 800c016:	b2c0      	uxtb	r0, r0
 800c018:	f000 ff0f 	bl	800ce3a <UTL_Dec2Asc>
 800c01c:	4455      	add	r5, sl
 800c01e:	7268      	strb	r0, [r5, #9]
	for (uint8_t i = 0; i < (newByteCount * 2); i++)
 800c020:	3401      	adds	r4, #1
 800c022:	b2e4      	uxtb	r4, r4
 800c024:	4620      	mov	r0, r4
 800c026:	4544      	cmp	r4, r8
 800c028:	dbd0      	blt.n	800bfcc <SER_FillData+0x3c>
	}
}
 800c02a:	b003      	add	sp, #12
 800c02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c030:	f04f 09f0 	mov.w	r9, #240	; 0xf0
 800c034:	2600      	movs	r6, #0
 800c036:	e002      	b.n	800c03e <SER_FillData+0xae>
	if (newByteCount == 2) CompareValue = 0xF000;
 800c038:	f44f 4970 	mov.w	r9, #61440	; 0xf000
 800c03c:	2600      	movs	r6, #0
	for (uint8_t i = 0; i < (newByteCount * 2); i++)
 800c03e:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800c042:	2900      	cmp	r1, #0
 800c044:	d1bc      	bne.n	800bfc0 <SER_FillData+0x30>
 800c046:	e7f0      	b.n	800c02a <SER_FillData+0x9a>
 800c048:	20001014 	.word	0x20001014

0800c04c <SER_FillBuffer>:

uint8_t SER_FillBuffer (uint8_t newPosition, uint16_t MType)
{
 800c04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c04e:	b083      	sub	sp, #12
 800c050:	4604      	mov	r4, r0
 800c052:	460e      	mov	r6, r1
	volatile uint8_t Counter = 0;
 800c054:	2300      	movs	r3, #0
 800c056:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t ReturnValue = 0;
	if (MType == MTypeSendPartitionBlock)
 800c05a:	2921      	cmp	r1, #33	; 0x21
 800c05c:	f000 81ff 	beq.w	800c45e <SER_FillBuffer+0x412>
		SER_FillData(newPosition, 2, (uint32_t) FLA[pUpdate].Version);
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].LastBlock);
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].NrOfBlocks);
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].Status);
	}
	if ((MType == MTypeGetPartitionInfo) || (MType == MTypeUpgradeApplication) || (MType == MTypeSetPartitionStatus))
 800c060:	f1a1 0322 	sub.w	r3, r1, #34	; 0x22
 800c064:	b29b      	uxth	r3, r3
 800c066:	2b01      	cmp	r3, #1
 800c068:	d901      	bls.n	800c06e <SER_FillBuffer+0x22>
 800c06a:	2926      	cmp	r1, #38	; 0x26
 800c06c:	d163      	bne.n	800c136 <SER_FillBuffer+0xea>
	{
		SER_FillData(newPosition, 2, (uint32_t) FLA[pApplication].Version);
 800c06e:	4fd2      	ldr	r7, [pc, #840]	; (800c3b8 <SER_FillBuffer+0x36c>)
 800c070:	2500      	movs	r5, #0
 800c072:	68fa      	ldr	r2, [r7, #12]
 800c074:	462b      	mov	r3, r5
 800c076:	2102      	movs	r1, #2
 800c078:	4620      	mov	r0, r4
 800c07a:	f7ff ff89 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pApplication].Status);
 800c07e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c082:	3004      	adds	r0, #4
 800c084:	b2c0      	uxtb	r0, r0
 800c086:	f88d 0007 	strb.w	r0, [sp, #7]
 800c08a:	4420      	add	r0, r4
 800c08c:	7c3a      	ldrb	r2, [r7, #16]
 800c08e:	462b      	mov	r3, r5
 800c090:	2102      	movs	r1, #2
 800c092:	b2c0      	uxtb	r0, r0
 800c094:	f7ff ff7c 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pRollBack].Version);
 800c098:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c09c:	3004      	adds	r0, #4
 800c09e:	b2c0      	uxtb	r0, r0
 800c0a0:	f88d 0007 	strb.w	r0, [sp, #7]
 800c0a4:	4420      	add	r0, r4
 800c0a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0a8:	462b      	mov	r3, r5
 800c0aa:	2102      	movs	r1, #2
 800c0ac:	b2c0      	uxtb	r0, r0
 800c0ae:	f7ff ff6f 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pRollBack].Status);
 800c0b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c0b6:	3004      	adds	r0, #4
 800c0b8:	b2c0      	uxtb	r0, r0
 800c0ba:	f88d 0007 	strb.w	r0, [sp, #7]
 800c0be:	4420      	add	r0, r4
 800c0c0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c0c4:	462b      	mov	r3, r5
 800c0c6:	2102      	movs	r1, #2
 800c0c8:	b2c0      	uxtb	r0, r0
 800c0ca:	f7ff ff61 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].Version);
 800c0ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c0d2:	3004      	adds	r0, #4
 800c0d4:	b2c0      	uxtb	r0, r0
 800c0d6:	f88d 0007 	strb.w	r0, [sp, #7]
 800c0da:	4420      	add	r0, r4
 800c0dc:	69ba      	ldr	r2, [r7, #24]
 800c0de:	462b      	mov	r3, r5
 800c0e0:	2102      	movs	r1, #2
 800c0e2:	b2c0      	uxtb	r0, r0
 800c0e4:	f7ff ff54 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].LastBlock);
 800c0e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c0ec:	3004      	adds	r0, #4
 800c0ee:	b2c0      	uxtb	r0, r0
 800c0f0:	f88d 0007 	strb.w	r0, [sp, #7]
 800c0f4:	4420      	add	r0, r4
 800c0f6:	8bfa      	ldrh	r2, [r7, #30]
 800c0f8:	462b      	mov	r3, r5
 800c0fa:	2102      	movs	r1, #2
 800c0fc:	b2c0      	uxtb	r0, r0
 800c0fe:	f7ff ff47 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].NrOfBlocks);
 800c102:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c106:	3004      	adds	r0, #4
 800c108:	b2c0      	uxtb	r0, r0
 800c10a:	f88d 0007 	strb.w	r0, [sp, #7]
 800c10e:	4420      	add	r0, r4
 800c110:	8c3a      	ldrh	r2, [r7, #32]
 800c112:	462b      	mov	r3, r5
 800c114:	2102      	movs	r1, #2
 800c116:	b2c0      	uxtb	r0, r0
 800c118:	f7ff ff3a 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].Status);
 800c11c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c120:	3004      	adds	r0, #4
 800c122:	b2c0      	uxtb	r0, r0
 800c124:	f88d 0007 	strb.w	r0, [sp, #7]
 800c128:	4420      	add	r0, r4
 800c12a:	7f3a      	ldrb	r2, [r7, #28]
 800c12c:	462b      	mov	r3, r5
 800c12e:	2102      	movs	r1, #2
 800c130:	b2c0      	uxtb	r0, r0
 800c132:	f7ff ff2d 	bl	800bf90 <SER_FillData>
		SER_FillData(4, 1, (uint32_t) MType);
		SER_FillData(newPosition, 2, (uint32_t) BootloaderStatus);
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pApplication].Status);
	}
#endif
	if (MType == MTypeGetDummyMode)
 800c136:	2e35      	cmp	r6, #53	; 0x35
 800c138:	f000 81bf 	beq.w	800c4ba <SER_FillBuffer+0x46e>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) DUMMYMODEFILTER);
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) DUMMYMODERFID);
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) DUMMYMODESCALE);
#endif
	}
	if (MType == MTypeGetMachineParameters)
 800c13c:	2e38      	cmp	r6, #56	; 0x38
 800c13e:	f000 81e1 	beq.w	800c504 <SER_FillBuffer+0x4b8>
		SER_FillData(newPosition, 2, (uint32_t) ADJ_GetParameter(ADJ_P));
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) ADJ_GetParameter(ADJ_I));
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) ADJ_GetParameter(ADJ_D));
#endif
	}
	if ((MType == MTypeGetProcessData)||(MType == MTypeGetAllData))
 800c142:	f1a6 0331 	sub.w	r3, r6, #49	; 0x31
 800c146:	b29b      	uxth	r3, r3
 800c148:	2b01      	cmp	r3, #1
 800c14a:	f240 81fd 	bls.w	800c548 <SER_FillBuffer+0x4fc>
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) GND_GetStatus());
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) SCL_GetStatus());
		SER_FillData(newPosition+(Counter+=4), 2, 0); //Sensors not clear why needed
#endif
	}
	if ((MType == MTypeGetPhysicalData)||(MType == MTypeGetAllData))
 800c14e:	2e33      	cmp	r6, #51	; 0x33
 800c150:	f040 81f3 	bne.w	800c53a <SER_FillBuffer+0x4ee>
	{
#ifdef COFFEEMAKER
		if (Counter == 0)
 800c154:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	f040 82a5 	bne.w	800c6a8 <SER_FillBuffer+0x65c>
			SER_FillData(newPosition, 2, (uint32_t) REC_GetCurrentBlock(RECIPE1));
 800c15e:	2000      	movs	r0, #0
 800c160:	f7fc fca0 	bl	8008aa4 <REC_GetCurrentBlock>
 800c164:	4602      	mov	r2, r0
 800c166:	2300      	movs	r3, #0
 800c168:	2102      	movs	r1, #2
 800c16a:	4620      	mov	r0, r4
 800c16c:	f7ff ff10 	bl	800bf90 <SER_FillData>
		else
			SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) REC_GetCurrentBlock(RECIPE1));
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) REC_GetCurrentBlock(RECIPE2));
 800c170:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c174:	3004      	adds	r0, #4
 800c176:	b2c0      	uxtb	r0, r0
 800c178:	f88d 0007 	strb.w	r0, [sp, #7]
 800c17c:	4420      	add	r0, r4
 800c17e:	b2c7      	uxtb	r7, r0
 800c180:	2001      	movs	r0, #1
 800c182:	f7fc fc8f 	bl	8008aa4 <REC_GetCurrentBlock>
 800c186:	4602      	mov	r2, r0
 800c188:	2500      	movs	r5, #0
 800c18a:	462b      	mov	r3, r5
 800c18c:	2102      	movs	r1, #2
 800c18e:	4638      	mov	r0, r7
 800c190:	f7ff fefe 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) REC_GetCurrentBlock(RECIPE3));//Preheat recipe
 800c194:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c198:	3004      	adds	r0, #4
 800c19a:	b2c0      	uxtb	r0, r0
 800c19c:	f88d 0007 	strb.w	r0, [sp, #7]
 800c1a0:	4420      	add	r0, r4
 800c1a2:	b2c7      	uxtb	r7, r0
 800c1a4:	2002      	movs	r0, #2
 800c1a6:	f7fc fc7d 	bl	8008aa4 <REC_GetCurrentBlock>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	462b      	mov	r3, r5
 800c1ae:	2102      	movs	r1, #2
 800c1b0:	4638      	mov	r0, r7
 800c1b2:	f7ff feed 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) HEA_GetHeaterTemperature(H1)); //FTH1 temperature
 800c1b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c1ba:	3004      	adds	r0, #4
 800c1bc:	b2c0      	uxtb	r0, r0
 800c1be:	f88d 0007 	strb.w	r0, [sp, #7]
 800c1c2:	4420      	add	r0, r4
 800c1c4:	b2c7      	uxtb	r7, r0
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	f7fb f9fc 	bl	80075c4 <HEA_GetHeaterTemperature>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	462b      	mov	r3, r5
 800c1d0:	2102      	movs	r1, #2
 800c1d2:	4638      	mov	r0, r7
 800c1d4:	f7ff fedc 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) HEA_GetHeaterTemperature(H2)); //FTH2 temperature
 800c1d8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c1dc:	3004      	adds	r0, #4
 800c1de:	b2c0      	uxtb	r0, r0
 800c1e0:	f88d 0007 	strb.w	r0, [sp, #7]
 800c1e4:	4420      	add	r0, r4
 800c1e6:	b2c7      	uxtb	r7, r0
 800c1e8:	2001      	movs	r0, #1
 800c1ea:	f7fb f9eb 	bl	80075c4 <HEA_GetHeaterTemperature>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	462b      	mov	r3, r5
 800c1f2:	2102      	movs	r1, #2
 800c1f4:	4638      	mov	r0, r7
 800c1f6:	f7ff fecb 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) HEA_GetHeaterTemperature(H3)); //BrewerHead temperature
 800c1fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c1fe:	3004      	adds	r0, #4
 800c200:	b2c0      	uxtb	r0, r0
 800c202:	f88d 0007 	strb.w	r0, [sp, #7]
 800c206:	4420      	add	r0, r4
 800c208:	b2c7      	uxtb	r7, r0
 800c20a:	2002      	movs	r0, #2
 800c20c:	f7fb f9da 	bl	80075c4 <HEA_GetHeaterTemperature>
 800c210:	4602      	mov	r2, r0
 800c212:	462b      	mov	r3, r5
 800c214:	2102      	movs	r1, #2
 800c216:	4638      	mov	r0, r7
 800c218:	f7ff feba 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) WAN_GetTemperature()); //Milk temperature
 800c21c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c220:	3004      	adds	r0, #4
 800c222:	b2c0      	uxtb	r0, r0
 800c224:	f88d 0007 	strb.w	r0, [sp, #7]
 800c228:	4420      	add	r0, r4
 800c22a:	b2c7      	uxtb	r7, r0
 800c22c:	f7fc fdda 	bl	8008de4 <WAN_GetTemperature>
 800c230:	4602      	mov	r2, r0
 800c232:	462b      	mov	r3, r5
 800c234:	2102      	movs	r1, #2
 800c236:	4638      	mov	r0, r7
 800c238:	f7ff feaa 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) PUM_GetFlow(0)); //Flow pump 1
 800c23c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c240:	3004      	adds	r0, #4
 800c242:	b2c0      	uxtb	r0, r0
 800c244:	f88d 0007 	strb.w	r0, [sp, #7]
 800c248:	4420      	add	r0, r4
 800c24a:	b2c7      	uxtb	r7, r0
 800c24c:	4628      	mov	r0, r5
 800c24e:	f7fc faaf 	bl	80087b0 <PUM_GetFlow>
 800c252:	4602      	mov	r2, r0
 800c254:	462b      	mov	r3, r5
 800c256:	2102      	movs	r1, #2
 800c258:	4638      	mov	r0, r7
 800c25a:	f7ff fe99 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) PUM_GetFlow(1)); //Flow pump 2
 800c25e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c262:	3004      	adds	r0, #4
 800c264:	b2c0      	uxtb	r0, r0
 800c266:	f88d 0007 	strb.w	r0, [sp, #7]
 800c26a:	4420      	add	r0, r4
 800c26c:	b2c7      	uxtb	r7, r0
 800c26e:	2001      	movs	r0, #1
 800c270:	f7fc fa9e 	bl	80087b0 <PUM_GetFlow>
 800c274:	4602      	mov	r2, r0
 800c276:	462b      	mov	r3, r5
 800c278:	2102      	movs	r1, #2
 800c27a:	4638      	mov	r0, r7
 800c27c:	f7ff fe88 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) AIR_GetPercentage()); //Flow pump 3 (In fact percentage. Has no flow meter for the air)
 800c280:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c284:	3004      	adds	r0, #4
 800c286:	b2c0      	uxtb	r0, r0
 800c288:	f88d 0007 	strb.w	r0, [sp, #7]
 800c28c:	4420      	add	r0, r4
 800c28e:	b2c7      	uxtb	r7, r0
 800c290:	f7fa fe38 	bl	8006f04 <AIR_GetPercentage>
 800c294:	4602      	mov	r2, r0
 800c296:	462b      	mov	r3, r5
 800c298:	2102      	movs	r1, #2
 800c29a:	4638      	mov	r0, r7
 800c29c:	f7ff fe78 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) PUM_GetPressure(0)); //PS1 pressure
 800c2a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c2a4:	3004      	adds	r0, #4
 800c2a6:	b2c0      	uxtb	r0, r0
 800c2a8:	f88d 0007 	strb.w	r0, [sp, #7]
 800c2ac:	4420      	add	r0, r4
 800c2ae:	b2c7      	uxtb	r7, r0
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	f7fc fa6d 	bl	8008790 <PUM_GetPressure>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	462b      	mov	r3, r5
 800c2ba:	2102      	movs	r1, #2
 800c2bc:	4638      	mov	r0, r7
 800c2be:	f7ff fe67 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) PUM_GetPressure(1)); //PS2 pressure
 800c2c2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c2c6:	3004      	adds	r0, #4
 800c2c8:	b2c0      	uxtb	r0, r0
 800c2ca:	f88d 0007 	strb.w	r0, [sp, #7]
 800c2ce:	4420      	add	r0, r4
 800c2d0:	b2c7      	uxtb	r7, r0
 800c2d2:	2001      	movs	r0, #1
 800c2d4:	f7fc fa5c 	bl	8008790 <PUM_GetPressure>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	462b      	mov	r3, r5
 800c2dc:	2102      	movs	r1, #2
 800c2de:	4638      	mov	r0, r7
 800c2e0:	f7ff fe56 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) PUM_GetVolume(0)); //Volume pump 1
 800c2e4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c2e8:	3004      	adds	r0, #4
 800c2ea:	b2c0      	uxtb	r0, r0
 800c2ec:	f88d 0007 	strb.w	r0, [sp, #7]
 800c2f0:	4420      	add	r0, r4
 800c2f2:	b2c7      	uxtb	r7, r0
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	f7fc fa6b 	bl	80087d0 <PUM_GetVolume>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	462b      	mov	r3, r5
 800c2fe:	2102      	movs	r1, #2
 800c300:	4638      	mov	r0, r7
 800c302:	f7ff fe45 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) PUM_GetVolume(1)); //Volume pump 2
 800c306:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c30a:	3004      	adds	r0, #4
 800c30c:	b2c0      	uxtb	r0, r0
 800c30e:	f88d 0007 	strb.w	r0, [sp, #7]
 800c312:	4420      	add	r0, r4
 800c314:	b2c7      	uxtb	r7, r0
 800c316:	2001      	movs	r0, #1
 800c318:	f7fc fa5a 	bl	80087d0 <PUM_GetVolume>
 800c31c:	4602      	mov	r2, r0
 800c31e:	462b      	mov	r3, r5
 800c320:	2102      	movs	r1, #2
 800c322:	4638      	mov	r0, r7
 800c324:	f7ff fe34 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) VAL_GetStatus()); //Valves bit array
 800c328:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c32c:	3004      	adds	r0, #4
 800c32e:	b2c0      	uxtb	r0, r0
 800c330:	f88d 0007 	strb.w	r0, [sp, #7]
 800c334:	4420      	add	r0, r4
 800c336:	b2c7      	uxtb	r7, r0
 800c338:	f7fd f872 	bl	8009420 <VAL_GetStatus>
 800c33c:	4602      	mov	r2, r0
 800c33e:	462b      	mov	r3, r5
 800c340:	2102      	movs	r1, #2
 800c342:	4638      	mov	r0, r7
 800c344:	f7ff fe24 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) BTN_GetStatus(BTN_COFFEE));
 800c348:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c34c:	3004      	adds	r0, #4
 800c34e:	b2c0      	uxtb	r0, r0
 800c350:	f88d 0007 	strb.w	r0, [sp, #7]
 800c354:	4420      	add	r0, r4
 800c356:	b2c7      	uxtb	r7, r0
 800c358:	4628      	mov	r0, r5
 800c35a:	f7fc fc73 	bl	8008c44 <BTN_GetStatus>
 800c35e:	4602      	mov	r2, r0
 800c360:	462b      	mov	r3, r5
 800c362:	2102      	movs	r1, #2
 800c364:	4638      	mov	r0, r7
 800c366:	f7ff fe13 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) BTN_GetDirection(BTN_COFFEE));
 800c36a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c36e:	3004      	adds	r0, #4
 800c370:	b2c0      	uxtb	r0, r0
 800c372:	f88d 0007 	strb.w	r0, [sp, #7]
 800c376:	4420      	add	r0, r4
 800c378:	b2c7      	uxtb	r7, r0
 800c37a:	4628      	mov	r0, r5
 800c37c:	f7fc fc68 	bl	8008c50 <BTN_GetDirection>
 800c380:	4602      	mov	r2, r0
 800c382:	462b      	mov	r3, r5
 800c384:	2102      	movs	r1, #2
 800c386:	4638      	mov	r0, r7
 800c388:	f7ff fe02 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) BTN_GetStatus(BTN_MILK));
 800c38c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c390:	3004      	adds	r0, #4
 800c392:	b2c0      	uxtb	r0, r0
 800c394:	f88d 0007 	strb.w	r0, [sp, #7]
 800c398:	4420      	add	r0, r4
 800c39a:	b2c7      	uxtb	r7, r0
 800c39c:	2001      	movs	r0, #1
 800c39e:	f7fc fc51 	bl	8008c44 <BTN_GetStatus>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	462b      	mov	r3, r5
 800c3a6:	2102      	movs	r1, #2
 800c3a8:	4638      	mov	r0, r7
 800c3aa:	f7ff fdf1 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) ANA_GetSensorValue(ADC_MOTOR));
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) SCL_GetWeight());
#endif
	}
#ifndef BOOTLOADER
	if ((MType == MTypeGetDeviceData)||(MType == MTypeGetAllData))
 800c3ae:	2e34      	cmp	r6, #52	; 0x34
 800c3b0:	d004      	beq.n	800c3bc <SER_FillBuffer+0x370>
 800c3b2:	2e31      	cmp	r6, #49	; 0x31
 800c3b4:	d14b      	bne.n	800c44e <SER_FillBuffer+0x402>
 800c3b6:	e001      	b.n	800c3bc <SER_FillBuffer+0x370>
 800c3b8:	20000c90 	.word	0x20000c90
	{
		if (Counter == 0)
 800c3bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	f040 8183 	bne.w	800c6cc <SER_FillBuffer+0x680>
			SER_FillData(newPosition, 2, (uint32_t) SERIALNUMBER >> 16);
 800c3c6:	f24f 1245 	movw	r2, #61765	; 0xf145
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	2102      	movs	r1, #2
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	f7ff fdde 	bl	800bf90 <SER_FillData>
		else
			SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) SERIALNUMBER >> 16);
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) (SERIALNUMBER & 0xffff));
 800c3d4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c3d8:	3004      	adds	r0, #4
 800c3da:	b2c0      	uxtb	r0, r0
 800c3dc:	f88d 0007 	strb.w	r0, [sp, #7]
 800c3e0:	4420      	add	r0, r4
 800c3e2:	f646 7212 	movw	r2, #28434	; 0x6f12
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	2102      	movs	r1, #2
 800c3ea:	b2c0      	uxtb	r0, r0
 800c3ec:	f7ff fdd0 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) WRK_GetHardwareVersion());
 800c3f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c3f4:	3004      	adds	r0, #4
 800c3f6:	b2c0      	uxtb	r0, r0
 800c3f8:	f88d 0007 	strb.w	r0, [sp, #7]
 800c3fc:	4420      	add	r0, r4
 800c3fe:	b2c5      	uxtb	r5, r0
 800c400:	f7fd f998 	bl	8009734 <WRK_GetHardwareVersion>
 800c404:	4602      	mov	r2, r0
 800c406:	2600      	movs	r6, #0
 800c408:	4633      	mov	r3, r6
 800c40a:	2102      	movs	r1, #2
 800c40c:	4628      	mov	r0, r5
 800c40e:	f7ff fdbf 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) WRK_GetSoftwareVersion());
 800c412:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c416:	3004      	adds	r0, #4
 800c418:	b2c0      	uxtb	r0, r0
 800c41a:	f88d 0007 	strb.w	r0, [sp, #7]
 800c41e:	4420      	add	r0, r4
 800c420:	b2c5      	uxtb	r5, r0
 800c422:	f7fd f9b3 	bl	800978c <WRK_GetSoftwareVersion>
 800c426:	4602      	mov	r2, r0
 800c428:	4633      	mov	r3, r6
 800c42a:	2102      	movs	r1, #2
 800c42c:	4628      	mov	r0, r5
 800c42e:	f7ff fdaf 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pBootloader].Version);
 800c432:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c436:	3004      	adds	r0, #4
 800c438:	b2c0      	uxtb	r0, r0
 800c43a:	f88d 0007 	strb.w	r0, [sp, #7]
 800c43e:	4420      	add	r0, r4
 800c440:	4baa      	ldr	r3, [pc, #680]	; (800c6ec <SER_FillBuffer+0x6a0>)
 800c442:	681a      	ldr	r2, [r3, #0]
 800c444:	4633      	mov	r3, r6
 800c446:	2102      	movs	r1, #2
 800c448:	b2c0      	uxtb	r0, r0
 800c44a:	f7ff fda1 	bl	800bf90 <SER_FillData>
			SER_FillData(newPosition + Counter, 2, (uint64_t) CON.CardMemory[i]);
			if (TAGDATACOUNT - i > 1) Counter += 4;
		}
	}
#endif
	ReturnValue = (Counter+=4);
 800c44e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c452:	3004      	adds	r0, #4
 800c454:	b2c0      	uxtb	r0, r0
 800c456:	f88d 0007 	strb.w	r0, [sp, #7]
	return ReturnValue;
}
 800c45a:	b003      	add	sp, #12
 800c45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SER_FillData(newPosition, 2, (uint32_t) FLA[pUpdate].Version);
 800c45e:	4fa3      	ldr	r7, [pc, #652]	; (800c6ec <SER_FillBuffer+0x6a0>)
 800c460:	461d      	mov	r5, r3
 800c462:	69ba      	ldr	r2, [r7, #24]
 800c464:	2102      	movs	r1, #2
 800c466:	f7ff fd93 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].LastBlock);
 800c46a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c46e:	3004      	adds	r0, #4
 800c470:	b2c0      	uxtb	r0, r0
 800c472:	f88d 0007 	strb.w	r0, [sp, #7]
 800c476:	4420      	add	r0, r4
 800c478:	8bfa      	ldrh	r2, [r7, #30]
 800c47a:	462b      	mov	r3, r5
 800c47c:	2102      	movs	r1, #2
 800c47e:	b2c0      	uxtb	r0, r0
 800c480:	f7ff fd86 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].NrOfBlocks);
 800c484:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c488:	3004      	adds	r0, #4
 800c48a:	b2c0      	uxtb	r0, r0
 800c48c:	f88d 0007 	strb.w	r0, [sp, #7]
 800c490:	4420      	add	r0, r4
 800c492:	8c3a      	ldrh	r2, [r7, #32]
 800c494:	462b      	mov	r3, r5
 800c496:	2102      	movs	r1, #2
 800c498:	b2c0      	uxtb	r0, r0
 800c49a:	f7ff fd79 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].Status);
 800c49e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c4a2:	3004      	adds	r0, #4
 800c4a4:	b2c0      	uxtb	r0, r0
 800c4a6:	f88d 0007 	strb.w	r0, [sp, #7]
 800c4aa:	4420      	add	r0, r4
 800c4ac:	7f3a      	ldrb	r2, [r7, #28]
 800c4ae:	462b      	mov	r3, r5
 800c4b0:	2102      	movs	r1, #2
 800c4b2:	b2c0      	uxtb	r0, r0
 800c4b4:	f7ff fd6c 	bl	800bf90 <SER_FillData>
	if (MType == MTypeGetDummyMode)
 800c4b8:	e643      	b.n	800c142 <SER_FillBuffer+0xf6>
		SER_FillData(newPosition, 2, (uint32_t) DUMMYMODE);
 800c4ba:	2500      	movs	r5, #0
 800c4bc:	4b8c      	ldr	r3, [pc, #560]	; (800c6f0 <SER_FillBuffer+0x6a4>)
 800c4be:	781a      	ldrb	r2, [r3, #0]
 800c4c0:	462b      	mov	r3, r5
 800c4c2:	2102      	movs	r1, #2
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	f7ff fd63 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) DUMMYMODEFILTER);
 800c4ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c4ce:	3004      	adds	r0, #4
 800c4d0:	b2c0      	uxtb	r0, r0
 800c4d2:	f88d 0007 	strb.w	r0, [sp, #7]
 800c4d6:	4420      	add	r0, r4
 800c4d8:	4b86      	ldr	r3, [pc, #536]	; (800c6f4 <SER_FillBuffer+0x6a8>)
 800c4da:	781a      	ldrb	r2, [r3, #0]
 800c4dc:	462b      	mov	r3, r5
 800c4de:	2102      	movs	r1, #2
 800c4e0:	b2c0      	uxtb	r0, r0
 800c4e2:	f7ff fd55 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) DUMMYMODEH3);
 800c4e6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c4ea:	3004      	adds	r0, #4
 800c4ec:	b2c0      	uxtb	r0, r0
 800c4ee:	f88d 0007 	strb.w	r0, [sp, #7]
 800c4f2:	4420      	add	r0, r4
 800c4f4:	4b80      	ldr	r3, [pc, #512]	; (800c6f8 <SER_FillBuffer+0x6ac>)
 800c4f6:	781a      	ldrb	r2, [r3, #0]
 800c4f8:	462b      	mov	r3, r5
 800c4fa:	2102      	movs	r1, #2
 800c4fc:	b2c0      	uxtb	r0, r0
 800c4fe:	f7ff fd47 	bl	800bf90 <SER_FillData>
	if ((MType == MTypeGetProcessData)||(MType == MTypeGetAllData))
 800c502:	e624      	b.n	800c14e <SER_FillBuffer+0x102>
		SER_FillData(newPosition, 2, (uint32_t) PUM_GetParameter(PUM_ULPERPULSEP1));
 800c504:	2027      	movs	r0, #39	; 0x27
 800c506:	f7fb fdb5 	bl	8008074 <PUM_GetParameter>
 800c50a:	4602      	mov	r2, r0
 800c50c:	2700      	movs	r7, #0
 800c50e:	463b      	mov	r3, r7
 800c510:	2102      	movs	r1, #2
 800c512:	4620      	mov	r0, r4
 800c514:	f7ff fd3c 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) PUM_GetParameter(PUM_ULPERPULSEP2));
 800c518:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c51c:	3004      	adds	r0, #4
 800c51e:	b2c0      	uxtb	r0, r0
 800c520:	f88d 0007 	strb.w	r0, [sp, #7]
 800c524:	4420      	add	r0, r4
 800c526:	b2c5      	uxtb	r5, r0
 800c528:	2028      	movs	r0, #40	; 0x28
 800c52a:	f7fb fda3 	bl	8008074 <PUM_GetParameter>
 800c52e:	4602      	mov	r2, r0
 800c530:	463b      	mov	r3, r7
 800c532:	2102      	movs	r1, #2
 800c534:	4628      	mov	r0, r5
 800c536:	f7ff fd2b 	bl	800bf90 <SER_FillData>
	if ((MType == MTypeGetPhysicalData)||(MType == MTypeGetAllData))
 800c53a:	2e31      	cmp	r6, #49	; 0x31
 800c53c:	f43f ae0a 	beq.w	800c154 <SER_FillBuffer+0x108>
	if ((MType == MTypeGetDeviceData)||(MType == MTypeGetAllData))
 800c540:	2e34      	cmp	r6, #52	; 0x34
 800c542:	f43f af3b 	beq.w	800c3bc <SER_FillBuffer+0x370>
 800c546:	e782      	b.n	800c44e <SER_FillBuffer+0x402>
		SER_FillData(newPosition, 2, (uint32_t) REC_GetNrOfBlocks(RECIPE1));
 800c548:	2000      	movs	r0, #0
 800c54a:	f7fc faa3 	bl	8008a94 <REC_GetNrOfBlocks>
 800c54e:	4602      	mov	r2, r0
 800c550:	2700      	movs	r7, #0
 800c552:	463b      	mov	r3, r7
 800c554:	2102      	movs	r1, #2
 800c556:	4620      	mov	r0, r4
 800c558:	f7ff fd1a 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) REC_GetNrOfBlocks(RECIPE2));
 800c55c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c560:	3004      	adds	r0, #4
 800c562:	b2c0      	uxtb	r0, r0
 800c564:	f88d 0007 	strb.w	r0, [sp, #7]
 800c568:	4420      	add	r0, r4
 800c56a:	b2c5      	uxtb	r5, r0
 800c56c:	2001      	movs	r0, #1
 800c56e:	f7fc fa91 	bl	8008a94 <REC_GetNrOfBlocks>
 800c572:	4602      	mov	r2, r0
 800c574:	463b      	mov	r3, r7
 800c576:	2102      	movs	r1, #2
 800c578:	4628      	mov	r0, r5
 800c57a:	f7ff fd09 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, 0);//No more recipe 3. Was Water
 800c57e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c582:	3004      	adds	r0, #4
 800c584:	b2c0      	uxtb	r0, r0
 800c586:	f88d 0007 	strb.w	r0, [sp, #7]
 800c58a:	4420      	add	r0, r4
 800c58c:	2200      	movs	r2, #0
 800c58e:	2300      	movs	r3, #0
 800c590:	2102      	movs	r1, #2
 800c592:	b2c0      	uxtb	r0, r0
 800c594:	f7ff fcfc 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) WAT_GetVolume());
 800c598:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c59c:	3004      	adds	r0, #4
 800c59e:	b2c0      	uxtb	r0, r0
 800c5a0:	f88d 0007 	strb.w	r0, [sp, #7]
 800c5a4:	4420      	add	r0, r4
 800c5a6:	b2c5      	uxtb	r5, r0
 800c5a8:	f7fd f854 	bl	8009654 <WAT_GetVolume>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	463b      	mov	r3, r7
 800c5b0:	2102      	movs	r1, #2
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	f7ff fcec 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FIL_GetStatus());
 800c5b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c5bc:	3004      	adds	r0, #4
 800c5be:	b2c0      	uxtb	r0, r0
 800c5c0:	f88d 0007 	strb.w	r0, [sp, #7]
 800c5c4:	4420      	add	r0, r4
 800c5c6:	b2c5      	uxtb	r5, r0
 800c5c8:	f7fe fc4a 	bl	800ae60 <FIL_GetStatus>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	463b      	mov	r3, r7
 800c5d0:	2102      	movs	r1, #2
 800c5d2:	4628      	mov	r0, r5
 800c5d4:	f7ff fcdc 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) WAN_GetStatus());
 800c5d8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c5dc:	3004      	adds	r0, #4
 800c5de:	b2c0      	uxtb	r0, r0
 800c5e0:	f88d 0007 	strb.w	r0, [sp, #7]
 800c5e4:	4420      	add	r0, r4
 800c5e6:	b2c5      	uxtb	r5, r0
 800c5e8:	f7fc fbdc 	bl	8008da4 <WAN_GetStatus>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	463b      	mov	r3, r7
 800c5f0:	2102      	movs	r1, #2
 800c5f2:	4628      	mov	r0, r5
 800c5f4:	f7ff fccc 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) DRP_GetStatus());
 800c5f8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c5fc:	3004      	adds	r0, #4
 800c5fe:	b2c0      	uxtb	r0, r0
 800c600:	f88d 0007 	strb.w	r0, [sp, #7]
 800c604:	4420      	add	r0, r4
 800c606:	b2c5      	uxtb	r5, r0
 800c608:	f7fa fec6 	bl	8007398 <DRP_GetStatus>
 800c60c:	4602      	mov	r2, r0
 800c60e:	463b      	mov	r3, r7
 800c610:	2102      	movs	r1, #2
 800c612:	4628      	mov	r0, r5
 800c614:	f7ff fcbc 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) WRK_GetMainStatus());
 800c618:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c61c:	3004      	adds	r0, #4
 800c61e:	b2c0      	uxtb	r0, r0
 800c620:	f88d 0007 	strb.w	r0, [sp, #7]
 800c624:	4420      	add	r0, r4
 800c626:	b2c5      	uxtb	r5, r0
 800c628:	f7fd f8aa 	bl	8009780 <WRK_GetMainStatus>
 800c62c:	4602      	mov	r2, r0
 800c62e:	463b      	mov	r3, r7
 800c630:	2102      	movs	r1, #2
 800c632:	4628      	mov	r0, r5
 800c634:	f7ff fcac 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) WRK_GetSubStatus());
 800c638:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c63c:	3004      	adds	r0, #4
 800c63e:	b2c0      	uxtb	r0, r0
 800c640:	f88d 0007 	strb.w	r0, [sp, #7]
 800c644:	4420      	add	r0, r4
 800c646:	b2c5      	uxtb	r5, r0
 800c648:	f7fd f8a4 	bl	8009794 <WRK_GetSubStatus>
 800c64c:	4602      	mov	r2, r0
 800c64e:	463b      	mov	r3, r7
 800c650:	2102      	movs	r1, #2
 800c652:	4628      	mov	r0, r5
 800c654:	f7ff fc9c 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) AM_GetHumidity());
 800c658:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c65c:	3004      	adds	r0, #4
 800c65e:	b2c0      	uxtb	r0, r0
 800c660:	f88d 0007 	strb.w	r0, [sp, #7]
 800c664:	4420      	add	r0, r4
 800c666:	b2c5      	uxtb	r5, r0
 800c668:	f7fa fc58 	bl	8006f1c <AM_GetHumidity>
 800c66c:	f7fa f938 	bl	80068e0 <__aeabi_f2uiz>
 800c670:	4602      	mov	r2, r0
 800c672:	463b      	mov	r3, r7
 800c674:	2102      	movs	r1, #2
 800c676:	4628      	mov	r0, r5
 800c678:	f7ff fc8a 	bl	800bf90 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) AM_GetTemperature());
 800c67c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c680:	3004      	adds	r0, #4
 800c682:	b2c0      	uxtb	r0, r0
 800c684:	f88d 0007 	strb.w	r0, [sp, #7]
 800c688:	4420      	add	r0, r4
 800c68a:	b2c5      	uxtb	r5, r0
 800c68c:	f7fa fc54 	bl	8006f38 <AM_GetTemperature>
 800c690:	f7fa f926 	bl	80068e0 <__aeabi_f2uiz>
 800c694:	4602      	mov	r2, r0
 800c696:	463b      	mov	r3, r7
 800c698:	2102      	movs	r1, #2
 800c69a:	4628      	mov	r0, r5
 800c69c:	f7ff fc78 	bl	800bf90 <SER_FillData>
	if ((MType == MTypeGetPhysicalData)||(MType == MTypeGetAllData))
 800c6a0:	2e31      	cmp	r6, #49	; 0x31
 800c6a2:	f47f aed4 	bne.w	800c44e <SER_FillBuffer+0x402>
 800c6a6:	e555      	b.n	800c154 <SER_FillBuffer+0x108>
			SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) REC_GetCurrentBlock(RECIPE1));
 800c6a8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c6ac:	3004      	adds	r0, #4
 800c6ae:	b2c0      	uxtb	r0, r0
 800c6b0:	f88d 0007 	strb.w	r0, [sp, #7]
 800c6b4:	4420      	add	r0, r4
 800c6b6:	b2c5      	uxtb	r5, r0
 800c6b8:	2000      	movs	r0, #0
 800c6ba:	f7fc f9f3 	bl	8008aa4 <REC_GetCurrentBlock>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	2102      	movs	r1, #2
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	f7ff fc63 	bl	800bf90 <SER_FillData>
 800c6ca:	e551      	b.n	800c170 <SER_FillBuffer+0x124>
			SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) SERIALNUMBER >> 16);
 800c6cc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c6d0:	3004      	adds	r0, #4
 800c6d2:	b2c0      	uxtb	r0, r0
 800c6d4:	f88d 0007 	strb.w	r0, [sp, #7]
 800c6d8:	4420      	add	r0, r4
 800c6da:	f24f 1245 	movw	r2, #61765	; 0xf145
 800c6de:	2300      	movs	r3, #0
 800c6e0:	2102      	movs	r1, #2
 800c6e2:	b2c0      	uxtb	r0, r0
 800c6e4:	f7ff fc54 	bl	800bf90 <SER_FillData>
 800c6e8:	e674      	b.n	800c3d4 <SER_FillBuffer+0x388>
 800c6ea:	bf00      	nop
 800c6ec:	20000c90 	.word	0x20000c90
 800c6f0:	20000c48 	.word	0x20000c48
 800c6f4:	20000c49 	.word	0x20000c49
 800c6f8:	20000c4a 	.word	0x20000c4a

0800c6fc <HAL_UART_RxCpltCallback>:
//! \details    Checks the length of the message and limits to MDataMax
//! \details    Fills the rest of the data buffer until the length of the message is received
//! \param      None
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (SER_Busy) return;
 800c6fc:	4b32      	ldr	r3, [pc, #200]	; (800c7c8 <HAL_UART_RxCpltCallback+0xcc>)
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d160      	bne.n	800c7c6 <HAL_UART_RxCpltCallback+0xca>
{
 800c704:	b510      	push	{r4, lr}
	uint8_t CurrentValue;
	if(huart->Instance == USART2)  //Received from debugging interface
 800c706:	6803      	ldr	r3, [r0, #0]
 800c708:	4a30      	ldr	r2, [pc, #192]	; (800c7cc <HAL_UART_RxCpltCallback+0xd0>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d023      	beq.n	800c756 <HAL_UART_RxCpltCallback+0x5a>
	{
		UartReturn = 2;
	}
	else if(huart->Instance == USART3)  //Received from linux system
 800c70e:	4a30      	ldr	r2, [pc, #192]	; (800c7d0 <HAL_UART_RxCpltCallback+0xd4>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d024      	beq.n	800c75e <HAL_UART_RxCpltCallback+0x62>
	{
		UartReturn = 3;
	}

	CurrentValue = UTL_Asc2Dec(Message.RxBuffer);
 800c714:	4c2f      	ldr	r4, [pc, #188]	; (800c7d4 <HAL_UART_RxCpltCallback+0xd8>)
 800c716:	7820      	ldrb	r0, [r4, #0]
 800c718:	f000 fb78 	bl	800ce0c <UTL_Asc2Dec>
	Message.RxData[Message.Counter] = Message.RxBuffer;
 800c71c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800c720:	7822      	ldrb	r2, [r4, #0]
 800c722:	441c      	add	r4, r3
 800c724:	7262      	strb	r2, [r4, #9]
	if (Message.RxBuffer == 0x2f) //Start byte. Reset Rx counter
 800c726:	2a2f      	cmp	r2, #47	; 0x2f
 800c728:	d01d      	beq.n	800c766 <HAL_UART_RxCpltCallback+0x6a>
	{
		Message.Counter = 1;
	}
	else if (Message.Counter == 1) //UART protocol
 800c72a:	2b01      	cmp	r3, #1
 800c72c:	d01f      	beq.n	800c76e <HAL_UART_RxCpltCallback+0x72>
	{
		Message.UARTVersion = CurrentValue;
		Message.Counter = 2;
	}
	else if (Message.Counter == 2) //Length MSB received
 800c72e:	2b02      	cmp	r3, #2
 800c730:	d022      	beq.n	800c778 <HAL_UART_RxCpltCallback+0x7c>
	{
		Message.Length = CurrentValue * 16;
		Message.Counter = 3;
	}
	else if (Message.Counter == 3) //Length LSB received
 800c732:	2b03      	cmp	r3, #3
 800c734:	d026      	beq.n	800c784 <HAL_UART_RxCpltCallback+0x88>
		Message.Length += CurrentValue;
		if (Message.Length > MLengthMax)
			Message.Length = MLengthMax; //Prevent buffer overflow
		Message.Counter = 4;
	}
	else if	(Message.Counter == 4) //Message type MSB received
 800c736:	2b04      	cmp	r3, #4
 800c738:	d02b      	beq.n	800c792 <HAL_UART_RxCpltCallback+0x96>
	{
		Message.MType = CurrentValue * 16;
		Message.Counter = 5;
	}
	else if	(Message.Counter == 5) //Message type LSB received
 800c73a:	2b05      	cmp	r3, #5
 800c73c:	d02f      	beq.n	800c79e <HAL_UART_RxCpltCallback+0xa2>
	{
		Message.MType += CurrentValue;
		Message.Counter = 6;
	}
	else if	(Message.Counter == 6) //CRC MSB received
 800c73e:	2b06      	cmp	r3, #6
 800c740:	d034      	beq.n	800c7ac <HAL_UART_RxCpltCallback+0xb0>
	{
		Message.CRCValue = CurrentValue * 16;
		Message.Counter = 7;
	}
	else if	(Message.Counter == 7) //CRC LSB received
 800c742:	2b07      	cmp	r3, #7
 800c744:	d038      	beq.n	800c7b8 <HAL_UART_RxCpltCallback+0xbc>
	{
		Message.CRCValue += CurrentValue;
		Message.Counter = 8;
	}
	else if	(Message.Counter < Message.Length) //Any byte received
 800c746:	4a23      	ldr	r2, [pc, #140]	; (800c7d4 <HAL_UART_RxCpltCallback+0xd8>)
 800c748:	7892      	ldrb	r2, [r2, #2]
 800c74a:	4293      	cmp	r3, r2
 800c74c:	da0e      	bge.n	800c76c <HAL_UART_RxCpltCallback+0x70>
	{
		Message.Counter ++;
 800c74e:	3301      	adds	r3, #1
 800c750:	4a20      	ldr	r2, [pc, #128]	; (800c7d4 <HAL_UART_RxCpltCallback+0xd8>)
 800c752:	80d3      	strh	r3, [r2, #6]
 800c754:	e00a      	b.n	800c76c <HAL_UART_RxCpltCallback+0x70>
		UartReturn = 2;
 800c756:	4b20      	ldr	r3, [pc, #128]	; (800c7d8 <HAL_UART_RxCpltCallback+0xdc>)
 800c758:	2202      	movs	r2, #2
 800c75a:	701a      	strb	r2, [r3, #0]
 800c75c:	e7da      	b.n	800c714 <HAL_UART_RxCpltCallback+0x18>
		UartReturn = 3;
 800c75e:	4b1e      	ldr	r3, [pc, #120]	; (800c7d8 <HAL_UART_RxCpltCallback+0xdc>)
 800c760:	2203      	movs	r2, #3
 800c762:	701a      	strb	r2, [r3, #0]
 800c764:	e7d6      	b.n	800c714 <HAL_UART_RxCpltCallback+0x18>
		Message.Counter = 1;
 800c766:	4b1b      	ldr	r3, [pc, #108]	; (800c7d4 <HAL_UART_RxCpltCallback+0xd8>)
 800c768:	2201      	movs	r2, #1
 800c76a:	80da      	strh	r2, [r3, #6]
	}
}
 800c76c:	bd10      	pop	{r4, pc}
		Message.UARTVersion = CurrentValue;
 800c76e:	4b19      	ldr	r3, [pc, #100]	; (800c7d4 <HAL_UART_RxCpltCallback+0xd8>)
 800c770:	7058      	strb	r0, [r3, #1]
		Message.Counter = 2;
 800c772:	2202      	movs	r2, #2
 800c774:	80da      	strh	r2, [r3, #6]
 800c776:	e7f9      	b.n	800c76c <HAL_UART_RxCpltCallback+0x70>
		Message.Length = CurrentValue * 16;
 800c778:	4b16      	ldr	r3, [pc, #88]	; (800c7d4 <HAL_UART_RxCpltCallback+0xd8>)
 800c77a:	0100      	lsls	r0, r0, #4
 800c77c:	7098      	strb	r0, [r3, #2]
		Message.Counter = 3;
 800c77e:	2203      	movs	r2, #3
 800c780:	80da      	strh	r2, [r3, #6]
 800c782:	e7f3      	b.n	800c76c <HAL_UART_RxCpltCallback+0x70>
		Message.Length += CurrentValue;
 800c784:	4b13      	ldr	r3, [pc, #76]	; (800c7d4 <HAL_UART_RxCpltCallback+0xd8>)
 800c786:	789a      	ldrb	r2, [r3, #2]
 800c788:	4410      	add	r0, r2
 800c78a:	7098      	strb	r0, [r3, #2]
		Message.Counter = 4;
 800c78c:	2204      	movs	r2, #4
 800c78e:	80da      	strh	r2, [r3, #6]
 800c790:	e7ec      	b.n	800c76c <HAL_UART_RxCpltCallback+0x70>
		Message.MType = CurrentValue * 16;
 800c792:	4b10      	ldr	r3, [pc, #64]	; (800c7d4 <HAL_UART_RxCpltCallback+0xd8>)
 800c794:	0100      	lsls	r0, r0, #4
 800c796:	70d8      	strb	r0, [r3, #3]
		Message.Counter = 5;
 800c798:	2205      	movs	r2, #5
 800c79a:	80da      	strh	r2, [r3, #6]
 800c79c:	e7e6      	b.n	800c76c <HAL_UART_RxCpltCallback+0x70>
		Message.MType += CurrentValue;
 800c79e:	4b0d      	ldr	r3, [pc, #52]	; (800c7d4 <HAL_UART_RxCpltCallback+0xd8>)
 800c7a0:	78da      	ldrb	r2, [r3, #3]
 800c7a2:	4410      	add	r0, r2
 800c7a4:	70d8      	strb	r0, [r3, #3]
		Message.Counter = 6;
 800c7a6:	2206      	movs	r2, #6
 800c7a8:	80da      	strh	r2, [r3, #6]
 800c7aa:	e7df      	b.n	800c76c <HAL_UART_RxCpltCallback+0x70>
		Message.CRCValue = CurrentValue * 16;
 800c7ac:	4b09      	ldr	r3, [pc, #36]	; (800c7d4 <HAL_UART_RxCpltCallback+0xd8>)
 800c7ae:	0100      	lsls	r0, r0, #4
 800c7b0:	7118      	strb	r0, [r3, #4]
		Message.Counter = 7;
 800c7b2:	2207      	movs	r2, #7
 800c7b4:	80da      	strh	r2, [r3, #6]
 800c7b6:	e7d9      	b.n	800c76c <HAL_UART_RxCpltCallback+0x70>
		Message.CRCValue += CurrentValue;
 800c7b8:	4b06      	ldr	r3, [pc, #24]	; (800c7d4 <HAL_UART_RxCpltCallback+0xd8>)
 800c7ba:	791a      	ldrb	r2, [r3, #4]
 800c7bc:	4410      	add	r0, r2
 800c7be:	7118      	strb	r0, [r3, #4]
		Message.Counter = 8;
 800c7c0:	2208      	movs	r2, #8
 800c7c2:	80da      	strh	r2, [r3, #6]
 800c7c4:	e7d2      	b.n	800c76c <HAL_UART_RxCpltCallback+0x70>
 800c7c6:	4770      	bx	lr
 800c7c8:	2000111c 	.word	0x2000111c
 800c7cc:	40004400 	.word	0x40004400
 800c7d0:	40004800 	.word	0x40004800
 800c7d4:	20001014 	.word	0x20001014
 800c7d8:	2000111d 	.word	0x2000111d

0800c7dc <SER_HandleRecipe>:
#ifndef BOOTLOADER
void SER_HandleRecipe (void)
{
 800c7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t NrOfBlocks;
	uint16_t CurrentBlock;

	NrOfBlocks = SER_GetValue (8,2);
 800c7e0:	2102      	movs	r1, #2
 800c7e2:	2008      	movs	r0, #8
 800c7e4:	f7ff fb9c 	bl	800bf20 <SER_GetValue>
 800c7e8:	4681      	mov	r9, r0
#ifdef COFFEEMAKER
	gRecipe[Message.MType-1].Blocks = NrOfBlocks;
 800c7ea:	4bb9      	ldr	r3, [pc, #740]	; (800cad0 <SER_HandleRecipe+0x2f4>)
 800c7ec:	78da      	ldrb	r2, [r3, #3]
 800c7ee:	4bb9      	ldr	r3, [pc, #740]	; (800cad4 <SER_HandleRecipe+0x2f8>)
 800c7f0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c7f4:	f803 0cfe 	strb.w	r0, [r3, #-254]
#endif
#ifdef GRINDER
	gRecipe.Blocks = NrOfBlocks;
#endif
	CurrentBlock = SER_GetValue (10,2);
 800c7f8:	2102      	movs	r1, #2
 800c7fa:	200a      	movs	r0, #10
 800c7fc:	f7ff fb90 	bl	800bf20 <SER_GetValue>

	if (CurrentBlock < NrOfBlocks)
 800c800:	4581      	cmp	r9, r0
 800c802:	f240 8160 	bls.w	800cac6 <SER_HandleRecipe+0x2ea>
 800c806:	4604      	mov	r4, r0
		else
			gRecipe.Valid = 0;

#endif
#ifdef COFFEEMAKER
		if (CurrentBlock == 0)
 800c808:	2800      	cmp	r0, #0
 800c80a:	f000 8139 	beq.w	800ca80 <SER_HandleRecipe+0x2a4>
		{
			memset(gRecipe[Message.MType-1].RecipeBlocks, 0, sizeof(gRecipe[Message.MType-1].RecipeBlocks)); //Clear the current coffee recipe
			gRecipe[Message.MType-1].SetTotalVolume = 0;
		}
		gRecipe[Message.MType-1].RecipeBlocks[CurrentBlock].H1SetTemp = SER_GetValue (12,2);
 800c80e:	2102      	movs	r1, #2
 800c810:	200c      	movs	r0, #12
 800c812:	f7ff fb85 	bl	800bf20 <SER_GetValue>
 800c816:	4eaf      	ldr	r6, [pc, #700]	; (800cad4 <SER_HandleRecipe+0x2f8>)
 800c818:	4fad      	ldr	r7, [pc, #692]	; (800cad0 <SER_HandleRecipe+0x2f4>)
 800c81a:	78fa      	ldrb	r2, [r7, #3]
 800c81c:	3a01      	subs	r2, #1
 800c81e:	00e5      	lsls	r5, r4, #3
 800c820:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800c824:	0212      	lsls	r2, r2, #8
 800c826:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c82a:	4433      	add	r3, r6
 800c82c:	f883 0020 	strb.w	r0, [r3, #32]
		gRecipe[Message.MType-1].RecipeBlocks[CurrentBlock].H2SetTemp = SER_GetValue (14,2);
 800c830:	2102      	movs	r1, #2
 800c832:	200e      	movs	r0, #14
 800c834:	f7ff fb74 	bl	800bf20 <SER_GetValue>
 800c838:	78fb      	ldrb	r3, [r7, #3]
 800c83a:	3b01      	subs	r3, #1
 800c83c:	1b2a      	subs	r2, r5, r4
 800c83e:	021b      	lsls	r3, r3, #8
 800c840:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c844:	4433      	add	r3, r6
 800c846:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
		gRecipe[Message.MType-1].RecipeBlocks[CurrentBlock].H3SetTemp = SER_GetValue (16,2);
 800c84a:	2102      	movs	r1, #2
 800c84c:	2010      	movs	r0, #16
 800c84e:	f7ff fb67 	bl	800bf20 <SER_GetValue>
 800c852:	78fa      	ldrb	r2, [r7, #3]
 800c854:	1e53      	subs	r3, r2, #1
 800c856:	1b2d      	subs	r5, r5, r4
 800c858:	021b      	lsls	r3, r3, #8
 800c85a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800c85e:	442e      	add	r6, r5
 800c860:	f886 0022 	strb.w	r0, [r6, #34]	; 0x22
		//Added direct update of temperature in case of recipe 3, misused as preheat recipe
		if (Message.MType - 1 == RECIPE3)
 800c864:	2a03      	cmp	r2, #3
 800c866:	f000 811d 	beq.w	800caa4 <SER_HandleRecipe+0x2c8>
			if (HEA[H3].Status == sACTIVE)
			{
				HEA[H3].SetTemperature = SER_GetValue (16,2) * 10;
			}
		}
		gRecipe[Message.MType-1].RecipeBlocks[CurrentBlock].MFSetTemp = SER_GetValue (18,2);
 800c86a:	2102      	movs	r1, #2
 800c86c:	2012      	movs	r0, #18
 800c86e:	f7ff fb57 	bl	800bf20 <SER_GetValue>
 800c872:	4d98      	ldr	r5, [pc, #608]	; (800cad4 <SER_HandleRecipe+0x2f8>)
 800c874:	4f96      	ldr	r7, [pc, #600]	; (800cad0 <SER_HandleRecipe+0x2f4>)
 800c876:	78fb      	ldrb	r3, [r7, #3]
 800c878:	3b01      	subs	r3, #1
 800c87a:	00e6      	lsls	r6, r4, #3
 800c87c:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800c880:	021b      	lsls	r3, r3, #8
 800c882:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c886:	442b      	add	r3, r5
 800c888:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
		gRecipe[Message.MType-1].RecipeBlocks[CurrentBlock].P1Flow = SER_GetValue (20,2);
 800c88c:	2102      	movs	r1, #2
 800c88e:	2014      	movs	r0, #20
 800c890:	f7ff fb46 	bl	800bf20 <SER_GetValue>
 800c894:	78fb      	ldrb	r3, [r7, #3]
 800c896:	3b01      	subs	r3, #1
 800c898:	1b32      	subs	r2, r6, r4
 800c89a:	021b      	lsls	r3, r3, #8
 800c89c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c8a0:	442b      	add	r3, r5
 800c8a2:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
		gRecipe[Message.MType-1].RecipeBlocks[CurrentBlock].P2Flow = SER_GetValue (22,2);
 800c8a6:	2102      	movs	r1, #2
 800c8a8:	2016      	movs	r0, #22
 800c8aa:	f7ff fb39 	bl	800bf20 <SER_GetValue>
 800c8ae:	78fb      	ldrb	r3, [r7, #3]
 800c8b0:	3b01      	subs	r3, #1
 800c8b2:	1b32      	subs	r2, r6, r4
 800c8b4:	021b      	lsls	r3, r3, #8
 800c8b6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c8ba:	442b      	add	r3, r5
 800c8bc:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
		gRecipe[Message.MType-1].RecipeBlocks[CurrentBlock].P3Flow = SER_GetValue (24,2);
 800c8c0:	2102      	movs	r1, #2
 800c8c2:	2018      	movs	r0, #24
 800c8c4:	f7ff fb2c 	bl	800bf20 <SER_GetValue>
 800c8c8:	78fb      	ldrb	r3, [r7, #3]
 800c8ca:	3b01      	subs	r3, #1
 800c8cc:	1b32      	subs	r2, r6, r4
 800c8ce:	021b      	lsls	r3, r3, #8
 800c8d0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c8d4:	442b      	add	r3, r5
 800c8d6:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
		gRecipe[Message.MType-1].RecipeBlocks[CurrentBlock].P1Pressure = SER_GetValue (26,2);
 800c8da:	2102      	movs	r1, #2
 800c8dc:	201a      	movs	r0, #26
 800c8de:	f7ff fb1f 	bl	800bf20 <SER_GetValue>
 800c8e2:	78fb      	ldrb	r3, [r7, #3]
 800c8e4:	3b01      	subs	r3, #1
 800c8e6:	1b32      	subs	r2, r6, r4
 800c8e8:	021b      	lsls	r3, r3, #8
 800c8ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c8ee:	442b      	add	r3, r5
 800c8f0:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
		gRecipe[Message.MType-1].RecipeBlocks[CurrentBlock].P2Pressure = SER_GetValue (28,2);
 800c8f4:	2102      	movs	r1, #2
 800c8f6:	201c      	movs	r0, #28
 800c8f8:	f7ff fb12 	bl	800bf20 <SER_GetValue>
 800c8fc:	f897 8003 	ldrb.w	r8, [r7, #3]
 800c900:	f108 38ff 	add.w	r8, r8, #4294967295
 800c904:	1b33      	subs	r3, r6, r4
 800c906:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800c90a:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 800c90e:	44a8      	add	r8, r5
 800c910:	f888 0028 	strb.w	r0, [r8, #40]	; 0x28
		gRecipe[Message.MType-1].RecipeBlocks[CurrentBlock].P1Volume = SER_GetValue (30,4);
 800c914:	2104      	movs	r1, #4
 800c916:	201e      	movs	r0, #30
 800c918:	f7ff fb02 	bl	800bf20 <SER_GetValue>
 800c91c:	f8a8 002a 	strh.w	r0, [r8, #42]	; 0x2a
		gRecipe[Message.MType-1].SetTotalVolume += SER_GetValue (30,4);
 800c920:	2104      	movs	r1, #4
 800c922:	201e      	movs	r0, #30
 800c924:	f7ff fafc 	bl	800bf20 <SER_GetValue>
 800c928:	78fb      	ldrb	r3, [r7, #3]
 800c92a:	3b01      	subs	r3, #1
 800c92c:	ea4f 2803 	mov.w	r8, r3, lsl #8
 800c930:	eb05 2303 	add.w	r3, r5, r3, lsl #8
 800c934:	691a      	ldr	r2, [r3, #16]
 800c936:	6959      	ldr	r1, [r3, #20]
 800c938:	1812      	adds	r2, r2, r0
 800c93a:	f141 0100 	adc.w	r1, r1, #0
 800c93e:	611a      	str	r2, [r3, #16]
 800c940:	6159      	str	r1, [r3, #20]
		gRecipe[Message.MType-1].RecipeBlocks[CurrentBlock].P2Volume = SER_GetValue (34,4);
 800c942:	2104      	movs	r1, #4
 800c944:	2022      	movs	r0, #34	; 0x22
 800c946:	f7ff faeb 	bl	800bf20 <SER_GetValue>
 800c94a:	1b33      	subs	r3, r6, r4
 800c94c:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 800c950:	44a8      	add	r8, r5
 800c952:	f8a8 002c 	strh.w	r0, [r8, #44]	; 0x2c
		gRecipe[Message.MType-1].SetTotalVolume += SER_GetValue (34,4);
 800c956:	2104      	movs	r1, #4
 800c958:	2022      	movs	r0, #34	; 0x22
 800c95a:	f7ff fae1 	bl	800bf20 <SER_GetValue>
 800c95e:	78fb      	ldrb	r3, [r7, #3]
 800c960:	3b01      	subs	r3, #1
 800c962:	eb05 2303 	add.w	r3, r5, r3, lsl #8
 800c966:	691a      	ldr	r2, [r3, #16]
 800c968:	6959      	ldr	r1, [r3, #20]
 800c96a:	1812      	adds	r2, r2, r0
 800c96c:	f141 0100 	adc.w	r1, r1, #0
 800c970:	611a      	str	r2, [r3, #16]
 800c972:	6159      	str	r1, [r3, #20]
		gRecipe[Message.MType-1].RecipeBlocks[CurrentBlock].Valves  = SER_GetValue (38,2);
 800c974:	2102      	movs	r1, #2
 800c976:	2026      	movs	r0, #38	; 0x26
 800c978:	f7ff fad2 	bl	800bf20 <SER_GetValue>
 800c97c:	78fb      	ldrb	r3, [r7, #3]
 800c97e:	3b01      	subs	r3, #1
 800c980:	1b32      	subs	r2, r6, r4
 800c982:	021b      	lsls	r3, r3, #8
 800c984:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c988:	442b      	add	r3, r5
 800c98a:	f883 002e 	strb.w	r0, [r3, #46]	; 0x2e
		gRecipe[Message.MType-1].RecipeBlocks[CurrentBlock].Piston = SER_GetValue (40,2);
 800c98e:	2102      	movs	r1, #2
 800c990:	2028      	movs	r0, #40	; 0x28
 800c992:	f7ff fac5 	bl	800bf20 <SER_GetValue>
 800c996:	f897 8003 	ldrb.w	r8, [r7, #3]
 800c99a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c99e:	1b33      	subs	r3, r6, r4
 800c9a0:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800c9a4:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 800c9a8:	44a8      	add	r8, r5
 800c9aa:	f888 002f 	strb.w	r0, [r8, #47]	; 0x2f
		gRecipe[Message.MType-1].RecipeBlocks[CurrentBlock].Time = SER_GetValue (42,4);
 800c9ae:	2104      	movs	r1, #4
 800c9b0:	202a      	movs	r0, #42	; 0x2a
 800c9b2:	f7ff fab5 	bl	800bf20 <SER_GetValue>
 800c9b6:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
		gRecipe[Message.MType-1].RecipeBlocks[CurrentBlock].ControlType1 = SER_GetValue (46,2);
 800c9ba:	2102      	movs	r1, #2
 800c9bc:	202e      	movs	r0, #46	; 0x2e
 800c9be:	f7ff faaf 	bl	800bf20 <SER_GetValue>
 800c9c2:	78fb      	ldrb	r3, [r7, #3]
 800c9c4:	3b01      	subs	r3, #1
 800c9c6:	1b32      	subs	r2, r6, r4
 800c9c8:	021b      	lsls	r3, r3, #8
 800c9ca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c9ce:	442b      	add	r3, r5
 800c9d0:	f883 0032 	strb.w	r0, [r3, #50]	; 0x32
		gRecipe[Message.MType-1].RecipeBlocks[CurrentBlock].ControlType2 = SER_GetValue (48,2);
 800c9d4:	2102      	movs	r1, #2
 800c9d6:	2030      	movs	r0, #48	; 0x30
 800c9d8:	f7ff faa2 	bl	800bf20 <SER_GetValue>
 800c9dc:	f897 8003 	ldrb.w	r8, [r7, #3]
 800c9e0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c9e4:	1b33      	subs	r3, r6, r4
 800c9e6:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800c9ea:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 800c9ee:	44a8      	add	r8, r5
 800c9f0:	f888 0033 	strb.w	r0, [r8, #51]	; 0x33
		gRecipe[Message.MType-1].RecipeBlocks[CurrentBlock].EndConditions1 = SER_GetValue (50,4);
 800c9f4:	2104      	movs	r1, #4
 800c9f6:	2032      	movs	r0, #50	; 0x32
 800c9f8:	f7ff fa92 	bl	800bf20 <SER_GetValue>
 800c9fc:	f8a8 0034 	strh.w	r0, [r8, #52]	; 0x34
		gRecipe[Message.MType-1].RecipeBlocks[CurrentBlock].EndConditions2 = SER_GetValue (54,4);
 800ca00:	f897 8003 	ldrb.w	r8, [r7, #3]
 800ca04:	f108 38ff 	add.w	r8, r8, #4294967295
 800ca08:	2104      	movs	r1, #4
 800ca0a:	2036      	movs	r0, #54	; 0x36
 800ca0c:	f7ff fa88 	bl	800bf20 <SER_GetValue>
 800ca10:	1b33      	subs	r3, r6, r4
 800ca12:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800ca16:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 800ca1a:	44a8      	add	r8, r5
 800ca1c:	f8a8 0036 	strh.w	r0, [r8, #54]	; 0x36
		gRecipe[Message.MType-1].RecipeBlocks[CurrentBlock].EndConditions3 = SER_GetValue (58,4);
 800ca20:	f897 8003 	ldrb.w	r8, [r7, #3]
 800ca24:	f108 38ff 	add.w	r8, r8, #4294967295
 800ca28:	2104      	movs	r1, #4
 800ca2a:	203a      	movs	r0, #58	; 0x3a
 800ca2c:	f7ff fa78 	bl	800bf20 <SER_GetValue>
 800ca30:	1b33      	subs	r3, r6, r4
 800ca32:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800ca36:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 800ca3a:	44a8      	add	r8, r5
 800ca3c:	f8a8 0038 	strh.w	r0, [r8, #56]	; 0x38
		gRecipe[Message.MType-1].RecipeBlocks[CurrentBlock].EndConditions4 = SER_GetValue (62,4);
 800ca40:	78ff      	ldrb	r7, [r7, #3]
 800ca42:	3f01      	subs	r7, #1
 800ca44:	2104      	movs	r1, #4
 800ca46:	203e      	movs	r0, #62	; 0x3e
 800ca48:	f7ff fa6a 	bl	800bf20 <SER_GetValue>
 800ca4c:	1b36      	subs	r6, r6, r4
 800ca4e:	023f      	lsls	r7, r7, #8
 800ca50:	eb07 0686 	add.w	r6, r7, r6, lsl #2
 800ca54:	4435      	add	r5, r6
 800ca56:	8768      	strh	r0, [r5, #58]	; 0x3a
		if (CurrentBlock == NrOfBlocks - 1)
 800ca58:	f109 39ff 	add.w	r9, r9, #4294967295
 800ca5c:	454c      	cmp	r4, r9
			gRecipe[Message.MType-1].Valid = 1;
 800ca5e:	4b1c      	ldr	r3, [pc, #112]	; (800cad0 <SER_HandleRecipe+0x2f4>)
 800ca60:	78db      	ldrb	r3, [r3, #3]
 800ca62:	f103 33ff 	add.w	r3, r3, #4294967295
 800ca66:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800ca6a:	4a1a      	ldr	r2, [pc, #104]	; (800cad4 <SER_HandleRecipe+0x2f8>)
 800ca6c:	bf0c      	ite	eq
 800ca6e:	2101      	moveq	r1, #1
		else
			gRecipe[Message.MType-1].Valid = 0;
 800ca70:	2100      	movne	r1, #0
 800ca72:	54d1      	strb	r1, [r2, r3]
#endif

		SER_SendReturnMessage (10,MStatSuccess);
 800ca74:	2101      	movs	r1, #1
 800ca76:	200a      	movs	r0, #10
 800ca78:	f7ff f9f2 	bl	800be60 <SER_SendReturnMessage>
	}
	else
	{
		SER_SendReturnMessage (10,MStatBlockNrError);
	}
}
 800ca7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			memset(gRecipe[Message.MType-1].RecipeBlocks, 0, sizeof(gRecipe[Message.MType-1].RecipeBlocks)); //Clear the current coffee recipe
 800ca80:	4b13      	ldr	r3, [pc, #76]	; (800cad0 <SER_HandleRecipe+0x2f4>)
 800ca82:	78dd      	ldrb	r5, [r3, #3]
 800ca84:	3d01      	subs	r5, #1
 800ca86:	022d      	lsls	r5, r5, #8
 800ca88:	f105 0020 	add.w	r0, r5, #32
 800ca8c:	4e11      	ldr	r6, [pc, #68]	; (800cad4 <SER_HandleRecipe+0x2f8>)
 800ca8e:	22e0      	movs	r2, #224	; 0xe0
 800ca90:	2100      	movs	r1, #0
 800ca92:	4430      	add	r0, r6
 800ca94:	f003 fad6 	bl	8010044 <memset>
			gRecipe[Message.MType-1].SetTotalVolume = 0;
 800ca98:	4435      	add	r5, r6
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	e9c5 2304 	strd	r2, r3, [r5, #16]
 800caa2:	e6b4      	b.n	800c80e <SER_HandleRecipe+0x32>
			if (HEA[H3].Status == sACTIVE)
 800caa4:	4b0c      	ldr	r3, [pc, #48]	; (800cad8 <SER_HandleRecipe+0x2fc>)
 800caa6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800caaa:	2b03      	cmp	r3, #3
 800caac:	f47f aedd 	bne.w	800c86a <SER_HandleRecipe+0x8e>
				HEA[H3].SetTemperature = SER_GetValue (16,2) * 10;
 800cab0:	2102      	movs	r1, #2
 800cab2:	2010      	movs	r0, #16
 800cab4:	f7ff fa34 	bl	800bf20 <SER_GetValue>
 800cab8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800cabc:	0040      	lsls	r0, r0, #1
 800cabe:	4b06      	ldr	r3, [pc, #24]	; (800cad8 <SER_HandleRecipe+0x2fc>)
 800cac0:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
 800cac4:	e6d1      	b.n	800c86a <SER_HandleRecipe+0x8e>
		SER_SendReturnMessage (10,MStatBlockNrError);
 800cac6:	2114      	movs	r1, #20
 800cac8:	200a      	movs	r0, #10
 800caca:	f7ff f9c9 	bl	800be60 <SER_SendReturnMessage>
}
 800cace:	e7d5      	b.n	800ca7c <SER_HandleRecipe+0x2a0>
 800cad0:	20001014 	.word	0x20001014
 800cad4:	20000678 	.word	0x20000678
 800cad8:	20000290 	.word	0x20000290

0800cadc <SER_ProcessMessage>:
	if	((Message.Counter > 0) &&(Message.Counter == Message.Length))  //Message received completely
 800cadc:	4bb1      	ldr	r3, [pc, #708]	; (800cda4 <SER_ProcessMessage+0x2c8>)
 800cade:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	dd03      	ble.n	800caee <SER_ProcessMessage+0x12>
 800cae6:	4aaf      	ldr	r2, [pc, #700]	; (800cda4 <SER_ProcessMessage+0x2c8>)
 800cae8:	7892      	ldrb	r2, [r2, #2]
 800caea:	4293      	cmp	r3, r2
 800caec:	d000      	beq.n	800caf0 <SER_ProcessMessage+0x14>
 800caee:	4770      	bx	lr
{
 800caf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf4:	b08b      	sub	sp, #44	; 0x2c
		SER_Busy = 1;
 800caf6:	4bac      	ldr	r3, [pc, #688]	; (800cda8 <SER_ProcessMessage+0x2cc>)
 800caf8:	2201      	movs	r2, #1
 800cafa:	701a      	strb	r2, [r3, #0]
		WRK_ResetAction(); //Cancel the current action in case this is pending as the return message is scrambled.
 800cafc:	f7fc fee6 	bl	80098cc <WRK_ResetAction>
		CalculatedCRC = CalculateCRC8(Message.RxData, Message.Length);
 800cb00:	4ca8      	ldr	r4, [pc, #672]	; (800cda4 <SER_ProcessMessage+0x2c8>)
 800cb02:	78a1      	ldrb	r1, [r4, #2]
 800cb04:	f104 0009 	add.w	r0, r4, #9
 800cb08:	f7fe f970 	bl	800adec <CalculateCRC8>
 800cb0c:	4ba7      	ldr	r3, [pc, #668]	; (800cdac <SER_ProcessMessage+0x2d0>)
 800cb0e:	7018      	strb	r0, [r3, #0]
		if (CalculatedCRC != Message.CRCValue) //Invalid CRC.
 800cb10:	7923      	ldrb	r3, [r4, #4]
 800cb12:	4283      	cmp	r3, r0
 800cb14:	d132      	bne.n	800cb7c <SER_ProcessMessage+0xa0>
		else if (Message.UARTVersion != UARTVERSION)
 800cb16:	4ba3      	ldr	r3, [pc, #652]	; (800cda4 <SER_ProcessMessage+0x2c8>)
 800cb18:	785b      	ldrb	r3, [r3, #1]
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d135      	bne.n	800cb8a <SER_ProcessMessage+0xae>
		else if ((Message.MType & 0xF0) == 0x00) //Message is a recipe
 800cb1e:	4ba1      	ldr	r3, [pc, #644]	; (800cda4 <SER_ProcessMessage+0x2c8>)
 800cb20:	78d8      	ldrb	r0, [r3, #3]
 800cb22:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800cb26:	d035      	beq.n	800cb94 <SER_ProcessMessage+0xb8>
		else if ((Message.MType & 0xF0) == 0x10) //Message is a recipe action
 800cb28:	2b10      	cmp	r3, #16
 800cb2a:	d036      	beq.n	800cb9a <SER_ProcessMessage+0xbe>
		else if (Message.MType == MTypeGetProcessData)
 800cb2c:	2832      	cmp	r0, #50	; 0x32
 800cb2e:	d03a      	beq.n	800cba6 <SER_ProcessMessage+0xca>
		else if (Message.MType == MTypeGetPhysicalData)
 800cb30:	2833      	cmp	r0, #51	; 0x33
 800cb32:	d042      	beq.n	800cbba <SER_ProcessMessage+0xde>
		else if (Message.MType == MTypeGetDeviceData)
 800cb34:	2834      	cmp	r0, #52	; 0x34
 800cb36:	d04a      	beq.n	800cbce <SER_ProcessMessage+0xf2>
		else if (Message.MType == MTypeGetAllData)
 800cb38:	2831      	cmp	r0, #49	; 0x31
 800cb3a:	d052      	beq.n	800cbe2 <SER_ProcessMessage+0x106>
		else if (Message.MType == MTypeGetDummyMode)
 800cb3c:	2835      	cmp	r0, #53	; 0x35
 800cb3e:	d05a      	beq.n	800cbf6 <SER_ProcessMessage+0x11a>
		else if (Message.MType == MTypeGetMachineParameters)
 800cb40:	2838      	cmp	r0, #56	; 0x38
 800cb42:	d062      	beq.n	800cc0a <SER_ProcessMessage+0x12e>
		else if (Message.MType == MTypeReboot)
 800cb44:	2851      	cmp	r0, #81	; 0x51
 800cb46:	d06a      	beq.n	800cc1e <SER_ProcessMessage+0x142>
		else if ((Message.MType & 0xF0) == 0x50)
 800cb48:	2b50      	cmp	r3, #80	; 0x50
 800cb4a:	d06f      	beq.n	800cc2c <SER_ProcessMessage+0x150>
		else if (Message.MType == MTypeSendPartitionBlock) //Application upgrade is being sent
 800cb4c:	2821      	cmp	r0, #33	; 0x21
 800cb4e:	d073      	beq.n	800cc38 <SER_ProcessMessage+0x15c>
		else if (Message.MType == MTypeUpgradeApplication)
 800cb50:	2822      	cmp	r0, #34	; 0x22
 800cb52:	d074      	beq.n	800cc3e <SER_ProcessMessage+0x162>
		else if (Message.MType == MTypeRestorePartition)
 800cb54:	2829      	cmp	r0, #41	; 0x29
 800cb56:	d075      	beq.n	800cc44 <SER_ProcessMessage+0x168>
		else if (Message.MType == MTypeGetPartitionInfo) //Get image info in flash
 800cb58:	2823      	cmp	r0, #35	; 0x23
 800cb5a:	d076      	beq.n	800cc4a <SER_ProcessMessage+0x16e>
		else if (Message.MType == MTypeSetPartitionStatus) //Application upgrade is being sent
 800cb5c:	2826      	cmp	r0, #38	; 0x26
 800cb5e:	d07e      	beq.n	800cc5e <SER_ProcessMessage+0x182>
		else if (Message.MType == MTypeSetLED)
 800cb60:	2841      	cmp	r0, #65	; 0x41
 800cb62:	f000 808f 	beq.w	800cc84 <SER_ProcessMessage+0x1a8>
		else if (Message.MType == MTypeSetDummyMode)
 800cb66:	2842      	cmp	r0, #66	; 0x42
 800cb68:	f000 80de 	beq.w	800cd28 <SER_ProcessMessage+0x24c>
		else if (Message.MType == MTypeSetMachineParameters)
 800cb6c:	2839      	cmp	r0, #57	; 0x39
 800cb6e:	f000 8104 	beq.w	800cd7a <SER_ProcessMessage+0x29e>
			SER_SendReturnMessage (10,MStatUnknownType);
 800cb72:	2112      	movs	r1, #18
 800cb74:	200a      	movs	r0, #10
 800cb76:	f7ff f973 	bl	800be60 <SER_SendReturnMessage>
}
 800cb7a:	e003      	b.n	800cb84 <SER_ProcessMessage+0xa8>
			SER_SendReturnMessage (10,MStatCRCError);
 800cb7c:	2111      	movs	r1, #17
 800cb7e:	200a      	movs	r0, #10
 800cb80:	f7ff f96e 	bl	800be60 <SER_SendReturnMessage>
}
 800cb84:	b00b      	add	sp, #44	; 0x2c
 800cb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			SER_SendReturnMessage (10,MStatUARTVersionError);
 800cb8a:	2115      	movs	r1, #21
 800cb8c:	200a      	movs	r0, #10
 800cb8e:	f7ff f967 	bl	800be60 <SER_SendReturnMessage>
 800cb92:	e7f7      	b.n	800cb84 <SER_ProcessMessage+0xa8>
			SER_HandleRecipe();
 800cb94:	f7ff fe22 	bl	800c7dc <SER_HandleRecipe>
 800cb98:	e7f4      	b.n	800cb84 <SER_ProcessMessage+0xa8>
				Message.Counter = 0;
 800cb9a:	4b82      	ldr	r3, [pc, #520]	; (800cda4 <SER_ProcessMessage+0x2c8>)
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	80da      	strh	r2, [r3, #6]
				WRK_SetAction (Message.MType);
 800cba0:	f7fd fd3a 	bl	800a618 <WRK_SetAction>
 800cba4:	e7ee      	b.n	800cb84 <SER_ProcessMessage+0xa8>
			DataLength = SER_FillBuffer(10, Message.MType);
 800cba6:	2132      	movs	r1, #50	; 0x32
 800cba8:	200a      	movs	r0, #10
 800cbaa:	f7ff fa4f 	bl	800c04c <SER_FillBuffer>
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800cbae:	300a      	adds	r0, #10
 800cbb0:	2101      	movs	r1, #1
 800cbb2:	b2c0      	uxtb	r0, r0
 800cbb4:	f7ff f954 	bl	800be60 <SER_SendReturnMessage>
 800cbb8:	e7e4      	b.n	800cb84 <SER_ProcessMessage+0xa8>
			DataLength = SER_FillBuffer(10, Message.MType);
 800cbba:	2133      	movs	r1, #51	; 0x33
 800cbbc:	200a      	movs	r0, #10
 800cbbe:	f7ff fa45 	bl	800c04c <SER_FillBuffer>
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800cbc2:	300a      	adds	r0, #10
 800cbc4:	2101      	movs	r1, #1
 800cbc6:	b2c0      	uxtb	r0, r0
 800cbc8:	f7ff f94a 	bl	800be60 <SER_SendReturnMessage>
 800cbcc:	e7da      	b.n	800cb84 <SER_ProcessMessage+0xa8>
			DataLength = SER_FillBuffer(10, Message.MType);
 800cbce:	2134      	movs	r1, #52	; 0x34
 800cbd0:	200a      	movs	r0, #10
 800cbd2:	f7ff fa3b 	bl	800c04c <SER_FillBuffer>
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800cbd6:	300a      	adds	r0, #10
 800cbd8:	2101      	movs	r1, #1
 800cbda:	b2c0      	uxtb	r0, r0
 800cbdc:	f7ff f940 	bl	800be60 <SER_SendReturnMessage>
 800cbe0:	e7d0      	b.n	800cb84 <SER_ProcessMessage+0xa8>
			DataLength = SER_FillBuffer(10, Message.MType);
 800cbe2:	2131      	movs	r1, #49	; 0x31
 800cbe4:	200a      	movs	r0, #10
 800cbe6:	f7ff fa31 	bl	800c04c <SER_FillBuffer>
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800cbea:	300a      	adds	r0, #10
 800cbec:	2101      	movs	r1, #1
 800cbee:	b2c0      	uxtb	r0, r0
 800cbf0:	f7ff f936 	bl	800be60 <SER_SendReturnMessage>
 800cbf4:	e7c6      	b.n	800cb84 <SER_ProcessMessage+0xa8>
			DataLength = SER_FillBuffer(10, Message.MType);
 800cbf6:	2135      	movs	r1, #53	; 0x35
 800cbf8:	200a      	movs	r0, #10
 800cbfa:	f7ff fa27 	bl	800c04c <SER_FillBuffer>
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800cbfe:	300a      	adds	r0, #10
 800cc00:	2101      	movs	r1, #1
 800cc02:	b2c0      	uxtb	r0, r0
 800cc04:	f7ff f92c 	bl	800be60 <SER_SendReturnMessage>
 800cc08:	e7bc      	b.n	800cb84 <SER_ProcessMessage+0xa8>
			DataLength = SER_FillBuffer(10, Message.MType);
 800cc0a:	2138      	movs	r1, #56	; 0x38
 800cc0c:	200a      	movs	r0, #10
 800cc0e:	f7ff fa1d 	bl	800c04c <SER_FillBuffer>
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800cc12:	300a      	adds	r0, #10
 800cc14:	2101      	movs	r1, #1
 800cc16:	b2c0      	uxtb	r0, r0
 800cc18:	f7ff f922 	bl	800be60 <SER_SendReturnMessage>
 800cc1c:	e7b2      	b.n	800cb84 <SER_ProcessMessage+0xa8>
			SER_SendReturnMessage (10,MStatSuccess);
 800cc1e:	2101      	movs	r1, #1
 800cc20:	200a      	movs	r0, #10
 800cc22:	f7ff f91d 	bl	800be60 <SER_SendReturnMessage>
			HAL_NVIC_SystemReset();
 800cc26:	f000 fdc5 	bl	800d7b4 <HAL_NVIC_SystemReset>
 800cc2a:	e7ab      	b.n	800cb84 <SER_ProcessMessage+0xa8>
			Message.Counter = 0;
 800cc2c:	4b5d      	ldr	r3, [pc, #372]	; (800cda4 <SER_ProcessMessage+0x2c8>)
 800cc2e:	2200      	movs	r2, #0
 800cc30:	80da      	strh	r2, [r3, #6]
			WRK_SetAction (Message.MType);
 800cc32:	f7fd fcf1 	bl	800a618 <WRK_SetAction>
 800cc36:	e7a5      	b.n	800cb84 <SER_ProcessMessage+0xa8>
			FLA_HandleSendPartitionBlock();
 800cc38:	f7fe fa76 	bl	800b128 <FLA_HandleSendPartitionBlock>
 800cc3c:	e7a2      	b.n	800cb84 <SER_ProcessMessage+0xa8>
			FLA_HandleUpgradeApplication();
 800cc3e:	f7fe f9ab 	bl	800af98 <FLA_HandleUpgradeApplication>
 800cc42:	e79f      	b.n	800cb84 <SER_ProcessMessage+0xa8>
			FLA_RestorePartition();
 800cc44:	f7fe f988 	bl	800af58 <FLA_RestorePartition>
 800cc48:	e79c      	b.n	800cb84 <SER_ProcessMessage+0xa8>
			DataLength = SER_FillBuffer(10, Message.MType);
 800cc4a:	2123      	movs	r1, #35	; 0x23
 800cc4c:	200a      	movs	r0, #10
 800cc4e:	f7ff f9fd 	bl	800c04c <SER_FillBuffer>
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800cc52:	300a      	adds	r0, #10
 800cc54:	2101      	movs	r1, #1
 800cc56:	b2c0      	uxtb	r0, r0
 800cc58:	f7ff f902 	bl	800be60 <SER_SendReturnMessage>
 800cc5c:	e792      	b.n	800cb84 <SER_ProcessMessage+0xa8>
			FLA_SetStatus(pUpdate,(enuFLA) SER_GetValue (10,2));
 800cc5e:	2102      	movs	r1, #2
 800cc60:	200a      	movs	r0, #10
 800cc62:	f7ff f95d 	bl	800bf20 <SER_GetValue>
 800cc66:	b2c1      	uxtb	r1, r0
 800cc68:	2002      	movs	r0, #2
 800cc6a:	f7fe f94d 	bl	800af08 <FLA_SetStatus>
			DataLength = SER_FillBuffer(10, Message.MType);
 800cc6e:	4b4d      	ldr	r3, [pc, #308]	; (800cda4 <SER_ProcessMessage+0x2c8>)
 800cc70:	78d9      	ldrb	r1, [r3, #3]
 800cc72:	200a      	movs	r0, #10
 800cc74:	f7ff f9ea 	bl	800c04c <SER_FillBuffer>
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800cc78:	300a      	adds	r0, #10
 800cc7a:	2101      	movs	r1, #1
 800cc7c:	b2c0      	uxtb	r0, r0
 800cc7e:	f7ff f8ef 	bl	800be60 <SER_SendReturnMessage>
 800cc82:	e77f      	b.n	800cb84 <SER_ProcessMessage+0xa8>
			LED_Set(SER_GetValue (12,1), SER_GetValue (13,1), SER_GetValue (14,2), SER_GetValue (16,2), SER_GetValue (18,2), SER_GetValue (20,2), SER_GetValue (22,4), SER_GetValue (26,4), SER_GetValue (30,2), SER_GetValue (32,4), SER_GetValue (36,2));
 800cc84:	2101      	movs	r1, #1
 800cc86:	200c      	movs	r0, #12
 800cc88:	f7ff f94a 	bl	800bf20 <SER_GetValue>
 800cc8c:	9008      	str	r0, [sp, #32]
 800cc8e:	2101      	movs	r1, #1
 800cc90:	200d      	movs	r0, #13
 800cc92:	f7ff f945 	bl	800bf20 <SER_GetValue>
 800cc96:	9009      	str	r0, [sp, #36]	; 0x24
 800cc98:	2102      	movs	r1, #2
 800cc9a:	200e      	movs	r0, #14
 800cc9c:	f7ff f940 	bl	800bf20 <SER_GetValue>
 800cca0:	4683      	mov	fp, r0
 800cca2:	2102      	movs	r1, #2
 800cca4:	2010      	movs	r0, #16
 800cca6:	f7ff f93b 	bl	800bf20 <SER_GetValue>
 800ccaa:	4607      	mov	r7, r0
 800ccac:	2102      	movs	r1, #2
 800ccae:	2012      	movs	r0, #18
 800ccb0:	f7ff f936 	bl	800bf20 <SER_GetValue>
 800ccb4:	4680      	mov	r8, r0
 800ccb6:	2102      	movs	r1, #2
 800ccb8:	2014      	movs	r0, #20
 800ccba:	f7ff f931 	bl	800bf20 <SER_GetValue>
 800ccbe:	4681      	mov	r9, r0
 800ccc0:	2104      	movs	r1, #4
 800ccc2:	2016      	movs	r0, #22
 800ccc4:	f7ff f92c 	bl	800bf20 <SER_GetValue>
 800ccc8:	4604      	mov	r4, r0
 800ccca:	2104      	movs	r1, #4
 800cccc:	201a      	movs	r0, #26
 800ccce:	f7ff f927 	bl	800bf20 <SER_GetValue>
 800ccd2:	4605      	mov	r5, r0
 800ccd4:	2102      	movs	r1, #2
 800ccd6:	201e      	movs	r0, #30
 800ccd8:	f7ff f922 	bl	800bf20 <SER_GetValue>
 800ccdc:	4682      	mov	sl, r0
 800ccde:	2104      	movs	r1, #4
 800cce0:	2020      	movs	r0, #32
 800cce2:	f7ff f91d 	bl	800bf20 <SER_GetValue>
 800cce6:	4606      	mov	r6, r0
 800cce8:	2102      	movs	r1, #2
 800ccea:	2024      	movs	r0, #36	; 0x24
 800ccec:	f7ff f918 	bl	800bf20 <SER_GetValue>
 800ccf0:	b2c0      	uxtb	r0, r0
 800ccf2:	9006      	str	r0, [sp, #24]
 800ccf4:	9605      	str	r6, [sp, #20]
 800ccf6:	fa5f f38a 	uxtb.w	r3, sl
 800ccfa:	9304      	str	r3, [sp, #16]
 800ccfc:	9503      	str	r5, [sp, #12]
 800ccfe:	9402      	str	r4, [sp, #8]
 800cd00:	fa5f f389 	uxtb.w	r3, r9
 800cd04:	9301      	str	r3, [sp, #4]
 800cd06:	fa5f f388 	uxtb.w	r3, r8
 800cd0a:	9300      	str	r3, [sp, #0]
 800cd0c:	b2fb      	uxtb	r3, r7
 800cd0e:	fa5f f28b 	uxtb.w	r2, fp
 800cd12:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 800cd16:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800cd1a:	f7fe fb85 	bl	800b428 <LED_Set>
			SER_SendReturnMessage (10,MStatSuccess);
 800cd1e:	2101      	movs	r1, #1
 800cd20:	200a      	movs	r0, #10
 800cd22:	f7ff f89d 	bl	800be60 <SER_SendReturnMessage>
 800cd26:	e72d      	b.n	800cb84 <SER_ProcessMessage+0xa8>
			WRK_SetDummyMode(WRK_DUMMYMODE,SER_GetValue (12,2));
 800cd28:	2102      	movs	r1, #2
 800cd2a:	200c      	movs	r0, #12
 800cd2c:	f7ff f8f8 	bl	800bf20 <SER_GetValue>
 800cd30:	b2c1      	uxtb	r1, r0
 800cd32:	2000      	movs	r0, #0
 800cd34:	f7fd fcd2 	bl	800a6dc <WRK_SetDummyMode>
			WRK_SetDummyMode(WRK_DUMMYMODEFILTER,SER_GetValue (14,2));
 800cd38:	2102      	movs	r1, #2
 800cd3a:	200e      	movs	r0, #14
 800cd3c:	f7ff f8f0 	bl	800bf20 <SER_GetValue>
 800cd40:	b2c1      	uxtb	r1, r0
 800cd42:	2001      	movs	r0, #1
 800cd44:	f7fd fcca 	bl	800a6dc <WRK_SetDummyMode>
			WRK_SetDummyMode(WRK_DUMMYMODEH3,SER_GetValue (16,2));
 800cd48:	2102      	movs	r1, #2
 800cd4a:	2010      	movs	r0, #16
 800cd4c:	f7ff f8e8 	bl	800bf20 <SER_GetValue>
 800cd50:	b2c1      	uxtb	r1, r0
 800cd52:	2002      	movs	r0, #2
 800cd54:	f7fd fcc2 	bl	800a6dc <WRK_SetDummyMode>
			SER_SendReturnMessage (10,MStatSuccess);
 800cd58:	2101      	movs	r1, #1
 800cd5a:	200a      	movs	r0, #10
 800cd5c:	f7ff f880 	bl	800be60 <SER_SendReturnMessage>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cd60:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800cd64:	4912      	ldr	r1, [pc, #72]	; (800cdb0 <SER_ProcessMessage+0x2d4>)
 800cd66:	68ca      	ldr	r2, [r1, #12]
 800cd68:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cd6c:	4b11      	ldr	r3, [pc, #68]	; (800cdb4 <SER_ProcessMessage+0x2d8>)
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	60cb      	str	r3, [r1, #12]
 800cd72:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800cd76:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800cd78:	e7fd      	b.n	800cd76 <SER_ProcessMessage+0x29a>
			PUM_SetParameter(PUM_ULPERPULSEP1,SER_GetValue (12,4));
 800cd7a:	2104      	movs	r1, #4
 800cd7c:	200c      	movs	r0, #12
 800cd7e:	f7ff f8cf 	bl	800bf20 <SER_GetValue>
 800cd82:	4601      	mov	r1, r0
 800cd84:	2027      	movs	r0, #39	; 0x27
 800cd86:	f7fb f985 	bl	8008094 <PUM_SetParameter>
			PUM_SetParameter(PUM_ULPERPULSEP2,SER_GetValue (16,4));
 800cd8a:	2104      	movs	r1, #4
 800cd8c:	2010      	movs	r0, #16
 800cd8e:	f7ff f8c7 	bl	800bf20 <SER_GetValue>
 800cd92:	4601      	mov	r1, r0
 800cd94:	2028      	movs	r0, #40	; 0x28
 800cd96:	f7fb f97d 	bl	8008094 <PUM_SetParameter>
			SER_SendReturnMessage (10,MStatSuccess);
 800cd9a:	2101      	movs	r1, #1
 800cd9c:	200a      	movs	r0, #10
 800cd9e:	f7ff f85f 	bl	800be60 <SER_SendReturnMessage>
 800cda2:	e6ef      	b.n	800cb84 <SER_ProcessMessage+0xa8>
 800cda4:	20001014 	.word	0x20001014
 800cda8:	2000111c 	.word	0x2000111c
 800cdac:	20001010 	.word	0x20001010
 800cdb0:	e000ed00 	.word	0xe000ed00
 800cdb4:	05fa0004 	.word	0x05fa0004

0800cdb8 <SER_Handle>:
{
 800cdb8:	b510      	push	{r4, lr}
	SER_ProcessMessage();
 800cdba:	f7ff fe8f 	bl	800cadc <SER_ProcessMessage>
	if(HAL_UART_GetError(&huart2))
 800cdbe:	4810      	ldr	r0, [pc, #64]	; (800ce00 <SER_Handle+0x48>)
 800cdc0:	f003 f8bc 	bl	800ff3c <HAL_UART_GetError>
 800cdc4:	b920      	cbnz	r0, 800cdd0 <SER_Handle+0x18>
	if(HAL_UART_GetError(&huart3))
 800cdc6:	480f      	ldr	r0, [pc, #60]	; (800ce04 <SER_Handle+0x4c>)
 800cdc8:	f003 f8b8 	bl	800ff3c <HAL_UART_GetError>
 800cdcc:	b960      	cbnz	r0, 800cde8 <SER_Handle+0x30>
}
 800cdce:	bd10      	pop	{r4, pc}
		HAL_UART_DMAStop(&huart2);
 800cdd0:	4c0b      	ldr	r4, [pc, #44]	; (800ce00 <SER_Handle+0x48>)
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f002 fe61 	bl	800fa9a <HAL_UART_DMAStop>
		MX_USART2_UART_Init();
 800cdd8:	f7fc fa4c 	bl	8009274 <MX_USART2_UART_Init>
		HAL_UART_Receive_DMA(&huart2, &Message.RxBuffer, 1);
 800cddc:	2201      	movs	r2, #1
 800cdde:	490a      	ldr	r1, [pc, #40]	; (800ce08 <SER_Handle+0x50>)
 800cde0:	4620      	mov	r0, r4
 800cde2:	f003 f8e9 	bl	800ffb8 <HAL_UART_Receive_DMA>
 800cde6:	e7ee      	b.n	800cdc6 <SER_Handle+0xe>
		HAL_UART_DMAStop(&huart3);
 800cde8:	4c06      	ldr	r4, [pc, #24]	; (800ce04 <SER_Handle+0x4c>)
 800cdea:	4620      	mov	r0, r4
 800cdec:	f002 fe55 	bl	800fa9a <HAL_UART_DMAStop>
		MX_USART2_UART_Init();
 800cdf0:	f7fc fa40 	bl	8009274 <MX_USART2_UART_Init>
		HAL_UART_Receive_DMA(&huart3, &Message.RxBuffer, 1);
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	4904      	ldr	r1, [pc, #16]	; (800ce08 <SER_Handle+0x50>)
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	f003 f8dd 	bl	800ffb8 <HAL_UART_Receive_DMA>
}
 800cdfe:	e7e6      	b.n	800cdce <SER_Handle+0x16>
 800ce00:	20000bb8 	.word	0x20000bb8
 800ce04:	20000bfc 	.word	0x20000bfc
 800ce08:	20001014 	.word	0x20001014

0800ce0c <UTL_Asc2Dec>:
//! \brief      Returns the integer value of a hex string
//! \details    converts the hex string to an integer
//! \param[in]  uint8_t newValue		Hex string [1 byte]
//! \param[out]	uint8_t ReturnValue
uint8_t UTL_Asc2Dec (uint8_t newValue)
{
 800ce0c:	4603      	mov	r3, r0
	if (newValue >= '0' && newValue <= '9') return newValue - '0';
 800ce0e:	3830      	subs	r0, #48	; 0x30
 800ce10:	b2c0      	uxtb	r0, r0
 800ce12:	2809      	cmp	r0, #9
 800ce14:	d90a      	bls.n	800ce2c <UTL_Asc2Dec+0x20>
	if (newValue >= 'A' && newValue <= 'F') return newValue - ('A' - 10);
 800ce16:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ce1a:	b2d2      	uxtb	r2, r2
 800ce1c:	2a05      	cmp	r2, #5
 800ce1e:	d906      	bls.n	800ce2e <UTL_Asc2Dec+0x22>
	if (newValue >= 'a' && newValue <= 'f') return newValue - ('a' - 10);
 800ce20:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ce24:	b2d2      	uxtb	r2, r2
 800ce26:	2a05      	cmp	r2, #5
 800ce28:	d904      	bls.n	800ce34 <UTL_Asc2Dec+0x28>
	return 0xFF;
 800ce2a:	20ff      	movs	r0, #255	; 0xff
}
 800ce2c:	4770      	bx	lr
	if (newValue >= 'A' && newValue <= 'F') return newValue - ('A' - 10);
 800ce2e:	3b37      	subs	r3, #55	; 0x37
 800ce30:	b2d8      	uxtb	r0, r3
 800ce32:	4770      	bx	lr
	if (newValue >= 'a' && newValue <= 'f') return newValue - ('a' - 10);
 800ce34:	3b57      	subs	r3, #87	; 0x57
 800ce36:	b2d8      	uxtb	r0, r3
 800ce38:	4770      	bx	lr

0800ce3a <UTL_Dec2Asc>:
//! \brief      Returns the ascii code of an integer
//! \details    converts an integer to a ascii character
//! \param[in]  uint8_t newValue
//! \param[out] uint8_t returnValue
uint8_t UTL_Dec2Asc (uint8_t newValue)
{
 800ce3a:	4602      	mov	r2, r0
	uint8_t returnValue = newValue + 48;
 800ce3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ce40:	b2d8      	uxtb	r0, r3
	if (returnValue > 57) //More than 9, so A,B,C,D,E or F
 800ce42:	2839      	cmp	r0, #57	; 0x39
		returnValue += 7;
 800ce44:	bf84      	itt	hi
 800ce46:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
 800ce4a:	b2c0      	uxtbhi	r0, r0
	return returnValue;
}
 800ce4c:	4770      	bx	lr
	...

0800ce50 <WS2812_Set>:
//! \details    Calculates and sets the color
//! \param[in]  uint8_t num		number of the LED in the array
//! \param[in]  uint32_t RGB	Color number
//! \param[in]  uint8_t intensity	Intensity of the LED (0 - 255)
void WS2812_Set( uint8_t num, uint32_t RGB, uint8_t intensity )
{
 800ce50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce54:	b098      	sub	sp, #96	; 0x60
    uint8_t i;
    uint16_t R = ((RGB >> 16) & 0xff) * intensity / 255;
    uint16_t G = ((RGB >> 8) & 0xff) * intensity / 255;
    uint16_t B = ((uint8_t) RGB) * intensity / 255;
 800ce56:	b2cc      	uxtb	r4, r1
 800ce58:	fb02 f404 	mul.w	r4, r2, r4
 800ce5c:	4e31      	ldr	r6, [pc, #196]	; (800cf24 <WS2812_Set+0xd4>)
 800ce5e:	fb86 5304 	smull	r5, r3, r6, r4
 800ce62:	4423      	add	r3, r4
 800ce64:	11dd      	asrs	r5, r3, #7
    uint32_t TempR[8], TempG[8], TempB[8];
    BB = B;
 800ce66:	4b30      	ldr	r3, [pc, #192]	; (800cf28 <WS2812_Set+0xd8>)
 800ce68:	701d      	strb	r5, [r3, #0]
    uint16_t R = ((RGB >> 16) & 0xff) * intensity / 255;
 800ce6a:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800ce6e:	fb02 f404 	mul.w	r4, r2, r4
 800ce72:	fba6 3404 	umull	r3, r4, r6, r4
 800ce76:	09e4      	lsrs	r4, r4, #7
    uint16_t G = ((RGB >> 8) & 0xff) * intensity / 255;
 800ce78:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800ce7c:	fb02 f301 	mul.w	r3, r2, r1
 800ce80:	fba6 2303 	umull	r2, r3, r6, r3
 800ce84:	09db      	lsrs	r3, r3, #7
    RGB = R << 16 | G << 8 | B; //Colors corrected for intensity
 800ce86:	021b      	lsls	r3, r3, #8
 800ce88:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ce8c:	432b      	orrs	r3, r5
    //MSB First
    for( i = 0; i < 8; ++i,RGB>>=1 )
 800ce8e:	aa07      	add	r2, sp, #28
 800ce90:	ac0f      	add	r4, sp, #60	; 0x3c
 800ce92:	a917      	add	r1, sp, #92	; 0x5c
 800ce94:	46ec      	mov	ip, sp
	{
		(RGB & 0x00010000) != 0 ? (TempR[7-i] = WS2812_HIG) : (TempR[7-i] = WS2812_LOW);
 800ce96:	f44f 077e 	mov.w	r7, #16646144	; 0xfe0000
 800ce9a:	4e24      	ldr	r6, [pc, #144]	; (800cf2c <WS2812_Set+0xdc>)
 800ce9c:	e000      	b.n	800cea0 <WS2812_Set+0x50>
 800ce9e:	462a      	mov	r2, r5
 800cea0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800cea4:	bf14      	ite	ne
 800cea6:	600e      	strne	r6, [r1, #0]
 800cea8:	600f      	streq	r7, [r1, #0]
		(RGB & 0x00000100) != 0 ? (TempG[7-i] = WS2812_HIG) : (TempG[7-i] = WS2812_LOW);
 800ceaa:	f413 7f80 	tst.w	r3, #256	; 0x100
 800ceae:	bf14      	ite	ne
 800ceb0:	6026      	strne	r6, [r4, #0]
 800ceb2:	6027      	streq	r7, [r4, #0]
		(RGB & 0x00000001) != 0 ? (TempB[7-i] = WS2812_HIG) : (TempB[7-i] = WS2812_LOW);
 800ceb4:	f013 0f01 	tst.w	r3, #1
 800ceb8:	bf14      	ite	ne
 800ceba:	6016      	strne	r6, [r2, #0]
 800cebc:	6017      	streq	r7, [r2, #0]
    for( i = 0; i < 8; ++i,RGB>>=1 )
 800cebe:	085b      	lsrs	r3, r3, #1
 800cec0:	1f15      	subs	r5, r2, #4
 800cec2:	3c04      	subs	r4, #4
 800cec4:	3904      	subs	r1, #4
 800cec6:	4562      	cmp	r2, ip
 800cec8:	d1e9      	bne.n	800ce9e <WS2812_Set+0x4e>
 800ceca:	af0f      	add	r7, sp, #60	; 0x3c
 800cecc:	f10d 0e1c 	add.w	lr, sp, #28
 800ced0:	f1ad 0c04 	sub.w	ip, sp, #4
 800ced4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800ced8:	4b15      	ldr	r3, [pc, #84]	; (800cf30 <WS2812_Set+0xe0>)
 800ceda:	eb03 08c0 	add.w	r8, r3, r0, lsl #3
 800cede:	2000      	movs	r0, #0
 800cee0:	f108 0804 	add.w	r8, r8, #4
 800cee4:	e002      	b.n	800ceec <WS2812_Set+0x9c>
	}

	for (uint8_t j = 0; j<8;j++)
 800cee6:	3003      	adds	r0, #3
 800cee8:	2818      	cmp	r0, #24
 800ceea:	d018      	beq.n	800cf1e <WS2812_Set+0xce>
	{
		for (i = 0; i < 3; i++)
		{
			g_ws2812.Col[num].RGB.R[i + (j * 3)] = TempR[j] >> (16-8*i);
 800ceec:	f857 6f04 	ldr.w	r6, [r7, #4]!
			g_ws2812.Col[num].RGB.G[i + (j * 3)] = TempG[j] >> (16-8*i);
 800cef0:	f85e 5f04 	ldr.w	r5, [lr, #4]!
			g_ws2812.Col[num].RGB.B[i + (j * 3)] = TempB[j] >> (16-8*i);
 800cef4:	f85c 4f04 	ldr.w	r4, [ip, #4]!
 800cef8:	eb08 0200 	add.w	r2, r8, r0
 800cefc:	2310      	movs	r3, #16
			g_ws2812.Col[num].RGB.R[i + (j * 3)] = TempR[j] >> (16-8*i);
 800cefe:	fa26 f103 	lsr.w	r1, r6, r3
 800cf02:	7611      	strb	r1, [r2, #24]
			g_ws2812.Col[num].RGB.G[i + (j * 3)] = TempG[j] >> (16-8*i);
 800cf04:	fa25 f103 	lsr.w	r1, r5, r3
 800cf08:	f802 1b01 	strb.w	r1, [r2], #1
			g_ws2812.Col[num].RGB.B[i + (j * 3)] = TempB[j] >> (16-8*i);
 800cf0c:	fa24 f103 	lsr.w	r1, r4, r3
 800cf10:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
		for (i = 0; i < 3; i++)
 800cf14:	3b08      	subs	r3, #8
 800cf16:	f113 0f08 	cmn.w	r3, #8
 800cf1a:	d1f0      	bne.n	800cefe <WS2812_Set+0xae>
 800cf1c:	e7e3      	b.n	800cee6 <WS2812_Set+0x96>
		}
	}
}
 800cf1e:	b018      	add	sp, #96	; 0x60
 800cf20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf24:	80808081 	.word	0x80808081
 800cf28:	2000111e 	.word	0x2000111e
 800cf2c:	00fffc00 	.word	0x00fffc00
 800cf30:	20001120 	.word	0x20001120

0800cf34 <WS2812_OneSet>:
//! \brief      Sets an LED in the array to a certain value
//! \details    Calculates and sets the color
//! \param[in]  uint8_t num		number of the LED in the array
//! \param[in]  uint32_t RGB	Color number
void WS2812_OneSet( uint8_t num, uint32_t RGB )
{
 800cf34:	b530      	push	{r4, r5, lr}
 800cf36:	b099      	sub	sp, #100	; 0x64
 800cf38:	4686      	mov	lr, r0
    uint8_t i;
    uint32_t TempR[8], TempG[8], TempB[8];

    //MSB First
    for( i = 0; i < 8; ++i,RGB>>=1 )
 800cf3a:	f10d 0c20 	add.w	ip, sp, #32
{
 800cf3e:	ac10      	add	r4, sp, #64	; 0x40
 800cf40:	4662      	mov	r2, ip
 800cf42:	466b      	mov	r3, sp
    {
        (RGB & 0x00010000) != 0 ? (TempR[i] = WS2812_HIG) : (TempR[i] = WS2812_LOW);
 800cf44:	f44f 057e 	mov.w	r5, #16646144	; 0xfe0000
 800cf48:	481d      	ldr	r0, [pc, #116]	; (800cfc0 <WS2812_OneSet+0x8c>)
 800cf4a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800cf4e:	bf14      	ite	ne
 800cf50:	6020      	strne	r0, [r4, #0]
 800cf52:	6025      	streq	r5, [r4, #0]
        (RGB & 0x00000100) != 0 ? (TempG[i] = WS2812_HIG) : (TempG[i] = WS2812_LOW);
 800cf54:	f411 7f80 	tst.w	r1, #256	; 0x100
 800cf58:	bf14      	ite	ne
 800cf5a:	6010      	strne	r0, [r2, #0]
 800cf5c:	6015      	streq	r5, [r2, #0]
        (RGB & 0x00000001) != 0 ? (TempB[i] = WS2812_HIG) : (TempB[i] = WS2812_LOW);
 800cf5e:	f011 0f01 	tst.w	r1, #1
 800cf62:	bf14      	ite	ne
 800cf64:	6018      	strne	r0, [r3, #0]
 800cf66:	601d      	streq	r5, [r3, #0]
    for( i = 0; i < 8; ++i,RGB>>=1 )
 800cf68:	0849      	lsrs	r1, r1, #1
 800cf6a:	3304      	adds	r3, #4
 800cf6c:	3204      	adds	r2, #4
 800cf6e:	3404      	adds	r4, #4
 800cf70:	4563      	cmp	r3, ip
 800cf72:	d1ea      	bne.n	800cf4a <WS2812_OneSet+0x16>
 800cf74:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 800cf78:	4d12      	ldr	r5, [pc, #72]	; (800cfc4 <WS2812_OneSet+0x90>)
 800cf7a:	eb05 05ce 	add.w	r5, r5, lr, lsl #3
 800cf7e:	2400      	movs	r4, #0
 800cf80:	3504      	adds	r5, #4
 800cf82:	e002      	b.n	800cf8a <WS2812_OneSet+0x56>
    }

	for (uint8_t j = 0; j<8;j++)
 800cf84:	3403      	adds	r4, #3
 800cf86:	2c18      	cmp	r4, #24
 800cf88:	d018      	beq.n	800cfbc <WS2812_OneSet+0x88>
	{
		for (i = 0; i < 3; i++)
 800cf8a:	192a      	adds	r2, r5, r4
{
 800cf8c:	46ee      	mov	lr, sp
 800cf8e:	f10d 0c20 	add.w	ip, sp, #32
 800cf92:	a810      	add	r0, sp, #64	; 0x40
 800cf94:	2310      	movs	r3, #16
		{
			g_ws2812.Col[num].RGB.R[i + (j * 3)] = TempR[i] >> (16-8*i);
 800cf96:	f850 1b04 	ldr.w	r1, [r0], #4
 800cf9a:	40d9      	lsrs	r1, r3
 800cf9c:	7611      	strb	r1, [r2, #24]
			g_ws2812.Col[num].RGB.G[i + (j * 3)] = TempG[i] >> (16-8*i);
 800cf9e:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cfa2:	40d9      	lsrs	r1, r3
 800cfa4:	f802 1b01 	strb.w	r1, [r2], #1
			g_ws2812.Col[num].RGB.B[i + (j * 3)] = TempB[i] >> (16-8*i);
 800cfa8:	f85e 1b04 	ldr.w	r1, [lr], #4
 800cfac:	40d9      	lsrs	r1, r3
 800cfae:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
		for (i = 0; i < 3; i++)
 800cfb2:	3b08      	subs	r3, #8
 800cfb4:	f113 0f08 	cmn.w	r3, #8
 800cfb8:	d1ed      	bne.n	800cf96 <WS2812_OneSet+0x62>
 800cfba:	e7e3      	b.n	800cf84 <WS2812_OneSet+0x50>
		}
	}
}
 800cfbc:	b019      	add	sp, #100	; 0x64
 800cfbe:	bd30      	pop	{r4, r5, pc}
 800cfc0:	00fffc00 	.word	0x00fffc00
 800cfc4:	20001120 	.word	0x20001120

0800cfc8 <WS2812_Show>:


void WS2812_Show(void)
{
 800cfc8:	b508      	push	{r3, lr}
#if (LED_SPI == 2)
    HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)&g_ws2812.Col[0].Buff, 72*WS2812_NUM);
 800cfca:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800cfce:	4902      	ldr	r1, [pc, #8]	; (800cfd8 <WS2812_Show+0x10>)
 800cfd0:	4802      	ldr	r0, [pc, #8]	; (800cfdc <WS2812_Show+0x14>)
 800cfd2:	f001 fdfb 	bl	800ebcc <HAL_SPI_Transmit_DMA>
#elif (LED_SPI == 1)
    HAL_SPI_Transmit_IT(&hspi1, (uint8_t*)&g_ws2812.Col[0].Buff, 72);
#endif
}
 800cfd6:	bd08      	pop	{r3, pc}
 800cfd8:	20001124 	.word	0x20001124
 800cfdc:	200009cc 	.word	0x200009cc

0800cfe0 <WS2812_CloseAll>:

void WS2812_CloseAll(void)
{
 800cfe0:	b538      	push	{r3, r4, r5, lr}
 800cfe2:	2400      	movs	r4, #0
    uint16_t i;

    for (i = 0; i < WS2812_NUM; ++i)
    {
        WS2812_OneSet(i, 0);
 800cfe4:	4625      	mov	r5, r4
 800cfe6:	4629      	mov	r1, r5
 800cfe8:	b2e0      	uxtb	r0, r4
 800cfea:	f7ff ffa3 	bl	800cf34 <WS2812_OneSet>
    for (i = 0; i < WS2812_NUM; ++i)
 800cfee:	3401      	adds	r4, #1
 800cff0:	2c05      	cmp	r4, #5
 800cff2:	d1f8      	bne.n	800cfe6 <WS2812_CloseAll+0x6>
    }
    WS2812_Show();
 800cff4:	f7ff ffe8 	bl	800cfc8 <WS2812_Show>
}
 800cff8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800cffc <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800cffc:	4b10      	ldr	r3, [pc, #64]	; (800d040 <HAL_InitTick+0x44>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	b90b      	cbnz	r3, 800d006 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800d002:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800d004:	4770      	bx	lr
{
 800d006:	b510      	push	{r4, lr}
 800d008:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800d00a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d00e:	fbb0 f3f3 	udiv	r3, r0, r3
 800d012:	4a0c      	ldr	r2, [pc, #48]	; (800d044 <HAL_InitTick+0x48>)
 800d014:	6810      	ldr	r0, [r2, #0]
 800d016:	fbb0 f0f3 	udiv	r0, r0, r3
 800d01a:	f000 fbdd 	bl	800d7d8 <HAL_SYSTICK_Config>
 800d01e:	b968      	cbnz	r0, 800d03c <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d020:	2c0f      	cmp	r4, #15
 800d022:	d901      	bls.n	800d028 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 800d024:	2001      	movs	r0, #1
 800d026:	e00a      	b.n	800d03e <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d028:	2200      	movs	r2, #0
 800d02a:	4621      	mov	r1, r4
 800d02c:	f04f 30ff 	mov.w	r0, #4294967295
 800d030:	f000 fb7c 	bl	800d72c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800d034:	4b04      	ldr	r3, [pc, #16]	; (800d048 <HAL_InitTick+0x4c>)
 800d036:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 800d038:	2000      	movs	r0, #0
 800d03a:	e000      	b.n	800d03e <HAL_InitTick+0x42>
      status = HAL_ERROR;
 800d03c:	2001      	movs	r0, #1
}
 800d03e:	bd10      	pop	{r4, pc}
 800d040:	20000074 	.word	0x20000074
 800d044:	2000005c 	.word	0x2000005c
 800d048:	20000078 	.word	0x20000078

0800d04c <HAL_Init>:
{
 800d04c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d04e:	2003      	movs	r0, #3
 800d050:	f000 fb5a 	bl	800d708 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d054:	200f      	movs	r0, #15
 800d056:	f7ff ffd1 	bl	800cffc <HAL_InitTick>
 800d05a:	b110      	cbz	r0, 800d062 <HAL_Init+0x16>
    status = HAL_ERROR;
 800d05c:	2401      	movs	r4, #1
}
 800d05e:	4620      	mov	r0, r4
 800d060:	bd10      	pop	{r4, pc}
 800d062:	4604      	mov	r4, r0
    HAL_MspInit();
 800d064:	f7fb fec4 	bl	8008df0 <HAL_MspInit>
 800d068:	e7f9      	b.n	800d05e <HAL_Init+0x12>
	...

0800d06c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800d06c:	4a03      	ldr	r2, [pc, #12]	; (800d07c <HAL_IncTick+0x10>)
 800d06e:	6813      	ldr	r3, [r2, #0]
 800d070:	4903      	ldr	r1, [pc, #12]	; (800d080 <HAL_IncTick+0x14>)
 800d072:	6809      	ldr	r1, [r1, #0]
 800d074:	440b      	add	r3, r1
 800d076:	6013      	str	r3, [r2, #0]
}
 800d078:	4770      	bx	lr
 800d07a:	bf00      	nop
 800d07c:	2000128c 	.word	0x2000128c
 800d080:	20000074 	.word	0x20000074

0800d084 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800d084:	4b01      	ldr	r3, [pc, #4]	; (800d08c <HAL_GetTick+0x8>)
 800d086:	6818      	ldr	r0, [r3, #0]
}
 800d088:	4770      	bx	lr
 800d08a:	bf00      	nop
 800d08c:	2000128c 	.word	0x2000128c

0800d090 <HAL_ADC_Init>:
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800d090:	2800      	cmp	r0, #0
 800d092:	f000 80bd 	beq.w	800d210 <HAL_ADC_Init+0x180>
{
 800d096:	b530      	push	{r4, r5, lr}
 800d098:	b083      	sub	sp, #12
 800d09a:	4604      	mov	r4, r0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800d09c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d065      	beq.n	800d16e <HAL_ADC_Init+0xde>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d0a2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d0a4:	f013 0f10 	tst.w	r3, #16
 800d0a8:	f040 80b4 	bne.w	800d214 <HAL_ADC_Init+0x184>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d0ac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d0ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800d0b2:	f023 0302 	bic.w	r3, r3, #2
 800d0b6:	f043 0302 	orr.w	r3, r3, #2
 800d0ba:	64e3      	str	r3, [r4, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800d0bc:	4a57      	ldr	r2, [pc, #348]	; (800d21c <HAL_ADC_Init+0x18c>)
 800d0be:	6853      	ldr	r3, [r2, #4]
 800d0c0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800d0c4:	6861      	ldr	r1, [r4, #4]
 800d0c6:	430b      	orrs	r3, r1
 800d0c8:	6053      	str	r3, [r2, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d0ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d0ce:	fa91 f1a1 	rbit	r1, r1
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
                hadc->Init.EOCSelection                                        |
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800d0d2:	fab1 f181 	clz	r1, r1
                hadc->Init.ChannelsBank                                        |
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800d0d6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800d0da:	2302      	movs	r3, #2
 800d0dc:	fa93 f3a3 	rbit	r3, r3
 800d0e0:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800d0e4:	68e2      	ldr	r2, [r4, #12]
 800d0e6:	6965      	ldr	r5, [r4, #20]
 800d0e8:	432a      	orrs	r2, r5
 800d0ea:	6a25      	ldr	r5, [r4, #32]
 800d0ec:	432a      	orrs	r2, r5
 800d0ee:	f894 c03c 	ldrb.w	ip, [r4, #60]	; 0x3c
 800d0f2:	fa0c f101 	lsl.w	r1, ip, r1
 800d0f6:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800d0f8:	fa00 f303 	lsl.w	r3, r0, r3
                hadc->Init.ChannelsBank                                        |
 800d0fc:	4313      	orrs	r3, r2
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800d0fe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d100:	2a10      	cmp	r2, #16
 800d102:	d002      	beq.n	800d10a <HAL_ADC_Init+0x7a>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800d104:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d106:	430a      	orrs	r2, r1
 800d108:	4313      	orrs	r3, r2
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800d10a:	6825      	ldr	r5, [r4, #0]
 800d10c:	682a      	ldr	r2, [r5, #0]
 800d10e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800d112:	d11a      	bne.n	800d14a <HAL_ADC_Init+0xba>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800d114:	69a1      	ldr	r1, [r4, #24]
 800d116:	430b      	orrs	r3, r1
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800d118:	68a1      	ldr	r1, [r4, #8]
 800d11a:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800d11e:	ea41 0c0c 	orr.w	ip, r1, ip
                  hadc->Init.LowPowerAutoPowerOff           |
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800d122:	6921      	ldr	r1, [r4, #16]
 800d124:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d128:	d004      	beq.n	800d134 <HAL_ADC_Init+0xa4>
 800d12a:	2901      	cmp	r1, #1
 800d12c:	bf14      	ite	ne
 800d12e:	4611      	movne	r1, r2
 800d130:	f44f 7180 	moveq.w	r1, #256	; 0x100
                  hadc->Init.LowPowerAutoPowerOff           |
 800d134:	ea4c 0201 	orr.w	r2, ip, r1
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800d138:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800d13c:	2901      	cmp	r1, #1
 800d13e:	d026      	beq.n	800d18e <HAL_ADC_Init+0xfe>
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800d140:	6868      	ldr	r0, [r5, #4]
 800d142:	4937      	ldr	r1, [pc, #220]	; (800d220 <HAL_ADC_Init+0x190>)
 800d144:	4001      	ands	r1, r0
 800d146:	430a      	orrs	r2, r1
 800d148:	606a      	str	r2, [r5, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800d14a:	6821      	ldr	r1, [r4, #0]
 800d14c:	6888      	ldr	r0, [r1, #8]
 800d14e:	4a35      	ldr	r2, [pc, #212]	; (800d224 <HAL_ADC_Init+0x194>)
 800d150:	4002      	ands	r2, r0
 800d152:	431a      	orrs	r2, r3
 800d154:	608a      	str	r2, [r1, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800d156:	6922      	ldr	r2, [r4, #16]
 800d158:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800d15c:	d02e      	beq.n	800d1bc <HAL_ADC_Init+0x12c>
 800d15e:	2a01      	cmp	r2, #1
 800d160:	d02c      	beq.n	800d1bc <HAL_ADC_Init+0x12c>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800d162:	6821      	ldr	r1, [r4, #0]
 800d164:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800d166:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 800d16a:	630a      	str	r2, [r1, #48]	; 0x30
 800d16c:	e035      	b.n	800d1da <HAL_ADC_Init+0x14a>
    ADC_CLEAR_ERRORCODE(hadc);
 800d16e:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 800d170:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d174:	4b2c      	ldr	r3, [pc, #176]	; (800d228 <HAL_ADC_Init+0x198>)
 800d176:	6a1a      	ldr	r2, [r3, #32]
 800d178:	f042 0201 	orr.w	r2, r2, #1
 800d17c:	621a      	str	r2, [r3, #32]
 800d17e:	6a1b      	ldr	r3, [r3, #32]
 800d180:	f003 0301 	and.w	r3, r3, #1
 800d184:	9301      	str	r3, [sp, #4]
 800d186:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 800d188:	f7f9 fe1a 	bl	8006dc0 <HAL_ADC_MspInit>
 800d18c:	e789      	b.n	800d0a2 <HAL_ADC_Init+0x12>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800d18e:	b960      	cbnz	r0, 800d1aa <HAL_ADC_Init+0x11a>
 800d190:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800d194:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800d198:	fab1 f081 	clz	r0, r1
 800d19c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d19e:	3901      	subs	r1, #1
 800d1a0:	4081      	lsls	r1, r0
 800d1a2:	430a      	orrs	r2, r1
 800d1a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d1a8:	e7ca      	b.n	800d140 <HAL_ADC_Init+0xb0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d1aa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d1ac:	f041 0120 	orr.w	r1, r1, #32
 800d1b0:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d1b2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800d1b4:	f041 0101 	orr.w	r1, r1, #1
 800d1b8:	6521      	str	r1, [r4, #80]	; 0x50
 800d1ba:	e7c1      	b.n	800d140 <HAL_ADC_Init+0xb0>
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800d1bc:	6825      	ldr	r5, [r4, #0]
 800d1be:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800d1c0:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800d1c4:	fa92 f2a2 	rbit	r2, r2
 800d1c8:	fab2 f182 	clz	r1, r2
 800d1cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d1ce:	3a01      	subs	r2, #1
 800d1d0:	408a      	lsls	r2, r1
 800d1d2:	f020 71f8 	bic.w	r1, r0, #32505856	; 0x1f00000
 800d1d6:	430a      	orrs	r2, r1
 800d1d8:	632a      	str	r2, [r5, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800d1da:	6822      	ldr	r2, [r4, #0]
 800d1dc:	6891      	ldr	r1, [r2, #8]
 800d1de:	4a13      	ldr	r2, [pc, #76]	; (800d22c <HAL_ADC_Init+0x19c>)
 800d1e0:	400a      	ands	r2, r1
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d00b      	beq.n	800d1fe <HAL_ADC_Init+0x16e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800d1e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d1e8:	f023 0312 	bic.w	r3, r3, #18
 800d1ec:	f043 0310 	orr.w	r3, r3, #16
 800d1f0:	64e3      	str	r3, [r4, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d1f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d1f4:	f043 0301 	orr.w	r3, r3, #1
 800d1f8:	6523      	str	r3, [r4, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800d1fa:	2001      	movs	r0, #1
 800d1fc:	e00b      	b.n	800d216 <HAL_ADC_Init+0x186>
      ADC_CLEAR_ERRORCODE(hadc);
 800d1fe:	2000      	movs	r0, #0
 800d200:	6520      	str	r0, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 800d202:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d204:	f023 0303 	bic.w	r3, r3, #3
 800d208:	f043 0301 	orr.w	r3, r3, #1
 800d20c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d20e:	e002      	b.n	800d216 <HAL_ADC_Init+0x186>
    return HAL_ERROR;
 800d210:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 800d212:	4770      	bx	lr
    tmp_hal_status = HAL_ERROR;
 800d214:	2001      	movs	r0, #1
}
 800d216:	b003      	add	sp, #12
 800d218:	bd30      	pop	{r4, r5, pc}
 800d21a:	bf00      	nop
 800d21c:	40012700 	.word	0x40012700
 800d220:	fcfc16ff 	.word	0xfcfc16ff
 800d224:	c0fff189 	.word	0xc0fff189
 800d228:	40023800 	.word	0x40023800
 800d22c:	bf80fffe 	.word	0xbf80fffe

0800d230 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800d230:	4770      	bx	lr

0800d232 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800d232:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800d234:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800d236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d238:	f012 0f50 	tst.w	r2, #80	; 0x50
 800d23c:	d127      	bne.n	800d28e <ADC_DMAConvCplt+0x5c>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800d23e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d244:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	6891      	ldr	r1, [r2, #8]
 800d24a:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 800d24e:	d11a      	bne.n	800d286 <ADC_DMAConvCplt+0x54>
 800d250:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 800d254:	b9b9      	cbnz	r1, 800d286 <ADC_DMAConvCplt+0x54>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800d256:	6b11      	ldr	r1, [r2, #48]	; 0x30
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800d258:	f011 7ff8 	tst.w	r1, #32505856	; 0x1f00000
 800d25c:	d003      	beq.n	800d266 <ADC_DMAConvCplt+0x34>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800d25e:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800d260:	f411 6f80 	tst.w	r1, #1024	; 0x400
 800d264:	d10f      	bne.n	800d286 <ADC_DMAConvCplt+0x54>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800d266:	6851      	ldr	r1, [r2, #4]
 800d268:	f021 0120 	bic.w	r1, r1, #32
 800d26c:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800d26e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d274:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800d276:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d278:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800d27c:	d103      	bne.n	800d286 <ADC_DMAConvCplt+0x54>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d27e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d280:	f042 0201 	orr.w	r2, r2, #1
 800d284:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800d286:	4618      	mov	r0, r3
 800d288:	f7ff ffd2 	bl	800d230 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800d28c:	bd08      	pop	{r3, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800d28e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d292:	4798      	blx	r3
}
 800d294:	e7fa      	b.n	800d28c <ADC_DMAConvCplt+0x5a>

0800d296 <HAL_ADC_ConvHalfCpltCallback>:
}
 800d296:	4770      	bx	lr

0800d298 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800d298:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800d29a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800d29c:	f7ff fffb 	bl	800d296 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800d2a0:	bd08      	pop	{r3, pc}

0800d2a2 <HAL_ADC_LevelOutOfWindowCallback>:
}
 800d2a2:	4770      	bx	lr

0800d2a4 <HAL_ADC_ErrorCallback>:
}
 800d2a4:	4770      	bx	lr

0800d2a6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800d2a6:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800d2a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800d2aa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d2ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2b0:	64c3      	str	r3, [r0, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800d2b2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d2b4:	f043 0304 	orr.w	r3, r3, #4
 800d2b8:	6503      	str	r3, [r0, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800d2ba:	f7ff fff3 	bl	800d2a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800d2be:	bd08      	pop	{r3, pc}

0800d2c0 <HAL_ADC_IRQHandler>:
{
 800d2c0:	b538      	push	{r3, r4, r5, lr}
 800d2c2:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800d2c4:	6803      	ldr	r3, [r0, #0]
 800d2c6:	685a      	ldr	r2, [r3, #4]
 800d2c8:	f012 0f20 	tst.w	r2, #32
 800d2cc:	d031      	beq.n	800d332 <HAL_ADC_IRQHandler+0x72>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	f012 0f02 	tst.w	r2, #2
 800d2d4:	d02d      	beq.n	800d332 <HAL_ADC_IRQHandler+0x72>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d2d6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800d2d8:	f012 0f10 	tst.w	r2, #16
 800d2dc:	d103      	bne.n	800d2e6 <HAL_ADC_IRQHandler+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800d2de:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800d2e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2e4:	64c2      	str	r2, [r0, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800d2e6:	689a      	ldr	r2, [r3, #8]
 800d2e8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800d2ec:	d11a      	bne.n	800d324 <HAL_ADC_IRQHandler+0x64>
 800d2ee:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800d2f2:	b9ba      	cbnz	r2, 800d324 <HAL_ADC_IRQHandler+0x64>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800d2f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800d2f6:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 800d2fa:	d003      	beq.n	800d304 <HAL_ADC_IRQHandler+0x44>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800d2fc:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800d2fe:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800d302:	d10f      	bne.n	800d324 <HAL_ADC_IRQHandler+0x64>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800d304:	685a      	ldr	r2, [r3, #4]
 800d306:	f022 0220 	bic.w	r2, r2, #32
 800d30a:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800d30c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d30e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d312:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800d314:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d316:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800d31a:	d103      	bne.n	800d324 <HAL_ADC_IRQHandler+0x64>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d31c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d31e:	f043 0301 	orr.w	r3, r3, #1
 800d322:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_ConvCpltCallback(hadc);
 800d324:	4620      	mov	r0, r4
 800d326:	f7ff ff83 	bl	800d230 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800d32a:	6823      	ldr	r3, [r4, #0]
 800d32c:	f06f 0212 	mvn.w	r2, #18
 800d330:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800d332:	6823      	ldr	r3, [r4, #0]
 800d334:	685a      	ldr	r2, [r3, #4]
 800d336:	f012 0f80 	tst.w	r2, #128	; 0x80
 800d33a:	d039      	beq.n	800d3b0 <HAL_ADC_IRQHandler+0xf0>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	f012 0f04 	tst.w	r2, #4
 800d342:	d035      	beq.n	800d3b0 <HAL_ADC_IRQHandler+0xf0>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d344:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800d346:	f012 0f10 	tst.w	r2, #16
 800d34a:	d103      	bne.n	800d354 <HAL_ADC_IRQHandler+0x94>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800d34c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800d34e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d352:	64e2      	str	r2, [r4, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800d354:	689a      	ldr	r2, [r3, #8]
 800d356:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800d35a:	d122      	bne.n	800d3a2 <HAL_ADC_IRQHandler+0xe2>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800d35c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800d35e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800d362:	d003      	beq.n	800d36c <HAL_ADC_IRQHandler+0xac>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800d364:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800d366:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800d36a:	d11a      	bne.n	800d3a2 <HAL_ADC_IRQHandler+0xe2>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800d36c:	685a      	ldr	r2, [r3, #4]
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800d36e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800d372:	d116      	bne.n	800d3a2 <HAL_ADC_IRQHandler+0xe2>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800d374:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800d376:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800d37a:	d112      	bne.n	800d3a2 <HAL_ADC_IRQHandler+0xe2>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800d37c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800d380:	b97a      	cbnz	r2, 800d3a2 <HAL_ADC_IRQHandler+0xe2>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800d382:	685a      	ldr	r2, [r3, #4]
 800d384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d388:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800d38a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d38c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d390:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800d392:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d394:	f413 7f80 	tst.w	r3, #256	; 0x100
 800d398:	d103      	bne.n	800d3a2 <HAL_ADC_IRQHandler+0xe2>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d39a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d39c:	f043 0301 	orr.w	r3, r3, #1
 800d3a0:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	f000 f9ae 	bl	800d704 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800d3a8:	6823      	ldr	r3, [r4, #0]
 800d3aa:	f06f 020c 	mvn.w	r2, #12
 800d3ae:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800d3b0:	6823      	ldr	r3, [r4, #0]
 800d3b2:	685a      	ldr	r2, [r3, #4]
 800d3b4:	f012 0f40 	tst.w	r2, #64	; 0x40
 800d3b8:	d003      	beq.n	800d3c2 <HAL_ADC_IRQHandler+0x102>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f013 0f01 	tst.w	r3, #1
 800d3c0:	d109      	bne.n	800d3d6 <HAL_ADC_IRQHandler+0x116>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800d3c2:	6823      	ldr	r3, [r4, #0]
 800d3c4:	685a      	ldr	r2, [r3, #4]
 800d3c6:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 800d3ca:	d003      	beq.n	800d3d4 <HAL_ADC_IRQHandler+0x114>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	f012 0f20 	tst.w	r2, #32
 800d3d2:	d10c      	bne.n	800d3ee <HAL_ADC_IRQHandler+0x12e>
}
 800d3d4:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800d3d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d3d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d3dc:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800d3de:	4620      	mov	r0, r4
 800d3e0:	f7ff ff5f 	bl	800d2a2 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800d3e4:	6823      	ldr	r3, [r4, #0]
 800d3e6:	f06f 0201 	mvn.w	r2, #1
 800d3ea:	601a      	str	r2, [r3, #0]
 800d3ec:	e7e9      	b.n	800d3c2 <HAL_ADC_IRQHandler+0x102>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800d3ee:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d3f0:	f042 0202 	orr.w	r2, r2, #2
 800d3f4:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800d3f6:	f06f 0520 	mvn.w	r5, #32
 800d3fa:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f7ff ff51 	bl	800d2a4 <HAL_ADC_ErrorCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800d402:	6823      	ldr	r3, [r4, #0]
 800d404:	601d      	str	r5, [r3, #0]
}
 800d406:	e7e5      	b.n	800d3d4 <HAL_ADC_IRQHandler+0x114>

0800d408 <HAL_ADC_ConfigChannel>:
{
 800d408:	b430      	push	{r4, r5}
 800d40a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 800d40c:	2300      	movs	r3, #0
 800d40e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800d410:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800d414:	2b01      	cmp	r3, #1
 800d416:	f000 80c0 	beq.w	800d59a <HAL_ADC_ConfigChannel+0x192>
 800d41a:	2301      	movs	r3, #1
 800d41c:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 800d420:	684b      	ldr	r3, [r1, #4]
 800d422:	2b06      	cmp	r3, #6
 800d424:	d82c      	bhi.n	800d480 <HAL_ADC_ConfigChannel+0x78>
    MODIFY_REG(hadc->Instance->SQR5,
 800d426:	6804      	ldr	r4, [r0, #0]
 800d428:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d42a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d42e:	3b05      	subs	r3, #5
 800d430:	f04f 0c1f 	mov.w	ip, #31
 800d434:	fa0c fc03 	lsl.w	ip, ip, r3
 800d438:	ea22 020c 	bic.w	r2, r2, ip
 800d43c:	680d      	ldr	r5, [r1, #0]
 800d43e:	fa05 f303 	lsl.w	r3, r5, r3
 800d442:	4313      	orrs	r3, r2
 800d444:	6423      	str	r3, [r4, #64]	; 0x40
  if (sConfig->Channel < ADC_CHANNEL_10)
 800d446:	680b      	ldr	r3, [r1, #0]
 800d448:	2b09      	cmp	r3, #9
 800d44a:	d85b      	bhi.n	800d504 <HAL_ADC_ConfigChannel+0xfc>
    MODIFY_REG(hadc->Instance->SMPR3,
 800d44c:	6804      	ldr	r4, [r0, #0]
 800d44e:	6962      	ldr	r2, [r4, #20]
 800d450:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d454:	f04f 0c07 	mov.w	ip, #7
 800d458:	fa0c fc03 	lsl.w	ip, ip, r3
 800d45c:	ea22 020c 	bic.w	r2, r2, ip
 800d460:	688d      	ldr	r5, [r1, #8]
 800d462:	fa05 f303 	lsl.w	r3, r5, r3
 800d466:	4313      	orrs	r3, r2
 800d468:	6163      	str	r3, [r4, #20]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800d46a:	680b      	ldr	r3, [r1, #0]
 800d46c:	3b10      	subs	r3, #16
 800d46e:	2b01      	cmp	r3, #1
 800d470:	d96c      	bls.n	800d54c <HAL_ADC_ConfigChannel+0x144>
  __HAL_UNLOCK(hadc);
 800d472:	2300      	movs	r3, #0
 800d474:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  return tmp_hal_status;
 800d478:	4618      	mov	r0, r3
}
 800d47a:	b002      	add	sp, #8
 800d47c:	bc30      	pop	{r4, r5}
 800d47e:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 800d480:	2b0c      	cmp	r3, #12
 800d482:	d80e      	bhi.n	800d4a2 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SQR4,
 800d484:	6805      	ldr	r5, [r0, #0]
 800d486:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800d488:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d48c:	3b23      	subs	r3, #35	; 0x23
 800d48e:	241f      	movs	r4, #31
 800d490:	409c      	lsls	r4, r3
 800d492:	ea22 0204 	bic.w	r2, r2, r4
 800d496:	680c      	ldr	r4, [r1, #0]
 800d498:	fa04 f303 	lsl.w	r3, r4, r3
 800d49c:	4313      	orrs	r3, r2
 800d49e:	63eb      	str	r3, [r5, #60]	; 0x3c
 800d4a0:	e7d1      	b.n	800d446 <HAL_ADC_ConfigChannel+0x3e>
  else if (sConfig->Rank < 19)
 800d4a2:	2b12      	cmp	r3, #18
 800d4a4:	d80e      	bhi.n	800d4c4 <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SQR3,
 800d4a6:	6805      	ldr	r5, [r0, #0]
 800d4a8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800d4aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d4ae:	3b41      	subs	r3, #65	; 0x41
 800d4b0:	241f      	movs	r4, #31
 800d4b2:	409c      	lsls	r4, r3
 800d4b4:	ea22 0204 	bic.w	r2, r2, r4
 800d4b8:	680c      	ldr	r4, [r1, #0]
 800d4ba:	fa04 f303 	lsl.w	r3, r4, r3
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	63ab      	str	r3, [r5, #56]	; 0x38
 800d4c2:	e7c0      	b.n	800d446 <HAL_ADC_ConfigChannel+0x3e>
  else if (sConfig->Rank < 25)
 800d4c4:	2b18      	cmp	r3, #24
 800d4c6:	d80e      	bhi.n	800d4e6 <HAL_ADC_ConfigChannel+0xde>
    MODIFY_REG(hadc->Instance->SQR2,
 800d4c8:	6805      	ldr	r5, [r0, #0]
 800d4ca:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800d4cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d4d0:	3b5f      	subs	r3, #95	; 0x5f
 800d4d2:	241f      	movs	r4, #31
 800d4d4:	409c      	lsls	r4, r3
 800d4d6:	ea22 0204 	bic.w	r2, r2, r4
 800d4da:	680c      	ldr	r4, [r1, #0]
 800d4dc:	fa04 f303 	lsl.w	r3, r4, r3
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	636b      	str	r3, [r5, #52]	; 0x34
 800d4e4:	e7af      	b.n	800d446 <HAL_ADC_ConfigChannel+0x3e>
    MODIFY_REG(hadc->Instance->SQR1,
 800d4e6:	6805      	ldr	r5, [r0, #0]
 800d4e8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800d4ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d4ee:	3b7d      	subs	r3, #125	; 0x7d
 800d4f0:	241f      	movs	r4, #31
 800d4f2:	409c      	lsls	r4, r3
 800d4f4:	ea22 0204 	bic.w	r2, r2, r4
 800d4f8:	680c      	ldr	r4, [r1, #0]
 800d4fa:	fa04 f303 	lsl.w	r3, r4, r3
 800d4fe:	4313      	orrs	r3, r2
 800d500:	632b      	str	r3, [r5, #48]	; 0x30
 800d502:	e7a0      	b.n	800d446 <HAL_ADC_ConfigChannel+0x3e>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800d504:	2b13      	cmp	r3, #19
 800d506:	d80e      	bhi.n	800d526 <HAL_ADC_ConfigChannel+0x11e>
    MODIFY_REG(hadc->Instance->SMPR2,
 800d508:	6805      	ldr	r5, [r0, #0]
 800d50a:	692a      	ldr	r2, [r5, #16]
 800d50c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d510:	3b1e      	subs	r3, #30
 800d512:	2407      	movs	r4, #7
 800d514:	409c      	lsls	r4, r3
 800d516:	ea22 0204 	bic.w	r2, r2, r4
 800d51a:	688c      	ldr	r4, [r1, #8]
 800d51c:	fa04 f303 	lsl.w	r3, r4, r3
 800d520:	4313      	orrs	r3, r2
 800d522:	612b      	str	r3, [r5, #16]
 800d524:	e7a1      	b.n	800d46a <HAL_ADC_ConfigChannel+0x62>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800d526:	2b1a      	cmp	r3, #26
 800d528:	d80e      	bhi.n	800d548 <HAL_ADC_ConfigChannel+0x140>
    MODIFY_REG(hadc->Instance->SMPR1,
 800d52a:	6805      	ldr	r5, [r0, #0]
 800d52c:	68ea      	ldr	r2, [r5, #12]
 800d52e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d532:	3b3c      	subs	r3, #60	; 0x3c
 800d534:	2407      	movs	r4, #7
 800d536:	409c      	lsls	r4, r3
 800d538:	ea22 0204 	bic.w	r2, r2, r4
 800d53c:	688c      	ldr	r4, [r1, #8]
 800d53e:	fa04 f303 	lsl.w	r3, r4, r3
 800d542:	4313      	orrs	r3, r2
 800d544:	60eb      	str	r3, [r5, #12]
 800d546:	e790      	b.n	800d46a <HAL_ADC_ConfigChannel+0x62>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800d548:	bf00      	nop
 800d54a:	e78e      	b.n	800d46a <HAL_ADC_ConfigChannel+0x62>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800d54c:	4b14      	ldr	r3, [pc, #80]	; (800d5a0 <HAL_ADC_ConfigChannel+0x198>)
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800d554:	d18d      	bne.n	800d472 <HAL_ADC_ConfigChannel+0x6a>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800d556:	4a12      	ldr	r2, [pc, #72]	; (800d5a0 <HAL_ADC_ConfigChannel+0x198>)
 800d558:	6853      	ldr	r3, [r2, #4]
 800d55a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d55e:	6053      	str	r3, [r2, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800d560:	680b      	ldr	r3, [r1, #0]
 800d562:	2b10      	cmp	r3, #16
 800d564:	d185      	bne.n	800d472 <HAL_ADC_ConfigChannel+0x6a>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800d566:	4b0f      	ldr	r3, [pc, #60]	; (800d5a4 <HAL_ADC_ConfigChannel+0x19c>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800d56e:	f502 322d 	add.w	r2, r2, #177152	; 0x2b400
 800d572:	f202 3283 	addw	r2, r2, #899	; 0x383
 800d576:	fba2 2303 	umull	r2, r3, r2, r3
 800d57a:	0c9b      	lsrs	r3, r3, #18
 800d57c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d580:	005b      	lsls	r3, r3, #1
 800d582:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800d584:	9b01      	ldr	r3, [sp, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	f43f af73 	beq.w	800d472 <HAL_ADC_ConfigChannel+0x6a>
            wait_loop_index--;
 800d58c:	9b01      	ldr	r3, [sp, #4]
 800d58e:	3b01      	subs	r3, #1
 800d590:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800d592:	9b01      	ldr	r3, [sp, #4]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d1f9      	bne.n	800d58c <HAL_ADC_ConfigChannel+0x184>
 800d598:	e76b      	b.n	800d472 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 800d59a:	2002      	movs	r0, #2
 800d59c:	e76d      	b.n	800d47a <HAL_ADC_ConfigChannel+0x72>
 800d59e:	bf00      	nop
 800d5a0:	40012700 	.word	0x40012700
 800d5a4:	2000005c 	.word	0x2000005c

0800d5a8 <ADC_Enable>:
{
 800d5a8:	b530      	push	{r4, r5, lr}
 800d5aa:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800d5b0:	6803      	ldr	r3, [r0, #0]
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	f012 0f40 	tst.w	r2, #64	; 0x40
 800d5b8:	d13d      	bne.n	800d636 <ADC_Enable+0x8e>
 800d5ba:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 800d5bc:	689a      	ldr	r2, [r3, #8]
 800d5be:	f042 0201 	orr.w	r2, r2, #1
 800d5c2:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800d5c4:	4b1d      	ldr	r3, [pc, #116]	; (800d63c <ADC_Enable+0x94>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	4a1d      	ldr	r2, [pc, #116]	; (800d640 <ADC_Enable+0x98>)
 800d5ca:	fba2 2303 	umull	r2, r3, r2, r3
 800d5ce:	0c9b      	lsrs	r3, r3, #18
 800d5d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d5d4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800d5d6:	9b01      	ldr	r3, [sp, #4]
 800d5d8:	b12b      	cbz	r3, 800d5e6 <ADC_Enable+0x3e>
      wait_loop_index--;
 800d5da:	9b01      	ldr	r3, [sp, #4]
 800d5dc:	3b01      	subs	r3, #1
 800d5de:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800d5e0:	9b01      	ldr	r3, [sp, #4]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d1f9      	bne.n	800d5da <ADC_Enable+0x32>
    tickstart = HAL_GetTick();    
 800d5e6:	f7ff fd4d 	bl	800d084 <HAL_GetTick>
 800d5ea:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800d5ec:	6823      	ldr	r3, [r4, #0]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d5f4:	d006      	beq.n	800d604 <ADC_Enable+0x5c>
  return HAL_OK;
 800d5f6:	2000      	movs	r0, #0
 800d5f8:	e01e      	b.n	800d638 <ADC_Enable+0x90>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800d5fa:	6823      	ldr	r3, [r4, #0]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d602:	d116      	bne.n	800d632 <ADC_Enable+0x8a>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800d604:	f7ff fd3e 	bl	800d084 <HAL_GetTick>
 800d608:	1b43      	subs	r3, r0, r5
 800d60a:	2b02      	cmp	r3, #2
 800d60c:	d9f5      	bls.n	800d5fa <ADC_Enable+0x52>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800d60e:	6823      	ldr	r3, [r4, #0]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d616:	d1f0      	bne.n	800d5fa <ADC_Enable+0x52>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d618:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d61a:	f043 0310 	orr.w	r3, r3, #16
 800d61e:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d620:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d622:	f043 0301 	orr.w	r3, r3, #1
 800d626:	6523      	str	r3, [r4, #80]	; 0x50
          __HAL_UNLOCK(hadc);
 800d628:	2300      	movs	r3, #0
 800d62a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
          return HAL_ERROR;
 800d62e:	2001      	movs	r0, #1
 800d630:	e002      	b.n	800d638 <ADC_Enable+0x90>
  return HAL_OK;
 800d632:	2000      	movs	r0, #0
 800d634:	e000      	b.n	800d638 <ADC_Enable+0x90>
 800d636:	2000      	movs	r0, #0
}
 800d638:	b003      	add	sp, #12
 800d63a:	bd30      	pop	{r4, r5, pc}
 800d63c:	2000005c 	.word	0x2000005c
 800d640:	431bde83 	.word	0x431bde83

0800d644 <HAL_ADC_Start_DMA>:
{
 800d644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d646:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 800d648:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 800d64c:	2901      	cmp	r1, #1
 800d64e:	d050      	beq.n	800d6f2 <HAL_ADC_Start_DMA+0xae>
 800d650:	4604      	mov	r4, r0
 800d652:	4616      	mov	r6, r2
 800d654:	2301      	movs	r3, #1
 800d656:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 800d65a:	f7ff ffa5 	bl	800d5a8 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800d65e:	4607      	mov	r7, r0
 800d660:	2800      	cmp	r0, #0
 800d662:	d147      	bne.n	800d6f4 <HAL_ADC_Start_DMA+0xb0>
    ADC_STATE_CLR_SET(hadc->State,
 800d664:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d666:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800d66a:	f021 0101 	bic.w	r1, r1, #1
 800d66e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800d672:	64e1      	str	r1, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800d674:	6823      	ldr	r3, [r4, #0]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800d67c:	d005      	beq.n	800d68a <HAL_ADC_Start_DMA+0x46>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800d67e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d680:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800d684:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d688:	64e3      	str	r3, [r4, #76]	; 0x4c
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800d68a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d68c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800d690:	bf1a      	itte	ne
 800d692:	6d23      	ldrne	r3, [r4, #80]	; 0x50
 800d694:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800d698:	2300      	moveq	r3, #0
 800d69a:	6523      	str	r3, [r4, #80]	; 0x50
    __HAL_UNLOCK(hadc);
 800d69c:	2300      	movs	r3, #0
 800d69e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800d6a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d6a4:	4a14      	ldr	r2, [pc, #80]	; (800d6f8 <HAL_ADC_Start_DMA+0xb4>)
 800d6a6:	629a      	str	r2, [r3, #40]	; 0x28
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800d6a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d6aa:	4a14      	ldr	r2, [pc, #80]	; (800d6fc <HAL_ADC_Start_DMA+0xb8>)
 800d6ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800d6ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d6b0:	4a13      	ldr	r2, [pc, #76]	; (800d700 <HAL_ADC_Start_DMA+0xbc>)
 800d6b2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800d6b4:	6823      	ldr	r3, [r4, #0]
 800d6b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800d6ba:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800d6bc:	6822      	ldr	r2, [r4, #0]
 800d6be:	6853      	ldr	r3, [r2, #4]
 800d6c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d6c4:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800d6c6:	6822      	ldr	r2, [r4, #0]
 800d6c8:	6893      	ldr	r3, [r2, #8]
 800d6ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6ce:	6093      	str	r3, [r2, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800d6d0:	6821      	ldr	r1, [r4, #0]
 800d6d2:	4633      	mov	r3, r6
 800d6d4:	462a      	mov	r2, r5
 800d6d6:	3158      	adds	r1, #88	; 0x58
 800d6d8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800d6da:	f000 f8dd 	bl	800d898 <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800d6de:	6823      	ldr	r3, [r4, #0]
 800d6e0:	689a      	ldr	r2, [r3, #8]
 800d6e2:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800d6e6:	d105      	bne.n	800d6f4 <HAL_ADC_Start_DMA+0xb0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800d6e8:	689a      	ldr	r2, [r3, #8]
 800d6ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d6ee:	609a      	str	r2, [r3, #8]
 800d6f0:	e000      	b.n	800d6f4 <HAL_ADC_Start_DMA+0xb0>
  __HAL_LOCK(hadc);
 800d6f2:	2702      	movs	r7, #2
}
 800d6f4:	4638      	mov	r0, r7
 800d6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6f8:	0800d233 	.word	0x0800d233
 800d6fc:	0800d299 	.word	0x0800d299
 800d700:	0800d2a7 	.word	0x0800d2a7

0800d704 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800d704:	4770      	bx	lr
	...

0800d708 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d708:	4907      	ldr	r1, [pc, #28]	; (800d728 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800d70a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800d70c:	0203      	lsls	r3, r0, #8
 800d70e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d712:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d716:	0412      	lsls	r2, r2, #16
 800d718:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d71a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d71c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800d724:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800d726:	4770      	bx	lr
 800d728:	e000ed00 	.word	0xe000ed00

0800d72c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d72c:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d72e:	4b18      	ldr	r3, [pc, #96]	; (800d790 <HAL_NVIC_SetPriority+0x64>)
 800d730:	68db      	ldr	r3, [r3, #12]
 800d732:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d736:	f1c3 0c07 	rsb	ip, r3, #7
 800d73a:	f1bc 0f04 	cmp.w	ip, #4
 800d73e:	bf28      	it	cs
 800d740:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d744:	f103 0e04 	add.w	lr, r3, #4
 800d748:	f1be 0f06 	cmp.w	lr, #6
 800d74c:	bf8c      	ite	hi
 800d74e:	3b03      	subhi	r3, #3
 800d750:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d752:	f04f 3eff 	mov.w	lr, #4294967295
 800d756:	fa0e fc0c 	lsl.w	ip, lr, ip
 800d75a:	ea21 010c 	bic.w	r1, r1, ip
 800d75e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d760:	fa0e f303 	lsl.w	r3, lr, r3
 800d764:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d768:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800d76a:	2800      	cmp	r0, #0
 800d76c:	db09      	blt.n	800d782 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d76e:	0109      	lsls	r1, r1, #4
 800d770:	b2c9      	uxtb	r1, r1
 800d772:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800d776:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800d77a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800d77e:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d782:	f000 000f 	and.w	r0, r0, #15
 800d786:	0109      	lsls	r1, r1, #4
 800d788:	b2c9      	uxtb	r1, r1
 800d78a:	4b02      	ldr	r3, [pc, #8]	; (800d794 <HAL_NVIC_SetPriority+0x68>)
 800d78c:	5419      	strb	r1, [r3, r0]
 800d78e:	e7f6      	b.n	800d77e <HAL_NVIC_SetPriority+0x52>
 800d790:	e000ed00 	.word	0xe000ed00
 800d794:	e000ed14 	.word	0xe000ed14

0800d798 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800d798:	2800      	cmp	r0, #0
 800d79a:	db08      	blt.n	800d7ae <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d79c:	0942      	lsrs	r2, r0, #5
 800d79e:	f000 001f 	and.w	r0, r0, #31
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	fa03 f000 	lsl.w	r0, r3, r0
 800d7a8:	4b01      	ldr	r3, [pc, #4]	; (800d7b0 <HAL_NVIC_EnableIRQ+0x18>)
 800d7aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800d7ae:	4770      	bx	lr
 800d7b0:	e000e100 	.word	0xe000e100

0800d7b4 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800d7b4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d7b8:	4905      	ldr	r1, [pc, #20]	; (800d7d0 <HAL_NVIC_SystemReset+0x1c>)
 800d7ba:	68ca      	ldr	r2, [r1, #12]
 800d7bc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d7c0:	4b04      	ldr	r3, [pc, #16]	; (800d7d4 <HAL_NVIC_SystemReset+0x20>)
 800d7c2:	4313      	orrs	r3, r2
 800d7c4:	60cb      	str	r3, [r1, #12]
 800d7c6:	f3bf 8f4f 	dsb	sy
    __NOP();
 800d7ca:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800d7cc:	e7fd      	b.n	800d7ca <HAL_NVIC_SystemReset+0x16>
 800d7ce:	bf00      	nop
 800d7d0:	e000ed00 	.word	0xe000ed00
 800d7d4:	05fa0004 	.word	0x05fa0004

0800d7d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d7d8:	3801      	subs	r0, #1
 800d7da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800d7de:	d20b      	bcs.n	800d7f8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d7e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d7e4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d7e6:	4a05      	ldr	r2, [pc, #20]	; (800d7fc <HAL_SYSTICK_Config+0x24>)
 800d7e8:	21f0      	movs	r1, #240	; 0xf0
 800d7ea:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d7ee:	2000      	movs	r0, #0
 800d7f0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d7f2:	2207      	movs	r2, #7
 800d7f4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d7f6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800d7f8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800d7fa:	4770      	bx	lr
 800d7fc:	e000ed00 	.word	0xe000ed00

0800d800 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800d800:	2800      	cmp	r0, #0
 800d802:	d03a      	beq.n	800d87a <HAL_DMA_Init+0x7a>
{
 800d804:	b410      	push	{r4}
 800d806:	4602      	mov	r2, r0
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800d808:	6800      	ldr	r0, [r0, #0]
 800d80a:	4b1d      	ldr	r3, [pc, #116]	; (800d880 <HAL_DMA_Init+0x80>)
 800d80c:	4298      	cmp	r0, r3
 800d80e:	d829      	bhi.n	800d864 <HAL_DMA_Init+0x64>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800d810:	4b1c      	ldr	r3, [pc, #112]	; (800d884 <HAL_DMA_Init+0x84>)
 800d812:	4403      	add	r3, r0
 800d814:	491c      	ldr	r1, [pc, #112]	; (800d888 <HAL_DMA_Init+0x88>)
 800d816:	fba1 1303 	umull	r1, r3, r1, r3
 800d81a:	091b      	lsrs	r3, r3, #4
 800d81c:	009b      	lsls	r3, r3, #2
 800d81e:	6413      	str	r3, [r2, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800d820:	4b1a      	ldr	r3, [pc, #104]	; (800d88c <HAL_DMA_Init+0x8c>)
 800d822:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800d824:	2302      	movs	r3, #2
 800d826:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800d82a:	6801      	ldr	r1, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800d82c:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800d830:	f021 0170 	bic.w	r1, r1, #112	; 0x70
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800d834:	6853      	ldr	r3, [r2, #4]
 800d836:	6894      	ldr	r4, [r2, #8]
 800d838:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d83a:	68d4      	ldr	r4, [r2, #12]
 800d83c:	4323      	orrs	r3, r4
 800d83e:	6914      	ldr	r4, [r2, #16]
 800d840:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d842:	6954      	ldr	r4, [r2, #20]
 800d844:	4323      	orrs	r3, r4
 800d846:	6994      	ldr	r4, [r2, #24]
 800d848:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800d84a:	69d4      	ldr	r4, [r2, #28]
 800d84c:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800d84e:	430b      	orrs	r3, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800d850:	6003      	str	r3, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d852:	2000      	movs	r0, #0
 800d854:	6390      	str	r0, [r2, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800d856:	2301      	movs	r3, #1
 800d858:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800d85c:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 800d860:	bc10      	pop	{r4}
 800d862:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800d864:	4b0a      	ldr	r3, [pc, #40]	; (800d890 <HAL_DMA_Init+0x90>)
 800d866:	4403      	add	r3, r0
 800d868:	4907      	ldr	r1, [pc, #28]	; (800d888 <HAL_DMA_Init+0x88>)
 800d86a:	fba1 1303 	umull	r1, r3, r1, r3
 800d86e:	091b      	lsrs	r3, r3, #4
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	6413      	str	r3, [r2, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800d874:	4b07      	ldr	r3, [pc, #28]	; (800d894 <HAL_DMA_Init+0x94>)
 800d876:	63d3      	str	r3, [r2, #60]	; 0x3c
 800d878:	e7d4      	b.n	800d824 <HAL_DMA_Init+0x24>
    return HAL_ERROR;
 800d87a:	2001      	movs	r0, #1
}
 800d87c:	4770      	bx	lr
 800d87e:	bf00      	nop
 800d880:	40026407 	.word	0x40026407
 800d884:	bffd9ff8 	.word	0xbffd9ff8
 800d888:	cccccccd 	.word	0xcccccccd
 800d88c:	40026000 	.word	0x40026000
 800d890:	bffd9bf8 	.word	0xbffd9bf8
 800d894:	40026400 	.word	0x40026400

0800d898 <HAL_DMA_Start_IT>:

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800d898:	f890 c020 	ldrb.w	ip, [r0, #32]
 800d89c:	f1bc 0f01 	cmp.w	ip, #1
 800d8a0:	d04a      	beq.n	800d938 <HAL_DMA_Start_IT+0xa0>
 800d8a2:	f04f 0c01 	mov.w	ip, #1
 800d8a6:	f880 c020 	strb.w	ip, [r0, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800d8aa:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
 800d8ae:	fa5f fc8c 	uxtb.w	ip, ip
 800d8b2:	f1bc 0f01 	cmp.w	ip, #1
 800d8b6:	d004      	beq.n	800d8c2 <HAL_DMA_Start_IT+0x2a>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	f880 3020 	strb.w	r3, [r0, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800d8be:	2002      	movs	r0, #2
 800d8c0:	4770      	bx	lr
{
 800d8c2:	b430      	push	{r4, r5}
    hdma->State = HAL_DMA_STATE_BUSY;
 800d8c4:	2402      	movs	r4, #2
 800d8c6:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d8ca:	2400      	movs	r4, #0
 800d8cc:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800d8ce:	6805      	ldr	r5, [r0, #0]
 800d8d0:	682c      	ldr	r4, [r5, #0]
 800d8d2:	f024 0401 	bic.w	r4, r4, #1
 800d8d6:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d8d8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800d8da:	f004 0c1c 	and.w	ip, r4, #28
 800d8de:	2401      	movs	r4, #1
 800d8e0:	fa04 f40c 	lsl.w	r4, r4, ip
 800d8e4:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800d8e6:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800d8e8:	6804      	ldr	r4, [r0, #0]
 800d8ea:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d8ec:	6843      	ldr	r3, [r0, #4]
 800d8ee:	2b10      	cmp	r3, #16
 800d8f0:	d012      	beq.n	800d918 <HAL_DMA_Start_IT+0x80>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800d8f2:	6803      	ldr	r3, [r0, #0]
 800d8f4:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800d8f6:	6803      	ldr	r3, [r0, #0]
 800d8f8:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800d8fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d8fc:	b18b      	cbz	r3, 800d922 <HAL_DMA_Start_IT+0x8a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d8fe:	6802      	ldr	r2, [r0, #0]
 800d900:	6813      	ldr	r3, [r2, #0]
 800d902:	f043 030e 	orr.w	r3, r3, #14
 800d906:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800d908:	6802      	ldr	r2, [r0, #0]
 800d90a:	6813      	ldr	r3, [r2, #0]
 800d90c:	f043 0301 	orr.w	r3, r3, #1
 800d910:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d912:	2000      	movs	r0, #0
}
 800d914:	bc30      	pop	{r4, r5}
 800d916:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800d918:	6803      	ldr	r3, [r0, #0]
 800d91a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800d91c:	6803      	ldr	r3, [r0, #0]
 800d91e:	60d9      	str	r1, [r3, #12]
 800d920:	e7eb      	b.n	800d8fa <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d922:	6802      	ldr	r2, [r0, #0]
 800d924:	6813      	ldr	r3, [r2, #0]
 800d926:	f023 0304 	bic.w	r3, r3, #4
 800d92a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800d92c:	6802      	ldr	r2, [r0, #0]
 800d92e:	6813      	ldr	r3, [r2, #0]
 800d930:	f043 030a 	orr.w	r3, r3, #10
 800d934:	6013      	str	r3, [r2, #0]
 800d936:	e7e7      	b.n	800d908 <HAL_DMA_Start_IT+0x70>
  __HAL_LOCK(hdma);
 800d938:	2002      	movs	r0, #2
}
 800d93a:	4770      	bx	lr

0800d93c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d93c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800d940:	b2db      	uxtb	r3, r3
 800d942:	2b02      	cmp	r3, #2
 800d944:	d006      	beq.n	800d954 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d946:	2304      	movs	r3, #4
 800d948:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800d94a:	2300      	movs	r3, #0
 800d94c:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 800d950:	2001      	movs	r0, #1
 800d952:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d954:	6802      	ldr	r2, [r0, #0]
 800d956:	6813      	ldr	r3, [r2, #0]
 800d958:	f023 030e 	bic.w	r3, r3, #14
 800d95c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800d95e:	6802      	ldr	r2, [r0, #0]
 800d960:	6813      	ldr	r3, [r2, #0]
 800d962:	f023 0301 	bic.w	r3, r3, #1
 800d966:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d968:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800d96a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d96c:	f003 031c 	and.w	r3, r3, #28
 800d970:	2201      	movs	r2, #1
 800d972:	fa02 f303 	lsl.w	r3, r2, r3
 800d976:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800d978:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800d97c:	2300      	movs	r3, #0
 800d97e:	f880 3020 	strb.w	r3, [r0, #32]
    return status;
 800d982:	4618      	mov	r0, r3
}
 800d984:	4770      	bx	lr

0800d986 <HAL_DMA_Abort_IT>:
{
 800d986:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800d988:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	2b02      	cmp	r3, #2
 800d990:	d003      	beq.n	800d99a <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d992:	2304      	movs	r3, #4
 800d994:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800d996:	2001      	movs	r0, #1
}
 800d998:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d99a:	6802      	ldr	r2, [r0, #0]
 800d99c:	6813      	ldr	r3, [r2, #0]
 800d99e:	f023 030e 	bic.w	r3, r3, #14
 800d9a2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800d9a4:	6802      	ldr	r2, [r0, #0]
 800d9a6:	6813      	ldr	r3, [r2, #0]
 800d9a8:	f023 0301 	bic.w	r3, r3, #1
 800d9ac:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d9ae:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800d9b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d9b2:	f003 031c 	and.w	r3, r3, #28
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d9bc:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800d9be:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800d9c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d9ca:	b113      	cbz	r3, 800d9d2 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 800d9cc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800d9ce:	2000      	movs	r0, #0
 800d9d0:	e7e2      	b.n	800d998 <HAL_DMA_Abort_IT+0x12>
 800d9d2:	2000      	movs	r0, #0
 800d9d4:	e7e0      	b.n	800d998 <HAL_DMA_Abort_IT+0x12>

0800d9d6 <HAL_DMA_IRQHandler>:
{
 800d9d6:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800d9d8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800d9da:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800d9dc:	6804      	ldr	r4, [r0, #0]
 800d9de:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800d9e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d9e2:	f003 031c 	and.w	r3, r3, #28
 800d9e6:	2204      	movs	r2, #4
 800d9e8:	409a      	lsls	r2, r3
 800d9ea:	420a      	tst	r2, r1
 800d9ec:	d015      	beq.n	800da1a <HAL_DMA_IRQHandler+0x44>
 800d9ee:	f015 0f04 	tst.w	r5, #4
 800d9f2:	d012      	beq.n	800da1a <HAL_DMA_IRQHandler+0x44>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800d9f4:	6823      	ldr	r3, [r4, #0]
 800d9f6:	f013 0f20 	tst.w	r3, #32
 800d9fa:	d103      	bne.n	800da04 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d9fc:	6823      	ldr	r3, [r4, #0]
 800d9fe:	f023 0304 	bic.w	r3, r3, #4
 800da02:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800da04:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800da06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800da08:	f003 021c 	and.w	r2, r3, #28
 800da0c:	2304      	movs	r3, #4
 800da0e:	4093      	lsls	r3, r2
 800da10:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800da12:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800da14:	b103      	cbz	r3, 800da18 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 800da16:	4798      	blx	r3
}
 800da18:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800da1a:	2202      	movs	r2, #2
 800da1c:	409a      	lsls	r2, r3
 800da1e:	420a      	tst	r2, r1
 800da20:	d01c      	beq.n	800da5c <HAL_DMA_IRQHandler+0x86>
 800da22:	f015 0f02 	tst.w	r5, #2
 800da26:	d019      	beq.n	800da5c <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800da28:	6823      	ldr	r3, [r4, #0]
 800da2a:	f013 0f20 	tst.w	r3, #32
 800da2e:	d106      	bne.n	800da3e <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800da30:	6823      	ldr	r3, [r4, #0]
 800da32:	f023 030a 	bic.w	r3, r3, #10
 800da36:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800da38:	2301      	movs	r3, #1
 800da3a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800da3e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800da40:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800da42:	f003 021c 	and.w	r2, r3, #28
 800da46:	2302      	movs	r3, #2
 800da48:	4093      	lsls	r3, r2
 800da4a:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 800da4c:	2300      	movs	r3, #0
 800da4e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800da52:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800da54:	2b00      	cmp	r3, #0
 800da56:	d0df      	beq.n	800da18 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 800da58:	4798      	blx	r3
 800da5a:	e7dd      	b.n	800da18 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800da5c:	2208      	movs	r2, #8
 800da5e:	fa02 f303 	lsl.w	r3, r2, r3
 800da62:	420b      	tst	r3, r1
 800da64:	d0d8      	beq.n	800da18 <HAL_DMA_IRQHandler+0x42>
 800da66:	f015 0f08 	tst.w	r5, #8
 800da6a:	d0d5      	beq.n	800da18 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800da6c:	6823      	ldr	r3, [r4, #0]
 800da6e:	f023 030e 	bic.w	r3, r3, #14
 800da72:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800da74:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800da76:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800da78:	f003 031c 	and.w	r3, r3, #28
 800da7c:	2201      	movs	r2, #1
 800da7e:	fa02 f303 	lsl.w	r3, r2, r3
 800da82:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800da84:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800da86:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800da8a:	2300      	movs	r3, #0
 800da8c:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800da90:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800da92:	2b00      	cmp	r3, #0
 800da94:	d0c0      	beq.n	800da18 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 800da96:	4798      	blx	r3
  return;
 800da98:	e7be      	b.n	800da18 <HAL_DMA_IRQHandler+0x42>
	...

0800da9c <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800da9c:	4b25      	ldr	r3, [pc, #148]	; (800db34 <FLASH_SetErrorCode+0x98>)
 800da9e:	699b      	ldr	r3, [r3, #24]
 800daa0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800daa4:	d006      	beq.n	800dab4 <FLASH_SetErrorCode+0x18>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800daa6:	4a24      	ldr	r2, [pc, #144]	; (800db38 <FLASH_SetErrorCode+0x9c>)
 800daa8:	6953      	ldr	r3, [r2, #20]
 800daaa:	f043 0302 	orr.w	r3, r3, #2
 800daae:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 800dab0:	f44f 7380 	mov.w	r3, #256	; 0x100
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800dab4:	4a1f      	ldr	r2, [pc, #124]	; (800db34 <FLASH_SetErrorCode+0x98>)
 800dab6:	6992      	ldr	r2, [r2, #24]
 800dab8:	f412 7f00 	tst.w	r2, #512	; 0x200
 800dabc:	d006      	beq.n	800dacc <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800dabe:	491e      	ldr	r1, [pc, #120]	; (800db38 <FLASH_SetErrorCode+0x9c>)
 800dac0:	694a      	ldr	r2, [r1, #20]
 800dac2:	f042 0201 	orr.w	r2, r2, #1
 800dac6:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_PGAERR;
 800dac8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800dacc:	4a19      	ldr	r2, [pc, #100]	; (800db34 <FLASH_SetErrorCode+0x98>)
 800dace:	6992      	ldr	r2, [r2, #24]
 800dad0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800dad4:	d006      	beq.n	800dae4 <FLASH_SetErrorCode+0x48>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800dad6:	4918      	ldr	r1, [pc, #96]	; (800db38 <FLASH_SetErrorCode+0x9c>)
 800dad8:	694a      	ldr	r2, [r1, #20]
 800dada:	f042 0204 	orr.w	r2, r2, #4
 800dade:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800dae0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  }

#if defined(FLASH_SR_RDERR)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800dae4:	4a13      	ldr	r2, [pc, #76]	; (800db34 <FLASH_SetErrorCode+0x98>)
 800dae6:	6992      	ldr	r2, [r2, #24]
 800dae8:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800daec:	d006      	beq.n	800dafc <FLASH_SetErrorCode+0x60>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800daee:	4912      	ldr	r1, [pc, #72]	; (800db38 <FLASH_SetErrorCode+0x9c>)
 800daf0:	694a      	ldr	r2, [r1, #20]
 800daf2:	f042 0210 	orr.w	r2, r2, #16
 800daf6:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_RDERR;
 800daf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  }
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR))
 800dafc:	4a0d      	ldr	r2, [pc, #52]	; (800db34 <FLASH_SetErrorCode+0x98>)
 800dafe:	6992      	ldr	r2, [r2, #24]
 800db00:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800db04:	d006      	beq.n	800db14 <FLASH_SetErrorCode+0x78>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
 800db06:	490c      	ldr	r1, [pc, #48]	; (800db38 <FLASH_SetErrorCode+0x9c>)
 800db08:	694a      	ldr	r2, [r1, #20]
 800db0a:	f042 0220 	orr.w	r2, r2, #32
 800db0e:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_OPTVERRUSR;
 800db10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800db14:	4a07      	ldr	r2, [pc, #28]	; (800db34 <FLASH_SetErrorCode+0x98>)
 800db16:	6992      	ldr	r2, [r2, #24]
 800db18:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800db1c:	d006      	beq.n	800db2c <FLASH_SetErrorCode+0x90>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800db1e:	4906      	ldr	r1, [pc, #24]	; (800db38 <FLASH_SetErrorCode+0x9c>)
 800db20:	694a      	ldr	r2, [r1, #20]
 800db22:	f042 0208 	orr.w	r2, r2, #8
 800db26:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_SIZERR;
 800db28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800db2c:	4a01      	ldr	r2, [pc, #4]	; (800db34 <FLASH_SetErrorCode+0x98>)
 800db2e:	6193      	str	r3, [r2, #24]
}
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	40023c00 	.word	0x40023c00
 800db38:	20001290 	.word	0x20001290

0800db3c <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 800db3c:	4b12      	ldr	r3, [pc, #72]	; (800db88 <HAL_FLASH_Unlock+0x4c>)
 800db3e:	685b      	ldr	r3, [r3, #4]
 800db40:	f013 0f02 	tst.w	r3, #2
 800db44:	d01b      	beq.n	800db7e <HAL_FLASH_Unlock+0x42>
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 800db46:	4b10      	ldr	r3, [pc, #64]	; (800db88 <HAL_FLASH_Unlock+0x4c>)
 800db48:	685b      	ldr	r3, [r3, #4]
 800db4a:	f013 0f01 	tst.w	r3, #1
 800db4e:	d008      	beq.n	800db62 <HAL_FLASH_Unlock+0x26>
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 800db50:	4b0d      	ldr	r3, [pc, #52]	; (800db88 <HAL_FLASH_Unlock+0x4c>)
 800db52:	4a0e      	ldr	r2, [pc, #56]	; (800db8c <HAL_FLASH_Unlock+0x50>)
 800db54:	60da      	str	r2, [r3, #12]
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 800db56:	4a0e      	ldr	r2, [pc, #56]	; (800db90 <HAL_FLASH_Unlock+0x54>)
 800db58:	60da      	str	r2, [r3, #12]
      if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	f013 0f01 	tst.w	r3, #1
 800db60:	d10f      	bne.n	800db82 <HAL_FLASH_Unlock+0x46>
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 800db62:	4b09      	ldr	r3, [pc, #36]	; (800db88 <HAL_FLASH_Unlock+0x4c>)
 800db64:	4a0b      	ldr	r2, [pc, #44]	; (800db94 <HAL_FLASH_Unlock+0x58>)
 800db66:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 800db68:	f1a2 42f3 	sub.w	r2, r2, #2038431744	; 0x79800000
 800db6c:	f5a2 2219 	sub.w	r2, r2, #626688	; 0x99000
 800db70:	f6a2 12a9 	subw	r2, r2, #2473	; 0x9a9
 800db74:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 800db76:	6858      	ldr	r0, [r3, #4]
        return HAL_ERROR;
 800db78:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800db7c:	4770      	bx	lr
  return HAL_OK; 
 800db7e:	2000      	movs	r0, #0
 800db80:	4770      	bx	lr
        return HAL_ERROR;
 800db82:	2001      	movs	r0, #1
}
 800db84:	4770      	bx	lr
 800db86:	bf00      	nop
 800db88:	40023c00 	.word	0x40023c00
 800db8c:	89abcdef 	.word	0x89abcdef
 800db90:	02030405 	.word	0x02030405
 800db94:	8c9daebf 	.word	0x8c9daebf

0800db98 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 800db98:	4a03      	ldr	r2, [pc, #12]	; (800dba8 <HAL_FLASH_Lock+0x10>)
 800db9a:	6853      	ldr	r3, [r2, #4]
 800db9c:	f043 0302 	orr.w	r3, r3, #2
 800dba0:	6053      	str	r3, [r2, #4]
}
 800dba2:	2000      	movs	r0, #0
 800dba4:	4770      	bx	lr
 800dba6:	bf00      	nop
 800dba8:	40023c00 	.word	0x40023c00

0800dbac <FLASH_WaitForLastOperation>:
{
 800dbac:	b570      	push	{r4, r5, r6, lr}
 800dbae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800dbb0:	f7ff fa68 	bl	800d084 <HAL_GetTick>
 800dbb4:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800dbb6:	4d1f      	ldr	r5, [pc, #124]	; (800dc34 <FLASH_WaitForLastOperation+0x88>)
 800dbb8:	69ab      	ldr	r3, [r5, #24]
 800dbba:	f013 0f01 	tst.w	r3, #1
 800dbbe:	d00b      	beq.n	800dbd8 <FLASH_WaitForLastOperation+0x2c>
    if (Timeout != HAL_MAX_DELAY)
 800dbc0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dbc4:	d0f8      	beq.n	800dbb8 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800dbc6:	2c00      	cmp	r4, #0
 800dbc8:	d032      	beq.n	800dc30 <FLASH_WaitForLastOperation+0x84>
 800dbca:	f7ff fa5b 	bl	800d084 <HAL_GetTick>
 800dbce:	1b80      	subs	r0, r0, r6
 800dbd0:	42a0      	cmp	r0, r4
 800dbd2:	d9f1      	bls.n	800dbb8 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 800dbd4:	2003      	movs	r0, #3
 800dbd6:	e02a      	b.n	800dc2e <FLASH_WaitForLastOperation+0x82>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800dbd8:	4b16      	ldr	r3, [pc, #88]	; (800dc34 <FLASH_WaitForLastOperation+0x88>)
 800dbda:	699b      	ldr	r3, [r3, #24]
 800dbdc:	f013 0f02 	tst.w	r3, #2
 800dbe0:	d002      	beq.n	800dbe8 <FLASH_WaitForLastOperation+0x3c>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800dbe2:	4b14      	ldr	r3, [pc, #80]	; (800dc34 <FLASH_WaitForLastOperation+0x88>)
 800dbe4:	2202      	movs	r2, #2
 800dbe6:	619a      	str	r2, [r3, #24]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800dbe8:	4b12      	ldr	r3, [pc, #72]	; (800dc34 <FLASH_WaitForLastOperation+0x88>)
 800dbea:	699b      	ldr	r3, [r3, #24]
 800dbec:	f413 7f80 	tst.w	r3, #256	; 0x100
 800dbf0:	d11a      	bne.n	800dc28 <FLASH_WaitForLastOperation+0x7c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800dbf2:	4b10      	ldr	r3, [pc, #64]	; (800dc34 <FLASH_WaitForLastOperation+0x88>)
 800dbf4:	699b      	ldr	r3, [r3, #24]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800dbf6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800dbfa:	d115      	bne.n	800dc28 <FLASH_WaitForLastOperation+0x7c>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
 800dbfc:	4b0d      	ldr	r3, [pc, #52]	; (800dc34 <FLASH_WaitForLastOperation+0x88>)
 800dbfe:	699b      	ldr	r3, [r3, #24]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800dc00:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800dc04:	d110      	bne.n	800dc28 <FLASH_WaitForLastOperation+0x7c>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
 800dc06:	4b0b      	ldr	r3, [pc, #44]	; (800dc34 <FLASH_WaitForLastOperation+0x88>)
 800dc08:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
 800dc0a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800dc0e:	d10b      	bne.n	800dc28 <FLASH_WaitForLastOperation+0x7c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 800dc10:	4b08      	ldr	r3, [pc, #32]	; (800dc34 <FLASH_WaitForLastOperation+0x88>)
 800dc12:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
 800dc14:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800dc18:	d106      	bne.n	800dc28 <FLASH_WaitForLastOperation+0x7c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800dc1a:	4b06      	ldr	r3, [pc, #24]	; (800dc34 <FLASH_WaitForLastOperation+0x88>)
 800dc1c:	699b      	ldr	r3, [r3, #24]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 800dc1e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800dc22:	d101      	bne.n	800dc28 <FLASH_WaitForLastOperation+0x7c>
  return HAL_OK;
 800dc24:	2000      	movs	r0, #0
 800dc26:	e002      	b.n	800dc2e <FLASH_WaitForLastOperation+0x82>
    FLASH_SetErrorCode();
 800dc28:	f7ff ff38 	bl	800da9c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800dc2c:	2001      	movs	r0, #1
}
 800dc2e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 800dc30:	2003      	movs	r0, #3
 800dc32:	e7fc      	b.n	800dc2e <FLASH_WaitForLastOperation+0x82>
 800dc34:	40023c00 	.word	0x40023c00

0800dc38 <HAL_FLASH_Program>:
{
 800dc38:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 800dc3a:	4b0e      	ldr	r3, [pc, #56]	; (800dc74 <HAL_FLASH_Program+0x3c>)
 800dc3c:	7c1b      	ldrb	r3, [r3, #16]
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d016      	beq.n	800dc70 <HAL_FLASH_Program+0x38>
 800dc42:	460d      	mov	r5, r1
 800dc44:	4614      	mov	r4, r2
 800dc46:	4b0b      	ldr	r3, [pc, #44]	; (800dc74 <HAL_FLASH_Program+0x3c>)
 800dc48:	2201      	movs	r2, #1
 800dc4a:	741a      	strb	r2, [r3, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800dc4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800dc50:	f7ff ffac 	bl	800dbac <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800dc54:	b118      	cbz	r0, 800dc5e <HAL_FLASH_Program+0x26>
  __HAL_UNLOCK(&pFlash);
 800dc56:	4b07      	ldr	r3, [pc, #28]	; (800dc74 <HAL_FLASH_Program+0x3c>)
 800dc58:	2200      	movs	r2, #0
 800dc5a:	741a      	strb	r2, [r3, #16]
}
 800dc5c:	bd38      	pop	{r3, r4, r5, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800dc5e:	4b05      	ldr	r3, [pc, #20]	; (800dc74 <HAL_FLASH_Program+0x3c>)
 800dc60:	2200      	movs	r2, #0
 800dc62:	615a      	str	r2, [r3, #20]
    *(__IO uint32_t *)Address = Data;
 800dc64:	602c      	str	r4, [r5, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800dc66:	f24c 3050 	movw	r0, #50000	; 0xc350
 800dc6a:	f7ff ff9f 	bl	800dbac <FLASH_WaitForLastOperation>
 800dc6e:	e7f2      	b.n	800dc56 <HAL_FLASH_Program+0x1e>
  __HAL_LOCK(&pFlash);
 800dc70:	2002      	movs	r0, #2
 800dc72:	e7f3      	b.n	800dc5c <HAL_FLASH_Program+0x24>
 800dc74:	20001290 	.word	0x20001290

0800dc78 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800dc78:	4b06      	ldr	r3, [pc, #24]	; (800dc94 <HAL_FLASHEx_DATAEEPROM_Unlock+0x1c>)
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	f013 0f01 	tst.w	r3, #1
 800dc80:	d006      	beq.n	800dc90 <HAL_FLASHEx_DATAEEPROM_Unlock+0x18>
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800dc82:	4b04      	ldr	r3, [pc, #16]	; (800dc94 <HAL_FLASHEx_DATAEEPROM_Unlock+0x1c>)
 800dc84:	4a04      	ldr	r2, [pc, #16]	; (800dc98 <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>)
 800dc86:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800dc88:	4a04      	ldr	r2, [pc, #16]	; (800dc9c <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
 800dc8a:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 800dc8c:	2000      	movs	r0, #0
 800dc8e:	4770      	bx	lr
    return HAL_ERROR;
 800dc90:	2001      	movs	r0, #1
}
 800dc92:	4770      	bx	lr
 800dc94:	40023c00 	.word	0x40023c00
 800dc98:	89abcdef 	.word	0x89abcdef
 800dc9c:	02030405 	.word	0x02030405

0800dca0 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800dca0:	4a03      	ldr	r2, [pc, #12]	; (800dcb0 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
 800dca2:	6853      	ldr	r3, [r2, #4]
 800dca4:	f043 0301 	orr.w	r3, r3, #1
 800dca8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
}
 800dcaa:	2000      	movs	r0, #0
 800dcac:	4770      	bx	lr
 800dcae:	bf00      	nop
 800dcb0:	40023c00 	.word	0x40023c00

0800dcb4 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t TypeErase, uint32_t Address)
{
 800dcb4:	b538      	push	{r3, r4, r5, lr}
 800dcb6:	4604      	mov	r4, r0
 800dcb8:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_TYPEERASEDATA(TypeErase));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800dcba:	f24c 3050 	movw	r0, #50000	; 0xc350
 800dcbe:	f7ff ff75 	bl	800dbac <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800dcc2:	b990      	cbnz	r0, 800dcea <HAL_FLASHEx_DATAEEPROM_Erase+0x36>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800dcc4:	4b09      	ldr	r3, [pc, #36]	; (800dcec <HAL_FLASHEx_DATAEEPROM_Erase+0x38>)
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	615a      	str	r2, [r3, #20]

    if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 800dcca:	2c02      	cmp	r4, #2
 800dccc:	d004      	beq.n	800dcd8 <HAL_FLASHEx_DATAEEPROM_Erase+0x24>
    {
      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
    }

    if(TypeErase == FLASH_TYPEERASEDATA_HALFWORD)
 800dcce:	2c01      	cmp	r4, #1
 800dcd0:	d104      	bne.n	800dcdc <HAL_FLASHEx_DATAEEPROM_Erase+0x28>
    {
      /* Write 0000h to valid address in the data memory */
      *(__IO uint16_t *) Address = (uint16_t)0x0000;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	802b      	strh	r3, [r5, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 800dcd6:	e004      	b.n	800dce2 <HAL_FLASHEx_DATAEEPROM_Erase+0x2e>
      *(__IO uint32_t *) Address = 0x00000000U;
 800dcd8:	602a      	str	r2, [r5, #0]
    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 800dcda:	e002      	b.n	800dce2 <HAL_FLASHEx_DATAEEPROM_Erase+0x2e>
 800dcdc:	b90c      	cbnz	r4, 800dce2 <HAL_FLASHEx_DATAEEPROM_Erase+0x2e>
    {
      /* Write 00h to valid address in the data memory */
      *(__IO uint8_t *) Address = (uint8_t)0x00;
 800dcde:	2300      	movs	r3, #0
 800dce0:	702b      	strb	r3, [r5, #0]
    }

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800dce2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800dce6:	f7ff ff61 	bl	800dbac <FLASH_WaitForLastOperation>
  }

  /* Return the erase status */
  return status;
}
 800dcea:	bd38      	pop	{r3, r4, r5, pc}
 800dcec:	20001290 	.word	0x20001290

0800dcf0 <HAL_FLASHEx_DATAEEPROM_Program>:
HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800dcf0:	4b47      	ldr	r3, [pc, #284]	; (800de10 <HAL_FLASHEx_DATAEEPROM_Program+0x120>)
 800dcf2:	7c1b      	ldrb	r3, [r3, #16]
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	f000 8088 	beq.w	800de0a <HAL_FLASHEx_DATAEEPROM_Program+0x11a>
{
 800dcfa:	b570      	push	{r4, r5, r6, lr}
 800dcfc:	4604      	mov	r4, r0
 800dcfe:	460e      	mov	r6, r1
 800dd00:	4615      	mov	r5, r2
  __HAL_LOCK(&pFlash);
 800dd02:	4b43      	ldr	r3, [pc, #268]	; (800de10 <HAL_FLASHEx_DATAEEPROM_Program+0x120>)
 800dd04:	2201      	movs	r2, #1
 800dd06:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800dd08:	f24c 3050 	movw	r0, #50000	; 0xc350
 800dd0c:	f7ff ff4e 	bl	800dbac <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800dd10:	4603      	mov	r3, r0
 800dd12:	b970      	cbnz	r0, 800dd32 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800dd14:	4b3e      	ldr	r3, [pc, #248]	; (800de10 <HAL_FLASHEx_DATAEEPROM_Program+0x120>)
 800dd16:	2200      	movs	r2, #0
 800dd18:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800dd1a:	2c02      	cmp	r4, #2
 800dd1c:	d00e      	beq.n	800dd3c <HAL_FLASHEx_DATAEEPROM_Program+0x4c>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800dd1e:	2c01      	cmp	r4, #1
 800dd20:	d01a      	beq.n	800dd58 <HAL_FLASHEx_DATAEEPROM_Program+0x68>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800dd22:	b344      	cbz	r4, 800dd76 <HAL_FLASHEx_DATAEEPROM_Program+0x86>
    {
      /* Program byte (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 800dd24:	2c04      	cmp	r4, #4
 800dd26:	d035      	beq.n	800dd94 <HAL_FLASHEx_DATAEEPROM_Program+0xa4>
    {
      /*Program word (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 800dd28:	2c08      	cmp	r4, #8
 800dd2a:	d047      	beq.n	800ddbc <HAL_FLASHEx_DATAEEPROM_Program+0xcc>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 800dd2c:	2c10      	cmp	r4, #16
 800dd2e:	d059      	beq.n	800dde4 <HAL_FLASHEx_DATAEEPROM_Program+0xf4>
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
    }
    else
    {
      status = HAL_ERROR;
 800dd30:	2301      	movs	r3, #1
    }

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800dd32:	4a37      	ldr	r2, [pc, #220]	; (800de10 <HAL_FLASHEx_DATAEEPROM_Program+0x120>)
 800dd34:	2100      	movs	r1, #0
 800dd36:	7411      	strb	r1, [r2, #16]

  return status;
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	bd70      	pop	{r4, r5, r6, pc}

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800dd3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800dd40:	f7ff ff34 	bl	800dbac <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800dd44:	4603      	mov	r3, r0
 800dd46:	2800      	cmp	r0, #0
 800dd48:	d1f3      	bne.n	800dd32 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  {
    *(__IO uint32_t *)Address = Data;
 800dd4a:	6035      	str	r5, [r6, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800dd4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800dd50:	f7ff ff2c 	bl	800dbac <FLASH_WaitForLastOperation>
 800dd54:	4603      	mov	r3, r0
 800dd56:	e7ec      	b.n	800dd32 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800dd58:	f24c 3050 	movw	r0, #50000	; 0xc350
 800dd5c:	f7ff ff26 	bl	800dbac <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800dd60:	4603      	mov	r3, r0
 800dd62:	2800      	cmp	r0, #0
 800dd64:	d1e5      	bne.n	800dd32 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 800dd66:	b2aa      	uxth	r2, r5
    *(__IO uint16_t *)Address = Data;
 800dd68:	8032      	strh	r2, [r6, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800dd6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800dd6e:	f7ff ff1d 	bl	800dbac <FLASH_WaitForLastOperation>
 800dd72:	4603      	mov	r3, r0
 800dd74:	e7dd      	b.n	800dd32 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800dd76:	f24c 3050 	movw	r0, #50000	; 0xc350
 800dd7a:	f7ff ff17 	bl	800dbac <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2800      	cmp	r0, #0
 800dd82:	d1d6      	bne.n	800dd32 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 800dd84:	b2ea      	uxtb	r2, r5
    *(__IO uint8_t *)Address = Data;
 800dd86:	7032      	strb	r2, [r6, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800dd88:	f24c 3050 	movw	r0, #50000	; 0xc350
 800dd8c:	f7ff ff0e 	bl	800dbac <FLASH_WaitForLastOperation>
 800dd90:	4603      	mov	r3, r0
 800dd92:	e7ce      	b.n	800dd32 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800dd94:	f24c 3050 	movw	r0, #50000	; 0xc350
 800dd98:	f7ff ff08 	bl	800dbac <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	2800      	cmp	r0, #0
 800dda0:	d1c7      	bne.n	800dd32 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 800dda2:	4a1c      	ldr	r2, [pc, #112]	; (800de14 <HAL_FLASHEx_DATAEEPROM_Program+0x124>)
 800dda4:	6853      	ldr	r3, [r2, #4]
 800dda6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ddaa:	6053      	str	r3, [r2, #4]
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 800ddac:	b2ea      	uxtb	r2, r5
    *(__IO uint8_t *)Address = Data;
 800ddae:	7032      	strb	r2, [r6, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ddb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ddb4:	f7ff fefa 	bl	800dbac <FLASH_WaitForLastOperation>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	e7ba      	b.n	800dd32 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ddbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ddc0:	f7ff fef4 	bl	800dbac <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	d1b3      	bne.n	800dd32 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 800ddca:	4a12      	ldr	r2, [pc, #72]	; (800de14 <HAL_FLASHEx_DATAEEPROM_Program+0x124>)
 800ddcc:	6853      	ldr	r3, [r2, #4]
 800ddce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ddd2:	6053      	str	r3, [r2, #4]
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 800ddd4:	b2aa      	uxth	r2, r5
    *(__IO uint16_t *)Address = Data;
 800ddd6:	8032      	strh	r2, [r6, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ddd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800dddc:	f7ff fee6 	bl	800dbac <FLASH_WaitForLastOperation>
 800dde0:	4603      	mov	r3, r0
 800dde2:	e7a6      	b.n	800dd32 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800dde4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800dde8:	f7ff fee0 	bl	800dbac <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800ddec:	4603      	mov	r3, r0
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	d19f      	bne.n	800dd32 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 800ddf2:	4a08      	ldr	r2, [pc, #32]	; (800de14 <HAL_FLASHEx_DATAEEPROM_Program+0x124>)
 800ddf4:	6853      	ldr	r3, [r2, #4]
 800ddf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ddfa:	6053      	str	r3, [r2, #4]
    *(__IO uint32_t *)Address = Data;
 800ddfc:	6035      	str	r5, [r6, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ddfe:	f24c 3050 	movw	r0, #50000	; 0xc350
 800de02:	f7ff fed3 	bl	800dbac <FLASH_WaitForLastOperation>
 800de06:	4603      	mov	r3, r0
 800de08:	e793      	b.n	800dd32 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  __HAL_LOCK(&pFlash);
 800de0a:	2302      	movs	r3, #2
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	4770      	bx	lr
 800de10:	20001290 	.word	0x20001290
 800de14:	40023c00 	.word	0x40023c00

0800de18 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800de18:	2100      	movs	r1, #0
 800de1a:	4b07      	ldr	r3, [pc, #28]	; (800de38 <FLASH_PageErase+0x20>)
 800de1c:	6159      	str	r1, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 800de1e:	4b07      	ldr	r3, [pc, #28]	; (800de3c <FLASH_PageErase+0x24>)
 800de20:	685a      	ldr	r2, [r3, #4]
 800de22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de26:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 800de28:	685a      	ldr	r2, [r3, #4]
 800de2a:	f042 0208 	orr.w	r2, r2, #8
 800de2e:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 800de30:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800de34:	6001      	str	r1, [r0, #0]
}
 800de36:	4770      	bx	lr
 800de38:	20001290 	.word	0x20001290
 800de3c:	40023c00 	.word	0x40023c00

0800de40 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 800de40:	4b20      	ldr	r3, [pc, #128]	; (800dec4 <HAL_FLASHEx_Erase+0x84>)
 800de42:	7c1b      	ldrb	r3, [r3, #16]
 800de44:	2b01      	cmp	r3, #1
 800de46:	d03a      	beq.n	800debe <HAL_FLASHEx_Erase+0x7e>
{
 800de48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de4c:	4606      	mov	r6, r0
 800de4e:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800de50:	4b1c      	ldr	r3, [pc, #112]	; (800dec4 <HAL_FLASHEx_Erase+0x84>)
 800de52:	2201      	movs	r2, #1
 800de54:	741a      	strb	r2, [r3, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800de56:	f24c 3050 	movw	r0, #50000	; 0xc350
 800de5a:	f7ff fea7 	bl	800dbac <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800de5e:	4601      	mov	r1, r0
 800de60:	bb38      	cbnz	r0, 800deb2 <HAL_FLASHEx_Erase+0x72>
    *PageError = 0xFFFFFFFFU;
 800de62:	f04f 33ff 	mov.w	r3, #4294967295
 800de66:	f8c8 3000 	str.w	r3, [r8]
    for(address = pEraseInit->PageAddress;
 800de6a:	6874      	ldr	r4, [r6, #4]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800de6c:	68b3      	ldr	r3, [r6, #8]
 800de6e:	eb04 2303 	add.w	r3, r4, r3, lsl #8
    for(address = pEraseInit->PageAddress;
 800de72:	429c      	cmp	r4, r3
 800de74:	d21d      	bcs.n	800deb2 <HAL_FLASHEx_Erase+0x72>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800de76:	f24c 3750 	movw	r7, #50000	; 0xc350
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 800de7a:	4d13      	ldr	r5, [pc, #76]	; (800dec8 <HAL_FLASHEx_Erase+0x88>)
      FLASH_PageErase(address);
 800de7c:	4620      	mov	r0, r4
 800de7e:	f7ff ffcb 	bl	800de18 <FLASH_PageErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800de82:	4638      	mov	r0, r7
 800de84:	f7ff fe92 	bl	800dbac <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 800de88:	686b      	ldr	r3, [r5, #4]
 800de8a:	f023 0308 	bic.w	r3, r3, #8
 800de8e:	606b      	str	r3, [r5, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 800de90:	686b      	ldr	r3, [r5, #4]
 800de92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800de96:	606b      	str	r3, [r5, #4]
      if (status != HAL_OK)
 800de98:	4601      	mov	r1, r0
 800de9a:	b940      	cbnz	r0, 800deae <HAL_FLASHEx_Erase+0x6e>
        address += FLASH_PAGE_SIZE)
 800de9c:	f504 7480 	add.w	r4, r4, #256	; 0x100
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800dea0:	68b2      	ldr	r2, [r6, #8]
 800dea2:	6873      	ldr	r3, [r6, #4]
 800dea4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    for(address = pEraseInit->PageAddress;
 800dea8:	42a3      	cmp	r3, r4
 800deaa:	d8e7      	bhi.n	800de7c <HAL_FLASHEx_Erase+0x3c>
 800deac:	e001      	b.n	800deb2 <HAL_FLASHEx_Erase+0x72>
        *PageError = address;
 800deae:	f8c8 4000 	str.w	r4, [r8]
  __HAL_UNLOCK(&pFlash);
 800deb2:	4b04      	ldr	r3, [pc, #16]	; (800dec4 <HAL_FLASHEx_Erase+0x84>)
 800deb4:	2200      	movs	r2, #0
 800deb6:	741a      	strb	r2, [r3, #16]
}
 800deb8:	4608      	mov	r0, r1
 800deba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(&pFlash);
 800debe:	2102      	movs	r1, #2
}
 800dec0:	4608      	mov	r0, r1
 800dec2:	4770      	bx	lr
 800dec4:	20001290 	.word	0x20001290
 800dec8:	40023c00 	.word	0x40023c00

0800decc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800decc:	680b      	ldr	r3, [r1, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	f000 80d6 	beq.w	800e080 <HAL_GPIO_Init+0x1b4>
{
 800ded4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded8:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0)
 800deda:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00;
 800dede:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800dee0:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800dee2:	f04f 0e03 	mov.w	lr, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dee6:	4e67      	ldr	r6, [pc, #412]	; (800e084 <HAL_GPIO_Init+0x1b8>)

        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800dee8:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800e088 <HAL_GPIO_Init+0x1bc>
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800deec:	4c67      	ldr	r4, [pc, #412]	; (800e08c <HAL_GPIO_Init+0x1c0>)
 800deee:	e04c      	b.n	800df8a <HAL_GPIO_Init+0xbe>
        temp = GPIOx->OSPEEDR;
 800def0:	6883      	ldr	r3, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800def2:	fa0e fa0c 	lsl.w	sl, lr, ip
 800def6:	ea23 0a0a 	bic.w	sl, r3, sl
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800defa:	68cb      	ldr	r3, [r1, #12]
 800defc:	fa03 f30c 	lsl.w	r3, r3, ip
 800df00:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 800df04:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 800df06:	6843      	ldr	r3, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800df08:	ea23 0a07 	bic.w	sl, r3, r7
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800df0c:	684b      	ldr	r3, [r1, #4]
 800df0e:	f3c3 1700 	ubfx	r7, r3, #4, #1
 800df12:	4097      	lsls	r7, r2
 800df14:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800df18:	6047      	str	r7, [r0, #4]
 800df1a:	e041      	b.n	800dfa0 <HAL_GPIO_Init+0xd4>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800df1c:	2700      	movs	r7, #0
 800df1e:	fa07 f70b 	lsl.w	r7, r7, fp
 800df22:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 800df26:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 800df28:	6823      	ldr	r3, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800df2a:	ea6f 0709 	mvn.w	r7, r9
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800df2e:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800df32:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800df36:	bf0c      	ite	eq
 800df38:	403b      	andeq	r3, r7
        {
          SET_BIT(temp, iocurrent);
 800df3a:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->IMR = temp;
 800df3e:	6023      	str	r3, [r4, #0]

        temp = EXTI->EMR;
 800df40:	6863      	ldr	r3, [r4, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800df42:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800df46:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800df4a:	bf0c      	ite	eq
 800df4c:	403b      	andeq	r3, r7
        {
          SET_BIT(temp, iocurrent);
 800df4e:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->EMR = temp;
 800df52:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800df54:	68a3      	ldr	r3, [r4, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800df56:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800df5a:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800df5e:	bf0c      	ite	eq
 800df60:	403b      	andeq	r3, r7
        {
          SET_BIT(temp, iocurrent);
 800df62:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR = temp;
 800df66:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR;
 800df68:	68e3      	ldr	r3, [r4, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800df6a:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800df6e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800df72:	bf0c      	ite	eq
 800df74:	401f      	andeq	r7, r3
        {
          SET_BIT(temp, iocurrent);
 800df76:	ea49 0703 	orrne.w	r7, r9, r3
        }
        EXTI->FTSR = temp;
 800df7a:	60e7      	str	r7, [r4, #12]
      }
    }

    position++;
 800df7c:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 800df7e:	680b      	ldr	r3, [r1, #0]
 800df80:	f10c 0c02 	add.w	ip, ip, #2
 800df84:	fa33 f702 	lsrs.w	r7, r3, r2
 800df88:	d077      	beq.n	800e07a <HAL_GPIO_Init+0x1ae>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800df8a:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent)
 800df8e:	ea17 0903 	ands.w	r9, r7, r3
 800df92:	d0f3      	beq.n	800df7c <HAL_GPIO_Init+0xb0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800df94:	684b      	ldr	r3, [r1, #4]
 800df96:	f003 0303 	and.w	r3, r3, #3
 800df9a:	3b01      	subs	r3, #1
 800df9c:	2b01      	cmp	r3, #1
 800df9e:	d9a7      	bls.n	800def0 <HAL_GPIO_Init+0x24>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800dfa0:	684b      	ldr	r3, [r1, #4]
 800dfa2:	f003 0303 	and.w	r3, r3, #3
 800dfa6:	2b03      	cmp	r3, #3
 800dfa8:	d022      	beq.n	800dff0 <HAL_GPIO_Init+0x124>
        temp = GPIOx->PUPDR;
 800dfaa:	68c3      	ldr	r3, [r0, #12]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800dfac:	fa0e f70c 	lsl.w	r7, lr, ip
 800dfb0:	ea23 0707 	bic.w	r7, r3, r7
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800dfb4:	688b      	ldr	r3, [r1, #8]
 800dfb6:	fa03 f30c 	lsl.w	r3, r3, ip
 800dfba:	433b      	orrs	r3, r7
        GPIOx->PUPDR = temp;
 800dfbc:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800dfbe:	684b      	ldr	r3, [r1, #4]
 800dfc0:	f003 0303 	and.w	r3, r3, #3
 800dfc4:	2b02      	cmp	r3, #2
 800dfc6:	d113      	bne.n	800dff0 <HAL_GPIO_Init+0x124>
        temp = GPIOx->AFR[position >> 3];
 800dfc8:	08d7      	lsrs	r7, r2, #3
 800dfca:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800dfce:	f8d7 a020 	ldr.w	sl, [r7, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800dfd2:	f002 0307 	and.w	r3, r2, #7
 800dfd6:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800dfda:	230f      	movs	r3, #15
 800dfdc:	fa03 f30b 	lsl.w	r3, r3, fp
 800dfe0:	ea2a 0a03 	bic.w	sl, sl, r3
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800dfe4:	690b      	ldr	r3, [r1, #16]
 800dfe6:	fa03 f30b 	lsl.w	r3, r3, fp
 800dfea:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3] = temp;
 800dfee:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 800dff0:	6803      	ldr	r3, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800dff2:	fa0e f70c 	lsl.w	r7, lr, ip
 800dff6:	ea23 0707 	bic.w	r7, r3, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800dffa:	684b      	ldr	r3, [r1, #4]
 800dffc:	f003 0303 	and.w	r3, r3, #3
 800e000:	fa03 f30c 	lsl.w	r3, r3, ip
 800e004:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 800e006:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e008:	684b      	ldr	r3, [r1, #4]
 800e00a:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800e00e:	d0b5      	beq.n	800df7c <HAL_GPIO_Init+0xb0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e010:	6a33      	ldr	r3, [r6, #32]
 800e012:	f043 0301 	orr.w	r3, r3, #1
 800e016:	6233      	str	r3, [r6, #32]
 800e018:	6a33      	ldr	r3, [r6, #32]
 800e01a:	f003 0301 	and.w	r3, r3, #1
 800e01e:	9301      	str	r3, [sp, #4]
 800e020:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800e022:	f022 0303 	bic.w	r3, r2, #3
 800e026:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e02a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800e02e:	f8d3 a008 	ldr.w	sl, [r3, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800e032:	f002 0703 	and.w	r7, r2, #3
 800e036:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 800e03a:	270f      	movs	r7, #15
 800e03c:	fa07 f70b 	lsl.w	r7, r7, fp
 800e040:	ea2a 0a07 	bic.w	sl, sl, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800e044:	4540      	cmp	r0, r8
 800e046:	f43f af69 	beq.w	800df1c <HAL_GPIO_Init+0x50>
 800e04a:	4f11      	ldr	r7, [pc, #68]	; (800e090 <HAL_GPIO_Init+0x1c4>)
 800e04c:	42b8      	cmp	r0, r7
 800e04e:	d00e      	beq.n	800e06e <HAL_GPIO_Init+0x1a2>
 800e050:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800e054:	42b8      	cmp	r0, r7
 800e056:	d00c      	beq.n	800e072 <HAL_GPIO_Init+0x1a6>
 800e058:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800e05c:	42b8      	cmp	r0, r7
 800e05e:	d00a      	beq.n	800e076 <HAL_GPIO_Init+0x1aa>
 800e060:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800e064:	42b8      	cmp	r0, r7
 800e066:	bf0c      	ite	eq
 800e068:	2704      	moveq	r7, #4
 800e06a:	2705      	movne	r7, #5
 800e06c:	e757      	b.n	800df1e <HAL_GPIO_Init+0x52>
 800e06e:	462f      	mov	r7, r5
 800e070:	e755      	b.n	800df1e <HAL_GPIO_Init+0x52>
 800e072:	2702      	movs	r7, #2
 800e074:	e753      	b.n	800df1e <HAL_GPIO_Init+0x52>
 800e076:	4677      	mov	r7, lr
 800e078:	e751      	b.n	800df1e <HAL_GPIO_Init+0x52>
  }
}
 800e07a:	b003      	add	sp, #12
 800e07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e080:	4770      	bx	lr
 800e082:	bf00      	nop
 800e084:	40023800 	.word	0x40023800
 800e088:	40020000 	.word	0x40020000
 800e08c:	40010400 	.word	0x40010400
 800e090:	40020400 	.word	0x40020400

0800e094 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800e094:	6903      	ldr	r3, [r0, #16]
 800e096:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800e098:	bf14      	ite	ne
 800e09a:	2001      	movne	r0, #1
 800e09c:	2000      	moveq	r0, #0
 800e09e:	4770      	bx	lr

0800e0a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e0a0:	b10a      	cbz	r2, 800e0a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e0a2:	6181      	str	r1, [r0, #24]
 800e0a4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800e0a6:	0409      	lsls	r1, r1, #16
 800e0a8:	6181      	str	r1, [r0, #24]
  }
}
 800e0aa:	4770      	bx	lr

0800e0ac <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800e0ac:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800e0ae:	ea01 0203 	and.w	r2, r1, r3
 800e0b2:	ea21 0103 	bic.w	r1, r1, r3
 800e0b6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e0ba:	6181      	str	r1, [r0, #24]
}
 800e0bc:	4770      	bx	lr

0800e0be <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800e0be:	4770      	bx	lr

0800e0c0 <HAL_GPIO_EXTI_IRQHandler>:
{
 800e0c0:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800e0c2:	4b05      	ldr	r3, [pc, #20]	; (800e0d8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800e0c4:	695b      	ldr	r3, [r3, #20]
 800e0c6:	4203      	tst	r3, r0
 800e0c8:	d100      	bne.n	800e0cc <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 800e0ca:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e0cc:	4b02      	ldr	r3, [pc, #8]	; (800e0d8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800e0ce:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e0d0:	f7ff fff5 	bl	800e0be <HAL_GPIO_EXTI_Callback>
}
 800e0d4:	e7f9      	b.n	800e0ca <HAL_GPIO_EXTI_IRQHandler+0xa>
 800e0d6:	bf00      	nop
 800e0d8:	40010400 	.word	0x40010400

0800e0dc <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800e0dc:	b368      	cbz	r0, 800e13a <HAL_IWDG_Init+0x5e>
{
 800e0de:	b538      	push	{r3, r4, r5, lr}
 800e0e0:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800e0e2:	6803      	ldr	r3, [r0, #0]
 800e0e4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800e0e8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800e0ea:	6803      	ldr	r3, [r0, #0]
 800e0ec:	f245 5255 	movw	r2, #21845	; 0x5555
 800e0f0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800e0f2:	6803      	ldr	r3, [r0, #0]
 800e0f4:	6842      	ldr	r2, [r0, #4]
 800e0f6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800e0f8:	6803      	ldr	r3, [r0, #0]
 800e0fa:	6882      	ldr	r2, [r0, #8]
 800e0fc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800e0fe:	f7fe ffc1 	bl	800d084 <HAL_GetTick>
 800e102:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e104:	6823      	ldr	r3, [r4, #0]
 800e106:	68da      	ldr	r2, [r3, #12]
 800e108:	f012 0f03 	tst.w	r2, #3
 800e10c:	d109      	bne.n	800e122 <HAL_IWDG_Init+0x46>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800e10e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800e112:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e114:	2000      	movs	r0, #0
}
 800e116:	bd38      	pop	{r3, r4, r5, pc}
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e118:	6823      	ldr	r3, [r4, #0]
 800e11a:	68da      	ldr	r2, [r3, #12]
 800e11c:	f012 0f03 	tst.w	r2, #3
 800e120:	d0f5      	beq.n	800e10e <HAL_IWDG_Init+0x32>
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800e122:	f7fe ffaf 	bl	800d084 <HAL_GetTick>
 800e126:	1b40      	subs	r0, r0, r5
 800e128:	282a      	cmp	r0, #42	; 0x2a
 800e12a:	d9f5      	bls.n	800e118 <HAL_IWDG_Init+0x3c>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e12c:	6823      	ldr	r3, [r4, #0]
 800e12e:	68db      	ldr	r3, [r3, #12]
 800e130:	f013 0f03 	tst.w	r3, #3
 800e134:	d0f0      	beq.n	800e118 <HAL_IWDG_Init+0x3c>
        return HAL_TIMEOUT;
 800e136:	2003      	movs	r0, #3
 800e138:	e7ed      	b.n	800e116 <HAL_IWDG_Init+0x3a>
    return HAL_ERROR;
 800e13a:	2001      	movs	r0, #1
}
 800e13c:	4770      	bx	lr

0800e13e <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800e13e:	6803      	ldr	r3, [r0, #0]
 800e140:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800e144:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800e146:	2000      	movs	r0, #0
 800e148:	4770      	bx	lr
	...

0800e14c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800e14c:	b410      	push	{r4}
 800e14e:	b083      	sub	sp, #12
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800e150:	4b1e      	ldr	r3, [pc, #120]	; (800e1cc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	f013 03f0 	ands.w	r3, r3, #240	; 0xf0
 800e158:	d128      	bne.n	800e1ac <RCC_SetFlashLatencyFromMSIRange+0x60>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800e15a:	4a1c      	ldr	r2, [pc, #112]	; (800e1cc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800e15c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e15e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800e162:	d010      	beq.n	800e186 <RCC_SetFlashLatencyFromMSIRange+0x3a>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800e164:	4a1a      	ldr	r2, [pc, #104]	; (800e1d0 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 800e166:	6812      	ldr	r2, [r2, #0]
 800e168:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
      __HAL_RCC_PWR_CLK_DISABLE();
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800e16c:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800e170:	d11d      	bne.n	800e1ae <RCC_SetFlashLatencyFromMSIRange+0x62>
 800e172:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 800e176:	d11a      	bne.n	800e1ae <RCC_SetFlashLatencyFromMSIRange+0x62>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800e178:	4a16      	ldr	r2, [pc, #88]	; (800e1d4 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800e17a:	6813      	ldr	r3, [r2, #0]
 800e17c:	f043 0304 	orr.w	r3, r3, #4
 800e180:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 800e182:	2301      	movs	r3, #1
 800e184:	e013      	b.n	800e1ae <RCC_SetFlashLatencyFromMSIRange+0x62>
      __HAL_RCC_PWR_CLK_ENABLE();
 800e186:	4911      	ldr	r1, [pc, #68]	; (800e1cc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800e188:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800e18a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e18e:	624a      	str	r2, [r1, #36]	; 0x24
 800e190:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800e192:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800e196:	9201      	str	r2, [sp, #4]
 800e198:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800e19a:	4a0d      	ldr	r2, [pc, #52]	; (800e1d0 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 800e19c:	6812      	ldr	r2, [r2, #0]
 800e19e:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800e1a2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800e1a4:	f024 5480 	bic.w	r4, r4, #268435456	; 0x10000000
 800e1a8:	624c      	str	r4, [r1, #36]	; 0x24
 800e1aa:	e7df      	b.n	800e16c <RCC_SetFlashLatencyFromMSIRange+0x20>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800e1ac:	2300      	movs	r3, #0
  __HAL_FLASH_SET_LATENCY(latency);
 800e1ae:	4909      	ldr	r1, [pc, #36]	; (800e1d4 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800e1b0:	680a      	ldr	r2, [r1, #0]
 800e1b2:	f022 0201 	bic.w	r2, r2, #1
 800e1b6:	431a      	orrs	r2, r3
 800e1b8:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800e1ba:	6808      	ldr	r0, [r1, #0]
 800e1bc:	f000 0001 	and.w	r0, r0, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800e1c0:	1ac0      	subs	r0, r0, r3
 800e1c2:	bf18      	it	ne
 800e1c4:	2001      	movne	r0, #1
 800e1c6:	b003      	add	sp, #12
 800e1c8:	bc10      	pop	{r4}
 800e1ca:	4770      	bx	lr
 800e1cc:	40023800 	.word	0x40023800
 800e1d0:	40007000 	.word	0x40007000
 800e1d4:	40023c00 	.word	0x40023c00

0800e1d8 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	f000 8268 	beq.w	800e6ae <HAL_RCC_OscConfig+0x4d6>
{
 800e1de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e1e6:	4ba4      	ldr	r3, [pc, #656]	; (800e478 <HAL_RCC_OscConfig+0x2a0>)
 800e1e8:	689d      	ldr	r5, [r3, #8]
 800e1ea:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e1ee:	689e      	ldr	r6, [r3, #8]
 800e1f0:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e1f4:	6803      	ldr	r3, [r0, #0]
 800e1f6:	f013 0f01 	tst.w	r3, #1
 800e1fa:	d01d      	beq.n	800e238 <HAL_RCC_OscConfig+0x60>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e1fc:	2d08      	cmp	r5, #8
 800e1fe:	d012      	beq.n	800e226 <HAL_RCC_OscConfig+0x4e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800e200:	2d0c      	cmp	r5, #12
 800e202:	d00e      	beq.n	800e222 <HAL_RCC_OscConfig+0x4a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e204:	6863      	ldr	r3, [r4, #4]
 800e206:	2b01      	cmp	r3, #1
 800e208:	d035      	beq.n	800e276 <HAL_RCC_OscConfig+0x9e>
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d14b      	bne.n	800e2a6 <HAL_RCC_OscConfig+0xce>
 800e20e:	4b9a      	ldr	r3, [pc, #616]	; (800e478 <HAL_RCC_OscConfig+0x2a0>)
 800e210:	681a      	ldr	r2, [r3, #0]
 800e212:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e216:	601a      	str	r2, [r3, #0]
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e21e:	601a      	str	r2, [r3, #0]
 800e220:	e02e      	b.n	800e280 <HAL_RCC_OscConfig+0xa8>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800e222:	2e00      	cmp	r6, #0
 800e224:	d0ee      	beq.n	800e204 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e226:	4b94      	ldr	r3, [pc, #592]	; (800e478 <HAL_RCC_OscConfig+0x2a0>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800e22e:	d003      	beq.n	800e238 <HAL_RCC_OscConfig+0x60>
 800e230:	6863      	ldr	r3, [r4, #4]
 800e232:	2b00      	cmp	r3, #0
 800e234:	f000 823d 	beq.w	800e6b2 <HAL_RCC_OscConfig+0x4da>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e238:	6823      	ldr	r3, [r4, #0]
 800e23a:	f013 0f02 	tst.w	r3, #2
 800e23e:	d06c      	beq.n	800e31a <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e240:	2d04      	cmp	r5, #4
 800e242:	d059      	beq.n	800e2f8 <HAL_RCC_OscConfig+0x120>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800e244:	2d0c      	cmp	r5, #12
 800e246:	d055      	beq.n	800e2f4 <HAL_RCC_OscConfig+0x11c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e248:	68e3      	ldr	r3, [r4, #12]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	f000 80cb 	beq.w	800e3e6 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_ENABLE();
 800e250:	4b8a      	ldr	r3, [pc, #552]	; (800e47c <HAL_RCC_OscConfig+0x2a4>)
 800e252:	2201      	movs	r2, #1
 800e254:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800e256:	f7fe ff15 	bl	800d084 <HAL_GetTick>
 800e25a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e25c:	4f86      	ldr	r7, [pc, #536]	; (800e478 <HAL_RCC_OscConfig+0x2a0>)
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	f013 0f02 	tst.w	r3, #2
 800e264:	f040 80b6 	bne.w	800e3d4 <HAL_RCC_OscConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e268:	f7fe ff0c 	bl	800d084 <HAL_GetTick>
 800e26c:	1b80      	subs	r0, r0, r6
 800e26e:	2802      	cmp	r0, #2
 800e270:	d9f5      	bls.n	800e25e <HAL_RCC_OscConfig+0x86>
            return HAL_TIMEOUT;
 800e272:	2003      	movs	r0, #3
 800e274:	e226      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e276:	4a80      	ldr	r2, [pc, #512]	; (800e478 <HAL_RCC_OscConfig+0x2a0>)
 800e278:	6813      	ldr	r3, [r2, #0]
 800e27a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e27e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e280:	6863      	ldr	r3, [r4, #4]
 800e282:	b333      	cbz	r3, 800e2d2 <HAL_RCC_OscConfig+0xfa>
        tickstart = HAL_GetTick();
 800e284:	f7fe fefe 	bl	800d084 <HAL_GetTick>
 800e288:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e28a:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 800e478 <HAL_RCC_OscConfig+0x2a0>
 800e28e:	f8d8 3000 	ldr.w	r3, [r8]
 800e292:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800e296:	d1cf      	bne.n	800e238 <HAL_RCC_OscConfig+0x60>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e298:	f7fe fef4 	bl	800d084 <HAL_GetTick>
 800e29c:	1bc0      	subs	r0, r0, r7
 800e29e:	2864      	cmp	r0, #100	; 0x64
 800e2a0:	d9f5      	bls.n	800e28e <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 800e2a2:	2003      	movs	r0, #3
 800e2a4:	e20e      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e2a6:	2b05      	cmp	r3, #5
 800e2a8:	d009      	beq.n	800e2be <HAL_RCC_OscConfig+0xe6>
 800e2aa:	4b73      	ldr	r3, [pc, #460]	; (800e478 <HAL_RCC_OscConfig+0x2a0>)
 800e2ac:	681a      	ldr	r2, [r3, #0]
 800e2ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e2b2:	601a      	str	r2, [r3, #0]
 800e2b4:	681a      	ldr	r2, [r3, #0]
 800e2b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e2ba:	601a      	str	r2, [r3, #0]
 800e2bc:	e7e0      	b.n	800e280 <HAL_RCC_OscConfig+0xa8>
 800e2be:	4b6e      	ldr	r3, [pc, #440]	; (800e478 <HAL_RCC_OscConfig+0x2a0>)
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e2c6:	601a      	str	r2, [r3, #0]
 800e2c8:	681a      	ldr	r2, [r3, #0]
 800e2ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e2ce:	601a      	str	r2, [r3, #0]
 800e2d0:	e7d6      	b.n	800e280 <HAL_RCC_OscConfig+0xa8>
        tickstart = HAL_GetTick();
 800e2d2:	f7fe fed7 	bl	800d084 <HAL_GetTick>
 800e2d6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e2d8:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800e478 <HAL_RCC_OscConfig+0x2a0>
 800e2dc:	f8d8 3000 	ldr.w	r3, [r8]
 800e2e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800e2e4:	d0a8      	beq.n	800e238 <HAL_RCC_OscConfig+0x60>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e2e6:	f7fe fecd 	bl	800d084 <HAL_GetTick>
 800e2ea:	1bc0      	subs	r0, r0, r7
 800e2ec:	2864      	cmp	r0, #100	; 0x64
 800e2ee:	d9f5      	bls.n	800e2dc <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 800e2f0:	2003      	movs	r0, #3
 800e2f2:	e1e7      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800e2f4:	2e00      	cmp	r6, #0
 800e2f6:	d1a7      	bne.n	800e248 <HAL_RCC_OscConfig+0x70>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e2f8:	4b5f      	ldr	r3, [pc, #380]	; (800e478 <HAL_RCC_OscConfig+0x2a0>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f013 0f02 	tst.w	r3, #2
 800e300:	d003      	beq.n	800e30a <HAL_RCC_OscConfig+0x132>
 800e302:	68e3      	ldr	r3, [r4, #12]
 800e304:	2b01      	cmp	r3, #1
 800e306:	f040 81d6 	bne.w	800e6b6 <HAL_RCC_OscConfig+0x4de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e30a:	4a5b      	ldr	r2, [pc, #364]	; (800e478 <HAL_RCC_OscConfig+0x2a0>)
 800e30c:	6853      	ldr	r3, [r2, #4]
 800e30e:	6921      	ldr	r1, [r4, #16]
 800e310:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800e314:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e318:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e31a:	6823      	ldr	r3, [r4, #0]
 800e31c:	f013 0f10 	tst.w	r3, #16
 800e320:	d03b      	beq.n	800e39a <HAL_RCC_OscConfig+0x1c2>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800e322:	2d00      	cmp	r5, #0
 800e324:	f040 8085 	bne.w	800e432 <HAL_RCC_OscConfig+0x25a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800e328:	4b53      	ldr	r3, [pc, #332]	; (800e478 <HAL_RCC_OscConfig+0x2a0>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e330:	d003      	beq.n	800e33a <HAL_RCC_OscConfig+0x162>
 800e332:	69a3      	ldr	r3, [r4, #24]
 800e334:	2b00      	cmp	r3, #0
 800e336:	f000 81c0 	beq.w	800e6ba <HAL_RCC_OscConfig+0x4e2>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800e33a:	6a20      	ldr	r0, [r4, #32]
 800e33c:	4b4e      	ldr	r3, [pc, #312]	; (800e478 <HAL_RCC_OscConfig+0x2a0>)
 800e33e:	685b      	ldr	r3, [r3, #4]
 800e340:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e344:	4298      	cmp	r0, r3
 800e346:	d960      	bls.n	800e40a <HAL_RCC_OscConfig+0x232>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e348:	f7ff ff00 	bl	800e14c <RCC_SetFlashLatencyFromMSIRange>
 800e34c:	2800      	cmp	r0, #0
 800e34e:	f040 81b6 	bne.w	800e6be <HAL_RCC_OscConfig+0x4e6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e352:	4a49      	ldr	r2, [pc, #292]	; (800e478 <HAL_RCC_OscConfig+0x2a0>)
 800e354:	6853      	ldr	r3, [r2, #4]
 800e356:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800e35a:	6a21      	ldr	r1, [r4, #32]
 800e35c:	430b      	orrs	r3, r1
 800e35e:	6053      	str	r3, [r2, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e360:	6853      	ldr	r3, [r2, #4]
 800e362:	69e1      	ldr	r1, [r4, #28]
 800e364:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e368:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800e36c:	6053      	str	r3, [r2, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800e36e:	4b42      	ldr	r3, [pc, #264]	; (800e478 <HAL_RCC_OscConfig+0x2a0>)
 800e370:	6899      	ldr	r1, [r3, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800e372:	6a23      	ldr	r3, [r4, #32]
 800e374:	0b5b      	lsrs	r3, r3, #13
 800e376:	1c5a      	adds	r2, r3, #1
 800e378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e37c:	4093      	lsls	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800e37e:	f3c1 1203 	ubfx	r2, r1, #4, #4
 800e382:	493f      	ldr	r1, [pc, #252]	; (800e480 <HAL_RCC_OscConfig+0x2a8>)
 800e384:	5c8a      	ldrb	r2, [r1, r2]
 800e386:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800e388:	4a3e      	ldr	r2, [pc, #248]	; (800e484 <HAL_RCC_OscConfig+0x2ac>)
 800e38a:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 800e38c:	4b3e      	ldr	r3, [pc, #248]	; (800e488 <HAL_RCC_OscConfig+0x2b0>)
 800e38e:	6818      	ldr	r0, [r3, #0]
 800e390:	f7fe fe34 	bl	800cffc <HAL_InitTick>
        if(status != HAL_OK)
 800e394:	2800      	cmp	r0, #0
 800e396:	f040 8195 	bne.w	800e6c4 <HAL_RCC_OscConfig+0x4ec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e39a:	6823      	ldr	r3, [r4, #0]
 800e39c:	f013 0f08 	tst.w	r3, #8
 800e3a0:	f000 809a 	beq.w	800e4d8 <HAL_RCC_OscConfig+0x300>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e3a4:	6963      	ldr	r3, [r4, #20]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	f000 8083 	beq.w	800e4b2 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_LSI_ENABLE();
 800e3ac:	4b33      	ldr	r3, [pc, #204]	; (800e47c <HAL_RCC_OscConfig+0x2a4>)
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 800e3b4:	f7fe fe66 	bl	800d084 <HAL_GetTick>
 800e3b8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e3ba:	4f2f      	ldr	r7, [pc, #188]	; (800e478 <HAL_RCC_OscConfig+0x2a0>)
 800e3bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3be:	f013 0f02 	tst.w	r3, #2
 800e3c2:	f040 8089 	bne.w	800e4d8 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e3c6:	f7fe fe5d 	bl	800d084 <HAL_GetTick>
 800e3ca:	1b80      	subs	r0, r0, r6
 800e3cc:	2802      	cmp	r0, #2
 800e3ce:	d9f5      	bls.n	800e3bc <HAL_RCC_OscConfig+0x1e4>
          return HAL_TIMEOUT;
 800e3d0:	2003      	movs	r0, #3
 800e3d2:	e177      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e3d4:	4a28      	ldr	r2, [pc, #160]	; (800e478 <HAL_RCC_OscConfig+0x2a0>)
 800e3d6:	6853      	ldr	r3, [r2, #4]
 800e3d8:	6921      	ldr	r1, [r4, #16]
 800e3da:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800e3de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e3e2:	6053      	str	r3, [r2, #4]
 800e3e4:	e799      	b.n	800e31a <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 800e3e6:	4b25      	ldr	r3, [pc, #148]	; (800e47c <HAL_RCC_OscConfig+0x2a4>)
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800e3ec:	f7fe fe4a 	bl	800d084 <HAL_GetTick>
 800e3f0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e3f2:	4f21      	ldr	r7, [pc, #132]	; (800e478 <HAL_RCC_OscConfig+0x2a0>)
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	f013 0f02 	tst.w	r3, #2
 800e3fa:	d08e      	beq.n	800e31a <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e3fc:	f7fe fe42 	bl	800d084 <HAL_GetTick>
 800e400:	1b80      	subs	r0, r0, r6
 800e402:	2802      	cmp	r0, #2
 800e404:	d9f6      	bls.n	800e3f4 <HAL_RCC_OscConfig+0x21c>
            return HAL_TIMEOUT;
 800e406:	2003      	movs	r0, #3
 800e408:	e15c      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e40a:	4a1b      	ldr	r2, [pc, #108]	; (800e478 <HAL_RCC_OscConfig+0x2a0>)
 800e40c:	6853      	ldr	r3, [r2, #4]
 800e40e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800e412:	4303      	orrs	r3, r0
 800e414:	6053      	str	r3, [r2, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e416:	6853      	ldr	r3, [r2, #4]
 800e418:	69e1      	ldr	r1, [r4, #28]
 800e41a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e41e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800e422:	6053      	str	r3, [r2, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e424:	6a20      	ldr	r0, [r4, #32]
 800e426:	f7ff fe91 	bl	800e14c <RCC_SetFlashLatencyFromMSIRange>
 800e42a:	2800      	cmp	r0, #0
 800e42c:	d09f      	beq.n	800e36e <HAL_RCC_OscConfig+0x196>
            return HAL_ERROR;
 800e42e:	2001      	movs	r0, #1
 800e430:	e148      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800e432:	69a3      	ldr	r3, [r4, #24]
 800e434:	b353      	cbz	r3, 800e48c <HAL_RCC_OscConfig+0x2b4>
        __HAL_RCC_MSI_ENABLE();
 800e436:	4b11      	ldr	r3, [pc, #68]	; (800e47c <HAL_RCC_OscConfig+0x2a4>)
 800e438:	2201      	movs	r2, #1
 800e43a:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 800e43c:	f7fe fe22 	bl	800d084 <HAL_GetTick>
 800e440:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800e442:	4f0d      	ldr	r7, [pc, #52]	; (800e478 <HAL_RCC_OscConfig+0x2a0>)
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e44a:	d106      	bne.n	800e45a <HAL_RCC_OscConfig+0x282>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e44c:	f7fe fe1a 	bl	800d084 <HAL_GetTick>
 800e450:	1b80      	subs	r0, r0, r6
 800e452:	2802      	cmp	r0, #2
 800e454:	d9f6      	bls.n	800e444 <HAL_RCC_OscConfig+0x26c>
            return HAL_TIMEOUT;
 800e456:	2003      	movs	r0, #3
 800e458:	e134      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e45a:	4a07      	ldr	r2, [pc, #28]	; (800e478 <HAL_RCC_OscConfig+0x2a0>)
 800e45c:	6853      	ldr	r3, [r2, #4]
 800e45e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800e462:	6a21      	ldr	r1, [r4, #32]
 800e464:	430b      	orrs	r3, r1
 800e466:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e468:	6853      	ldr	r3, [r2, #4]
 800e46a:	69e1      	ldr	r1, [r4, #28]
 800e46c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e470:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800e474:	6053      	str	r3, [r2, #4]
 800e476:	e790      	b.n	800e39a <HAL_RCC_OscConfig+0x1c2>
 800e478:	40023800 	.word	0x40023800
 800e47c:	42470000 	.word	0x42470000
 800e480:	08011210 	.word	0x08011210
 800e484:	2000005c 	.word	0x2000005c
 800e488:	20000078 	.word	0x20000078
        __HAL_RCC_MSI_DISABLE();
 800e48c:	4b92      	ldr	r3, [pc, #584]	; (800e6d8 <HAL_RCC_OscConfig+0x500>)
 800e48e:	2200      	movs	r2, #0
 800e490:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 800e492:	f7fe fdf7 	bl	800d084 <HAL_GetTick>
 800e496:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800e498:	4f90      	ldr	r7, [pc, #576]	; (800e6dc <HAL_RCC_OscConfig+0x504>)
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e4a0:	f43f af7b 	beq.w	800e39a <HAL_RCC_OscConfig+0x1c2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e4a4:	f7fe fdee 	bl	800d084 <HAL_GetTick>
 800e4a8:	1b80      	subs	r0, r0, r6
 800e4aa:	2802      	cmp	r0, #2
 800e4ac:	d9f5      	bls.n	800e49a <HAL_RCC_OscConfig+0x2c2>
            return HAL_TIMEOUT;
 800e4ae:	2003      	movs	r0, #3
 800e4b0:	e108      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
      __HAL_RCC_LSI_DISABLE();
 800e4b2:	4b89      	ldr	r3, [pc, #548]	; (800e6d8 <HAL_RCC_OscConfig+0x500>)
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 800e4ba:	f7fe fde3 	bl	800d084 <HAL_GetTick>
 800e4be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e4c0:	4f86      	ldr	r7, [pc, #536]	; (800e6dc <HAL_RCC_OscConfig+0x504>)
 800e4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4c4:	f013 0f02 	tst.w	r3, #2
 800e4c8:	d006      	beq.n	800e4d8 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e4ca:	f7fe fddb 	bl	800d084 <HAL_GetTick>
 800e4ce:	1b80      	subs	r0, r0, r6
 800e4d0:	2802      	cmp	r0, #2
 800e4d2:	d9f6      	bls.n	800e4c2 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800e4d4:	2003      	movs	r0, #3
 800e4d6:	e0f5      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e4d8:	6823      	ldr	r3, [r4, #0]
 800e4da:	f013 0f04 	tst.w	r3, #4
 800e4de:	d07f      	beq.n	800e5e0 <HAL_RCC_OscConfig+0x408>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e4e0:	4b7e      	ldr	r3, [pc, #504]	; (800e6dc <HAL_RCC_OscConfig+0x504>)
 800e4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800e4e8:	d10b      	bne.n	800e502 <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 800e4ea:	4b7c      	ldr	r3, [pc, #496]	; (800e6dc <HAL_RCC_OscConfig+0x504>)
 800e4ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e4f2:	625a      	str	r2, [r3, #36]	; 0x24
 800e4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e4fa:	9301      	str	r3, [sp, #4]
 800e4fc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800e4fe:	2601      	movs	r6, #1
 800e500:	e000      	b.n	800e504 <HAL_RCC_OscConfig+0x32c>
    FlagStatus       pwrclkchanged = RESET;
 800e502:	2600      	movs	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e504:	4b76      	ldr	r3, [pc, #472]	; (800e6e0 <HAL_RCC_OscConfig+0x508>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f413 7f80 	tst.w	r3, #256	; 0x100
 800e50c:	d00e      	beq.n	800e52c <HAL_RCC_OscConfig+0x354>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e50e:	68a3      	ldr	r3, [r4, #8]
 800e510:	2b01      	cmp	r3, #1
 800e512:	d021      	beq.n	800e558 <HAL_RCC_OscConfig+0x380>
 800e514:	2b00      	cmp	r3, #0
 800e516:	d139      	bne.n	800e58c <HAL_RCC_OscConfig+0x3b4>
 800e518:	4b70      	ldr	r3, [pc, #448]	; (800e6dc <HAL_RCC_OscConfig+0x504>)
 800e51a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e51c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e520:	635a      	str	r2, [r3, #52]	; 0x34
 800e522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e528:	635a      	str	r2, [r3, #52]	; 0x34
 800e52a:	e01a      	b.n	800e562 <HAL_RCC_OscConfig+0x38a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e52c:	4a6c      	ldr	r2, [pc, #432]	; (800e6e0 <HAL_RCC_OscConfig+0x508>)
 800e52e:	6813      	ldr	r3, [r2, #0]
 800e530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e534:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800e536:	f7fe fda5 	bl	800d084 <HAL_GetTick>
 800e53a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e53c:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800e6e0 <HAL_RCC_OscConfig+0x508>
 800e540:	f8d8 3000 	ldr.w	r3, [r8]
 800e544:	f413 7f80 	tst.w	r3, #256	; 0x100
 800e548:	d1e1      	bne.n	800e50e <HAL_RCC_OscConfig+0x336>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e54a:	f7fe fd9b 	bl	800d084 <HAL_GetTick>
 800e54e:	1bc0      	subs	r0, r0, r7
 800e550:	2864      	cmp	r0, #100	; 0x64
 800e552:	d9f5      	bls.n	800e540 <HAL_RCC_OscConfig+0x368>
          return HAL_TIMEOUT;
 800e554:	2003      	movs	r0, #3
 800e556:	e0b5      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e558:	4a60      	ldr	r2, [pc, #384]	; (800e6dc <HAL_RCC_OscConfig+0x504>)
 800e55a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800e55c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e560:	6353      	str	r3, [r2, #52]	; 0x34
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e562:	68a3      	ldr	r3, [r4, #8]
 800e564:	b343      	cbz	r3, 800e5b8 <HAL_RCC_OscConfig+0x3e0>
      tickstart = HAL_GetTick();
 800e566:	f7fe fd8d 	bl	800d084 <HAL_GetTick>
 800e56a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e56c:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800e6dc <HAL_RCC_OscConfig+0x504>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e570:	f241 3988 	movw	r9, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e574:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800e578:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e57c:	d12f      	bne.n	800e5de <HAL_RCC_OscConfig+0x406>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e57e:	f7fe fd81 	bl	800d084 <HAL_GetTick>
 800e582:	1bc0      	subs	r0, r0, r7
 800e584:	4548      	cmp	r0, r9
 800e586:	d9f5      	bls.n	800e574 <HAL_RCC_OscConfig+0x39c>
          return HAL_TIMEOUT;
 800e588:	2003      	movs	r0, #3
 800e58a:	e09b      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e58c:	2b05      	cmp	r3, #5
 800e58e:	d009      	beq.n	800e5a4 <HAL_RCC_OscConfig+0x3cc>
 800e590:	4b52      	ldr	r3, [pc, #328]	; (800e6dc <HAL_RCC_OscConfig+0x504>)
 800e592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e594:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e598:	635a      	str	r2, [r3, #52]	; 0x34
 800e59a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e59c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e5a0:	635a      	str	r2, [r3, #52]	; 0x34
 800e5a2:	e7de      	b.n	800e562 <HAL_RCC_OscConfig+0x38a>
 800e5a4:	4b4d      	ldr	r3, [pc, #308]	; (800e6dc <HAL_RCC_OscConfig+0x504>)
 800e5a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e5ac:	635a      	str	r2, [r3, #52]	; 0x34
 800e5ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e5b4:	635a      	str	r2, [r3, #52]	; 0x34
 800e5b6:	e7d4      	b.n	800e562 <HAL_RCC_OscConfig+0x38a>
      tickstart = HAL_GetTick();
 800e5b8:	f7fe fd64 	bl	800d084 <HAL_GetTick>
 800e5bc:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e5be:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800e6dc <HAL_RCC_OscConfig+0x504>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e5c2:	f241 3988 	movw	r9, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e5c6:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800e5ca:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e5ce:	d006      	beq.n	800e5de <HAL_RCC_OscConfig+0x406>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e5d0:	f7fe fd58 	bl	800d084 <HAL_GetTick>
 800e5d4:	1bc0      	subs	r0, r0, r7
 800e5d6:	4548      	cmp	r0, r9
 800e5d8:	d9f5      	bls.n	800e5c6 <HAL_RCC_OscConfig+0x3ee>
          return HAL_TIMEOUT;
 800e5da:	2003      	movs	r0, #3
 800e5dc:	e072      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
    if(pwrclkchanged == SET)
 800e5de:	b9c6      	cbnz	r6, 800e612 <HAL_RCC_OscConfig+0x43a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e5e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d06d      	beq.n	800e6c2 <HAL_RCC_OscConfig+0x4ea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e5e6:	2d0c      	cmp	r5, #12
 800e5e8:	d04c      	beq.n	800e684 <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e5ea:	2b02      	cmp	r3, #2
 800e5ec:	d017      	beq.n	800e61e <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_DISABLE();
 800e5ee:	4b3a      	ldr	r3, [pc, #232]	; (800e6d8 <HAL_RCC_OscConfig+0x500>)
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800e5f4:	f7fe fd46 	bl	800d084 <HAL_GetTick>
 800e5f8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e5fa:	4d38      	ldr	r5, [pc, #224]	; (800e6dc <HAL_RCC_OscConfig+0x504>)
 800e5fc:	682b      	ldr	r3, [r5, #0]
 800e5fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800e602:	d03d      	beq.n	800e680 <HAL_RCC_OscConfig+0x4a8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e604:	f7fe fd3e 	bl	800d084 <HAL_GetTick>
 800e608:	1b00      	subs	r0, r0, r4
 800e60a:	2802      	cmp	r0, #2
 800e60c:	d9f6      	bls.n	800e5fc <HAL_RCC_OscConfig+0x424>
            return HAL_TIMEOUT;
 800e60e:	2003      	movs	r0, #3
 800e610:	e058      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
      __HAL_RCC_PWR_CLK_DISABLE();
 800e612:	4a32      	ldr	r2, [pc, #200]	; (800e6dc <HAL_RCC_OscConfig+0x504>)
 800e614:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e61a:	6253      	str	r3, [r2, #36]	; 0x24
 800e61c:	e7e0      	b.n	800e5e0 <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_PLL_DISABLE();
 800e61e:	4b2e      	ldr	r3, [pc, #184]	; (800e6d8 <HAL_RCC_OscConfig+0x500>)
 800e620:	2200      	movs	r2, #0
 800e622:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800e624:	f7fe fd2e 	bl	800d084 <HAL_GetTick>
 800e628:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e62a:	4e2c      	ldr	r6, [pc, #176]	; (800e6dc <HAL_RCC_OscConfig+0x504>)
 800e62c:	6833      	ldr	r3, [r6, #0]
 800e62e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800e632:	d006      	beq.n	800e642 <HAL_RCC_OscConfig+0x46a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e634:	f7fe fd26 	bl	800d084 <HAL_GetTick>
 800e638:	1b40      	subs	r0, r0, r5
 800e63a:	2802      	cmp	r0, #2
 800e63c:	d9f6      	bls.n	800e62c <HAL_RCC_OscConfig+0x454>
            return HAL_TIMEOUT;
 800e63e:	2003      	movs	r0, #3
 800e640:	e040      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e642:	4926      	ldr	r1, [pc, #152]	; (800e6dc <HAL_RCC_OscConfig+0x504>)
 800e644:	688a      	ldr	r2, [r1, #8]
 800e646:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e648:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e64a:	4303      	orrs	r3, r0
 800e64c:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 800e650:	4313      	orrs	r3, r2
 800e652:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e654:	4313      	orrs	r3, r2
 800e656:	608b      	str	r3, [r1, #8]
        __HAL_RCC_PLL_ENABLE();
 800e658:	4b1f      	ldr	r3, [pc, #124]	; (800e6d8 <HAL_RCC_OscConfig+0x500>)
 800e65a:	2201      	movs	r2, #1
 800e65c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800e65e:	f7fe fd11 	bl	800d084 <HAL_GetTick>
 800e662:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e664:	4d1d      	ldr	r5, [pc, #116]	; (800e6dc <HAL_RCC_OscConfig+0x504>)
 800e666:	682b      	ldr	r3, [r5, #0]
 800e668:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800e66c:	d106      	bne.n	800e67c <HAL_RCC_OscConfig+0x4a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e66e:	f7fe fd09 	bl	800d084 <HAL_GetTick>
 800e672:	1b00      	subs	r0, r0, r4
 800e674:	2802      	cmp	r0, #2
 800e676:	d9f6      	bls.n	800e666 <HAL_RCC_OscConfig+0x48e>
            return HAL_TIMEOUT;
 800e678:	2003      	movs	r0, #3
 800e67a:	e023      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
  return HAL_OK;
 800e67c:	2000      	movs	r0, #0
 800e67e:	e021      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
 800e680:	2000      	movs	r0, #0
 800e682:	e01f      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e684:	2b01      	cmp	r3, #1
 800e686:	d020      	beq.n	800e6ca <HAL_RCC_OscConfig+0x4f2>
        pll_config = RCC->CFGR;
 800e688:	4b14      	ldr	r3, [pc, #80]	; (800e6dc <HAL_RCC_OscConfig+0x504>)
 800e68a:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e68c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800e690:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e692:	4291      	cmp	r1, r2
 800e694:	d11b      	bne.n	800e6ce <HAL_RCC_OscConfig+0x4f6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800e696:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e69a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e69c:	428a      	cmp	r2, r1
 800e69e:	d118      	bne.n	800e6d2 <HAL_RCC_OscConfig+0x4fa>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800e6a0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800e6a4:	6b20      	ldr	r0, [r4, #48]	; 0x30
        return HAL_ERROR;
 800e6a6:	1a18      	subs	r0, r3, r0
 800e6a8:	bf18      	it	ne
 800e6aa:	2001      	movne	r0, #1
 800e6ac:	e00a      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
    return HAL_ERROR;
 800e6ae:	2001      	movs	r0, #1
}
 800e6b0:	4770      	bx	lr
        return HAL_ERROR;
 800e6b2:	2001      	movs	r0, #1
 800e6b4:	e006      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
        return HAL_ERROR;
 800e6b6:	2001      	movs	r0, #1
 800e6b8:	e004      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
        return HAL_ERROR;
 800e6ba:	2001      	movs	r0, #1
 800e6bc:	e002      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
            return HAL_ERROR;
 800e6be:	2001      	movs	r0, #1
 800e6c0:	e000      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
  return HAL_OK;
 800e6c2:	2000      	movs	r0, #0
}
 800e6c4:	b003      	add	sp, #12
 800e6c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_ERROR;
 800e6ca:	2001      	movs	r0, #1
 800e6cc:	e7fa      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
          return HAL_ERROR;
 800e6ce:	2001      	movs	r0, #1
 800e6d0:	e7f8      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
 800e6d2:	2001      	movs	r0, #1
 800e6d4:	e7f6      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ec>
 800e6d6:	bf00      	nop
 800e6d8:	42470000 	.word	0x42470000
 800e6dc:	40023800 	.word	0x40023800
 800e6e0:	40007000 	.word	0x40007000

0800e6e4 <HAL_RCC_GetSysClockFreq>:
{
 800e6e4:	b508      	push	{r3, lr}
  tmpreg = RCC->CFGR;
 800e6e6:	4b31      	ldr	r3, [pc, #196]	; (800e7ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800e6e8:	689a      	ldr	r2, [r3, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 800e6ea:	f002 030c 	and.w	r3, r2, #12
 800e6ee:	2b08      	cmp	r3, #8
 800e6f0:	d057      	beq.n	800e7a2 <HAL_RCC_GetSysClockFreq+0xbe>
 800e6f2:	2b0c      	cmp	r3, #12
 800e6f4:	d00a      	beq.n	800e70c <HAL_RCC_GetSysClockFreq+0x28>
 800e6f6:	2b04      	cmp	r3, #4
 800e6f8:	d055      	beq.n	800e7a6 <HAL_RCC_GetSysClockFreq+0xc2>
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800e6fa:	4b2c      	ldr	r3, [pc, #176]	; (800e7ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800e6fc:	6858      	ldr	r0, [r3, #4]
 800e6fe:	f3c0 3042 	ubfx	r0, r0, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800e702:	1c43      	adds	r3, r0, #1
 800e704:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800e708:	4098      	lsls	r0, r3
      break;
 800e70a:	e04d      	b.n	800e7a8 <HAL_RCC_GetSysClockFreq+0xc4>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800e70c:	f3c2 4383 	ubfx	r3, r2, #18, #4
 800e710:	4927      	ldr	r1, [pc, #156]	; (800e7b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800e712:	f811 c003 	ldrb.w	ip, [r1, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800e716:	f3c2 5281 	ubfx	r2, r2, #22, #2
 800e71a:	3201      	adds	r2, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e71c:	4b23      	ldr	r3, [pc, #140]	; (800e7ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800e71e:	689b      	ldr	r3, [r3, #8]
 800e720:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800e724:	d01e      	beq.n	800e764 <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800e726:	ea4f 114c 	mov.w	r1, ip, lsl #5
 800e72a:	ebb1 000c 	subs.w	r0, r1, ip
 800e72e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800e732:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800e736:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e73a:	0181      	lsls	r1, r0, #6
 800e73c:	1a09      	subs	r1, r1, r0
 800e73e:	eb63 030e 	sbc.w	r3, r3, lr
 800e742:	00db      	lsls	r3, r3, #3
 800e744:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e748:	00c9      	lsls	r1, r1, #3
 800e74a:	eb11 0c0c 	adds.w	ip, r1, ip
 800e74e:	f143 0300 	adc.w	r3, r3, #0
 800e752:	0259      	lsls	r1, r3, #9
 800e754:	2300      	movs	r3, #0
 800e756:	ea4f 204c 	mov.w	r0, ip, lsl #9
 800e75a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 800e75e:	f7f8 f8df 	bl	8006920 <__aeabi_uldivmod>
 800e762:	e021      	b.n	800e7a8 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800e764:	ea4f 114c 	mov.w	r1, ip, lsl #5
 800e768:	ebb1 000c 	subs.w	r0, r1, ip
 800e76c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800e770:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800e774:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e778:	0181      	lsls	r1, r0, #6
 800e77a:	1a09      	subs	r1, r1, r0
 800e77c:	eb63 030e 	sbc.w	r3, r3, lr
 800e780:	00db      	lsls	r3, r3, #3
 800e782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e786:	00c9      	lsls	r1, r1, #3
 800e788:	eb11 0c0c 	adds.w	ip, r1, ip
 800e78c:	f143 0300 	adc.w	r3, r3, #0
 800e790:	0299      	lsls	r1, r3, #10
 800e792:	2300      	movs	r3, #0
 800e794:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800e798:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800e79c:	f7f8 f8c0 	bl	8006920 <__aeabi_uldivmod>
 800e7a0:	e002      	b.n	800e7a8 <HAL_RCC_GetSysClockFreq+0xc4>
  switch (tmpreg & RCC_CFGR_SWS)
 800e7a2:	4804      	ldr	r0, [pc, #16]	; (800e7b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800e7a4:	e000      	b.n	800e7a8 <HAL_RCC_GetSysClockFreq+0xc4>
      sysclockfreq = HSI_VALUE;
 800e7a6:	4804      	ldr	r0, [pc, #16]	; (800e7b8 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 800e7a8:	bd08      	pop	{r3, pc}
 800e7aa:	bf00      	nop
 800e7ac:	40023800 	.word	0x40023800
 800e7b0:	08011228 	.word	0x08011228
 800e7b4:	007a1200 	.word	0x007a1200
 800e7b8:	00f42400 	.word	0x00f42400

0800e7bc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800e7bc:	2800      	cmp	r0, #0
 800e7be:	f000 80d1 	beq.w	800e964 <HAL_RCC_ClockConfig+0x1a8>
{
 800e7c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7c6:	460c      	mov	r4, r1
 800e7c8:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e7ca:	4b6a      	ldr	r3, [pc, #424]	; (800e974 <HAL_RCC_ClockConfig+0x1b8>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f003 0301 	and.w	r3, r3, #1
 800e7d2:	428b      	cmp	r3, r1
 800e7d4:	d20d      	bcs.n	800e7f2 <HAL_RCC_ClockConfig+0x36>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e7d6:	2901      	cmp	r1, #1
 800e7d8:	d028      	beq.n	800e82c <HAL_RCC_ClockConfig+0x70>
 800e7da:	4a66      	ldr	r2, [pc, #408]	; (800e974 <HAL_RCC_ClockConfig+0x1b8>)
 800e7dc:	6813      	ldr	r3, [r2, #0]
 800e7de:	f023 0301 	bic.w	r3, r3, #1
 800e7e2:	4323      	orrs	r3, r4
 800e7e4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e7e6:	6813      	ldr	r3, [r2, #0]
 800e7e8:	f003 0301 	and.w	r3, r3, #1
 800e7ec:	42a3      	cmp	r3, r4
 800e7ee:	f040 80bb 	bne.w	800e968 <HAL_RCC_ClockConfig+0x1ac>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e7f2:	682b      	ldr	r3, [r5, #0]
 800e7f4:	f013 0f02 	tst.w	r3, #2
 800e7f8:	d006      	beq.n	800e808 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e7fa:	4a5f      	ldr	r2, [pc, #380]	; (800e978 <HAL_RCC_ClockConfig+0x1bc>)
 800e7fc:	6893      	ldr	r3, [r2, #8]
 800e7fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e802:	68a9      	ldr	r1, [r5, #8]
 800e804:	430b      	orrs	r3, r1
 800e806:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e808:	682b      	ldr	r3, [r5, #0]
 800e80a:	f013 0f01 	tst.w	r3, #1
 800e80e:	d072      	beq.n	800e8f6 <HAL_RCC_ClockConfig+0x13a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e810:	686a      	ldr	r2, [r5, #4]
 800e812:	2a02      	cmp	r2, #2
 800e814:	d010      	beq.n	800e838 <HAL_RCC_ClockConfig+0x7c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e816:	2a03      	cmp	r2, #3
 800e818:	d032      	beq.n	800e880 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800e81a:	2a01      	cmp	r2, #1
 800e81c:	d037      	beq.n	800e88e <HAL_RCC_ClockConfig+0xd2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800e81e:	4b56      	ldr	r3, [pc, #344]	; (800e978 <HAL_RCC_ClockConfig+0x1bc>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e826:	d10d      	bne.n	800e844 <HAL_RCC_ClockConfig+0x88>
        return HAL_ERROR;
 800e828:	2001      	movs	r0, #1
 800e82a:	e099      	b.n	800e960 <HAL_RCC_ClockConfig+0x1a4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e82c:	4a51      	ldr	r2, [pc, #324]	; (800e974 <HAL_RCC_ClockConfig+0x1b8>)
 800e82e:	6813      	ldr	r3, [r2, #0]
 800e830:	f043 0304 	orr.w	r3, r3, #4
 800e834:	6013      	str	r3, [r2, #0]
 800e836:	e7d0      	b.n	800e7da <HAL_RCC_ClockConfig+0x1e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e838:	4b4f      	ldr	r3, [pc, #316]	; (800e978 <HAL_RCC_ClockConfig+0x1bc>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800e840:	f000 8094 	beq.w	800e96c <HAL_RCC_ClockConfig+0x1b0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e844:	494c      	ldr	r1, [pc, #304]	; (800e978 <HAL_RCC_ClockConfig+0x1bc>)
 800e846:	688b      	ldr	r3, [r1, #8]
 800e848:	f023 0303 	bic.w	r3, r3, #3
 800e84c:	4313      	orrs	r3, r2
 800e84e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800e850:	f7fe fc18 	bl	800d084 <HAL_GetTick>
 800e854:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e856:	686b      	ldr	r3, [r5, #4]
 800e858:	2b02      	cmp	r3, #2
 800e85a:	d01f      	beq.n	800e89c <HAL_RCC_ClockConfig+0xe0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e85c:	2b03      	cmp	r3, #3
 800e85e:	d02c      	beq.n	800e8ba <HAL_RCC_ClockConfig+0xfe>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800e860:	2b01      	cmp	r3, #1
 800e862:	d039      	beq.n	800e8d8 <HAL_RCC_ClockConfig+0x11c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800e864:	4f44      	ldr	r7, [pc, #272]	; (800e978 <HAL_RCC_ClockConfig+0x1bc>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e866:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	f013 0f0c 	tst.w	r3, #12
 800e870:	d041      	beq.n	800e8f6 <HAL_RCC_ClockConfig+0x13a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e872:	f7fe fc07 	bl	800d084 <HAL_GetTick>
 800e876:	1b80      	subs	r0, r0, r6
 800e878:	4540      	cmp	r0, r8
 800e87a:	d9f6      	bls.n	800e86a <HAL_RCC_ClockConfig+0xae>
          return HAL_TIMEOUT;
 800e87c:	2003      	movs	r0, #3
 800e87e:	e06f      	b.n	800e960 <HAL_RCC_ClockConfig+0x1a4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e880:	4b3d      	ldr	r3, [pc, #244]	; (800e978 <HAL_RCC_ClockConfig+0x1bc>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800e888:	d1dc      	bne.n	800e844 <HAL_RCC_ClockConfig+0x88>
        return HAL_ERROR;
 800e88a:	2001      	movs	r0, #1
 800e88c:	e068      	b.n	800e960 <HAL_RCC_ClockConfig+0x1a4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e88e:	4b3a      	ldr	r3, [pc, #232]	; (800e978 <HAL_RCC_ClockConfig+0x1bc>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f013 0f02 	tst.w	r3, #2
 800e896:	d1d5      	bne.n	800e844 <HAL_RCC_ClockConfig+0x88>
        return HAL_ERROR;
 800e898:	2001      	movs	r0, #1
 800e89a:	e061      	b.n	800e960 <HAL_RCC_ClockConfig+0x1a4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800e89c:	4f36      	ldr	r7, [pc, #216]	; (800e978 <HAL_RCC_ClockConfig+0x1bc>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e89e:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	f003 030c 	and.w	r3, r3, #12
 800e8a8:	2b08      	cmp	r3, #8
 800e8aa:	d024      	beq.n	800e8f6 <HAL_RCC_ClockConfig+0x13a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e8ac:	f7fe fbea 	bl	800d084 <HAL_GetTick>
 800e8b0:	1b83      	subs	r3, r0, r6
 800e8b2:	4543      	cmp	r3, r8
 800e8b4:	d9f5      	bls.n	800e8a2 <HAL_RCC_ClockConfig+0xe6>
          return HAL_TIMEOUT;
 800e8b6:	2003      	movs	r0, #3
 800e8b8:	e052      	b.n	800e960 <HAL_RCC_ClockConfig+0x1a4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e8ba:	4f2f      	ldr	r7, [pc, #188]	; (800e978 <HAL_RCC_ClockConfig+0x1bc>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e8bc:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	f003 030c 	and.w	r3, r3, #12
 800e8c6:	2b0c      	cmp	r3, #12
 800e8c8:	d015      	beq.n	800e8f6 <HAL_RCC_ClockConfig+0x13a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e8ca:	f7fe fbdb 	bl	800d084 <HAL_GetTick>
 800e8ce:	1b80      	subs	r0, r0, r6
 800e8d0:	4540      	cmp	r0, r8
 800e8d2:	d9f5      	bls.n	800e8c0 <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 800e8d4:	2003      	movs	r0, #3
 800e8d6:	e043      	b.n	800e960 <HAL_RCC_ClockConfig+0x1a4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800e8d8:	4f27      	ldr	r7, [pc, #156]	; (800e978 <HAL_RCC_ClockConfig+0x1bc>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e8da:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	f003 030c 	and.w	r3, r3, #12
 800e8e4:	2b04      	cmp	r3, #4
 800e8e6:	d006      	beq.n	800e8f6 <HAL_RCC_ClockConfig+0x13a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e8e8:	f7fe fbcc 	bl	800d084 <HAL_GetTick>
 800e8ec:	1b80      	subs	r0, r0, r6
 800e8ee:	4540      	cmp	r0, r8
 800e8f0:	d9f5      	bls.n	800e8de <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 800e8f2:	2003      	movs	r0, #3
 800e8f4:	e034      	b.n	800e960 <HAL_RCC_ClockConfig+0x1a4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e8f6:	4b1f      	ldr	r3, [pc, #124]	; (800e974 <HAL_RCC_ClockConfig+0x1b8>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f003 0301 	and.w	r3, r3, #1
 800e8fe:	42a3      	cmp	r3, r4
 800e900:	d908      	bls.n	800e914 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e902:	4b1c      	ldr	r3, [pc, #112]	; (800e974 <HAL_RCC_ClockConfig+0x1b8>)
 800e904:	681a      	ldr	r2, [r3, #0]
 800e906:	f022 0201 	bic.w	r2, r2, #1
 800e90a:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f013 0f01 	tst.w	r3, #1
 800e912:	d12d      	bne.n	800e970 <HAL_RCC_ClockConfig+0x1b4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e914:	682b      	ldr	r3, [r5, #0]
 800e916:	f013 0f04 	tst.w	r3, #4
 800e91a:	d006      	beq.n	800e92a <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e91c:	4a16      	ldr	r2, [pc, #88]	; (800e978 <HAL_RCC_ClockConfig+0x1bc>)
 800e91e:	6893      	ldr	r3, [r2, #8]
 800e920:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800e924:	68e9      	ldr	r1, [r5, #12]
 800e926:	430b      	orrs	r3, r1
 800e928:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e92a:	682b      	ldr	r3, [r5, #0]
 800e92c:	f013 0f08 	tst.w	r3, #8
 800e930:	d007      	beq.n	800e942 <HAL_RCC_ClockConfig+0x186>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e932:	4a11      	ldr	r2, [pc, #68]	; (800e978 <HAL_RCC_ClockConfig+0x1bc>)
 800e934:	6893      	ldr	r3, [r2, #8]
 800e936:	6929      	ldr	r1, [r5, #16]
 800e938:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800e93c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800e940:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e942:	f7ff fecf 	bl	800e6e4 <HAL_RCC_GetSysClockFreq>
 800e946:	4b0c      	ldr	r3, [pc, #48]	; (800e978 <HAL_RCC_ClockConfig+0x1bc>)
 800e948:	689b      	ldr	r3, [r3, #8]
 800e94a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800e94e:	4a0b      	ldr	r2, [pc, #44]	; (800e97c <HAL_RCC_ClockConfig+0x1c0>)
 800e950:	5cd3      	ldrb	r3, [r2, r3]
 800e952:	40d8      	lsrs	r0, r3
 800e954:	4b0a      	ldr	r3, [pc, #40]	; (800e980 <HAL_RCC_ClockConfig+0x1c4>)
 800e956:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800e958:	4b0a      	ldr	r3, [pc, #40]	; (800e984 <HAL_RCC_ClockConfig+0x1c8>)
 800e95a:	6818      	ldr	r0, [r3, #0]
 800e95c:	f7fe fb4e 	bl	800cffc <HAL_InitTick>
}
 800e960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800e964:	2001      	movs	r0, #1
}
 800e966:	4770      	bx	lr
      return HAL_ERROR;
 800e968:	2001      	movs	r0, #1
 800e96a:	e7f9      	b.n	800e960 <HAL_RCC_ClockConfig+0x1a4>
        return HAL_ERROR;
 800e96c:	2001      	movs	r0, #1
 800e96e:	e7f7      	b.n	800e960 <HAL_RCC_ClockConfig+0x1a4>
      return HAL_ERROR;
 800e970:	2001      	movs	r0, #1
 800e972:	e7f5      	b.n	800e960 <HAL_RCC_ClockConfig+0x1a4>
 800e974:	40023c00 	.word	0x40023c00
 800e978:	40023800 	.word	0x40023800
 800e97c:	08011210 	.word	0x08011210
 800e980:	2000005c 	.word	0x2000005c
 800e984:	20000078 	.word	0x20000078

0800e988 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e988:	4b04      	ldr	r3, [pc, #16]	; (800e99c <HAL_RCC_GetPCLK1Freq+0x14>)
 800e98a:	689b      	ldr	r3, [r3, #8]
 800e98c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800e990:	4a03      	ldr	r2, [pc, #12]	; (800e9a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800e992:	5cd3      	ldrb	r3, [r2, r3]
 800e994:	4a03      	ldr	r2, [pc, #12]	; (800e9a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800e996:	6810      	ldr	r0, [r2, #0]
}
 800e998:	40d8      	lsrs	r0, r3
 800e99a:	4770      	bx	lr
 800e99c:	40023800 	.word	0x40023800
 800e9a0:	08011220 	.word	0x08011220
 800e9a4:	2000005c 	.word	0x2000005c

0800e9a8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e9a8:	4b04      	ldr	r3, [pc, #16]	; (800e9bc <HAL_RCC_GetPCLK2Freq+0x14>)
 800e9aa:	689b      	ldr	r3, [r3, #8]
 800e9ac:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800e9b0:	4a03      	ldr	r2, [pc, #12]	; (800e9c0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800e9b2:	5cd3      	ldrb	r3, [r2, r3]
 800e9b4:	4a03      	ldr	r2, [pc, #12]	; (800e9c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800e9b6:	6810      	ldr	r0, [r2, #0]
}
 800e9b8:	40d8      	lsrs	r0, r3
 800e9ba:	4770      	bx	lr
 800e9bc:	40023800 	.word	0x40023800
 800e9c0:	08011220 	.word	0x08011220
 800e9c4:	2000005c 	.word	0x2000005c

0800e9c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9cc:	b082      	sub	sp, #8
 800e9ce:	4681      	mov	r9, r0
 800e9d0:	460f      	mov	r7, r1
 800e9d2:	4616      	mov	r6, r2
 800e9d4:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e9d6:	f7fe fb55 	bl	800d084 <HAL_GetTick>
 800e9da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9dc:	442b      	add	r3, r5
 800e9de:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 800e9e2:	f7fe fb4f 	bl	800d084 <HAL_GetTick>
 800e9e6:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e9e8:	4b2d      	ldr	r3, [pc, #180]	; (800eaa0 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800e9f0:	fb08 f303 	mul.w	r3, r8, r3
 800e9f4:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e9f6:	f8d9 3000 	ldr.w	r3, [r9]
 800e9fa:	689c      	ldr	r4, [r3, #8]
 800e9fc:	ea37 0204 	bics.w	r2, r7, r4
 800ea00:	bf0c      	ite	eq
 800ea02:	f04f 0c01 	moveq.w	ip, #1
 800ea06:	f04f 0c00 	movne.w	ip, #0
 800ea0a:	45b4      	cmp	ip, r6
 800ea0c:	d044      	beq.n	800ea98 <SPI_WaitFlagStateUntilTimeout+0xd0>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ea0e:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ea12:	d0f2      	beq.n	800e9fa <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ea14:	f7fe fb36 	bl	800d084 <HAL_GetTick>
 800ea18:	eba0 000a 	sub.w	r0, r0, sl
 800ea1c:	4540      	cmp	r0, r8
 800ea1e:	d207      	bcs.n	800ea30 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ea20:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	bf08      	it	eq
 800ea26:	4698      	moveq	r8, r3
      }
      count--;
 800ea28:	9b01      	ldr	r3, [sp, #4]
 800ea2a:	3b01      	subs	r3, #1
 800ea2c:	9301      	str	r3, [sp, #4]
 800ea2e:	e7e2      	b.n	800e9f6 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ea30:	f8d9 2000 	ldr.w	r2, [r9]
 800ea34:	6853      	ldr	r3, [r2, #4]
 800ea36:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800ea3a:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea3c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ea40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea44:	d00c      	beq.n	800ea60 <SPI_WaitFlagStateUntilTimeout+0x98>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ea46:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 800ea4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea4e:	d016      	beq.n	800ea7e <SPI_WaitFlagStateUntilTimeout+0xb6>
        hspi->State = HAL_SPI_STATE_READY;
 800ea50:	2301      	movs	r3, #1
 800ea52:	f889 3051 	strb.w	r3, [r9, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800ea56:	2300      	movs	r3, #0
 800ea58:	f889 3050 	strb.w	r3, [r9, #80]	; 0x50
        return HAL_TIMEOUT;
 800ea5c:	2003      	movs	r0, #3
 800ea5e:	e01c      	b.n	800ea9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea60:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ea64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea68:	d002      	beq.n	800ea70 <SPI_WaitFlagStateUntilTimeout+0xa8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea6e:	d1ea      	bne.n	800ea46 <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 800ea70:	f8d9 2000 	ldr.w	r2, [r9]
 800ea74:	6813      	ldr	r3, [r2, #0]
 800ea76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea7a:	6013      	str	r3, [r2, #0]
 800ea7c:	e7e3      	b.n	800ea46 <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 800ea7e:	f8d9 2000 	ldr.w	r2, [r9]
 800ea82:	6813      	ldr	r3, [r2, #0]
 800ea84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ea88:	6013      	str	r3, [r2, #0]
 800ea8a:	f8d9 2000 	ldr.w	r2, [r9]
 800ea8e:	6813      	ldr	r3, [r2, #0]
 800ea90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ea94:	6013      	str	r3, [r2, #0]
 800ea96:	e7db      	b.n	800ea50 <SPI_WaitFlagStateUntilTimeout+0x88>
    }
  }

  return HAL_OK;
 800ea98:	2000      	movs	r0, #0
}
 800ea9a:	b002      	add	sp, #8
 800ea9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaa0:	2000005c 	.word	0x2000005c

0800eaa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800eaa4:	b510      	push	{r4, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800eaaa:	4b16      	ldr	r3, [pc, #88]	; (800eb04 <SPI_EndRxTxTransaction+0x60>)
 800eaac:	6818      	ldr	r0, [r3, #0]
 800eaae:	4b16      	ldr	r3, [pc, #88]	; (800eb08 <SPI_EndRxTxTransaction+0x64>)
 800eab0:	fba3 3000 	umull	r3, r0, r3, r0
 800eab4:	0d40      	lsrs	r0, r0, #21
 800eab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eaba:	fb03 f000 	mul.w	r0, r3, r0
 800eabe:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eac0:	6863      	ldr	r3, [r4, #4]
 800eac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eac6:	d00b      	beq.n	800eae0 <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800eac8:	9b03      	ldr	r3, [sp, #12]
 800eaca:	b1bb      	cbz	r3, 800eafc <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 800eacc:	9b03      	ldr	r3, [sp, #12]
 800eace:	3b01      	subs	r3, #1
 800ead0:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ead2:	6823      	ldr	r3, [r4, #0]
 800ead4:	689b      	ldr	r3, [r3, #8]
 800ead6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800eada:	d1f5      	bne.n	800eac8 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 800eadc:	2000      	movs	r0, #0
 800eade:	e00e      	b.n	800eafe <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eae0:	9200      	str	r2, [sp, #0]
 800eae2:	460b      	mov	r3, r1
 800eae4:	2200      	movs	r2, #0
 800eae6:	2180      	movs	r1, #128	; 0x80
 800eae8:	4620      	mov	r0, r4
 800eaea:	f7ff ff6d 	bl	800e9c8 <SPI_WaitFlagStateUntilTimeout>
 800eaee:	b130      	cbz	r0, 800eafe <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eaf0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800eaf2:	f043 0320 	orr.w	r3, r3, #32
 800eaf6:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800eaf8:	2003      	movs	r0, #3
 800eafa:	e000      	b.n	800eafe <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 800eafc:	2000      	movs	r0, #0
}
 800eafe:	b004      	add	sp, #16
 800eb00:	bd10      	pop	{r4, pc}
 800eb02:	bf00      	nop
 800eb04:	2000005c 	.word	0x2000005c
 800eb08:	165e9f81 	.word	0x165e9f81

0800eb0c <HAL_SPI_Init>:
  if (hspi == NULL)
 800eb0c:	2800      	cmp	r0, #0
 800eb0e:	d05a      	beq.n	800ebc6 <HAL_SPI_Init+0xba>
{
 800eb10:	b510      	push	{r4, lr}
 800eb12:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800eb14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800eb16:	b933      	cbnz	r3, 800eb26 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eb18:	6843      	ldr	r3, [r0, #4]
 800eb1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb1e:	d005      	beq.n	800eb2c <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800eb20:	2300      	movs	r3, #0
 800eb22:	61c3      	str	r3, [r0, #28]
 800eb24:	e002      	b.n	800eb2c <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800eb26:	2300      	movs	r3, #0
 800eb28:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800eb2a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800eb30:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d040      	beq.n	800ebba <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 800eb38:	2302      	movs	r3, #2
 800eb3a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800eb3e:	6822      	ldr	r2, [r4, #0]
 800eb40:	6813      	ldr	r3, [r2, #0]
 800eb42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb46:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb48:	6822      	ldr	r2, [r4, #0]
 800eb4a:	6863      	ldr	r3, [r4, #4]
 800eb4c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800eb50:	68a1      	ldr	r1, [r4, #8]
 800eb52:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800eb56:	430b      	orrs	r3, r1
 800eb58:	68e1      	ldr	r1, [r4, #12]
 800eb5a:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 800eb5e:	430b      	orrs	r3, r1
 800eb60:	6921      	ldr	r1, [r4, #16]
 800eb62:	f001 0102 	and.w	r1, r1, #2
 800eb66:	430b      	orrs	r3, r1
 800eb68:	6961      	ldr	r1, [r4, #20]
 800eb6a:	f001 0101 	and.w	r1, r1, #1
 800eb6e:	430b      	orrs	r3, r1
 800eb70:	69a1      	ldr	r1, [r4, #24]
 800eb72:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800eb76:	430b      	orrs	r3, r1
 800eb78:	69e1      	ldr	r1, [r4, #28]
 800eb7a:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800eb7e:	430b      	orrs	r3, r1
 800eb80:	6a21      	ldr	r1, [r4, #32]
 800eb82:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800eb86:	430b      	orrs	r3, r1
 800eb88:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800eb8a:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800eb8e:	430b      	orrs	r3, r1
 800eb90:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800eb92:	6821      	ldr	r1, [r4, #0]
 800eb94:	8b63      	ldrh	r3, [r4, #26]
 800eb96:	f003 0304 	and.w	r3, r3, #4
 800eb9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800eb9c:	f002 0210 	and.w	r2, r2, #16
 800eba0:	4313      	orrs	r3, r2
 800eba2:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eba4:	6822      	ldr	r2, [r4, #0]
 800eba6:	69d3      	ldr	r3, [r2, #28]
 800eba8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ebac:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ebae:	2000      	movs	r0, #0
 800ebb0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800ebb8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800ebba:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	f7fa f870 	bl	8008ca4 <HAL_SPI_MspInit>
 800ebc4:	e7b8      	b.n	800eb38 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800ebc6:	2001      	movs	r0, #1
}
 800ebc8:	4770      	bx	lr
	...

0800ebcc <HAL_SPI_Transmit_DMA>:
{
 800ebcc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 800ebce:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800ebd2:	2b01      	cmp	r3, #1
 800ebd4:	d061      	beq.n	800ec9a <HAL_SPI_Transmit_DMA+0xce>
 800ebd6:	4604      	mov	r4, r0
 800ebd8:	2301      	movs	r3, #1
 800ebda:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 800ebde:	f890 5051 	ldrb.w	r5, [r0, #81]	; 0x51
 800ebe2:	b2ed      	uxtb	r5, r5
 800ebe4:	429d      	cmp	r5, r3
 800ebe6:	d152      	bne.n	800ec8e <HAL_SPI_Transmit_DMA+0xc2>
  if ((pData == NULL) || (Size == 0U))
 800ebe8:	2900      	cmp	r1, #0
 800ebea:	d051      	beq.n	800ec90 <HAL_SPI_Transmit_DMA+0xc4>
 800ebec:	2a00      	cmp	r2, #0
 800ebee:	d04f      	beq.n	800ec90 <HAL_SPI_Transmit_DMA+0xc4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ebf0:	2303      	movs	r3, #3
 800ebf2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ebfa:	6301      	str	r1, [r0, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ebfc:	8682      	strh	r2, [r0, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ebfe:	86c2      	strh	r2, [r0, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ec00:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxISR       = NULL;
 800ec02:	6443      	str	r3, [r0, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ec04:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ec06:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ec08:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec0a:	6883      	ldr	r3, [r0, #8]
 800ec0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec10:	d02a      	beq.n	800ec68 <HAL_SPI_Transmit_DMA+0x9c>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ec12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ec14:	4a22      	ldr	r2, [pc, #136]	; (800eca0 <HAL_SPI_Transmit_DMA+0xd4>)
 800ec16:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800ec18:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ec1a:	4a22      	ldr	r2, [pc, #136]	; (800eca4 <HAL_SPI_Transmit_DMA+0xd8>)
 800ec1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ec1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ec20:	4a21      	ldr	r2, [pc, #132]	; (800eca8 <HAL_SPI_Transmit_DMA+0xdc>)
 800ec22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback = NULL;
 800ec24:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ec26:	2200      	movs	r2, #0
 800ec28:	635a      	str	r2, [r3, #52]	; 0x34
                                 hspi->TxXferCount))
 800ec2a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ec2c:	6822      	ldr	r2, [r4, #0]
 800ec2e:	b29b      	uxth	r3, r3
 800ec30:	320c      	adds	r2, #12
 800ec32:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ec34:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800ec36:	f7fe fe2f 	bl	800d898 <HAL_DMA_Start_IT>
 800ec3a:	4601      	mov	r1, r0
 800ec3c:	b9f8      	cbnz	r0, 800ec7e <HAL_SPI_Transmit_DMA+0xb2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ec3e:	6823      	ldr	r3, [r4, #0]
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	f012 0f40 	tst.w	r2, #64	; 0x40
 800ec46:	d103      	bne.n	800ec50 <HAL_SPI_Transmit_DMA+0x84>
    __HAL_SPI_ENABLE(hspi);
 800ec48:	681a      	ldr	r2, [r3, #0]
 800ec4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec4e:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ec50:	6822      	ldr	r2, [r4, #0]
 800ec52:	6853      	ldr	r3, [r2, #4]
 800ec54:	f043 0320 	orr.w	r3, r3, #32
 800ec58:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ec5a:	6822      	ldr	r2, [r4, #0]
 800ec5c:	6853      	ldr	r3, [r2, #4]
 800ec5e:	f043 0302 	orr.w	r3, r3, #2
 800ec62:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ec64:	460d      	mov	r5, r1
 800ec66:	e013      	b.n	800ec90 <HAL_SPI_Transmit_DMA+0xc4>
    __HAL_SPI_DISABLE(hspi);
 800ec68:	6802      	ldr	r2, [r0, #0]
 800ec6a:	6813      	ldr	r3, [r2, #0]
 800ec6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec70:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800ec72:	6802      	ldr	r2, [r0, #0]
 800ec74:	6813      	ldr	r3, [r2, #0]
 800ec76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ec7a:	6013      	str	r3, [r2, #0]
 800ec7c:	e7c9      	b.n	800ec12 <HAL_SPI_Transmit_DMA+0x46>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ec7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ec80:	f043 0310 	orr.w	r3, r3, #16
 800ec84:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800ec86:	2301      	movs	r3, #1
 800ec88:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    goto error;
 800ec8c:	e000      	b.n	800ec90 <HAL_SPI_Transmit_DMA+0xc4>
    errorcode = HAL_BUSY;
 800ec8e:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 800ec90:	2300      	movs	r3, #0
 800ec92:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800ec96:	4628      	mov	r0, r5
 800ec98:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hspi);
 800ec9a:	2502      	movs	r5, #2
 800ec9c:	e7fb      	b.n	800ec96 <HAL_SPI_Transmit_DMA+0xca>
 800ec9e:	bf00      	nop
 800eca0:	0800ecb1 	.word	0x0800ecb1
 800eca4:	0800ecdf 	.word	0x0800ecdf
 800eca8:	0800ecbd 	.word	0x0800ecbd

0800ecac <HAL_SPI_TxCpltCallback>:
}
 800ecac:	4770      	bx	lr

0800ecae <HAL_SPI_TxHalfCpltCallback>:
}
 800ecae:	4770      	bx	lr

0800ecb0 <SPI_DMAHalfTransmitCplt>:
{
 800ecb0:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ecb2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800ecb4:	f7ff fffb 	bl	800ecae <HAL_SPI_TxHalfCpltCallback>
}
 800ecb8:	bd08      	pop	{r3, pc}

0800ecba <HAL_SPI_ErrorCallback>:
}
 800ecba:	4770      	bx	lr

0800ecbc <SPI_DMAError>:
{
 800ecbc:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ecbe:	6a40      	ldr	r0, [r0, #36]	; 0x24
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ecc0:	6802      	ldr	r2, [r0, #0]
 800ecc2:	6853      	ldr	r3, [r2, #4]
 800ecc4:	f023 0303 	bic.w	r3, r3, #3
 800ecc8:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ecca:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800eccc:	f043 0310 	orr.w	r3, r3, #16
 800ecd0:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 800ecd8:	f7ff ffef 	bl	800ecba <HAL_SPI_ErrorCallback>
}
 800ecdc:	bd08      	pop	{r3, pc}

0800ecde <SPI_DMATransmitCplt>:
{
 800ecde:	b530      	push	{r4, r5, lr}
 800ece0:	b083      	sub	sp, #12
 800ece2:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ece4:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 800ece6:	f7fe f9cd 	bl	800d084 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ecea:	682b      	ldr	r3, [r5, #0]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	f013 0f20 	tst.w	r3, #32
 800ecf2:	d123      	bne.n	800ed3c <SPI_DMATransmitCplt+0x5e>
 800ecf4:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ecf6:	6821      	ldr	r1, [r4, #0]
 800ecf8:	684b      	ldr	r3, [r1, #4]
 800ecfa:	f023 0320 	bic.w	r3, r3, #32
 800ecfe:	604b      	str	r3, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ed00:	6821      	ldr	r1, [r4, #0]
 800ed02:	684b      	ldr	r3, [r1, #4]
 800ed04:	f023 0302 	bic.w	r3, r3, #2
 800ed08:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ed0a:	2164      	movs	r1, #100	; 0x64
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	f7ff fec9 	bl	800eaa4 <SPI_EndRxTxTransaction>
 800ed12:	b118      	cbz	r0, 800ed1c <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed14:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ed16:	f043 0320 	orr.w	r3, r3, #32
 800ed1a:	6563      	str	r3, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ed1c:	68a3      	ldr	r3, [r4, #8]
 800ed1e:	b933      	cbnz	r3, 800ed2e <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ed20:	9301      	str	r3, [sp, #4]
 800ed22:	6823      	ldr	r3, [r4, #0]
 800ed24:	68da      	ldr	r2, [r3, #12]
 800ed26:	9201      	str	r2, [sp, #4]
 800ed28:	689b      	ldr	r3, [r3, #8]
 800ed2a:	9301      	str	r3, [sp, #4]
 800ed2c:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800ed32:	2301      	movs	r3, #1
 800ed34:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ed38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ed3a:	b923      	cbnz	r3, 800ed46 <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	f7ff ffb5 	bl	800ecac <HAL_SPI_TxCpltCallback>
}
 800ed42:	b003      	add	sp, #12
 800ed44:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800ed46:	4620      	mov	r0, r4
 800ed48:	f7ff ffb7 	bl	800ecba <HAL_SPI_ErrorCallback>
      return;
 800ed4c:	e7f9      	b.n	800ed42 <SPI_DMATransmitCplt+0x64>
	...

0800ed50 <TIM_Base_SetConfig>:
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ed50:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ed52:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ed56:	d026      	beq.n	800eda6 <TIM_Base_SetConfig+0x56>
 800ed58:	4a1f      	ldr	r2, [pc, #124]	; (800edd8 <TIM_Base_SetConfig+0x88>)
 800ed5a:	4290      	cmp	r0, r2
 800ed5c:	d01e      	beq.n	800ed9c <TIM_Base_SetConfig+0x4c>
 800ed5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ed62:	4290      	cmp	r0, r2
 800ed64:	d015      	beq.n	800ed92 <TIM_Base_SetConfig+0x42>
 800ed66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ed6a:	4290      	cmp	r0, r2
 800ed6c:	d00c      	beq.n	800ed88 <TIM_Base_SetConfig+0x38>
 800ed6e:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 800ed72:	4290      	cmp	r0, r2
 800ed74:	d02b      	beq.n	800edce <TIM_Base_SetConfig+0x7e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ed76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ed7a:	4290      	cmp	r0, r2
 800ed7c:	d017      	beq.n	800edae <TIM_Base_SetConfig+0x5e>
 800ed7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ed82:	4290      	cmp	r0, r2
 800ed84:	d117      	bne.n	800edb6 <TIM_Base_SetConfig+0x66>
 800ed86:	e012      	b.n	800edae <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ed88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ed8c:	684a      	ldr	r2, [r1, #4]
 800ed8e:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ed90:	e00d      	b.n	800edae <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ed92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ed96:	684a      	ldr	r2, [r1, #4]
 800ed98:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ed9a:	e008      	b.n	800edae <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ed9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800eda0:	684a      	ldr	r2, [r1, #4]
 800eda2:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eda4:	e003      	b.n	800edae <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eda6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800edaa:	684a      	ldr	r2, [r1, #4]
 800edac:	4313      	orrs	r3, r2
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800edae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800edb2:	68ca      	ldr	r2, [r1, #12]
 800edb4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800edb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800edba:	690a      	ldr	r2, [r1, #16]
 800edbc:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800edbe:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800edc0:	688b      	ldr	r3, [r1, #8]
 800edc2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800edc4:	680b      	ldr	r3, [r1, #0]
 800edc6:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800edc8:	2301      	movs	r3, #1
 800edca:	6143      	str	r3, [r0, #20]
}
 800edcc:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800edce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800edd2:	684a      	ldr	r2, [r1, #4]
 800edd4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800edd6:	e7ea      	b.n	800edae <TIM_Base_SetConfig+0x5e>
 800edd8:	40000400 	.word	0x40000400

0800eddc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eddc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800edde:	6a03      	ldr	r3, [r0, #32]
 800ede0:	f023 0301 	bic.w	r3, r3, #1
 800ede4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ede6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ede8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800edea:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800edec:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800edf0:	680d      	ldr	r5, [r1, #0]
 800edf2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800edf4:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800edf8:	688d      	ldr	r5, [r1, #8]
 800edfa:	432b      	orrs	r3, r5

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edfc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800edfe:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ee00:	684a      	ldr	r2, [r1, #4]
 800ee02:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee04:	6203      	str	r3, [r0, #32]
}
 800ee06:	bc30      	pop	{r4, r5}
 800ee08:	4770      	bx	lr

0800ee0a <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ee0a:	b410      	push	{r4}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee0c:	6a03      	ldr	r3, [r0, #32]
 800ee0e:	f023 0310 	bic.w	r3, r3, #16
 800ee12:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee14:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee16:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ee18:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ee1a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ee1e:	f8d1 c000 	ldr.w	ip, [r1]
 800ee22:	ea42 220c 	orr.w	r2, r2, ip, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ee26:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ee2a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800ee2e:	ea43 130c 	orr.w	r3, r3, ip, lsl #4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee32:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ee34:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ee36:	684a      	ldr	r2, [r1, #4]
 800ee38:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee3a:	6203      	str	r3, [r0, #32]
}
 800ee3c:	bc10      	pop	{r4}
 800ee3e:	4770      	bx	lr

0800ee40 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ee40:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ee44:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ee46:	f04f 0c01 	mov.w	ip, #1
 800ee4a:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 800ee4e:	ea23 030c 	bic.w	r3, r3, ip
 800ee52:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ee54:	6a03      	ldr	r3, [r0, #32]
 800ee56:	408a      	lsls	r2, r1
 800ee58:	431a      	orrs	r2, r3
 800ee5a:	6202      	str	r2, [r0, #32]
}
 800ee5c:	4770      	bx	lr

0800ee5e <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800ee5e:	b300      	cbz	r0, 800eea2 <HAL_TIM_Base_Init+0x44>
{
 800ee60:	b510      	push	{r4, lr}
 800ee62:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800ee64:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800ee68:	b1b3      	cbz	r3, 800ee98 <HAL_TIM_Base_Init+0x3a>
  htim->State = HAL_TIM_STATE_BUSY;
 800ee6a:	2302      	movs	r3, #2
 800ee6c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee70:	4621      	mov	r1, r4
 800ee72:	f851 0b04 	ldr.w	r0, [r1], #4
 800ee76:	f7ff ff6b 	bl	800ed50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee80:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 800ee84:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
 800ee88:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800ee8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;
 800ee90:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800ee94:	2000      	movs	r0, #0
}
 800ee96:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800ee98:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800ee9c:	f7fa f944 	bl	8009128 <HAL_TIM_Base_MspInit>
 800eea0:	e7e3      	b.n	800ee6a <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800eea2:	2001      	movs	r0, #1
}
 800eea4:	4770      	bx	lr
	...

0800eea8 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800eea8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800eeac:	b2db      	uxtb	r3, r3
 800eeae:	2b01      	cmp	r3, #1
 800eeb0:	d122      	bne.n	800eef8 <HAL_TIM_Base_Start+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 800eeb2:	2302      	movs	r3, #2
 800eeb4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eeb8:	6803      	ldr	r3, [r0, #0]
 800eeba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eebe:	d010      	beq.n	800eee2 <HAL_TIM_Base_Start+0x3a>
 800eec0:	4a0f      	ldr	r2, [pc, #60]	; (800ef00 <HAL_TIM_Base_Start+0x58>)
 800eec2:	4293      	cmp	r3, r2
 800eec4:	d00d      	beq.n	800eee2 <HAL_TIM_Base_Start+0x3a>
 800eec6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d009      	beq.n	800eee2 <HAL_TIM_Base_Start+0x3a>
 800eece:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800eed2:	4293      	cmp	r3, r2
 800eed4:	d005      	beq.n	800eee2 <HAL_TIM_Base_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 800eed6:	681a      	ldr	r2, [r3, #0]
 800eed8:	f042 0201 	orr.w	r2, r2, #1
 800eedc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800eede:	2000      	movs	r0, #0
 800eee0:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eee2:	689a      	ldr	r2, [r3, #8]
 800eee4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eee8:	2a06      	cmp	r2, #6
 800eeea:	d007      	beq.n	800eefc <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 800eeec:	681a      	ldr	r2, [r3, #0]
 800eeee:	f042 0201 	orr.w	r2, r2, #1
 800eef2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800eef4:	2000      	movs	r0, #0
 800eef6:	4770      	bx	lr
    return HAL_ERROR;
 800eef8:	2001      	movs	r0, #1
 800eefa:	4770      	bx	lr
  return HAL_OK;
 800eefc:	2000      	movs	r0, #0
}
 800eefe:	4770      	bx	lr
 800ef00:	40000400 	.word	0x40000400

0800ef04 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800ef04:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	2b01      	cmp	r3, #1
 800ef0c:	d127      	bne.n	800ef5e <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 800ef0e:	2302      	movs	r3, #2
 800ef10:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ef14:	6802      	ldr	r2, [r0, #0]
 800ef16:	68d3      	ldr	r3, [r2, #12]
 800ef18:	f043 0301 	orr.w	r3, r3, #1
 800ef1c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef1e:	6803      	ldr	r3, [r0, #0]
 800ef20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef24:	d010      	beq.n	800ef48 <HAL_TIM_Base_Start_IT+0x44>
 800ef26:	4a10      	ldr	r2, [pc, #64]	; (800ef68 <HAL_TIM_Base_Start_IT+0x64>)
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d00d      	beq.n	800ef48 <HAL_TIM_Base_Start_IT+0x44>
 800ef2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ef30:	4293      	cmp	r3, r2
 800ef32:	d009      	beq.n	800ef48 <HAL_TIM_Base_Start_IT+0x44>
 800ef34:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d005      	beq.n	800ef48 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 800ef3c:	681a      	ldr	r2, [r3, #0]
 800ef3e:	f042 0201 	orr.w	r2, r2, #1
 800ef42:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800ef44:	2000      	movs	r0, #0
 800ef46:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef48:	689a      	ldr	r2, [r3, #8]
 800ef4a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef4e:	2a06      	cmp	r2, #6
 800ef50:	d007      	beq.n	800ef62 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 800ef52:	681a      	ldr	r2, [r3, #0]
 800ef54:	f042 0201 	orr.w	r2, r2, #1
 800ef58:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800ef5a:	2000      	movs	r0, #0
 800ef5c:	4770      	bx	lr
    return HAL_ERROR;
 800ef5e:	2001      	movs	r0, #1
 800ef60:	4770      	bx	lr
  return HAL_OK;
 800ef62:	2000      	movs	r0, #0
}
 800ef64:	4770      	bx	lr
 800ef66:	bf00      	nop
 800ef68:	40000400 	.word	0x40000400

0800ef6c <HAL_TIM_OC_MspInit>:
}
 800ef6c:	4770      	bx	lr

0800ef6e <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800ef6e:	b300      	cbz	r0, 800efb2 <HAL_TIM_OC_Init+0x44>
{
 800ef70:	b510      	push	{r4, lr}
 800ef72:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800ef74:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800ef78:	b1b3      	cbz	r3, 800efa8 <HAL_TIM_OC_Init+0x3a>
  htim->State = HAL_TIM_STATE_BUSY;
 800ef7a:	2302      	movs	r3, #2
 800ef7c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ef80:	4621      	mov	r1, r4
 800ef82:	f851 0b04 	ldr.w	r0, [r1], #4
 800ef86:	f7ff fee3 	bl	800ed50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef90:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 800ef94:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
 800ef98:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800ef9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;
 800efa0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800efa4:	2000      	movs	r0, #0
}
 800efa6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800efa8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_OC_MspInit(htim);
 800efac:	f7ff ffde 	bl	800ef6c <HAL_TIM_OC_MspInit>
 800efb0:	e7e3      	b.n	800ef7a <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 800efb2:	2001      	movs	r0, #1
}
 800efb4:	4770      	bx	lr
	...

0800efb8 <HAL_TIM_OC_Start_IT>:
{
 800efb8:	b510      	push	{r4, lr}
 800efba:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800efbc:	460b      	mov	r3, r1
 800efbe:	bb39      	cbnz	r1, 800f010 <HAL_TIM_OC_Start_IT+0x58>
 800efc0:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 800efc4:	b2d2      	uxtb	r2, r2
 800efc6:	2a01      	cmp	r2, #1
 800efc8:	f040 8080 	bne.w	800f0cc <HAL_TIM_OC_Start_IT+0x114>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800efcc:	2202      	movs	r2, #2
 800efce:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800efd2:	6821      	ldr	r1, [r4, #0]
 800efd4:	68ca      	ldr	r2, [r1, #12]
 800efd6:	f042 0202 	orr.w	r2, r2, #2
 800efda:	60ca      	str	r2, [r1, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800efdc:	2201      	movs	r2, #1
 800efde:	4619      	mov	r1, r3
 800efe0:	6820      	ldr	r0, [r4, #0]
 800efe2:	f7ff ff2d 	bl	800ee40 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800efe6:	6823      	ldr	r3, [r4, #0]
 800efe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800efec:	d063      	beq.n	800f0b6 <HAL_TIM_OC_Start_IT+0xfe>
 800efee:	4a3b      	ldr	r2, [pc, #236]	; (800f0dc <HAL_TIM_OC_Start_IT+0x124>)
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d060      	beq.n	800f0b6 <HAL_TIM_OC_Start_IT+0xfe>
 800eff4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800eff8:	4293      	cmp	r3, r2
 800effa:	d05c      	beq.n	800f0b6 <HAL_TIM_OC_Start_IT+0xfe>
 800effc:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800f000:	4293      	cmp	r3, r2
 800f002:	d058      	beq.n	800f0b6 <HAL_TIM_OC_Start_IT+0xfe>
    __HAL_TIM_ENABLE(htim);
 800f004:	681a      	ldr	r2, [r3, #0]
 800f006:	f042 0201 	orr.w	r2, r2, #1
 800f00a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800f00c:	2000      	movs	r0, #0
 800f00e:	e05c      	b.n	800f0ca <HAL_TIM_OC_Start_IT+0x112>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f010:	2904      	cmp	r1, #4
 800f012:	d033      	beq.n	800f07c <HAL_TIM_OC_Start_IT+0xc4>
 800f014:	2908      	cmp	r1, #8
 800f016:	bf0c      	ite	eq
 800f018:	f890 203c 	ldrbeq.w	r2, [r0, #60]	; 0x3c
 800f01c:	f890 203d 	ldrbne.w	r2, [r0, #61]	; 0x3d
 800f020:	b2d2      	uxtb	r2, r2
 800f022:	3a01      	subs	r2, #1
 800f024:	bf18      	it	ne
 800f026:	2201      	movne	r2, #1
 800f028:	2a00      	cmp	r2, #0
 800f02a:	d155      	bne.n	800f0d8 <HAL_TIM_OC_Start_IT+0x120>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d0cd      	beq.n	800efcc <HAL_TIM_OC_Start_IT+0x14>
 800f030:	2b04      	cmp	r3, #4
 800f032:	d028      	beq.n	800f086 <HAL_TIM_OC_Start_IT+0xce>
 800f034:	2b08      	cmp	r3, #8
 800f036:	d02f      	beq.n	800f098 <HAL_TIM_OC_Start_IT+0xe0>
 800f038:	2202      	movs	r2, #2
 800f03a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  switch (Channel)
 800f03e:	2b0c      	cmp	r3, #12
 800f040:	d8cc      	bhi.n	800efdc <HAL_TIM_OC_Start_IT+0x24>
 800f042:	a201      	add	r2, pc, #4	; (adr r2, 800f048 <HAL_TIM_OC_Start_IT+0x90>)
 800f044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f048:	0800efd3 	.word	0x0800efd3
 800f04c:	0800efdd 	.word	0x0800efdd
 800f050:	0800efdd 	.word	0x0800efdd
 800f054:	0800efdd 	.word	0x0800efdd
 800f058:	0800f08d 	.word	0x0800f08d
 800f05c:	0800efdd 	.word	0x0800efdd
 800f060:	0800efdd 	.word	0x0800efdd
 800f064:	0800efdd 	.word	0x0800efdd
 800f068:	0800f09f 	.word	0x0800f09f
 800f06c:	0800efdd 	.word	0x0800efdd
 800f070:	0800efdd 	.word	0x0800efdd
 800f074:	0800efdd 	.word	0x0800efdd
 800f078:	0800f0ab 	.word	0x0800f0ab
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f07c:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
 800f080:	b2d2      	uxtb	r2, r2
 800f082:	2a01      	cmp	r2, #1
 800f084:	d124      	bne.n	800f0d0 <HAL_TIM_OC_Start_IT+0x118>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f086:	2202      	movs	r2, #2
 800f088:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f08c:	6821      	ldr	r1, [r4, #0]
 800f08e:	68ca      	ldr	r2, [r1, #12]
 800f090:	f042 0204 	orr.w	r2, r2, #4
 800f094:	60ca      	str	r2, [r1, #12]
      break;
 800f096:	e7a1      	b.n	800efdc <HAL_TIM_OC_Start_IT+0x24>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f098:	2202      	movs	r2, #2
 800f09a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f09e:	6821      	ldr	r1, [r4, #0]
 800f0a0:	68ca      	ldr	r2, [r1, #12]
 800f0a2:	f042 0208 	orr.w	r2, r2, #8
 800f0a6:	60ca      	str	r2, [r1, #12]
      break;
 800f0a8:	e798      	b.n	800efdc <HAL_TIM_OC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800f0aa:	6821      	ldr	r1, [r4, #0]
 800f0ac:	68ca      	ldr	r2, [r1, #12]
 800f0ae:	f042 0210 	orr.w	r2, r2, #16
 800f0b2:	60ca      	str	r2, [r1, #12]
      break;
 800f0b4:	e792      	b.n	800efdc <HAL_TIM_OC_Start_IT+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f0b6:	689a      	ldr	r2, [r3, #8]
 800f0b8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0bc:	2a06      	cmp	r2, #6
 800f0be:	d009      	beq.n	800f0d4 <HAL_TIM_OC_Start_IT+0x11c>
      __HAL_TIM_ENABLE(htim);
 800f0c0:	681a      	ldr	r2, [r3, #0]
 800f0c2:	f042 0201 	orr.w	r2, r2, #1
 800f0c6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800f0c8:	2000      	movs	r0, #0
}
 800f0ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800f0cc:	2001      	movs	r0, #1
 800f0ce:	e7fc      	b.n	800f0ca <HAL_TIM_OC_Start_IT+0x112>
 800f0d0:	2001      	movs	r0, #1
 800f0d2:	e7fa      	b.n	800f0ca <HAL_TIM_OC_Start_IT+0x112>
  return HAL_OK;
 800f0d4:	2000      	movs	r0, #0
 800f0d6:	e7f8      	b.n	800f0ca <HAL_TIM_OC_Start_IT+0x112>
    return HAL_ERROR;
 800f0d8:	2001      	movs	r0, #1
 800f0da:	e7f6      	b.n	800f0ca <HAL_TIM_OC_Start_IT+0x112>
 800f0dc:	40000400 	.word	0x40000400

0800f0e0 <HAL_TIM_OC_Stop_IT>:
{
 800f0e0:	b538      	push	{r3, r4, r5, lr}
 800f0e2:	4604      	mov	r4, r0
 800f0e4:	460d      	mov	r5, r1
  switch (Channel)
 800f0e6:	290c      	cmp	r1, #12
 800f0e8:	d85c      	bhi.n	800f1a4 <HAL_TIM_OC_Stop_IT+0xc4>
 800f0ea:	e8df f001 	tbb	[pc, r1]
 800f0ee:	5b07      	.short	0x5b07
 800f0f0:	5b225b5b 	.word	0x5b225b5b
 800f0f4:	5b365b5b 	.word	0x5b365b5b
 800f0f8:	5b5b      	.short	0x5b5b
 800f0fa:	4a          	.byte	0x4a
 800f0fb:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800f0fc:	6802      	ldr	r2, [r0, #0]
 800f0fe:	68d3      	ldr	r3, [r2, #12]
 800f100:	f023 0302 	bic.w	r3, r3, #2
 800f104:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f106:	2200      	movs	r2, #0
 800f108:	4611      	mov	r1, r2
 800f10a:	6800      	ldr	r0, [r0, #0]
 800f10c:	f7ff fe98 	bl	800ee40 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800f110:	6823      	ldr	r3, [r4, #0]
 800f112:	6a19      	ldr	r1, [r3, #32]
 800f114:	f241 1211 	movw	r2, #4369	; 0x1111
 800f118:	4211      	tst	r1, r2
 800f11a:	d105      	bne.n	800f128 <HAL_TIM_OC_Stop_IT+0x48>
 800f11c:	681a      	ldr	r2, [r3, #0]
 800f11e:	f022 0201 	bic.w	r2, r2, #1
 800f122:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f124:	2d00      	cmp	r5, #0
 800f126:	d148      	bne.n	800f1ba <HAL_TIM_OC_Stop_IT+0xda>
 800f128:	2301      	movs	r3, #1
 800f12a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800f12e:	2000      	movs	r0, #0
 800f130:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800f132:	6802      	ldr	r2, [r0, #0]
 800f134:	68d3      	ldr	r3, [r2, #12]
 800f136:	f023 0304 	bic.w	r3, r3, #4
 800f13a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f13c:	2200      	movs	r2, #0
 800f13e:	2104      	movs	r1, #4
 800f140:	6800      	ldr	r0, [r0, #0]
 800f142:	f7ff fe7d 	bl	800ee40 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800f146:	6823      	ldr	r3, [r4, #0]
 800f148:	6a19      	ldr	r1, [r3, #32]
 800f14a:	f241 1211 	movw	r2, #4369	; 0x1111
 800f14e:	4211      	tst	r1, r2
 800f150:	d0e4      	beq.n	800f11c <HAL_TIM_OC_Stop_IT+0x3c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f152:	2301      	movs	r3, #1
 800f154:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
 800f158:	e7e9      	b.n	800f12e <HAL_TIM_OC_Stop_IT+0x4e>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800f15a:	6802      	ldr	r2, [r0, #0]
 800f15c:	68d3      	ldr	r3, [r2, #12]
 800f15e:	f023 0308 	bic.w	r3, r3, #8
 800f162:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f164:	2200      	movs	r2, #0
 800f166:	2108      	movs	r1, #8
 800f168:	6800      	ldr	r0, [r0, #0]
 800f16a:	f7ff fe69 	bl	800ee40 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800f16e:	6823      	ldr	r3, [r4, #0]
 800f170:	6a19      	ldr	r1, [r3, #32]
 800f172:	f241 1211 	movw	r2, #4369	; 0x1111
 800f176:	4211      	tst	r1, r2
 800f178:	d0d0      	beq.n	800f11c <HAL_TIM_OC_Stop_IT+0x3c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f17a:	2301      	movs	r3, #1
 800f17c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800f180:	e7d5      	b.n	800f12e <HAL_TIM_OC_Stop_IT+0x4e>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800f182:	6802      	ldr	r2, [r0, #0]
 800f184:	68d3      	ldr	r3, [r2, #12]
 800f186:	f023 0310 	bic.w	r3, r3, #16
 800f18a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f18c:	2200      	movs	r2, #0
 800f18e:	210c      	movs	r1, #12
 800f190:	6800      	ldr	r0, [r0, #0]
 800f192:	f7ff fe55 	bl	800ee40 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800f196:	6823      	ldr	r3, [r4, #0]
 800f198:	6a19      	ldr	r1, [r3, #32]
 800f19a:	f241 1211 	movw	r2, #4369	; 0x1111
 800f19e:	4211      	tst	r1, r2
 800f1a0:	d10f      	bne.n	800f1c2 <HAL_TIM_OC_Stop_IT+0xe2>
 800f1a2:	e7bb      	b.n	800f11c <HAL_TIM_OC_Stop_IT+0x3c>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	6800      	ldr	r0, [r0, #0]
 800f1a8:	f7ff fe4a 	bl	800ee40 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800f1ac:	6823      	ldr	r3, [r4, #0]
 800f1ae:	6a19      	ldr	r1, [r3, #32]
 800f1b0:	f241 1211 	movw	r2, #4369	; 0x1111
 800f1b4:	4211      	tst	r1, r2
 800f1b6:	d1b5      	bne.n	800f124 <HAL_TIM_OC_Stop_IT+0x44>
 800f1b8:	e7b0      	b.n	800f11c <HAL_TIM_OC_Stop_IT+0x3c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f1ba:	2d04      	cmp	r5, #4
 800f1bc:	d0c9      	beq.n	800f152 <HAL_TIM_OC_Stop_IT+0x72>
 800f1be:	2d08      	cmp	r5, #8
 800f1c0:	d0db      	beq.n	800f17a <HAL_TIM_OC_Stop_IT+0x9a>
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800f1c8:	e7b1      	b.n	800f12e <HAL_TIM_OC_Stop_IT+0x4e>

0800f1ca <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800f1ca:	b300      	cbz	r0, 800f20e <HAL_TIM_PWM_Init+0x44>
{
 800f1cc:	b510      	push	{r4, lr}
 800f1ce:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800f1d0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800f1d4:	b1b3      	cbz	r3, 800f204 <HAL_TIM_PWM_Init+0x3a>
  htim->State = HAL_TIM_STATE_BUSY;
 800f1d6:	2302      	movs	r3, #2
 800f1d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f1dc:	4621      	mov	r1, r4
 800f1de:	f851 0b04 	ldr.w	r0, [r1], #4
 800f1e2:	f7ff fdb5 	bl	800ed50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f1ec:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 800f1f0:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
 800f1f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800f1f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;
 800f1fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800f200:	2000      	movs	r0, #0
}
 800f202:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800f204:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 800f208:	f7f9 ff78 	bl	80090fc <HAL_TIM_PWM_MspInit>
 800f20c:	e7e3      	b.n	800f1d6 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800f20e:	2001      	movs	r0, #1
}
 800f210:	4770      	bx	lr
	...

0800f214 <HAL_TIM_PWM_Start>:
{
 800f214:	b510      	push	{r4, lr}
 800f216:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f218:	460b      	mov	r3, r1
 800f21a:	bb09      	cbnz	r1, 800f260 <HAL_TIM_PWM_Start+0x4c>
 800f21c:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 800f220:	b2d2      	uxtb	r2, r2
 800f222:	2a01      	cmp	r2, #1
 800f224:	d146      	bne.n	800f2b4 <HAL_TIM_PWM_Start+0xa0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f226:	2202      	movs	r2, #2
 800f228:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f22c:	2201      	movs	r2, #1
 800f22e:	4619      	mov	r1, r3
 800f230:	6820      	ldr	r0, [r4, #0]
 800f232:	f7ff fe05 	bl	800ee40 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f236:	6823      	ldr	r3, [r4, #0]
 800f238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f23c:	d02f      	beq.n	800f29e <HAL_TIM_PWM_Start+0x8a>
 800f23e:	4a21      	ldr	r2, [pc, #132]	; (800f2c4 <HAL_TIM_PWM_Start+0xb0>)
 800f240:	4293      	cmp	r3, r2
 800f242:	d02c      	beq.n	800f29e <HAL_TIM_PWM_Start+0x8a>
 800f244:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f248:	4293      	cmp	r3, r2
 800f24a:	d028      	beq.n	800f29e <HAL_TIM_PWM_Start+0x8a>
 800f24c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800f250:	4293      	cmp	r3, r2
 800f252:	d024      	beq.n	800f29e <HAL_TIM_PWM_Start+0x8a>
    __HAL_TIM_ENABLE(htim);
 800f254:	681a      	ldr	r2, [r3, #0]
 800f256:	f042 0201 	orr.w	r2, r2, #1
 800f25a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800f25c:	2000      	movs	r0, #0
 800f25e:	e028      	b.n	800f2b2 <HAL_TIM_PWM_Start+0x9e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f260:	2904      	cmp	r1, #4
 800f262:	d013      	beq.n	800f28c <HAL_TIM_PWM_Start+0x78>
 800f264:	2908      	cmp	r1, #8
 800f266:	bf0c      	ite	eq
 800f268:	f890 203c 	ldrbeq.w	r2, [r0, #60]	; 0x3c
 800f26c:	f890 203d 	ldrbne.w	r2, [r0, #61]	; 0x3d
 800f270:	b2d2      	uxtb	r2, r2
 800f272:	3a01      	subs	r2, #1
 800f274:	bf18      	it	ne
 800f276:	2201      	movne	r2, #1
 800f278:	bb12      	cbnz	r2, 800f2c0 <HAL_TIM_PWM_Start+0xac>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f27a:	2b08      	cmp	r3, #8
 800f27c:	f04f 0202 	mov.w	r2, #2
 800f280:	bf0c      	ite	eq
 800f282:	f884 203c 	strbeq.w	r2, [r4, #60]	; 0x3c
 800f286:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
 800f28a:	e7cf      	b.n	800f22c <HAL_TIM_PWM_Start+0x18>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f28c:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
 800f290:	b2d2      	uxtb	r2, r2
 800f292:	2a01      	cmp	r2, #1
 800f294:	d110      	bne.n	800f2b8 <HAL_TIM_PWM_Start+0xa4>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f296:	2202      	movs	r2, #2
 800f298:	f880 203b 	strb.w	r2, [r0, #59]	; 0x3b
 800f29c:	e7c6      	b.n	800f22c <HAL_TIM_PWM_Start+0x18>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f29e:	689a      	ldr	r2, [r3, #8]
 800f2a0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2a4:	2a06      	cmp	r2, #6
 800f2a6:	d009      	beq.n	800f2bc <HAL_TIM_PWM_Start+0xa8>
      __HAL_TIM_ENABLE(htim);
 800f2a8:	681a      	ldr	r2, [r3, #0]
 800f2aa:	f042 0201 	orr.w	r2, r2, #1
 800f2ae:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800f2b0:	2000      	movs	r0, #0
}
 800f2b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800f2b4:	2001      	movs	r0, #1
 800f2b6:	e7fc      	b.n	800f2b2 <HAL_TIM_PWM_Start+0x9e>
 800f2b8:	2001      	movs	r0, #1
 800f2ba:	e7fa      	b.n	800f2b2 <HAL_TIM_PWM_Start+0x9e>
  return HAL_OK;
 800f2bc:	2000      	movs	r0, #0
 800f2be:	e7f8      	b.n	800f2b2 <HAL_TIM_PWM_Start+0x9e>
    return HAL_ERROR;
 800f2c0:	2001      	movs	r0, #1
 800f2c2:	e7f6      	b.n	800f2b2 <HAL_TIM_PWM_Start+0x9e>
 800f2c4:	40000400 	.word	0x40000400

0800f2c8 <HAL_TIM_OnePulse_MspInit>:
}
 800f2c8:	4770      	bx	lr

0800f2ca <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 800f2ca:	b330      	cbz	r0, 800f31a <HAL_TIM_OnePulse_Init+0x50>
{
 800f2cc:	b538      	push	{r3, r4, r5, lr}
 800f2ce:	460d      	mov	r5, r1
 800f2d0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800f2d2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800f2d6:	b1db      	cbz	r3, 800f310 <HAL_TIM_OnePulse_Init+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 800f2d8:	2302      	movs	r3, #2
 800f2da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f2de:	4621      	mov	r1, r4
 800f2e0:	f851 0b04 	ldr.w	r0, [r1], #4
 800f2e4:	f7ff fd34 	bl	800ed50 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800f2e8:	6822      	ldr	r2, [r4, #0]
 800f2ea:	6813      	ldr	r3, [r2, #0]
 800f2ec:	f023 0308 	bic.w	r3, r3, #8
 800f2f0:	6013      	str	r3, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 800f2f2:	6823      	ldr	r3, [r4, #0]
 800f2f4:	6819      	ldr	r1, [r3, #0]
 800f2f6:	430d      	orrs	r5, r1
 800f2f8:	601d      	str	r5, [r3, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f300:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f304:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
  htim->State = HAL_TIM_STATE_READY;
 800f308:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800f30c:	2000      	movs	r0, #0
}
 800f30e:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800f310:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_OnePulse_MspInit(htim);
 800f314:	f7ff ffd8 	bl	800f2c8 <HAL_TIM_OnePulse_MspInit>
 800f318:	e7de      	b.n	800f2d8 <HAL_TIM_OnePulse_Init+0xe>
    return HAL_ERROR;
 800f31a:	2001      	movs	r0, #1
}
 800f31c:	4770      	bx	lr

0800f31e <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 800f31e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f322:	2b01      	cmp	r3, #1
 800f324:	d049      	beq.n	800f3ba <HAL_TIM_OC_ConfigChannel+0x9c>
{
 800f326:	b570      	push	{r4, r5, r6, lr}
 800f328:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800f32a:	2301      	movs	r3, #1
 800f32c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  switch (Channel)
 800f330:	2a0c      	cmp	r2, #12
 800f332:	d80b      	bhi.n	800f34c <HAL_TIM_OC_ConfigChannel+0x2e>
 800f334:	e8df f002 	tbb	[pc, r2]
 800f338:	0a0a0a07 	.word	0x0a0a0a07
 800f33c:	0a0a0a0e 	.word	0x0a0a0a0e
 800f340:	0a0a0a12 	.word	0x0a0a0a12
 800f344:	29          	.byte	0x29
 800f345:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f346:	6800      	ldr	r0, [r0, #0]
 800f348:	f7ff fd48 	bl	800eddc <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 800f34c:	2000      	movs	r0, #0
 800f34e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800f352:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f354:	6800      	ldr	r0, [r0, #0]
 800f356:	f7ff fd58 	bl	800ee0a <TIM_OC2_SetConfig>
      break;
 800f35a:	e7f7      	b.n	800f34c <HAL_TIM_OC_ConfigChannel+0x2e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f35c:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f35e:	6a1a      	ldr	r2, [r3, #32]
 800f360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f364:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800f366:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800f368:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800f36a:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f36c:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800f370:	680e      	ldr	r6, [r1, #0]
 800f372:	4330      	orrs	r0, r6
  tmpccer &= ~TIM_CCER_CC3P;
 800f374:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f378:	688e      	ldr	r6, [r1, #8]
 800f37a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 800f37e:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800f380:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800f382:	6849      	ldr	r1, [r1, #4]
 800f384:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800f386:	621a      	str	r2, [r3, #32]
}
 800f388:	e7e0      	b.n	800f34c <HAL_TIM_OC_ConfigChannel+0x2e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f38a:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f38c:	6a1a      	ldr	r2, [r3, #32]
 800f38e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f392:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800f394:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800f396:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800f398:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f39a:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f39e:	680e      	ldr	r6, [r1, #0]
 800f3a0:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  tmpccer &= ~TIM_CCER_CC4P;
 800f3a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f3a8:	688e      	ldr	r6, [r1, #8]
 800f3aa:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CR2 = tmpcr2;
 800f3ae:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800f3b0:	61d8      	str	r0, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800f3b2:	6849      	ldr	r1, [r1, #4]
 800f3b4:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800f3b6:	621a      	str	r2, [r3, #32]
}
 800f3b8:	e7c8      	b.n	800f34c <HAL_TIM_OC_ConfigChannel+0x2e>
  __HAL_LOCK(htim);
 800f3ba:	2002      	movs	r0, #2
}
 800f3bc:	4770      	bx	lr

0800f3be <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800f3be:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f3c2:	2b01      	cmp	r3, #1
 800f3c4:	f000 8089 	beq.w	800f4da <HAL_TIM_PWM_ConfigChannel+0x11c>
{
 800f3c8:	b570      	push	{r4, r5, r6, lr}
 800f3ca:	4604      	mov	r4, r0
 800f3cc:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  switch (Channel)
 800f3d4:	2a0c      	cmp	r2, #12
 800f3d6:	d81a      	bhi.n	800f40e <HAL_TIM_PWM_ConfigChannel+0x50>
 800f3d8:	e8df f002 	tbb	[pc, r2]
 800f3dc:	19191907 	.word	0x19191907
 800f3e0:	1919191d 	.word	0x1919191d
 800f3e4:	19191931 	.word	0x19191931
 800f3e8:	57          	.byte	0x57
 800f3e9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f3ea:	6800      	ldr	r0, [r0, #0]
 800f3ec:	f7ff fcf6 	bl	800eddc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f3f0:	6822      	ldr	r2, [r4, #0]
 800f3f2:	6993      	ldr	r3, [r2, #24]
 800f3f4:	f043 0308 	orr.w	r3, r3, #8
 800f3f8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f3fa:	6822      	ldr	r2, [r4, #0]
 800f3fc:	6993      	ldr	r3, [r2, #24]
 800f3fe:	f023 0304 	bic.w	r3, r3, #4
 800f402:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f404:	6822      	ldr	r2, [r4, #0]
 800f406:	6993      	ldr	r3, [r2, #24]
 800f408:	68e9      	ldr	r1, [r5, #12]
 800f40a:	430b      	orrs	r3, r1
 800f40c:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 800f40e:	2000      	movs	r0, #0
 800f410:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800f414:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f416:	6800      	ldr	r0, [r0, #0]
 800f418:	f7ff fcf7 	bl	800ee0a <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f41c:	6822      	ldr	r2, [r4, #0]
 800f41e:	6993      	ldr	r3, [r2, #24]
 800f420:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f424:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f426:	6822      	ldr	r2, [r4, #0]
 800f428:	6993      	ldr	r3, [r2, #24]
 800f42a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f42e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f430:	6822      	ldr	r2, [r4, #0]
 800f432:	6993      	ldr	r3, [r2, #24]
 800f434:	68e9      	ldr	r1, [r5, #12]
 800f436:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f43a:	6193      	str	r3, [r2, #24]
      break;
 800f43c:	e7e7      	b.n	800f40e <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f43e:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f440:	6a1a      	ldr	r2, [r3, #32]
 800f442:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f446:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800f448:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800f44a:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800f44c:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f44e:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800f452:	682e      	ldr	r6, [r5, #0]
 800f454:	4331      	orrs	r1, r6
  tmpccer &= ~TIM_CCER_CC3P;
 800f456:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f45a:	68ae      	ldr	r6, [r5, #8]
 800f45c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 800f460:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800f462:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800f464:	6869      	ldr	r1, [r5, #4]
 800f466:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800f468:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f46a:	6822      	ldr	r2, [r4, #0]
 800f46c:	69d3      	ldr	r3, [r2, #28]
 800f46e:	f043 0308 	orr.w	r3, r3, #8
 800f472:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f474:	6822      	ldr	r2, [r4, #0]
 800f476:	69d3      	ldr	r3, [r2, #28]
 800f478:	f023 0304 	bic.w	r3, r3, #4
 800f47c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f47e:	6822      	ldr	r2, [r4, #0]
 800f480:	69d3      	ldr	r3, [r2, #28]
 800f482:	68e9      	ldr	r1, [r5, #12]
 800f484:	430b      	orrs	r3, r1
 800f486:	61d3      	str	r3, [r2, #28]
      break;
 800f488:	e7c1      	b.n	800f40e <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f48a:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f48c:	6a1a      	ldr	r2, [r3, #32]
 800f48e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f492:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800f494:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800f496:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800f498:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f49a:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f49e:	682e      	ldr	r6, [r5, #0]
 800f4a0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer &= ~TIM_CCER_CC4P;
 800f4a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f4a8:	68ae      	ldr	r6, [r5, #8]
 800f4aa:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CR2 = tmpcr2;
 800f4ae:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800f4b0:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800f4b2:	6869      	ldr	r1, [r5, #4]
 800f4b4:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800f4b6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f4b8:	6822      	ldr	r2, [r4, #0]
 800f4ba:	69d3      	ldr	r3, [r2, #28]
 800f4bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f4c0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f4c2:	6822      	ldr	r2, [r4, #0]
 800f4c4:	69d3      	ldr	r3, [r2, #28]
 800f4c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f4ca:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f4cc:	6822      	ldr	r2, [r4, #0]
 800f4ce:	69d3      	ldr	r3, [r2, #28]
 800f4d0:	68e9      	ldr	r1, [r5, #12]
 800f4d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f4d6:	61d3      	str	r3, [r2, #28]
      break;
 800f4d8:	e799      	b.n	800f40e <HAL_TIM_PWM_ConfigChannel+0x50>
  __HAL_LOCK(htim);
 800f4da:	2002      	movs	r0, #2
}
 800f4dc:	4770      	bx	lr

0800f4de <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800f4de:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f4e2:	2b01      	cmp	r3, #1
 800f4e4:	f000 80a9 	beq.w	800f63a <HAL_TIM_ConfigClockSource+0x15c>
{
 800f4e8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800f4f0:	2302      	movs	r3, #2
 800f4f2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 800f4f6:	6802      	ldr	r2, [r0, #0]
 800f4f8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f4fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f4fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800f502:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800f504:	680b      	ldr	r3, [r1, #0]
 800f506:	2b60      	cmp	r3, #96	; 0x60
 800f508:	d062      	beq.n	800f5d0 <HAL_TIM_ConfigClockSource+0xf2>
 800f50a:	d838      	bhi.n	800f57e <HAL_TIM_ConfigClockSource+0xa0>
 800f50c:	2b40      	cmp	r3, #64	; 0x40
 800f50e:	d07a      	beq.n	800f606 <HAL_TIM_ConfigClockSource+0x128>
 800f510:	d91b      	bls.n	800f54a <HAL_TIM_ConfigClockSource+0x6c>
 800f512:	2b50      	cmp	r3, #80	; 0x50
 800f514:	d12a      	bne.n	800f56c <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f516:	6803      	ldr	r3, [r0, #0]
 800f518:	684c      	ldr	r4, [r1, #4]
 800f51a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800f51c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f51e:	6a1a      	ldr	r2, [r3, #32]
 800f520:	f022 0201 	bic.w	r2, r2, #1
 800f524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f526:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f528:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f52c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f530:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800f534:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800f536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f538:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f53a:	6802      	ldr	r2, [r0, #0]
  tmpsmcr = TIMx->SMCR;
 800f53c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800f53e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f542:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800f546:	6093      	str	r3, [r2, #8]
}
 800f548:	e010      	b.n	800f56c <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 800f54a:	2b20      	cmp	r3, #32
 800f54c:	d002      	beq.n	800f554 <HAL_TIM_ConfigClockSource+0x76>
 800f54e:	d90a      	bls.n	800f566 <HAL_TIM_ConfigClockSource+0x88>
 800f550:	2b30      	cmp	r3, #48	; 0x30
 800f552:	d10b      	bne.n	800f56c <HAL_TIM_ConfigClockSource+0x8e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f554:	6801      	ldr	r1, [r0, #0]
  tmpsmcr = TIMx->SMCR;
 800f556:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800f558:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f55c:	4313      	orrs	r3, r2
 800f55e:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800f562:	608b      	str	r3, [r1, #8]
}
 800f564:	e002      	b.n	800f56c <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 800f566:	f033 0210 	bics.w	r2, r3, #16
 800f56a:	d0f3      	beq.n	800f554 <HAL_TIM_ConfigClockSource+0x76>
  htim->State = HAL_TIM_STATE_READY;
 800f56c:	2301      	movs	r3, #1
 800f56e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 800f572:	2300      	movs	r3, #0
 800f574:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 800f578:	4618      	mov	r0, r3
}
 800f57a:	bc70      	pop	{r4, r5, r6}
 800f57c:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800f57e:	2b70      	cmp	r3, #112	; 0x70
 800f580:	d014      	beq.n	800f5ac <HAL_TIM_ConfigClockSource+0xce>
 800f582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f586:	d1f1      	bne.n	800f56c <HAL_TIM_ConfigClockSource+0x8e>
      TIM_ETR_SetConfig(htim->Instance,
 800f588:	6804      	ldr	r4, [r0, #0]
  tmpsmcr = TIMx->SMCR;
 800f58a:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f58c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f590:	688b      	ldr	r3, [r1, #8]
 800f592:	684d      	ldr	r5, [r1, #4]
 800f594:	432b      	orrs	r3, r5
 800f596:	68c9      	ldr	r1, [r1, #12]
 800f598:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f59c:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800f59e:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f5a0:	6802      	ldr	r2, [r0, #0]
 800f5a2:	6893      	ldr	r3, [r2, #8]
 800f5a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f5a8:	6093      	str	r3, [r2, #8]
      break;
 800f5aa:	e7df      	b.n	800f56c <HAL_TIM_ConfigClockSource+0x8e>
      TIM_ETR_SetConfig(htim->Instance,
 800f5ac:	6804      	ldr	r4, [r0, #0]
  tmpsmcr = TIMx->SMCR;
 800f5ae:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f5b0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f5b4:	688b      	ldr	r3, [r1, #8]
 800f5b6:	684d      	ldr	r5, [r1, #4]
 800f5b8:	432b      	orrs	r3, r5
 800f5ba:	68c9      	ldr	r1, [r1, #12]
 800f5bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f5c0:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800f5c2:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800f5c4:	6802      	ldr	r2, [r0, #0]
 800f5c6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f5c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800f5cc:	6093      	str	r3, [r2, #8]
      break;
 800f5ce:	e7cd      	b.n	800f56c <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f5d0:	6803      	ldr	r3, [r0, #0]
 800f5d2:	684d      	ldr	r5, [r1, #4]
 800f5d4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f5d6:	6a1c      	ldr	r4, [r3, #32]
 800f5d8:	f024 0410 	bic.w	r4, r4, #16
 800f5dc:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f5de:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800f5e0:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f5e2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f5e6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f5ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800f5ee:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800f5f2:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800f5f4:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f5f6:	6802      	ldr	r2, [r0, #0]
  tmpsmcr = TIMx->SMCR;
 800f5f8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800f5fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f5fe:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800f602:	6093      	str	r3, [r2, #8]
}
 800f604:	e7b2      	b.n	800f56c <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f606:	6803      	ldr	r3, [r0, #0]
 800f608:	684c      	ldr	r4, [r1, #4]
 800f60a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800f60c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f60e:	6a1a      	ldr	r2, [r3, #32]
 800f610:	f022 0201 	bic.w	r2, r2, #1
 800f614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f616:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f618:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f61c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f620:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800f624:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800f626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f628:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f62a:	6802      	ldr	r2, [r0, #0]
  tmpsmcr = TIMx->SMCR;
 800f62c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800f62e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f632:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800f636:	6093      	str	r3, [r2, #8]
}
 800f638:	e798      	b.n	800f56c <HAL_TIM_ConfigClockSource+0x8e>
  __HAL_LOCK(htim);
 800f63a:	2002      	movs	r0, #2
}
 800f63c:	4770      	bx	lr

0800f63e <HAL_TIM_IC_CaptureCallback>:
}
 800f63e:	4770      	bx	lr

0800f640 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800f640:	4770      	bx	lr

0800f642 <HAL_TIM_TriggerCallback>:
}
 800f642:	4770      	bx	lr

0800f644 <HAL_TIM_IRQHandler>:
{
 800f644:	b510      	push	{r4, lr}
 800f646:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f648:	6803      	ldr	r3, [r0, #0]
 800f64a:	691a      	ldr	r2, [r3, #16]
 800f64c:	f012 0f02 	tst.w	r2, #2
 800f650:	d011      	beq.n	800f676 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f652:	68da      	ldr	r2, [r3, #12]
 800f654:	f012 0f02 	tst.w	r2, #2
 800f658:	d00d      	beq.n	800f676 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f65a:	f06f 0202 	mvn.w	r2, #2
 800f65e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f660:	2301      	movs	r3, #1
 800f662:	7603      	strb	r3, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f664:	6803      	ldr	r3, [r0, #0]
 800f666:	699b      	ldr	r3, [r3, #24]
 800f668:	f013 0f03 	tst.w	r3, #3
 800f66c:	d05e      	beq.n	800f72c <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 800f66e:	f7ff ffe6 	bl	800f63e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f672:	2300      	movs	r3, #0
 800f674:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f676:	6823      	ldr	r3, [r4, #0]
 800f678:	691a      	ldr	r2, [r3, #16]
 800f67a:	f012 0f04 	tst.w	r2, #4
 800f67e:	d012      	beq.n	800f6a6 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f680:	68da      	ldr	r2, [r3, #12]
 800f682:	f012 0f04 	tst.w	r2, #4
 800f686:	d00e      	beq.n	800f6a6 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f688:	f06f 0204 	mvn.w	r2, #4
 800f68c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f68e:	2302      	movs	r3, #2
 800f690:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f692:	6823      	ldr	r3, [r4, #0]
 800f694:	699b      	ldr	r3, [r3, #24]
 800f696:	f413 7f40 	tst.w	r3, #768	; 0x300
 800f69a:	d04d      	beq.n	800f738 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800f69c:	4620      	mov	r0, r4
 800f69e:	f7ff ffce 	bl	800f63e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f6a6:	6823      	ldr	r3, [r4, #0]
 800f6a8:	691a      	ldr	r2, [r3, #16]
 800f6aa:	f012 0f08 	tst.w	r2, #8
 800f6ae:	d012      	beq.n	800f6d6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f6b0:	68da      	ldr	r2, [r3, #12]
 800f6b2:	f012 0f08 	tst.w	r2, #8
 800f6b6:	d00e      	beq.n	800f6d6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f6b8:	f06f 0208 	mvn.w	r2, #8
 800f6bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f6be:	2304      	movs	r3, #4
 800f6c0:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f6c2:	6823      	ldr	r3, [r4, #0]
 800f6c4:	69db      	ldr	r3, [r3, #28]
 800f6c6:	f013 0f03 	tst.w	r3, #3
 800f6ca:	d03c      	beq.n	800f746 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 800f6cc:	4620      	mov	r0, r4
 800f6ce:	f7ff ffb6 	bl	800f63e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f6d6:	6823      	ldr	r3, [r4, #0]
 800f6d8:	691a      	ldr	r2, [r3, #16]
 800f6da:	f012 0f10 	tst.w	r2, #16
 800f6de:	d012      	beq.n	800f706 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f6e0:	68da      	ldr	r2, [r3, #12]
 800f6e2:	f012 0f10 	tst.w	r2, #16
 800f6e6:	d00e      	beq.n	800f706 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f6e8:	f06f 0210 	mvn.w	r2, #16
 800f6ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f6ee:	2308      	movs	r3, #8
 800f6f0:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f6f2:	6823      	ldr	r3, [r4, #0]
 800f6f4:	69db      	ldr	r3, [r3, #28]
 800f6f6:	f413 7f40 	tst.w	r3, #768	; 0x300
 800f6fa:	d02b      	beq.n	800f754 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	f7ff ff9e 	bl	800f63e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f702:	2300      	movs	r3, #0
 800f704:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f706:	6823      	ldr	r3, [r4, #0]
 800f708:	691a      	ldr	r2, [r3, #16]
 800f70a:	f012 0f01 	tst.w	r2, #1
 800f70e:	d003      	beq.n	800f718 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f710:	68da      	ldr	r2, [r3, #12]
 800f712:	f012 0f01 	tst.w	r2, #1
 800f716:	d124      	bne.n	800f762 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f718:	6823      	ldr	r3, [r4, #0]
 800f71a:	691a      	ldr	r2, [r3, #16]
 800f71c:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f720:	d003      	beq.n	800f72a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f722:	68da      	ldr	r2, [r3, #12]
 800f724:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f728:	d122      	bne.n	800f770 <HAL_TIM_IRQHandler+0x12c>
}
 800f72a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f72c:	f7f8 fb4e 	bl	8007dcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f730:	4620      	mov	r0, r4
 800f732:	f7ff ff85 	bl	800f640 <HAL_TIM_PWM_PulseFinishedCallback>
 800f736:	e79c      	b.n	800f672 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f738:	4620      	mov	r0, r4
 800f73a:	f7f8 fb47 	bl	8007dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f73e:	4620      	mov	r0, r4
 800f740:	f7ff ff7e 	bl	800f640 <HAL_TIM_PWM_PulseFinishedCallback>
 800f744:	e7ad      	b.n	800f6a2 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f746:	4620      	mov	r0, r4
 800f748:	f7f8 fb40 	bl	8007dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f74c:	4620      	mov	r0, r4
 800f74e:	f7ff ff77 	bl	800f640 <HAL_TIM_PWM_PulseFinishedCallback>
 800f752:	e7be      	b.n	800f6d2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f754:	4620      	mov	r0, r4
 800f756:	f7f8 fb39 	bl	8007dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f75a:	4620      	mov	r0, r4
 800f75c:	f7ff ff70 	bl	800f640 <HAL_TIM_PWM_PulseFinishedCallback>
 800f760:	e7cf      	b.n	800f702 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f762:	f06f 0201 	mvn.w	r2, #1
 800f766:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800f768:	4620      	mov	r0, r4
 800f76a:	f7f8 faf9 	bl	8007d60 <HAL_TIM_PeriodElapsedCallback>
 800f76e:	e7d3      	b.n	800f718 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f770:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f774:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800f776:	4620      	mov	r0, r4
 800f778:	f7ff ff63 	bl	800f642 <HAL_TIM_TriggerCallback>
}
 800f77c:	e7d5      	b.n	800f72a <HAL_TIM_IRQHandler+0xe6>
	...

0800f780 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f780:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f784:	2b01      	cmp	r3, #1
 800f786:	d02b      	beq.n	800f7e0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 800f788:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800f78a:	2301      	movs	r3, #1
 800f78c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f790:	2302      	movs	r3, #2
 800f792:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f796:	6804      	ldr	r4, [r0, #0]
 800f798:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f79a:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f79c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f7a0:	680d      	ldr	r5, [r1, #0]
 800f7a2:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f7a4:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7a6:	6803      	ldr	r3, [r0, #0]
 800f7a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7ac:	d00a      	beq.n	800f7c4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800f7ae:	4c0d      	ldr	r4, [pc, #52]	; (800f7e4 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 800f7b0:	42a3      	cmp	r3, r4
 800f7b2:	d007      	beq.n	800f7c4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800f7b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800f7b8:	42a3      	cmp	r3, r4
 800f7ba:	d003      	beq.n	800f7c4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800f7bc:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 800f7c0:	42a3      	cmp	r3, r4
 800f7c2:	d104      	bne.n	800f7ce <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f7c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f7c8:	6849      	ldr	r1, [r1, #4]
 800f7ca:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f7cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 800f7da:	4618      	mov	r0, r3
}
 800f7dc:	bc30      	pop	{r4, r5}
 800f7de:	4770      	bx	lr
  __HAL_LOCK(htim);
 800f7e0:	2002      	movs	r0, #2
}
 800f7e2:	4770      	bx	lr
 800f7e4:	40000400 	.word	0x40000400

0800f7e8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f7e8:	6802      	ldr	r2, [r0, #0]
 800f7ea:	68d3      	ldr	r3, [r2, #12]
 800f7ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f7f0:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7f2:	6802      	ldr	r2, [r0, #0]
 800f7f4:	6953      	ldr	r3, [r2, #20]
 800f7f6:	f023 0301 	bic.w	r3, r3, #1
 800f7fa:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f7fe:	2b01      	cmp	r3, #1
 800f800:	d005      	beq.n	800f80e <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f802:	2320      	movs	r3, #32
 800f804:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f808:	2300      	movs	r3, #0
 800f80a:	6303      	str	r3, [r0, #48]	; 0x30
}
 800f80c:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f80e:	6802      	ldr	r2, [r0, #0]
 800f810:	68d3      	ldr	r3, [r2, #12]
 800f812:	f023 0310 	bic.w	r3, r3, #16
 800f816:	60d3      	str	r3, [r2, #12]
 800f818:	e7f3      	b.n	800f802 <UART_EndRxTransfer+0x1a>
	...

0800f81c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f81c:	b510      	push	{r4, lr}
 800f81e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f820:	6802      	ldr	r2, [r0, #0]
 800f822:	6913      	ldr	r3, [r2, #16]
 800f824:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800f828:	68c1      	ldr	r1, [r0, #12]
 800f82a:	430b      	orrs	r3, r1
 800f82c:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 800f82e:	6801      	ldr	r1, [r0, #0]
 800f830:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f832:	6883      	ldr	r3, [r0, #8]
 800f834:	6900      	ldr	r0, [r0, #16]
 800f836:	4303      	orrs	r3, r0
 800f838:	6960      	ldr	r0, [r4, #20]
 800f83a:	4303      	orrs	r3, r0
 800f83c:	69e0      	ldr	r0, [r4, #28]
 800f83e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800f840:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 800f844:	f022 020c 	bic.w	r2, r2, #12
 800f848:	4313      	orrs	r3, r2
 800f84a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f84c:	6822      	ldr	r2, [r4, #0]
 800f84e:	6953      	ldr	r3, [r2, #20]
 800f850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f854:	69a1      	ldr	r1, [r4, #24]
 800f856:	430b      	orrs	r3, r1
 800f858:	6153      	str	r3, [r2, #20]


  if((huart->Instance == USART1))
 800f85a:	6822      	ldr	r2, [r4, #0]
 800f85c:	4b21      	ldr	r3, [pc, #132]	; (800f8e4 <UART_SetConfig+0xc8>)
 800f85e:	429a      	cmp	r2, r3
 800f860:	d01e      	beq.n	800f8a0 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800f862:	f7ff f891 	bl	800e988 <HAL_RCC_GetPCLK1Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f866:	69e3      	ldr	r3, [r4, #28]
 800f868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f86c:	d01b      	beq.n	800f8a6 <UART_SetConfig+0x8a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f86e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800f872:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f876:	6860      	ldr	r0, [r4, #4]
 800f878:	0080      	lsls	r0, r0, #2
 800f87a:	fbb3 f3f0 	udiv	r3, r3, r0
 800f87e:	6820      	ldr	r0, [r4, #0]
 800f880:	4919      	ldr	r1, [pc, #100]	; (800f8e8 <UART_SetConfig+0xcc>)
 800f882:	fba1 4203 	umull	r4, r2, r1, r3
 800f886:	0952      	lsrs	r2, r2, #5
 800f888:	2464      	movs	r4, #100	; 0x64
 800f88a:	fb04 3312 	mls	r3, r4, r2, r3
 800f88e:	011b      	lsls	r3, r3, #4
 800f890:	3332      	adds	r3, #50	; 0x32
 800f892:	fba1 1303 	umull	r1, r3, r1, r3
 800f896:	0112      	lsls	r2, r2, #4
 800f898:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 800f89c:	6083      	str	r3, [r0, #8]
  }
}
 800f89e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800f8a0:	f7ff f882 	bl	800e9a8 <HAL_RCC_GetPCLK2Freq>
 800f8a4:	e7df      	b.n	800f866 <UART_SetConfig+0x4a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f8a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800f8aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800f8ae:	6862      	ldr	r2, [r4, #4]
 800f8b0:	0052      	lsls	r2, r2, #1
 800f8b2:	fbb0 f2f2 	udiv	r2, r0, r2
 800f8b6:	480c      	ldr	r0, [pc, #48]	; (800f8e8 <UART_SetConfig+0xcc>)
 800f8b8:	fba0 3102 	umull	r3, r1, r0, r2
 800f8bc:	0949      	lsrs	r1, r1, #5
 800f8be:	2364      	movs	r3, #100	; 0x64
 800f8c0:	fb03 2311 	mls	r3, r3, r1, r2
 800f8c4:	00db      	lsls	r3, r3, #3
 800f8c6:	3332      	adds	r3, #50	; 0x32
 800f8c8:	fba0 2303 	umull	r2, r3, r0, r3
 800f8cc:	6820      	ldr	r0, [r4, #0]
 800f8ce:	f3c3 1242 	ubfx	r2, r3, #5, #3
 800f8d2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800f8d6:	091b      	lsrs	r3, r3, #4
 800f8d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f8dc:	4413      	add	r3, r2
 800f8de:	6083      	str	r3, [r0, #8]
 800f8e0:	e7dd      	b.n	800f89e <UART_SetConfig+0x82>
 800f8e2:	bf00      	nop
 800f8e4:	40013800 	.word	0x40013800
 800f8e8:	51eb851f 	.word	0x51eb851f

0800f8ec <UART_WaitOnFlagUntilTimeout>:
{
 800f8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8f0:	4680      	mov	r8, r0
 800f8f2:	460e      	mov	r6, r1
 800f8f4:	4615      	mov	r5, r2
 800f8f6:	4699      	mov	r9, r3
 800f8f8:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f8fa:	f8d8 2000 	ldr.w	r2, [r8]
 800f8fe:	6814      	ldr	r4, [r2, #0]
 800f900:	ea36 0304 	bics.w	r3, r6, r4
 800f904:	bf0c      	ite	eq
 800f906:	f04f 0c01 	moveq.w	ip, #1
 800f90a:	f04f 0c00 	movne.w	ip, #0
 800f90e:	45ac      	cmp	ip, r5
 800f910:	d11f      	bne.n	800f952 <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 800f912:	f1b7 3fff 	cmp.w	r7, #4294967295
 800f916:	d0f2      	beq.n	800f8fe <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800f918:	b12f      	cbz	r7, 800f926 <UART_WaitOnFlagUntilTimeout+0x3a>
 800f91a:	f7fd fbb3 	bl	800d084 <HAL_GetTick>
 800f91e:	eba0 0009 	sub.w	r0, r0, r9
 800f922:	42b8      	cmp	r0, r7
 800f924:	d9e9      	bls.n	800f8fa <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f926:	f8d8 2000 	ldr.w	r2, [r8]
 800f92a:	68d3      	ldr	r3, [r2, #12]
 800f92c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f930:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f932:	f8d8 2000 	ldr.w	r2, [r8]
 800f936:	6953      	ldr	r3, [r2, #20]
 800f938:	f023 0301 	bic.w	r3, r3, #1
 800f93c:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800f93e:	2320      	movs	r3, #32
 800f940:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800f944:	f888 303e 	strb.w	r3, [r8, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 800f948:	2300      	movs	r3, #0
 800f94a:	f888 303c 	strb.w	r3, [r8, #60]	; 0x3c
        return HAL_TIMEOUT;
 800f94e:	2003      	movs	r0, #3
 800f950:	e000      	b.n	800f954 <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 800f952:	2000      	movs	r0, #0
}
 800f954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f958 <HAL_UART_Init>:
  if (huart == NULL)
 800f958:	b358      	cbz	r0, 800f9b2 <HAL_UART_Init+0x5a>
{
 800f95a:	b510      	push	{r4, lr}
 800f95c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800f95e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800f962:	b30b      	cbz	r3, 800f9a8 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800f964:	2324      	movs	r3, #36	; 0x24
 800f966:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800f96a:	6822      	ldr	r2, [r4, #0]
 800f96c:	68d3      	ldr	r3, [r2, #12]
 800f96e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f972:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800f974:	4620      	mov	r0, r4
 800f976:	f7ff ff51 	bl	800f81c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f97a:	6822      	ldr	r2, [r4, #0]
 800f97c:	6913      	ldr	r3, [r2, #16]
 800f97e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800f982:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f984:	6822      	ldr	r2, [r4, #0]
 800f986:	6953      	ldr	r3, [r2, #20]
 800f988:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800f98c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800f98e:	6822      	ldr	r2, [r4, #0]
 800f990:	68d3      	ldr	r3, [r2, #12]
 800f992:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f996:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f998:	2000      	movs	r0, #0
 800f99a:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f99c:	2320      	movs	r3, #32
 800f99e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f9a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800f9a6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800f9a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800f9ac:	f7f9 fc96 	bl	80092dc <HAL_UART_MspInit>
 800f9b0:	e7d8      	b.n	800f964 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800f9b2:	2001      	movs	r0, #1
}
 800f9b4:	4770      	bx	lr

0800f9b6 <HAL_UART_Transmit>:
{
 800f9b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800f9be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800f9c2:	b2db      	uxtb	r3, r3
 800f9c4:	2b20      	cmp	r3, #32
 800f9c6:	d15a      	bne.n	800fa7e <HAL_UART_Transmit+0xc8>
 800f9c8:	4604      	mov	r4, r0
 800f9ca:	460d      	mov	r5, r1
 800f9cc:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800f9ce:	2900      	cmp	r1, #0
 800f9d0:	d059      	beq.n	800fa86 <HAL_UART_Transmit+0xd0>
 800f9d2:	2a00      	cmp	r2, #0
 800f9d4:	d059      	beq.n	800fa8a <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 800f9d6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800f9da:	2b01      	cmp	r3, #1
 800f9dc:	d057      	beq.n	800fa8e <HAL_UART_Transmit+0xd8>
 800f9de:	2301      	movs	r3, #1
 800f9e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f9e8:	2321      	movs	r3, #33	; 0x21
 800f9ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800f9ee:	f7fd fb49 	bl	800d084 <HAL_GetTick>
 800f9f2:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800f9f4:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800f9f8:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f9fc:	68a3      	ldr	r3, [r4, #8]
 800f9fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa02:	d00c      	beq.n	800fa1e <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 800fa04:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 800fa08:	2300      	movs	r3, #0
 800fa0a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 800fa0e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800fa10:	b29b      	uxth	r3, r3
 800fa12:	b343      	cbz	r3, 800fa66 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fa14:	f04f 0900 	mov.w	r9, #0
 800fa18:	f04f 0880 	mov.w	r8, #128	; 0x80
 800fa1c:	e014      	b.n	800fa48 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fa1e:	6923      	ldr	r3, [r4, #16]
 800fa20:	b913      	cbnz	r3, 800fa28 <HAL_UART_Transmit+0x72>
      pdata16bits = (uint16_t *) pData;
 800fa22:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 800fa24:	2500      	movs	r5, #0
 800fa26:	e7ef      	b.n	800fa08 <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 800fa28:	f04f 0a00 	mov.w	sl, #0
 800fa2c:	e7ec      	b.n	800fa08 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fa2e:	6822      	ldr	r2, [r4, #0]
 800fa30:	f83a 3b02 	ldrh.w	r3, [sl], #2
 800fa34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa38:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800fa3a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800fa3c:	3a01      	subs	r2, #1
 800fa3e:	b292      	uxth	r2, r2
 800fa40:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800fa42:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800fa44:	b29b      	uxth	r3, r3
 800fa46:	b173      	cbz	r3, 800fa66 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fa48:	9600      	str	r6, [sp, #0]
 800fa4a:	463b      	mov	r3, r7
 800fa4c:	464a      	mov	r2, r9
 800fa4e:	4641      	mov	r1, r8
 800fa50:	4620      	mov	r0, r4
 800fa52:	f7ff ff4b 	bl	800f8ec <UART_WaitOnFlagUntilTimeout>
 800fa56:	b9e0      	cbnz	r0, 800fa92 <HAL_UART_Transmit+0xdc>
      if (pdata8bits == NULL)
 800fa58:	2d00      	cmp	r5, #0
 800fa5a:	d0e8      	beq.n	800fa2e <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800fa5c:	6823      	ldr	r3, [r4, #0]
 800fa5e:	f815 2b01 	ldrb.w	r2, [r5], #1
 800fa62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800fa64:	e7e9      	b.n	800fa3a <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fa66:	9600      	str	r6, [sp, #0]
 800fa68:	463b      	mov	r3, r7
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	2140      	movs	r1, #64	; 0x40
 800fa6e:	4620      	mov	r0, r4
 800fa70:	f7ff ff3c 	bl	800f8ec <UART_WaitOnFlagUntilTimeout>
 800fa74:	b978      	cbnz	r0, 800fa96 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_READY;
 800fa76:	2320      	movs	r3, #32
 800fa78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 800fa7c:	e000      	b.n	800fa80 <HAL_UART_Transmit+0xca>
    return HAL_BUSY;
 800fa7e:	2002      	movs	r0, #2
}
 800fa80:	b002      	add	sp, #8
 800fa82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 800fa86:	2001      	movs	r0, #1
 800fa88:	e7fa      	b.n	800fa80 <HAL_UART_Transmit+0xca>
 800fa8a:	2001      	movs	r0, #1
 800fa8c:	e7f8      	b.n	800fa80 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 800fa8e:	2002      	movs	r0, #2
 800fa90:	e7f6      	b.n	800fa80 <HAL_UART_Transmit+0xca>
        return HAL_TIMEOUT;
 800fa92:	2003      	movs	r0, #3
 800fa94:	e7f4      	b.n	800fa80 <HAL_UART_Transmit+0xca>
      return HAL_TIMEOUT;
 800fa96:	2003      	movs	r0, #3
 800fa98:	e7f2      	b.n	800fa80 <HAL_UART_Transmit+0xca>

0800fa9a <HAL_UART_DMAStop>:
{
 800fa9a:	b510      	push	{r4, lr}
 800fa9c:	4604      	mov	r4, r0
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800fa9e:	6802      	ldr	r2, [r0, #0]
 800faa0:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800faa2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800faa6:	b2db      	uxtb	r3, r3
 800faa8:	2b21      	cmp	r3, #33	; 0x21
 800faaa:	d008      	beq.n	800fabe <HAL_UART_DMAStop+0x24>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800faac:	6822      	ldr	r2, [r4, #0]
 800faae:	6951      	ldr	r1, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800fab0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	2b22      	cmp	r3, #34	; 0x22
 800fab8:	d015      	beq.n	800fae6 <HAL_UART_DMAStop+0x4c>
}
 800faba:	2000      	movs	r0, #0
 800fabc:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800fabe:	f011 0f80 	tst.w	r1, #128	; 0x80
 800fac2:	d0f3      	beq.n	800faac <HAL_UART_DMAStop+0x12>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fac4:	6953      	ldr	r3, [r2, #20]
 800fac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800faca:	6153      	str	r3, [r2, #20]
    if (huart->hdmatx != NULL)
 800facc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800face:	b108      	cbz	r0, 800fad4 <HAL_UART_DMAStop+0x3a>
      HAL_DMA_Abort(huart->hdmatx);
 800fad0:	f7fd ff34 	bl	800d93c <HAL_DMA_Abort>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800fad4:	6822      	ldr	r2, [r4, #0]
 800fad6:	68d3      	ldr	r3, [r2, #12]
 800fad8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fadc:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 800fade:	2320      	movs	r3, #32
 800fae0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800fae4:	e7e2      	b.n	800faac <HAL_UART_DMAStop+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800fae6:	f011 0f40 	tst.w	r1, #64	; 0x40
 800faea:	d0e6      	beq.n	800faba <HAL_UART_DMAStop+0x20>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800faec:	6953      	ldr	r3, [r2, #20]
 800faee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800faf2:	6153      	str	r3, [r2, #20]
    if (huart->hdmarx != NULL)
 800faf4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800faf6:	b108      	cbz	r0, 800fafc <HAL_UART_DMAStop+0x62>
      HAL_DMA_Abort(huart->hdmarx);
 800faf8:	f7fd ff20 	bl	800d93c <HAL_DMA_Abort>
    UART_EndRxTransfer(huart);
 800fafc:	4620      	mov	r0, r4
 800fafe:	f7ff fe73 	bl	800f7e8 <UART_EndRxTransfer>
 800fb02:	e7da      	b.n	800faba <HAL_UART_DMAStop+0x20>

0800fb04 <HAL_UART_TxCpltCallback>:
}
 800fb04:	4770      	bx	lr

0800fb06 <HAL_UART_RxHalfCpltCallback>:
}
 800fb06:	4770      	bx	lr

0800fb08 <HAL_UART_ErrorCallback>:
}
 800fb08:	4770      	bx	lr

0800fb0a <UART_DMAError>:
{
 800fb0a:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fb0c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800fb0e:	6822      	ldr	r2, [r4, #0]
 800fb10:	6951      	ldr	r1, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800fb12:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800fb16:	b2db      	uxtb	r3, r3
 800fb18:	2b21      	cmp	r3, #33	; 0x21
 800fb1a:	d00e      	beq.n	800fb3a <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fb1c:	6823      	ldr	r3, [r4, #0]
 800fb1e:	695a      	ldr	r2, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800fb20:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	2b22      	cmp	r3, #34	; 0x22
 800fb28:	d014      	beq.n	800fb54 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fb2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fb2c:	f043 0310 	orr.w	r3, r3, #16
 800fb30:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 800fb32:	4620      	mov	r0, r4
 800fb34:	f7ff ffe8 	bl	800fb08 <HAL_UART_ErrorCallback>
}
 800fb38:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800fb3a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800fb3e:	d0ed      	beq.n	800fb1c <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 800fb40:	2300      	movs	r3, #0
 800fb42:	84e3      	strh	r3, [r4, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800fb44:	68d3      	ldr	r3, [r2, #12]
 800fb46:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fb4a:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 800fb4c:	2320      	movs	r3, #32
 800fb4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800fb52:	e7e3      	b.n	800fb1c <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800fb54:	f012 0f40 	tst.w	r2, #64	; 0x40
 800fb58:	d0e7      	beq.n	800fb2a <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800fb5e:	4620      	mov	r0, r4
 800fb60:	f7ff fe42 	bl	800f7e8 <UART_EndRxTransfer>
 800fb64:	e7e1      	b.n	800fb2a <UART_DMAError+0x20>

0800fb66 <UART_DMAAbortOnError>:
{
 800fb66:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fb68:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800fb6e:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800fb70:	f7ff ffca 	bl	800fb08 <HAL_UART_ErrorCallback>
}
 800fb74:	bd08      	pop	{r3, pc}

0800fb76 <HAL_UARTEx_RxEventCallback>:
}
 800fb76:	4770      	bx	lr

0800fb78 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fb78:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800fb7c:	b2db      	uxtb	r3, r3
 800fb7e:	2b22      	cmp	r3, #34	; 0x22
 800fb80:	d11e      	bne.n	800fbc0 <UART_Receive_IT+0x48>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb82:	6883      	ldr	r3, [r0, #8]
 800fb84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb88:	d006      	beq.n	800fb98 <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800fb8a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800fb8c:	b183      	cbz	r3, 800fbb0 <UART_Receive_IT+0x38>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800fb8e:	6803      	ldr	r3, [r0, #0]
 800fb90:	685b      	ldr	r3, [r3, #4]
 800fb92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb96:	e01b      	b.n	800fbd0 <UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb98:	6903      	ldr	r3, [r0, #16]
 800fb9a:	b9ab      	cbnz	r3, 800fbc8 <UART_Receive_IT+0x50>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800fb9c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800fb9e:	6803      	ldr	r3, [r0, #0]
 800fba0:	685b      	ldr	r3, [r3, #4]
 800fba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fba6:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800fba8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800fbaa:	3302      	adds	r3, #2
 800fbac:	6283      	str	r3, [r0, #40]	; 0x28
 800fbae:	e013      	b.n	800fbd8 <UART_Receive_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800fbb0:	6903      	ldr	r3, [r0, #16]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d1eb      	bne.n	800fb8e <UART_Receive_IT+0x16>
 800fbb6:	e008      	b.n	800fbca <UART_Receive_IT+0x52>
       HAL_UART_RxCpltCallback(huart);
 800fbb8:	f7fc fda0 	bl	800c6fc <HAL_UART_RxCpltCallback>
      return HAL_OK;
 800fbbc:	2000      	movs	r0, #0
 800fbbe:	e03f      	b.n	800fc40 <UART_Receive_IT+0xc8>
    return HAL_BUSY;
 800fbc0:	2002      	movs	r0, #2
 800fbc2:	4770      	bx	lr
    return HAL_OK;
 800fbc4:	2000      	movs	r0, #0
}
 800fbc6:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800fbc8:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800fbca:	6803      	ldr	r3, [r0, #0]
 800fbcc:	685b      	ldr	r3, [r3, #4]
 800fbce:	b2db      	uxtb	r3, r3
 800fbd0:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800fbd2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800fbd4:	3301      	adds	r3, #1
 800fbd6:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800fbd8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800fbda:	3b01      	subs	r3, #1
 800fbdc:	b29b      	uxth	r3, r3
 800fbde:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d1ef      	bne.n	800fbc4 <UART_Receive_IT+0x4c>
{
 800fbe4:	b500      	push	{lr}
 800fbe6:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800fbe8:	6802      	ldr	r2, [r0, #0]
 800fbea:	68d3      	ldr	r3, [r2, #12]
 800fbec:	f023 0320 	bic.w	r3, r3, #32
 800fbf0:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800fbf2:	6802      	ldr	r2, [r0, #0]
 800fbf4:	68d3      	ldr	r3, [r2, #12]
 800fbf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fbfa:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800fbfc:	6802      	ldr	r2, [r0, #0]
 800fbfe:	6953      	ldr	r3, [r2, #20]
 800fc00:	f023 0301 	bic.w	r3, r3, #1
 800fc04:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800fc06:	2320      	movs	r3, #32
 800fc08:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc0c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fc0e:	2b01      	cmp	r3, #1
 800fc10:	d1d2      	bne.n	800fbb8 <UART_Receive_IT+0x40>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc12:	2300      	movs	r3, #0
 800fc14:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc16:	6802      	ldr	r2, [r0, #0]
 800fc18:	68d3      	ldr	r3, [r2, #12]
 800fc1a:	f023 0310 	bic.w	r3, r3, #16
 800fc1e:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800fc20:	6803      	ldr	r3, [r0, #0]
 800fc22:	681a      	ldr	r2, [r3, #0]
 800fc24:	f012 0f10 	tst.w	r2, #16
 800fc28:	d006      	beq.n	800fc38 <UART_Receive_IT+0xc0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	9201      	str	r2, [sp, #4]
 800fc2e:	681a      	ldr	r2, [r3, #0]
 800fc30:	9201      	str	r2, [sp, #4]
 800fc32:	685b      	ldr	r3, [r3, #4]
 800fc34:	9301      	str	r3, [sp, #4]
 800fc36:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fc38:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800fc3a:	f7ff ff9c 	bl	800fb76 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 800fc3e:	2000      	movs	r0, #0
}
 800fc40:	b003      	add	sp, #12
 800fc42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800fc48 <HAL_UART_IRQHandler>:
{
 800fc48:	b510      	push	{r4, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800fc4e:	6802      	ldr	r2, [r0, #0]
 800fc50:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fc52:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fc54:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 800fc56:	f013 0f0f 	tst.w	r3, #15
 800fc5a:	d109      	bne.n	800fc70 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fc5c:	f013 0f20 	tst.w	r3, #32
 800fc60:	d00d      	beq.n	800fc7e <HAL_UART_IRQHandler+0x36>
 800fc62:	f011 0f20 	tst.w	r1, #32
 800fc66:	d00a      	beq.n	800fc7e <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 800fc68:	4620      	mov	r0, r4
 800fc6a:	f7ff ff85 	bl	800fb78 <UART_Receive_IT>
      return;
 800fc6e:	e017      	b.n	800fca0 <HAL_UART_IRQHandler+0x58>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800fc70:	f000 0001 	and.w	r0, r0, #1
 800fc74:	f401 7c90 	and.w	ip, r1, #288	; 0x120
 800fc78:	ea5c 0c00 	orrs.w	ip, ip, r0
 800fc7c:	d112      	bne.n	800fca4 <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc7e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800fc80:	2801      	cmp	r0, #1
 800fc82:	d077      	beq.n	800fd74 <HAL_UART_IRQHandler+0x12c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800fc84:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fc88:	d003      	beq.n	800fc92 <HAL_UART_IRQHandler+0x4a>
 800fc8a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800fc8e:	f040 80d9 	bne.w	800fe44 <HAL_UART_IRQHandler+0x1fc>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800fc92:	f013 0f40 	tst.w	r3, #64	; 0x40
 800fc96:	d003      	beq.n	800fca0 <HAL_UART_IRQHandler+0x58>
 800fc98:	f011 0f40 	tst.w	r1, #64	; 0x40
 800fc9c:	f040 80ff 	bne.w	800fe9e <HAL_UART_IRQHandler+0x256>
}
 800fca0:	b002      	add	sp, #8
 800fca2:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800fca4:	f013 0f01 	tst.w	r3, #1
 800fca8:	d006      	beq.n	800fcb8 <HAL_UART_IRQHandler+0x70>
 800fcaa:	f411 7f80 	tst.w	r1, #256	; 0x100
 800fcae:	d003      	beq.n	800fcb8 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fcb0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800fcb2:	f042 0201 	orr.w	r2, r2, #1
 800fcb6:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fcb8:	f013 0f04 	tst.w	r3, #4
 800fcbc:	d02f      	beq.n	800fd1e <HAL_UART_IRQHandler+0xd6>
 800fcbe:	b158      	cbz	r0, 800fcd8 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fcc0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800fcc2:	f042 0202 	orr.w	r2, r2, #2
 800fcc6:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fcc8:	f013 0f02 	tst.w	r3, #2
 800fccc:	f000 80f2 	beq.w	800feb4 <HAL_UART_IRQHandler+0x26c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fcd0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800fcd2:	f042 0204 	orr.w	r2, r2, #4
 800fcd6:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800fcd8:	f013 0f08 	tst.w	r3, #8
 800fcdc:	d007      	beq.n	800fcee <HAL_UART_IRQHandler+0xa6>
 800fcde:	f001 0220 	and.w	r2, r1, #32
 800fce2:	4302      	orrs	r2, r0
 800fce4:	d003      	beq.n	800fcee <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fce6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800fce8:	f042 0208 	orr.w	r2, r2, #8
 800fcec:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fcee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800fcf0:	2a00      	cmp	r2, #0
 800fcf2:	d0d5      	beq.n	800fca0 <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fcf4:	f013 0f20 	tst.w	r3, #32
 800fcf8:	d002      	beq.n	800fd00 <HAL_UART_IRQHandler+0xb8>
 800fcfa:	f011 0f20 	tst.w	r1, #32
 800fcfe:	d114      	bne.n	800fd2a <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fd00:	6823      	ldr	r3, [r4, #0]
 800fd02:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800fd04:	6c23      	ldr	r3, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fd06:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800fd0a:	f003 0308 	and.w	r3, r3, #8
 800fd0e:	4313      	orrs	r3, r2
 800fd10:	d10f      	bne.n	800fd32 <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 800fd12:	4620      	mov	r0, r4
 800fd14:	f7ff fef8 	bl	800fb08 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	6423      	str	r3, [r4, #64]	; 0x40
 800fd1c:	e7c0      	b.n	800fca0 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fd1e:	f013 0f02 	tst.w	r3, #2
 800fd22:	d0d9      	beq.n	800fcd8 <HAL_UART_IRQHandler+0x90>
 800fd24:	2800      	cmp	r0, #0
 800fd26:	d0d7      	beq.n	800fcd8 <HAL_UART_IRQHandler+0x90>
 800fd28:	e7d2      	b.n	800fcd0 <HAL_UART_IRQHandler+0x88>
        UART_Receive_IT(huart);
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	f7ff ff24 	bl	800fb78 <UART_Receive_IT>
 800fd30:	e7e6      	b.n	800fd00 <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 800fd32:	4620      	mov	r0, r4
 800fd34:	f7ff fd58 	bl	800f7e8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd38:	6823      	ldr	r3, [r4, #0]
 800fd3a:	695a      	ldr	r2, [r3, #20]
 800fd3c:	f012 0f40 	tst.w	r2, #64	; 0x40
 800fd40:	d014      	beq.n	800fd6c <HAL_UART_IRQHandler+0x124>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd42:	695a      	ldr	r2, [r3, #20]
 800fd44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fd48:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800fd4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fd4c:	b153      	cbz	r3, 800fd64 <HAL_UART_IRQHandler+0x11c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fd4e:	4a5c      	ldr	r2, [pc, #368]	; (800fec0 <HAL_UART_IRQHandler+0x278>)
 800fd50:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fd52:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800fd54:	f7fd fe17 	bl	800d986 <HAL_DMA_Abort_IT>
 800fd58:	2800      	cmp	r0, #0
 800fd5a:	d0a1      	beq.n	800fca0 <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fd5c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800fd5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fd60:	4798      	blx	r3
 800fd62:	e79d      	b.n	800fca0 <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 800fd64:	4620      	mov	r0, r4
 800fd66:	f7ff fecf 	bl	800fb08 <HAL_UART_ErrorCallback>
 800fd6a:	e799      	b.n	800fca0 <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 800fd6c:	4620      	mov	r0, r4
 800fd6e:	f7ff fecb 	bl	800fb08 <HAL_UART_ErrorCallback>
 800fd72:	e795      	b.n	800fca0 <HAL_UART_IRQHandler+0x58>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800fd74:	f013 0f10 	tst.w	r3, #16
 800fd78:	d084      	beq.n	800fc84 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800fd7a:	f011 0f10 	tst.w	r1, #16
 800fd7e:	d081      	beq.n	800fc84 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800fd80:	2300      	movs	r3, #0
 800fd82:	9301      	str	r3, [sp, #4]
 800fd84:	6813      	ldr	r3, [r2, #0]
 800fd86:	9301      	str	r3, [sp, #4]
 800fd88:	6853      	ldr	r3, [r2, #4]
 800fd8a:	9301      	str	r3, [sp, #4]
 800fd8c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd8e:	6953      	ldr	r3, [r2, #20]
 800fd90:	f013 0f40 	tst.w	r3, #64	; 0x40
 800fd94:	d032      	beq.n	800fdfc <HAL_UART_IRQHandler+0x1b4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fd96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fd98:	680b      	ldr	r3, [r1, #0]
 800fd9a:	685b      	ldr	r3, [r3, #4]
 800fd9c:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	f43f af7e 	beq.w	800fca0 <HAL_UART_IRQHandler+0x58>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800fda4:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 800fda6:	4298      	cmp	r0, r3
 800fda8:	f67f af7a 	bls.w	800fca0 <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 800fdac:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fdae:	698b      	ldr	r3, [r1, #24]
 800fdb0:	2b20      	cmp	r3, #32
 800fdb2:	d107      	bne.n	800fdc4 <HAL_UART_IRQHandler+0x17c>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fdb4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800fdb6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800fdb8:	1ac9      	subs	r1, r1, r3
 800fdba:	b289      	uxth	r1, r1
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	f7ff feda 	bl	800fb76 <HAL_UARTEx_RxEventCallback>
 800fdc2:	e76d      	b.n	800fca0 <HAL_UART_IRQHandler+0x58>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fdc4:	68d3      	ldr	r3, [r2, #12]
 800fdc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fdca:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fdcc:	6822      	ldr	r2, [r4, #0]
 800fdce:	6953      	ldr	r3, [r2, #20]
 800fdd0:	f023 0301 	bic.w	r3, r3, #1
 800fdd4:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fdd6:	6822      	ldr	r2, [r4, #0]
 800fdd8:	6953      	ldr	r3, [r2, #20]
 800fdda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fdde:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800fde0:	2320      	movs	r3, #32
 800fde2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fde6:	2300      	movs	r3, #0
 800fde8:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fdea:	6822      	ldr	r2, [r4, #0]
 800fdec:	68d3      	ldr	r3, [r2, #12]
 800fdee:	f023 0310 	bic.w	r3, r3, #16
 800fdf2:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fdf4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800fdf6:	f7fd fda1 	bl	800d93c <HAL_DMA_Abort>
 800fdfa:	e7db      	b.n	800fdb4 <HAL_UART_IRQHandler+0x16c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fdfc:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800fdfe:	b299      	uxth	r1, r3
      if (  (huart->RxXferCount > 0U)
 800fe00:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800fe02:	b29b      	uxth	r3, r3
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	f43f af4b 	beq.w	800fca0 <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fe0a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800fe0c:	1a59      	subs	r1, r3, r1
 800fe0e:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 800fe10:	2900      	cmp	r1, #0
 800fe12:	f43f af45 	beq.w	800fca0 <HAL_UART_IRQHandler+0x58>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fe16:	68d3      	ldr	r3, [r2, #12]
 800fe18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fe1c:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe1e:	6822      	ldr	r2, [r4, #0]
 800fe20:	6953      	ldr	r3, [r2, #20]
 800fe22:	f023 0301 	bic.w	r3, r3, #1
 800fe26:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 800fe28:	2320      	movs	r3, #32
 800fe2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe32:	6822      	ldr	r2, [r4, #0]
 800fe34:	68d3      	ldr	r3, [r2, #12]
 800fe36:	f023 0310 	bic.w	r3, r3, #16
 800fe3a:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fe3c:	4620      	mov	r0, r4
 800fe3e:	f7ff fe9a 	bl	800fb76 <HAL_UARTEx_RxEventCallback>
 800fe42:	e72d      	b.n	800fca0 <HAL_UART_IRQHandler+0x58>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fe44:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800fe48:	b2db      	uxtb	r3, r3
 800fe4a:	2b21      	cmp	r3, #33	; 0x21
 800fe4c:	f47f af28 	bne.w	800fca0 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe50:	68a3      	ldr	r3, [r4, #8]
 800fe52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe56:	d016      	beq.n	800fe86 <HAL_UART_IRQHandler+0x23e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800fe58:	6a23      	ldr	r3, [r4, #32]
 800fe5a:	1c59      	adds	r1, r3, #1
 800fe5c:	6221      	str	r1, [r4, #32]
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 800fe62:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800fe64:	3b01      	subs	r3, #1
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	84e3      	strh	r3, [r4, #38]	; 0x26
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	f47f af18 	bne.w	800fca0 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800fe70:	6822      	ldr	r2, [r4, #0]
 800fe72:	68d3      	ldr	r3, [r2, #12]
 800fe74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe78:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800fe7a:	6822      	ldr	r2, [r4, #0]
 800fe7c:	68d3      	ldr	r3, [r2, #12]
 800fe7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe82:	60d3      	str	r3, [r2, #12]
 800fe84:	e70c      	b.n	800fca0 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe86:	6923      	ldr	r3, [r4, #16]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d1e5      	bne.n	800fe58 <HAL_UART_IRQHandler+0x210>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800fe8c:	6a23      	ldr	r3, [r4, #32]
 800fe8e:	881b      	ldrh	r3, [r3, #0]
 800fe90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe94:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 800fe96:	6a23      	ldr	r3, [r4, #32]
 800fe98:	3302      	adds	r3, #2
 800fe9a:	6223      	str	r3, [r4, #32]
 800fe9c:	e7e1      	b.n	800fe62 <HAL_UART_IRQHandler+0x21a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800fe9e:	68d3      	ldr	r3, [r2, #12]
 800fea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fea4:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 800fea6:	2320      	movs	r3, #32
 800fea8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800feac:	4620      	mov	r0, r4
 800feae:	f7ff fe29 	bl	800fb04 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 800feb2:	e6f5      	b.n	800fca0 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800feb4:	f013 0f08 	tst.w	r3, #8
 800feb8:	f47f af15 	bne.w	800fce6 <HAL_UART_IRQHandler+0x9e>
 800febc:	e717      	b.n	800fcee <HAL_UART_IRQHandler+0xa6>
 800febe:	bf00      	nop
 800fec0:	0800fb67 	.word	0x0800fb67

0800fec4 <UART_DMARxHalfCplt>:
{
 800fec4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fec6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fec8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800feca:	2b01      	cmp	r3, #1
 800fecc:	d002      	beq.n	800fed4 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800fece:	f7ff fe1a 	bl	800fb06 <HAL_UART_RxHalfCpltCallback>
}
 800fed2:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800fed4:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800fed6:	0849      	lsrs	r1, r1, #1
 800fed8:	f7ff fe4d 	bl	800fb76 <HAL_UARTEx_RxEventCallback>
 800fedc:	e7f9      	b.n	800fed2 <UART_DMARxHalfCplt+0xe>

0800fede <UART_DMAReceiveCplt>:
{
 800fede:	b508      	push	{r3, lr}
 800fee0:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fee2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	f013 0f20 	tst.w	r3, #32
 800feec:	d116      	bne.n	800ff1c <UART_DMAReceiveCplt+0x3e>
    huart->RxXferCount = 0U;
 800feee:	2300      	movs	r3, #0
 800fef0:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fef2:	6802      	ldr	r2, [r0, #0]
 800fef4:	68d3      	ldr	r3, [r2, #12]
 800fef6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fefa:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fefc:	6802      	ldr	r2, [r0, #0]
 800fefe:	6953      	ldr	r3, [r2, #20]
 800ff00:	f023 0301 	bic.w	r3, r3, #1
 800ff04:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff06:	6802      	ldr	r2, [r0, #0]
 800ff08:	6953      	ldr	r3, [r2, #20]
 800ff0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff0e:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 800ff10:	2320      	movs	r3, #32
 800ff12:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff16:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ff18:	2b01      	cmp	r3, #1
 800ff1a:	d005      	beq.n	800ff28 <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff1c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ff1e:	2b01      	cmp	r3, #1
 800ff20:	d008      	beq.n	800ff34 <UART_DMAReceiveCplt+0x56>
    HAL_UART_RxCpltCallback(huart);
 800ff22:	f7fc fbeb 	bl	800c6fc <HAL_UART_RxCpltCallback>
}
 800ff26:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff28:	6802      	ldr	r2, [r0, #0]
 800ff2a:	68d3      	ldr	r3, [r2, #12]
 800ff2c:	f023 0310 	bic.w	r3, r3, #16
 800ff30:	60d3      	str	r3, [r2, #12]
 800ff32:	e7f3      	b.n	800ff1c <UART_DMAReceiveCplt+0x3e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ff34:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800ff36:	f7ff fe1e 	bl	800fb76 <HAL_UARTEx_RxEventCallback>
 800ff3a:	e7f4      	b.n	800ff26 <UART_DMAReceiveCplt+0x48>

0800ff3c <HAL_UART_GetError>:
  return huart->ErrorCode;
 800ff3c:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 800ff3e:	4770      	bx	lr

0800ff40 <UART_Start_Receive_DMA>:
{
 800ff40:	b530      	push	{r4, r5, lr}
 800ff42:	b083      	sub	sp, #12
 800ff44:	4604      	mov	r4, r0
 800ff46:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 800ff48:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 800ff4a:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff4c:	2500      	movs	r5, #0
 800ff4e:	6405      	str	r5, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ff50:	2222      	movs	r2, #34	; 0x22
 800ff52:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ff56:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800ff58:	4814      	ldr	r0, [pc, #80]	; (800ffac <UART_Start_Receive_DMA+0x6c>)
 800ff5a:	6290      	str	r0, [r2, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ff5c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ff5e:	4814      	ldr	r0, [pc, #80]	; (800ffb0 <UART_Start_Receive_DMA+0x70>)
 800ff60:	62d0      	str	r0, [r2, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ff62:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ff64:	4813      	ldr	r0, [pc, #76]	; (800ffb4 <UART_Start_Receive_DMA+0x74>)
 800ff66:	6310      	str	r0, [r2, #48]	; 0x30
  huart->hdmarx->XferAbortCallback = NULL;
 800ff68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ff6a:	6355      	str	r5, [r2, #52]	; 0x34
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ff6c:	6820      	ldr	r0, [r4, #0]
 800ff6e:	460a      	mov	r2, r1
 800ff70:	1d01      	adds	r1, r0, #4
 800ff72:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800ff74:	f7fd fc90 	bl	800d898 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ff78:	9501      	str	r5, [sp, #4]
 800ff7a:	6823      	ldr	r3, [r4, #0]
 800ff7c:	681a      	ldr	r2, [r3, #0]
 800ff7e:	9201      	str	r2, [sp, #4]
 800ff80:	685a      	ldr	r2, [r3, #4]
 800ff82:	9201      	str	r2, [sp, #4]
 800ff84:	9a01      	ldr	r2, [sp, #4]
  __HAL_UNLOCK(huart);
 800ff86:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ff8a:	68da      	ldr	r2, [r3, #12]
 800ff8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ff90:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff92:	6822      	ldr	r2, [r4, #0]
 800ff94:	6953      	ldr	r3, [r2, #20]
 800ff96:	f043 0301 	orr.w	r3, r3, #1
 800ff9a:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff9c:	6822      	ldr	r2, [r4, #0]
 800ff9e:	6953      	ldr	r3, [r2, #20]
 800ffa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffa4:	6153      	str	r3, [r2, #20]
}
 800ffa6:	4628      	mov	r0, r5
 800ffa8:	b003      	add	sp, #12
 800ffaa:	bd30      	pop	{r4, r5, pc}
 800ffac:	0800fedf 	.word	0x0800fedf
 800ffb0:	0800fec5 	.word	0x0800fec5
 800ffb4:	0800fb0b 	.word	0x0800fb0b

0800ffb8 <HAL_UART_Receive_DMA>:
{
 800ffb8:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800ffba:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800ffbe:	b2db      	uxtb	r3, r3
 800ffc0:	2b20      	cmp	r3, #32
 800ffc2:	d10d      	bne.n	800ffe0 <HAL_UART_Receive_DMA+0x28>
    if ((pData == NULL) || (Size == 0U))
 800ffc4:	b171      	cbz	r1, 800ffe4 <HAL_UART_Receive_DMA+0x2c>
 800ffc6:	b17a      	cbz	r2, 800ffe8 <HAL_UART_Receive_DMA+0x30>
    __HAL_LOCK(huart);
 800ffc8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ffcc:	2b01      	cmp	r3, #1
 800ffce:	d00d      	beq.n	800ffec <HAL_UART_Receive_DMA+0x34>
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	6303      	str	r3, [r0, #48]	; 0x30
    return(UART_Start_Receive_DMA(huart, pData, Size));
 800ffda:	f7ff ffb1 	bl	800ff40 <UART_Start_Receive_DMA>
 800ffde:	e000      	b.n	800ffe2 <HAL_UART_Receive_DMA+0x2a>
    return HAL_BUSY;
 800ffe0:	2002      	movs	r0, #2
}
 800ffe2:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 800ffe4:	2001      	movs	r0, #1
 800ffe6:	e7fc      	b.n	800ffe2 <HAL_UART_Receive_DMA+0x2a>
 800ffe8:	2001      	movs	r0, #1
 800ffea:	e7fa      	b.n	800ffe2 <HAL_UART_Receive_DMA+0x2a>
    __HAL_LOCK(huart);
 800ffec:	2002      	movs	r0, #2
 800ffee:	e7f8      	b.n	800ffe2 <HAL_UART_Receive_DMA+0x2a>

0800fff0 <__errno>:
 800fff0:	4b01      	ldr	r3, [pc, #4]	; (800fff8 <__errno+0x8>)
 800fff2:	6818      	ldr	r0, [r3, #0]
 800fff4:	4770      	bx	lr
 800fff6:	bf00      	nop
 800fff8:	2000007c 	.word	0x2000007c

0800fffc <__libc_init_array>:
 800fffc:	b570      	push	{r4, r5, r6, lr}
 800fffe:	2600      	movs	r6, #0
 8010000:	4d0c      	ldr	r5, [pc, #48]	; (8010034 <__libc_init_array+0x38>)
 8010002:	4c0d      	ldr	r4, [pc, #52]	; (8010038 <__libc_init_array+0x3c>)
 8010004:	1b64      	subs	r4, r4, r5
 8010006:	10a4      	asrs	r4, r4, #2
 8010008:	42a6      	cmp	r6, r4
 801000a:	d109      	bne.n	8010020 <__libc_init_array+0x24>
 801000c:	f001 f8f2 	bl	80111f4 <_init>
 8010010:	2600      	movs	r6, #0
 8010012:	4d0a      	ldr	r5, [pc, #40]	; (801003c <__libc_init_array+0x40>)
 8010014:	4c0a      	ldr	r4, [pc, #40]	; (8010040 <__libc_init_array+0x44>)
 8010016:	1b64      	subs	r4, r4, r5
 8010018:	10a4      	asrs	r4, r4, #2
 801001a:	42a6      	cmp	r6, r4
 801001c:	d105      	bne.n	801002a <__libc_init_array+0x2e>
 801001e:	bd70      	pop	{r4, r5, r6, pc}
 8010020:	f855 3b04 	ldr.w	r3, [r5], #4
 8010024:	4798      	blx	r3
 8010026:	3601      	adds	r6, #1
 8010028:	e7ee      	b.n	8010008 <__libc_init_array+0xc>
 801002a:	f855 3b04 	ldr.w	r3, [r5], #4
 801002e:	4798      	blx	r3
 8010030:	3601      	adds	r6, #1
 8010032:	e7f2      	b.n	801001a <__libc_init_array+0x1e>
 8010034:	08011370 	.word	0x08011370
 8010038:	08011370 	.word	0x08011370
 801003c:	08011370 	.word	0x08011370
 8010040:	08011374 	.word	0x08011374

08010044 <memset>:
 8010044:	4603      	mov	r3, r0
 8010046:	4402      	add	r2, r0
 8010048:	4293      	cmp	r3, r2
 801004a:	d100      	bne.n	801004e <memset+0xa>
 801004c:	4770      	bx	lr
 801004e:	f803 1b01 	strb.w	r1, [r3], #1
 8010052:	e7f9      	b.n	8010048 <memset+0x4>

08010054 <log>:
 8010054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010056:	4604      	mov	r4, r0
 8010058:	460d      	mov	r5, r1
 801005a:	f000 f895 	bl	8010188 <__ieee754_log>
 801005e:	4622      	mov	r2, r4
 8010060:	4606      	mov	r6, r0
 8010062:	460f      	mov	r7, r1
 8010064:	462b      	mov	r3, r5
 8010066:	4620      	mov	r0, r4
 8010068:	4629      	mov	r1, r5
 801006a:	f7f6 f8df 	bl	800622c <__aeabi_dcmpun>
 801006e:	b998      	cbnz	r0, 8010098 <log+0x44>
 8010070:	2200      	movs	r2, #0
 8010072:	2300      	movs	r3, #0
 8010074:	4620      	mov	r0, r4
 8010076:	4629      	mov	r1, r5
 8010078:	f7f6 f8ce 	bl	8006218 <__aeabi_dcmpgt>
 801007c:	b960      	cbnz	r0, 8010098 <log+0x44>
 801007e:	2200      	movs	r2, #0
 8010080:	2300      	movs	r3, #0
 8010082:	4620      	mov	r0, r4
 8010084:	4629      	mov	r1, r5
 8010086:	f7f6 f89f 	bl	80061c8 <__aeabi_dcmpeq>
 801008a:	b140      	cbz	r0, 801009e <log+0x4a>
 801008c:	f7ff ffb0 	bl	800fff0 <__errno>
 8010090:	2322      	movs	r3, #34	; 0x22
 8010092:	2600      	movs	r6, #0
 8010094:	4f06      	ldr	r7, [pc, #24]	; (80100b0 <log+0x5c>)
 8010096:	6003      	str	r3, [r0, #0]
 8010098:	4630      	mov	r0, r6
 801009a:	4639      	mov	r1, r7
 801009c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801009e:	f7ff ffa7 	bl	800fff0 <__errno>
 80100a2:	2321      	movs	r3, #33	; 0x21
 80100a4:	6003      	str	r3, [r0, #0]
 80100a6:	4803      	ldr	r0, [pc, #12]	; (80100b4 <log+0x60>)
 80100a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80100ac:	f001 b81c 	b.w	80110e8 <nan>
 80100b0:	fff00000 	.word	0xfff00000
 80100b4:	08011334 	.word	0x08011334

080100b8 <pow>:
 80100b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100bc:	4614      	mov	r4, r2
 80100be:	461d      	mov	r5, r3
 80100c0:	4680      	mov	r8, r0
 80100c2:	4689      	mov	r9, r1
 80100c4:	f000 fa14 	bl	80104f0 <__ieee754_pow>
 80100c8:	4622      	mov	r2, r4
 80100ca:	4606      	mov	r6, r0
 80100cc:	460f      	mov	r7, r1
 80100ce:	462b      	mov	r3, r5
 80100d0:	4620      	mov	r0, r4
 80100d2:	4629      	mov	r1, r5
 80100d4:	f7f6 f8aa 	bl	800622c <__aeabi_dcmpun>
 80100d8:	bbc8      	cbnz	r0, 801014e <pow+0x96>
 80100da:	2200      	movs	r2, #0
 80100dc:	2300      	movs	r3, #0
 80100de:	4640      	mov	r0, r8
 80100e0:	4649      	mov	r1, r9
 80100e2:	f7f6 f871 	bl	80061c8 <__aeabi_dcmpeq>
 80100e6:	b1b8      	cbz	r0, 8010118 <pow+0x60>
 80100e8:	2200      	movs	r2, #0
 80100ea:	2300      	movs	r3, #0
 80100ec:	4620      	mov	r0, r4
 80100ee:	4629      	mov	r1, r5
 80100f0:	f7f6 f86a 	bl	80061c8 <__aeabi_dcmpeq>
 80100f4:	2800      	cmp	r0, #0
 80100f6:	d141      	bne.n	801017c <pow+0xc4>
 80100f8:	4620      	mov	r0, r4
 80100fa:	4629      	mov	r1, r5
 80100fc:	f000 ffed 	bl	80110da <finite>
 8010100:	b328      	cbz	r0, 801014e <pow+0x96>
 8010102:	2200      	movs	r2, #0
 8010104:	2300      	movs	r3, #0
 8010106:	4620      	mov	r0, r4
 8010108:	4629      	mov	r1, r5
 801010a:	f7f6 f867 	bl	80061dc <__aeabi_dcmplt>
 801010e:	b1f0      	cbz	r0, 801014e <pow+0x96>
 8010110:	f7ff ff6e 	bl	800fff0 <__errno>
 8010114:	2322      	movs	r3, #34	; 0x22
 8010116:	e019      	b.n	801014c <pow+0x94>
 8010118:	4630      	mov	r0, r6
 801011a:	4639      	mov	r1, r7
 801011c:	f000 ffdd 	bl	80110da <finite>
 8010120:	b9c8      	cbnz	r0, 8010156 <pow+0x9e>
 8010122:	4640      	mov	r0, r8
 8010124:	4649      	mov	r1, r9
 8010126:	f000 ffd8 	bl	80110da <finite>
 801012a:	b1a0      	cbz	r0, 8010156 <pow+0x9e>
 801012c:	4620      	mov	r0, r4
 801012e:	4629      	mov	r1, r5
 8010130:	f000 ffd3 	bl	80110da <finite>
 8010134:	b178      	cbz	r0, 8010156 <pow+0x9e>
 8010136:	4632      	mov	r2, r6
 8010138:	463b      	mov	r3, r7
 801013a:	4630      	mov	r0, r6
 801013c:	4639      	mov	r1, r7
 801013e:	f7f6 f875 	bl	800622c <__aeabi_dcmpun>
 8010142:	2800      	cmp	r0, #0
 8010144:	d0e4      	beq.n	8010110 <pow+0x58>
 8010146:	f7ff ff53 	bl	800fff0 <__errno>
 801014a:	2321      	movs	r3, #33	; 0x21
 801014c:	6003      	str	r3, [r0, #0]
 801014e:	4630      	mov	r0, r6
 8010150:	4639      	mov	r1, r7
 8010152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010156:	2200      	movs	r2, #0
 8010158:	2300      	movs	r3, #0
 801015a:	4630      	mov	r0, r6
 801015c:	4639      	mov	r1, r7
 801015e:	f7f6 f833 	bl	80061c8 <__aeabi_dcmpeq>
 8010162:	2800      	cmp	r0, #0
 8010164:	d0f3      	beq.n	801014e <pow+0x96>
 8010166:	4640      	mov	r0, r8
 8010168:	4649      	mov	r1, r9
 801016a:	f000 ffb6 	bl	80110da <finite>
 801016e:	2800      	cmp	r0, #0
 8010170:	d0ed      	beq.n	801014e <pow+0x96>
 8010172:	4620      	mov	r0, r4
 8010174:	4629      	mov	r1, r5
 8010176:	f000 ffb0 	bl	80110da <finite>
 801017a:	e7c8      	b.n	801010e <pow+0x56>
 801017c:	2600      	movs	r6, #0
 801017e:	4f01      	ldr	r7, [pc, #4]	; (8010184 <pow+0xcc>)
 8010180:	e7e5      	b.n	801014e <pow+0x96>
 8010182:	bf00      	nop
 8010184:	3ff00000 	.word	0x3ff00000

08010188 <__ieee754_log>:
 8010188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801018c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010190:	4602      	mov	r2, r0
 8010192:	460b      	mov	r3, r1
 8010194:	460d      	mov	r5, r1
 8010196:	b087      	sub	sp, #28
 8010198:	da24      	bge.n	80101e4 <__ieee754_log+0x5c>
 801019a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 801019e:	4304      	orrs	r4, r0
 80101a0:	d108      	bne.n	80101b4 <__ieee754_log+0x2c>
 80101a2:	2200      	movs	r2, #0
 80101a4:	2300      	movs	r3, #0
 80101a6:	2000      	movs	r0, #0
 80101a8:	49cb      	ldr	r1, [pc, #812]	; (80104d8 <__ieee754_log+0x350>)
 80101aa:	f7f5 fecf 	bl	8005f4c <__aeabi_ddiv>
 80101ae:	b007      	add	sp, #28
 80101b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101b4:	2900      	cmp	r1, #0
 80101b6:	da04      	bge.n	80101c2 <__ieee754_log+0x3a>
 80101b8:	f7f5 fbe6 	bl	8005988 <__aeabi_dsub>
 80101bc:	2200      	movs	r2, #0
 80101be:	2300      	movs	r3, #0
 80101c0:	e7f3      	b.n	80101aa <__ieee754_log+0x22>
 80101c2:	2200      	movs	r2, #0
 80101c4:	4bc5      	ldr	r3, [pc, #788]	; (80104dc <__ieee754_log+0x354>)
 80101c6:	f7f5 fd97 	bl	8005cf8 <__aeabi_dmul>
 80101ca:	f06f 0635 	mvn.w	r6, #53	; 0x35
 80101ce:	4602      	mov	r2, r0
 80101d0:	460b      	mov	r3, r1
 80101d2:	460d      	mov	r5, r1
 80101d4:	49c2      	ldr	r1, [pc, #776]	; (80104e0 <__ieee754_log+0x358>)
 80101d6:	428d      	cmp	r5, r1
 80101d8:	dd06      	ble.n	80101e8 <__ieee754_log+0x60>
 80101da:	4610      	mov	r0, r2
 80101dc:	4619      	mov	r1, r3
 80101de:	f7f5 fbd5 	bl	800598c <__adddf3>
 80101e2:	e7e4      	b.n	80101ae <__ieee754_log+0x26>
 80101e4:	2600      	movs	r6, #0
 80101e6:	e7f5      	b.n	80101d4 <__ieee754_log+0x4c>
 80101e8:	152c      	asrs	r4, r5, #20
 80101ea:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80101ee:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 80101f2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80101f6:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 80101fa:	4426      	add	r6, r4
 80101fc:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8010200:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 8010204:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8010208:	ea41 0305 	orr.w	r3, r1, r5
 801020c:	4610      	mov	r0, r2
 801020e:	4619      	mov	r1, r3
 8010210:	2200      	movs	r2, #0
 8010212:	4bb4      	ldr	r3, [pc, #720]	; (80104e4 <__ieee754_log+0x35c>)
 8010214:	f7f5 fbb8 	bl	8005988 <__aeabi_dsub>
 8010218:	1cab      	adds	r3, r5, #2
 801021a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801021e:	2b02      	cmp	r3, #2
 8010220:	4682      	mov	sl, r0
 8010222:	468b      	mov	fp, r1
 8010224:	f04f 0200 	mov.w	r2, #0
 8010228:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 801022c:	dc53      	bgt.n	80102d6 <__ieee754_log+0x14e>
 801022e:	2300      	movs	r3, #0
 8010230:	f7f5 ffca 	bl	80061c8 <__aeabi_dcmpeq>
 8010234:	b1d0      	cbz	r0, 801026c <__ieee754_log+0xe4>
 8010236:	2c00      	cmp	r4, #0
 8010238:	f000 8122 	beq.w	8010480 <__ieee754_log+0x2f8>
 801023c:	4620      	mov	r0, r4
 801023e:	f7f5 fcf1 	bl	8005c24 <__aeabi_i2d>
 8010242:	a391      	add	r3, pc, #580	; (adr r3, 8010488 <__ieee754_log+0x300>)
 8010244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010248:	4606      	mov	r6, r0
 801024a:	460f      	mov	r7, r1
 801024c:	f7f5 fd54 	bl	8005cf8 <__aeabi_dmul>
 8010250:	a38f      	add	r3, pc, #572	; (adr r3, 8010490 <__ieee754_log+0x308>)
 8010252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010256:	4604      	mov	r4, r0
 8010258:	460d      	mov	r5, r1
 801025a:	4630      	mov	r0, r6
 801025c:	4639      	mov	r1, r7
 801025e:	f7f5 fd4b 	bl	8005cf8 <__aeabi_dmul>
 8010262:	4602      	mov	r2, r0
 8010264:	460b      	mov	r3, r1
 8010266:	4620      	mov	r0, r4
 8010268:	4629      	mov	r1, r5
 801026a:	e7b8      	b.n	80101de <__ieee754_log+0x56>
 801026c:	a38a      	add	r3, pc, #552	; (adr r3, 8010498 <__ieee754_log+0x310>)
 801026e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010272:	4650      	mov	r0, sl
 8010274:	4659      	mov	r1, fp
 8010276:	f7f5 fd3f 	bl	8005cf8 <__aeabi_dmul>
 801027a:	4602      	mov	r2, r0
 801027c:	460b      	mov	r3, r1
 801027e:	2000      	movs	r0, #0
 8010280:	4999      	ldr	r1, [pc, #612]	; (80104e8 <__ieee754_log+0x360>)
 8010282:	f7f5 fb81 	bl	8005988 <__aeabi_dsub>
 8010286:	4652      	mov	r2, sl
 8010288:	4606      	mov	r6, r0
 801028a:	460f      	mov	r7, r1
 801028c:	465b      	mov	r3, fp
 801028e:	4650      	mov	r0, sl
 8010290:	4659      	mov	r1, fp
 8010292:	f7f5 fd31 	bl	8005cf8 <__aeabi_dmul>
 8010296:	4602      	mov	r2, r0
 8010298:	460b      	mov	r3, r1
 801029a:	4630      	mov	r0, r6
 801029c:	4639      	mov	r1, r7
 801029e:	f7f5 fd2b 	bl	8005cf8 <__aeabi_dmul>
 80102a2:	4606      	mov	r6, r0
 80102a4:	460f      	mov	r7, r1
 80102a6:	b914      	cbnz	r4, 80102ae <__ieee754_log+0x126>
 80102a8:	4632      	mov	r2, r6
 80102aa:	463b      	mov	r3, r7
 80102ac:	e0a2      	b.n	80103f4 <__ieee754_log+0x26c>
 80102ae:	4620      	mov	r0, r4
 80102b0:	f7f5 fcb8 	bl	8005c24 <__aeabi_i2d>
 80102b4:	a374      	add	r3, pc, #464	; (adr r3, 8010488 <__ieee754_log+0x300>)
 80102b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ba:	4680      	mov	r8, r0
 80102bc:	4689      	mov	r9, r1
 80102be:	f7f5 fd1b 	bl	8005cf8 <__aeabi_dmul>
 80102c2:	a373      	add	r3, pc, #460	; (adr r3, 8010490 <__ieee754_log+0x308>)
 80102c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c8:	4604      	mov	r4, r0
 80102ca:	460d      	mov	r5, r1
 80102cc:	4640      	mov	r0, r8
 80102ce:	4649      	mov	r1, r9
 80102d0:	f7f5 fd12 	bl	8005cf8 <__aeabi_dmul>
 80102d4:	e0a7      	b.n	8010426 <__ieee754_log+0x29e>
 80102d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80102da:	f7f5 fb57 	bl	800598c <__adddf3>
 80102de:	4602      	mov	r2, r0
 80102e0:	460b      	mov	r3, r1
 80102e2:	4650      	mov	r0, sl
 80102e4:	4659      	mov	r1, fp
 80102e6:	f7f5 fe31 	bl	8005f4c <__aeabi_ddiv>
 80102ea:	e9cd 0100 	strd	r0, r1, [sp]
 80102ee:	4620      	mov	r0, r4
 80102f0:	f7f5 fc98 	bl	8005c24 <__aeabi_i2d>
 80102f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102fc:	4610      	mov	r0, r2
 80102fe:	4619      	mov	r1, r3
 8010300:	f7f5 fcfa 	bl	8005cf8 <__aeabi_dmul>
 8010304:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8010308:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801030c:	4602      	mov	r2, r0
 801030e:	9305      	str	r3, [sp, #20]
 8010310:	460b      	mov	r3, r1
 8010312:	4606      	mov	r6, r0
 8010314:	460f      	mov	r7, r1
 8010316:	f7f5 fcef 	bl	8005cf8 <__aeabi_dmul>
 801031a:	a361      	add	r3, pc, #388	; (adr r3, 80104a0 <__ieee754_log+0x318>)
 801031c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010320:	4680      	mov	r8, r0
 8010322:	4689      	mov	r9, r1
 8010324:	f7f5 fce8 	bl	8005cf8 <__aeabi_dmul>
 8010328:	a35f      	add	r3, pc, #380	; (adr r3, 80104a8 <__ieee754_log+0x320>)
 801032a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801032e:	f7f5 fb2d 	bl	800598c <__adddf3>
 8010332:	4642      	mov	r2, r8
 8010334:	464b      	mov	r3, r9
 8010336:	f7f5 fcdf 	bl	8005cf8 <__aeabi_dmul>
 801033a:	a35d      	add	r3, pc, #372	; (adr r3, 80104b0 <__ieee754_log+0x328>)
 801033c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010340:	f7f5 fb24 	bl	800598c <__adddf3>
 8010344:	4642      	mov	r2, r8
 8010346:	464b      	mov	r3, r9
 8010348:	f7f5 fcd6 	bl	8005cf8 <__aeabi_dmul>
 801034c:	a35a      	add	r3, pc, #360	; (adr r3, 80104b8 <__ieee754_log+0x330>)
 801034e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010352:	f7f5 fb1b 	bl	800598c <__adddf3>
 8010356:	4632      	mov	r2, r6
 8010358:	463b      	mov	r3, r7
 801035a:	f7f5 fccd 	bl	8005cf8 <__aeabi_dmul>
 801035e:	a358      	add	r3, pc, #352	; (adr r3, 80104c0 <__ieee754_log+0x338>)
 8010360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010364:	4606      	mov	r6, r0
 8010366:	460f      	mov	r7, r1
 8010368:	4640      	mov	r0, r8
 801036a:	4649      	mov	r1, r9
 801036c:	f7f5 fcc4 	bl	8005cf8 <__aeabi_dmul>
 8010370:	a355      	add	r3, pc, #340	; (adr r3, 80104c8 <__ieee754_log+0x340>)
 8010372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010376:	f7f5 fb09 	bl	800598c <__adddf3>
 801037a:	4642      	mov	r2, r8
 801037c:	464b      	mov	r3, r9
 801037e:	f7f5 fcbb 	bl	8005cf8 <__aeabi_dmul>
 8010382:	a353      	add	r3, pc, #332	; (adr r3, 80104d0 <__ieee754_log+0x348>)
 8010384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010388:	f7f5 fb00 	bl	800598c <__adddf3>
 801038c:	4642      	mov	r2, r8
 801038e:	464b      	mov	r3, r9
 8010390:	f7f5 fcb2 	bl	8005cf8 <__aeabi_dmul>
 8010394:	460b      	mov	r3, r1
 8010396:	4602      	mov	r2, r0
 8010398:	4639      	mov	r1, r7
 801039a:	4630      	mov	r0, r6
 801039c:	f7f5 faf6 	bl	800598c <__adddf3>
 80103a0:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80103a4:	9b05      	ldr	r3, [sp, #20]
 80103a6:	3551      	adds	r5, #81	; 0x51
 80103a8:	431d      	orrs	r5, r3
 80103aa:	2d00      	cmp	r5, #0
 80103ac:	4680      	mov	r8, r0
 80103ae:	4689      	mov	r9, r1
 80103b0:	dd48      	ble.n	8010444 <__ieee754_log+0x2bc>
 80103b2:	2200      	movs	r2, #0
 80103b4:	4b4c      	ldr	r3, [pc, #304]	; (80104e8 <__ieee754_log+0x360>)
 80103b6:	4650      	mov	r0, sl
 80103b8:	4659      	mov	r1, fp
 80103ba:	f7f5 fc9d 	bl	8005cf8 <__aeabi_dmul>
 80103be:	4652      	mov	r2, sl
 80103c0:	465b      	mov	r3, fp
 80103c2:	f7f5 fc99 	bl	8005cf8 <__aeabi_dmul>
 80103c6:	4602      	mov	r2, r0
 80103c8:	460b      	mov	r3, r1
 80103ca:	4606      	mov	r6, r0
 80103cc:	460f      	mov	r7, r1
 80103ce:	4640      	mov	r0, r8
 80103d0:	4649      	mov	r1, r9
 80103d2:	f7f5 fadb 	bl	800598c <__adddf3>
 80103d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80103da:	f7f5 fc8d 	bl	8005cf8 <__aeabi_dmul>
 80103de:	4680      	mov	r8, r0
 80103e0:	4689      	mov	r9, r1
 80103e2:	b964      	cbnz	r4, 80103fe <__ieee754_log+0x276>
 80103e4:	4602      	mov	r2, r0
 80103e6:	460b      	mov	r3, r1
 80103e8:	4630      	mov	r0, r6
 80103ea:	4639      	mov	r1, r7
 80103ec:	f7f5 facc 	bl	8005988 <__aeabi_dsub>
 80103f0:	4602      	mov	r2, r0
 80103f2:	460b      	mov	r3, r1
 80103f4:	4650      	mov	r0, sl
 80103f6:	4659      	mov	r1, fp
 80103f8:	f7f5 fac6 	bl	8005988 <__aeabi_dsub>
 80103fc:	e6d7      	b.n	80101ae <__ieee754_log+0x26>
 80103fe:	a322      	add	r3, pc, #136	; (adr r3, 8010488 <__ieee754_log+0x300>)
 8010400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010408:	f7f5 fc76 	bl	8005cf8 <__aeabi_dmul>
 801040c:	a320      	add	r3, pc, #128	; (adr r3, 8010490 <__ieee754_log+0x308>)
 801040e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010412:	4604      	mov	r4, r0
 8010414:	460d      	mov	r5, r1
 8010416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801041a:	f7f5 fc6d 	bl	8005cf8 <__aeabi_dmul>
 801041e:	4642      	mov	r2, r8
 8010420:	464b      	mov	r3, r9
 8010422:	f7f5 fab3 	bl	800598c <__adddf3>
 8010426:	4602      	mov	r2, r0
 8010428:	460b      	mov	r3, r1
 801042a:	4630      	mov	r0, r6
 801042c:	4639      	mov	r1, r7
 801042e:	f7f5 faab 	bl	8005988 <__aeabi_dsub>
 8010432:	4652      	mov	r2, sl
 8010434:	465b      	mov	r3, fp
 8010436:	f7f5 faa7 	bl	8005988 <__aeabi_dsub>
 801043a:	4602      	mov	r2, r0
 801043c:	460b      	mov	r3, r1
 801043e:	4620      	mov	r0, r4
 8010440:	4629      	mov	r1, r5
 8010442:	e7d9      	b.n	80103f8 <__ieee754_log+0x270>
 8010444:	4602      	mov	r2, r0
 8010446:	460b      	mov	r3, r1
 8010448:	4650      	mov	r0, sl
 801044a:	4659      	mov	r1, fp
 801044c:	f7f5 fa9c 	bl	8005988 <__aeabi_dsub>
 8010450:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010454:	f7f5 fc50 	bl	8005cf8 <__aeabi_dmul>
 8010458:	4606      	mov	r6, r0
 801045a:	460f      	mov	r7, r1
 801045c:	2c00      	cmp	r4, #0
 801045e:	f43f af23 	beq.w	80102a8 <__ieee754_log+0x120>
 8010462:	a309      	add	r3, pc, #36	; (adr r3, 8010488 <__ieee754_log+0x300>)
 8010464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010468:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801046c:	f7f5 fc44 	bl	8005cf8 <__aeabi_dmul>
 8010470:	a307      	add	r3, pc, #28	; (adr r3, 8010490 <__ieee754_log+0x308>)
 8010472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010476:	4604      	mov	r4, r0
 8010478:	460d      	mov	r5, r1
 801047a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801047e:	e727      	b.n	80102d0 <__ieee754_log+0x148>
 8010480:	2000      	movs	r0, #0
 8010482:	2100      	movs	r1, #0
 8010484:	e693      	b.n	80101ae <__ieee754_log+0x26>
 8010486:	bf00      	nop
 8010488:	fee00000 	.word	0xfee00000
 801048c:	3fe62e42 	.word	0x3fe62e42
 8010490:	35793c76 	.word	0x35793c76
 8010494:	3dea39ef 	.word	0x3dea39ef
 8010498:	55555555 	.word	0x55555555
 801049c:	3fd55555 	.word	0x3fd55555
 80104a0:	df3e5244 	.word	0xdf3e5244
 80104a4:	3fc2f112 	.word	0x3fc2f112
 80104a8:	96cb03de 	.word	0x96cb03de
 80104ac:	3fc74664 	.word	0x3fc74664
 80104b0:	94229359 	.word	0x94229359
 80104b4:	3fd24924 	.word	0x3fd24924
 80104b8:	55555593 	.word	0x55555593
 80104bc:	3fe55555 	.word	0x3fe55555
 80104c0:	d078c69f 	.word	0xd078c69f
 80104c4:	3fc39a09 	.word	0x3fc39a09
 80104c8:	1d8e78af 	.word	0x1d8e78af
 80104cc:	3fcc71c5 	.word	0x3fcc71c5
 80104d0:	9997fa04 	.word	0x9997fa04
 80104d4:	3fd99999 	.word	0x3fd99999
 80104d8:	c3500000 	.word	0xc3500000
 80104dc:	43500000 	.word	0x43500000
 80104e0:	7fefffff 	.word	0x7fefffff
 80104e4:	3ff00000 	.word	0x3ff00000
 80104e8:	3fe00000 	.word	0x3fe00000
 80104ec:	00000000 	.word	0x00000000

080104f0 <__ieee754_pow>:
 80104f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104f4:	b093      	sub	sp, #76	; 0x4c
 80104f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80104fa:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80104fe:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8010502:	4689      	mov	r9, r1
 8010504:	ea56 0102 	orrs.w	r1, r6, r2
 8010508:	4680      	mov	r8, r0
 801050a:	d111      	bne.n	8010530 <__ieee754_pow+0x40>
 801050c:	1803      	adds	r3, r0, r0
 801050e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8010512:	4152      	adcs	r2, r2
 8010514:	4299      	cmp	r1, r3
 8010516:	4b82      	ldr	r3, [pc, #520]	; (8010720 <__ieee754_pow+0x230>)
 8010518:	4193      	sbcs	r3, r2
 801051a:	f080 84b9 	bcs.w	8010e90 <__ieee754_pow+0x9a0>
 801051e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010522:	4640      	mov	r0, r8
 8010524:	4649      	mov	r1, r9
 8010526:	f7f5 fa31 	bl	800598c <__adddf3>
 801052a:	4683      	mov	fp, r0
 801052c:	468c      	mov	ip, r1
 801052e:	e06f      	b.n	8010610 <__ieee754_pow+0x120>
 8010530:	4b7c      	ldr	r3, [pc, #496]	; (8010724 <__ieee754_pow+0x234>)
 8010532:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8010536:	429c      	cmp	r4, r3
 8010538:	464d      	mov	r5, r9
 801053a:	4682      	mov	sl, r0
 801053c:	dc06      	bgt.n	801054c <__ieee754_pow+0x5c>
 801053e:	d101      	bne.n	8010544 <__ieee754_pow+0x54>
 8010540:	2800      	cmp	r0, #0
 8010542:	d1ec      	bne.n	801051e <__ieee754_pow+0x2e>
 8010544:	429e      	cmp	r6, r3
 8010546:	dc01      	bgt.n	801054c <__ieee754_pow+0x5c>
 8010548:	d10f      	bne.n	801056a <__ieee754_pow+0x7a>
 801054a:	b172      	cbz	r2, 801056a <__ieee754_pow+0x7a>
 801054c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010550:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8010554:	ea55 050a 	orrs.w	r5, r5, sl
 8010558:	d1e1      	bne.n	801051e <__ieee754_pow+0x2e>
 801055a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801055e:	18db      	adds	r3, r3, r3
 8010560:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8010564:	4152      	adcs	r2, r2
 8010566:	429d      	cmp	r5, r3
 8010568:	e7d5      	b.n	8010516 <__ieee754_pow+0x26>
 801056a:	2d00      	cmp	r5, #0
 801056c:	da39      	bge.n	80105e2 <__ieee754_pow+0xf2>
 801056e:	4b6e      	ldr	r3, [pc, #440]	; (8010728 <__ieee754_pow+0x238>)
 8010570:	429e      	cmp	r6, r3
 8010572:	dc52      	bgt.n	801061a <__ieee754_pow+0x12a>
 8010574:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010578:	429e      	cmp	r6, r3
 801057a:	f340 849c 	ble.w	8010eb6 <__ieee754_pow+0x9c6>
 801057e:	1533      	asrs	r3, r6, #20
 8010580:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010584:	2b14      	cmp	r3, #20
 8010586:	dd0f      	ble.n	80105a8 <__ieee754_pow+0xb8>
 8010588:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801058c:	fa22 f103 	lsr.w	r1, r2, r3
 8010590:	fa01 f303 	lsl.w	r3, r1, r3
 8010594:	4293      	cmp	r3, r2
 8010596:	f040 848e 	bne.w	8010eb6 <__ieee754_pow+0x9c6>
 801059a:	f001 0101 	and.w	r1, r1, #1
 801059e:	f1c1 0302 	rsb	r3, r1, #2
 80105a2:	9300      	str	r3, [sp, #0]
 80105a4:	b182      	cbz	r2, 80105c8 <__ieee754_pow+0xd8>
 80105a6:	e05d      	b.n	8010664 <__ieee754_pow+0x174>
 80105a8:	2a00      	cmp	r2, #0
 80105aa:	d159      	bne.n	8010660 <__ieee754_pow+0x170>
 80105ac:	f1c3 0314 	rsb	r3, r3, #20
 80105b0:	fa46 f103 	asr.w	r1, r6, r3
 80105b4:	fa01 f303 	lsl.w	r3, r1, r3
 80105b8:	42b3      	cmp	r3, r6
 80105ba:	f040 8479 	bne.w	8010eb0 <__ieee754_pow+0x9c0>
 80105be:	f001 0101 	and.w	r1, r1, #1
 80105c2:	f1c1 0302 	rsb	r3, r1, #2
 80105c6:	9300      	str	r3, [sp, #0]
 80105c8:	4b58      	ldr	r3, [pc, #352]	; (801072c <__ieee754_pow+0x23c>)
 80105ca:	429e      	cmp	r6, r3
 80105cc:	d132      	bne.n	8010634 <__ieee754_pow+0x144>
 80105ce:	2f00      	cmp	r7, #0
 80105d0:	f280 846a 	bge.w	8010ea8 <__ieee754_pow+0x9b8>
 80105d4:	4642      	mov	r2, r8
 80105d6:	464b      	mov	r3, r9
 80105d8:	2000      	movs	r0, #0
 80105da:	4954      	ldr	r1, [pc, #336]	; (801072c <__ieee754_pow+0x23c>)
 80105dc:	f7f5 fcb6 	bl	8005f4c <__aeabi_ddiv>
 80105e0:	e7a3      	b.n	801052a <__ieee754_pow+0x3a>
 80105e2:	2300      	movs	r3, #0
 80105e4:	9300      	str	r3, [sp, #0]
 80105e6:	2a00      	cmp	r2, #0
 80105e8:	d13c      	bne.n	8010664 <__ieee754_pow+0x174>
 80105ea:	4b4e      	ldr	r3, [pc, #312]	; (8010724 <__ieee754_pow+0x234>)
 80105ec:	429e      	cmp	r6, r3
 80105ee:	d1eb      	bne.n	80105c8 <__ieee754_pow+0xd8>
 80105f0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80105f4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80105f8:	ea53 030a 	orrs.w	r3, r3, sl
 80105fc:	f000 8448 	beq.w	8010e90 <__ieee754_pow+0x9a0>
 8010600:	4b4b      	ldr	r3, [pc, #300]	; (8010730 <__ieee754_pow+0x240>)
 8010602:	429c      	cmp	r4, r3
 8010604:	dd0b      	ble.n	801061e <__ieee754_pow+0x12e>
 8010606:	2f00      	cmp	r7, #0
 8010608:	f2c0 8448 	blt.w	8010e9c <__ieee754_pow+0x9ac>
 801060c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8010610:	4658      	mov	r0, fp
 8010612:	4661      	mov	r1, ip
 8010614:	b013      	add	sp, #76	; 0x4c
 8010616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801061a:	2302      	movs	r3, #2
 801061c:	e7e2      	b.n	80105e4 <__ieee754_pow+0xf4>
 801061e:	2f00      	cmp	r7, #0
 8010620:	f04f 0b00 	mov.w	fp, #0
 8010624:	f04f 0c00 	mov.w	ip, #0
 8010628:	daf2      	bge.n	8010610 <__ieee754_pow+0x120>
 801062a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 801062e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8010632:	e7ed      	b.n	8010610 <__ieee754_pow+0x120>
 8010634:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8010638:	d106      	bne.n	8010648 <__ieee754_pow+0x158>
 801063a:	4642      	mov	r2, r8
 801063c:	464b      	mov	r3, r9
 801063e:	4640      	mov	r0, r8
 8010640:	4649      	mov	r1, r9
 8010642:	f7f5 fb59 	bl	8005cf8 <__aeabi_dmul>
 8010646:	e770      	b.n	801052a <__ieee754_pow+0x3a>
 8010648:	4b3a      	ldr	r3, [pc, #232]	; (8010734 <__ieee754_pow+0x244>)
 801064a:	429f      	cmp	r7, r3
 801064c:	d10a      	bne.n	8010664 <__ieee754_pow+0x174>
 801064e:	2d00      	cmp	r5, #0
 8010650:	db08      	blt.n	8010664 <__ieee754_pow+0x174>
 8010652:	4640      	mov	r0, r8
 8010654:	4649      	mov	r1, r9
 8010656:	b013      	add	sp, #76	; 0x4c
 8010658:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801065c:	f000 bc5e 	b.w	8010f1c <__ieee754_sqrt>
 8010660:	2300      	movs	r3, #0
 8010662:	9300      	str	r3, [sp, #0]
 8010664:	4640      	mov	r0, r8
 8010666:	4649      	mov	r1, r9
 8010668:	f000 fd34 	bl	80110d4 <fabs>
 801066c:	4683      	mov	fp, r0
 801066e:	468c      	mov	ip, r1
 8010670:	f1ba 0f00 	cmp.w	sl, #0
 8010674:	d128      	bne.n	80106c8 <__ieee754_pow+0x1d8>
 8010676:	b124      	cbz	r4, 8010682 <__ieee754_pow+0x192>
 8010678:	4b2c      	ldr	r3, [pc, #176]	; (801072c <__ieee754_pow+0x23c>)
 801067a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801067e:	429a      	cmp	r2, r3
 8010680:	d122      	bne.n	80106c8 <__ieee754_pow+0x1d8>
 8010682:	2f00      	cmp	r7, #0
 8010684:	da07      	bge.n	8010696 <__ieee754_pow+0x1a6>
 8010686:	465a      	mov	r2, fp
 8010688:	4663      	mov	r3, ip
 801068a:	2000      	movs	r0, #0
 801068c:	4927      	ldr	r1, [pc, #156]	; (801072c <__ieee754_pow+0x23c>)
 801068e:	f7f5 fc5d 	bl	8005f4c <__aeabi_ddiv>
 8010692:	4683      	mov	fp, r0
 8010694:	468c      	mov	ip, r1
 8010696:	2d00      	cmp	r5, #0
 8010698:	daba      	bge.n	8010610 <__ieee754_pow+0x120>
 801069a:	9b00      	ldr	r3, [sp, #0]
 801069c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80106a0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80106a4:	4323      	orrs	r3, r4
 80106a6:	d108      	bne.n	80106ba <__ieee754_pow+0x1ca>
 80106a8:	465a      	mov	r2, fp
 80106aa:	4663      	mov	r3, ip
 80106ac:	4658      	mov	r0, fp
 80106ae:	4661      	mov	r1, ip
 80106b0:	f7f5 f96a 	bl	8005988 <__aeabi_dsub>
 80106b4:	4602      	mov	r2, r0
 80106b6:	460b      	mov	r3, r1
 80106b8:	e790      	b.n	80105dc <__ieee754_pow+0xec>
 80106ba:	9b00      	ldr	r3, [sp, #0]
 80106bc:	2b01      	cmp	r3, #1
 80106be:	d1a7      	bne.n	8010610 <__ieee754_pow+0x120>
 80106c0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80106c4:	469c      	mov	ip, r3
 80106c6:	e7a3      	b.n	8010610 <__ieee754_pow+0x120>
 80106c8:	0feb      	lsrs	r3, r5, #31
 80106ca:	3b01      	subs	r3, #1
 80106cc:	930c      	str	r3, [sp, #48]	; 0x30
 80106ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80106d0:	9b00      	ldr	r3, [sp, #0]
 80106d2:	4313      	orrs	r3, r2
 80106d4:	d104      	bne.n	80106e0 <__ieee754_pow+0x1f0>
 80106d6:	4642      	mov	r2, r8
 80106d8:	464b      	mov	r3, r9
 80106da:	4640      	mov	r0, r8
 80106dc:	4649      	mov	r1, r9
 80106de:	e7e7      	b.n	80106b0 <__ieee754_pow+0x1c0>
 80106e0:	4b15      	ldr	r3, [pc, #84]	; (8010738 <__ieee754_pow+0x248>)
 80106e2:	429e      	cmp	r6, r3
 80106e4:	f340 80f6 	ble.w	80108d4 <__ieee754_pow+0x3e4>
 80106e8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80106ec:	429e      	cmp	r6, r3
 80106ee:	4b10      	ldr	r3, [pc, #64]	; (8010730 <__ieee754_pow+0x240>)
 80106f0:	dd09      	ble.n	8010706 <__ieee754_pow+0x216>
 80106f2:	429c      	cmp	r4, r3
 80106f4:	dc0c      	bgt.n	8010710 <__ieee754_pow+0x220>
 80106f6:	2f00      	cmp	r7, #0
 80106f8:	da0c      	bge.n	8010714 <__ieee754_pow+0x224>
 80106fa:	2000      	movs	r0, #0
 80106fc:	b013      	add	sp, #76	; 0x4c
 80106fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010702:	f000 bce2 	b.w	80110ca <__math_oflow>
 8010706:	429c      	cmp	r4, r3
 8010708:	dbf5      	blt.n	80106f6 <__ieee754_pow+0x206>
 801070a:	4b08      	ldr	r3, [pc, #32]	; (801072c <__ieee754_pow+0x23c>)
 801070c:	429c      	cmp	r4, r3
 801070e:	dd15      	ble.n	801073c <__ieee754_pow+0x24c>
 8010710:	2f00      	cmp	r7, #0
 8010712:	dcf2      	bgt.n	80106fa <__ieee754_pow+0x20a>
 8010714:	2000      	movs	r0, #0
 8010716:	b013      	add	sp, #76	; 0x4c
 8010718:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801071c:	f000 bcd0 	b.w	80110c0 <__math_uflow>
 8010720:	fff00000 	.word	0xfff00000
 8010724:	7ff00000 	.word	0x7ff00000
 8010728:	433fffff 	.word	0x433fffff
 801072c:	3ff00000 	.word	0x3ff00000
 8010730:	3fefffff 	.word	0x3fefffff
 8010734:	3fe00000 	.word	0x3fe00000
 8010738:	41e00000 	.word	0x41e00000
 801073c:	4661      	mov	r1, ip
 801073e:	2200      	movs	r2, #0
 8010740:	4658      	mov	r0, fp
 8010742:	4b5f      	ldr	r3, [pc, #380]	; (80108c0 <__ieee754_pow+0x3d0>)
 8010744:	f7f5 f920 	bl	8005988 <__aeabi_dsub>
 8010748:	a355      	add	r3, pc, #340	; (adr r3, 80108a0 <__ieee754_pow+0x3b0>)
 801074a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801074e:	4604      	mov	r4, r0
 8010750:	460d      	mov	r5, r1
 8010752:	f7f5 fad1 	bl	8005cf8 <__aeabi_dmul>
 8010756:	a354      	add	r3, pc, #336	; (adr r3, 80108a8 <__ieee754_pow+0x3b8>)
 8010758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801075c:	4606      	mov	r6, r0
 801075e:	460f      	mov	r7, r1
 8010760:	4620      	mov	r0, r4
 8010762:	4629      	mov	r1, r5
 8010764:	f7f5 fac8 	bl	8005cf8 <__aeabi_dmul>
 8010768:	2200      	movs	r2, #0
 801076a:	4682      	mov	sl, r0
 801076c:	468b      	mov	fp, r1
 801076e:	4620      	mov	r0, r4
 8010770:	4629      	mov	r1, r5
 8010772:	4b54      	ldr	r3, [pc, #336]	; (80108c4 <__ieee754_pow+0x3d4>)
 8010774:	f7f5 fac0 	bl	8005cf8 <__aeabi_dmul>
 8010778:	4602      	mov	r2, r0
 801077a:	460b      	mov	r3, r1
 801077c:	a14c      	add	r1, pc, #304	; (adr r1, 80108b0 <__ieee754_pow+0x3c0>)
 801077e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010782:	f7f5 f901 	bl	8005988 <__aeabi_dsub>
 8010786:	4622      	mov	r2, r4
 8010788:	462b      	mov	r3, r5
 801078a:	f7f5 fab5 	bl	8005cf8 <__aeabi_dmul>
 801078e:	4602      	mov	r2, r0
 8010790:	460b      	mov	r3, r1
 8010792:	2000      	movs	r0, #0
 8010794:	494c      	ldr	r1, [pc, #304]	; (80108c8 <__ieee754_pow+0x3d8>)
 8010796:	f7f5 f8f7 	bl	8005988 <__aeabi_dsub>
 801079a:	4622      	mov	r2, r4
 801079c:	462b      	mov	r3, r5
 801079e:	4680      	mov	r8, r0
 80107a0:	4689      	mov	r9, r1
 80107a2:	4620      	mov	r0, r4
 80107a4:	4629      	mov	r1, r5
 80107a6:	f7f5 faa7 	bl	8005cf8 <__aeabi_dmul>
 80107aa:	4602      	mov	r2, r0
 80107ac:	460b      	mov	r3, r1
 80107ae:	4640      	mov	r0, r8
 80107b0:	4649      	mov	r1, r9
 80107b2:	f7f5 faa1 	bl	8005cf8 <__aeabi_dmul>
 80107b6:	a340      	add	r3, pc, #256	; (adr r3, 80108b8 <__ieee754_pow+0x3c8>)
 80107b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107bc:	f7f5 fa9c 	bl	8005cf8 <__aeabi_dmul>
 80107c0:	4602      	mov	r2, r0
 80107c2:	460b      	mov	r3, r1
 80107c4:	4650      	mov	r0, sl
 80107c6:	4659      	mov	r1, fp
 80107c8:	f7f5 f8de 	bl	8005988 <__aeabi_dsub>
 80107cc:	f04f 0a00 	mov.w	sl, #0
 80107d0:	4602      	mov	r2, r0
 80107d2:	460b      	mov	r3, r1
 80107d4:	4604      	mov	r4, r0
 80107d6:	460d      	mov	r5, r1
 80107d8:	4630      	mov	r0, r6
 80107da:	4639      	mov	r1, r7
 80107dc:	f7f5 f8d6 	bl	800598c <__adddf3>
 80107e0:	4632      	mov	r2, r6
 80107e2:	463b      	mov	r3, r7
 80107e4:	4650      	mov	r0, sl
 80107e6:	468b      	mov	fp, r1
 80107e8:	f7f5 f8ce 	bl	8005988 <__aeabi_dsub>
 80107ec:	4602      	mov	r2, r0
 80107ee:	460b      	mov	r3, r1
 80107f0:	4620      	mov	r0, r4
 80107f2:	4629      	mov	r1, r5
 80107f4:	f7f5 f8c8 	bl	8005988 <__aeabi_dsub>
 80107f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80107fc:	9b00      	ldr	r3, [sp, #0]
 80107fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010800:	3b01      	subs	r3, #1
 8010802:	4313      	orrs	r3, r2
 8010804:	f04f 0600 	mov.w	r6, #0
 8010808:	f04f 0200 	mov.w	r2, #0
 801080c:	bf0c      	ite	eq
 801080e:	4b2f      	ldreq	r3, [pc, #188]	; (80108cc <__ieee754_pow+0x3dc>)
 8010810:	4b2b      	ldrne	r3, [pc, #172]	; (80108c0 <__ieee754_pow+0x3d0>)
 8010812:	4604      	mov	r4, r0
 8010814:	460d      	mov	r5, r1
 8010816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801081a:	e9cd 2300 	strd	r2, r3, [sp]
 801081e:	4632      	mov	r2, r6
 8010820:	463b      	mov	r3, r7
 8010822:	f7f5 f8b1 	bl	8005988 <__aeabi_dsub>
 8010826:	4652      	mov	r2, sl
 8010828:	465b      	mov	r3, fp
 801082a:	f7f5 fa65 	bl	8005cf8 <__aeabi_dmul>
 801082e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010832:	4680      	mov	r8, r0
 8010834:	4689      	mov	r9, r1
 8010836:	4620      	mov	r0, r4
 8010838:	4629      	mov	r1, r5
 801083a:	f7f5 fa5d 	bl	8005cf8 <__aeabi_dmul>
 801083e:	4602      	mov	r2, r0
 8010840:	460b      	mov	r3, r1
 8010842:	4640      	mov	r0, r8
 8010844:	4649      	mov	r1, r9
 8010846:	f7f5 f8a1 	bl	800598c <__adddf3>
 801084a:	4632      	mov	r2, r6
 801084c:	463b      	mov	r3, r7
 801084e:	4680      	mov	r8, r0
 8010850:	4689      	mov	r9, r1
 8010852:	4650      	mov	r0, sl
 8010854:	4659      	mov	r1, fp
 8010856:	f7f5 fa4f 	bl	8005cf8 <__aeabi_dmul>
 801085a:	4604      	mov	r4, r0
 801085c:	460d      	mov	r5, r1
 801085e:	460b      	mov	r3, r1
 8010860:	4602      	mov	r2, r0
 8010862:	4649      	mov	r1, r9
 8010864:	4640      	mov	r0, r8
 8010866:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801086a:	f7f5 f88f 	bl	800598c <__adddf3>
 801086e:	4b18      	ldr	r3, [pc, #96]	; (80108d0 <__ieee754_pow+0x3e0>)
 8010870:	4682      	mov	sl, r0
 8010872:	4299      	cmp	r1, r3
 8010874:	460f      	mov	r7, r1
 8010876:	460e      	mov	r6, r1
 8010878:	f340 82e5 	ble.w	8010e46 <__ieee754_pow+0x956>
 801087c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010880:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010884:	4303      	orrs	r3, r0
 8010886:	f000 81df 	beq.w	8010c48 <__ieee754_pow+0x758>
 801088a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801088e:	2200      	movs	r2, #0
 8010890:	2300      	movs	r3, #0
 8010892:	f7f5 fca3 	bl	80061dc <__aeabi_dcmplt>
 8010896:	3800      	subs	r0, #0
 8010898:	bf18      	it	ne
 801089a:	2001      	movne	r0, #1
 801089c:	e72e      	b.n	80106fc <__ieee754_pow+0x20c>
 801089e:	bf00      	nop
 80108a0:	60000000 	.word	0x60000000
 80108a4:	3ff71547 	.word	0x3ff71547
 80108a8:	f85ddf44 	.word	0xf85ddf44
 80108ac:	3e54ae0b 	.word	0x3e54ae0b
 80108b0:	55555555 	.word	0x55555555
 80108b4:	3fd55555 	.word	0x3fd55555
 80108b8:	652b82fe 	.word	0x652b82fe
 80108bc:	3ff71547 	.word	0x3ff71547
 80108c0:	3ff00000 	.word	0x3ff00000
 80108c4:	3fd00000 	.word	0x3fd00000
 80108c8:	3fe00000 	.word	0x3fe00000
 80108cc:	bff00000 	.word	0xbff00000
 80108d0:	408fffff 	.word	0x408fffff
 80108d4:	4bd2      	ldr	r3, [pc, #840]	; (8010c20 <__ieee754_pow+0x730>)
 80108d6:	2200      	movs	r2, #0
 80108d8:	402b      	ands	r3, r5
 80108da:	b943      	cbnz	r3, 80108ee <__ieee754_pow+0x3fe>
 80108dc:	4658      	mov	r0, fp
 80108de:	4661      	mov	r1, ip
 80108e0:	4bd0      	ldr	r3, [pc, #832]	; (8010c24 <__ieee754_pow+0x734>)
 80108e2:	f7f5 fa09 	bl	8005cf8 <__aeabi_dmul>
 80108e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80108ea:	4683      	mov	fp, r0
 80108ec:	460c      	mov	r4, r1
 80108ee:	1523      	asrs	r3, r4, #20
 80108f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80108f4:	4413      	add	r3, r2
 80108f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80108f8:	4bcb      	ldr	r3, [pc, #812]	; (8010c28 <__ieee754_pow+0x738>)
 80108fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80108fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010902:	429c      	cmp	r4, r3
 8010904:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010908:	dd08      	ble.n	801091c <__ieee754_pow+0x42c>
 801090a:	4bc8      	ldr	r3, [pc, #800]	; (8010c2c <__ieee754_pow+0x73c>)
 801090c:	429c      	cmp	r4, r3
 801090e:	f340 8199 	ble.w	8010c44 <__ieee754_pow+0x754>
 8010912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010914:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010918:	3301      	adds	r3, #1
 801091a:	930b      	str	r3, [sp, #44]	; 0x2c
 801091c:	2600      	movs	r6, #0
 801091e:	00f3      	lsls	r3, r6, #3
 8010920:	930d      	str	r3, [sp, #52]	; 0x34
 8010922:	4bc3      	ldr	r3, [pc, #780]	; (8010c30 <__ieee754_pow+0x740>)
 8010924:	4658      	mov	r0, fp
 8010926:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801092a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801092e:	4629      	mov	r1, r5
 8010930:	461a      	mov	r2, r3
 8010932:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8010936:	4623      	mov	r3, r4
 8010938:	f7f5 f826 	bl	8005988 <__aeabi_dsub>
 801093c:	46da      	mov	sl, fp
 801093e:	462b      	mov	r3, r5
 8010940:	4652      	mov	r2, sl
 8010942:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010946:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801094a:	f7f5 f81f 	bl	800598c <__adddf3>
 801094e:	4602      	mov	r2, r0
 8010950:	460b      	mov	r3, r1
 8010952:	2000      	movs	r0, #0
 8010954:	49b7      	ldr	r1, [pc, #732]	; (8010c34 <__ieee754_pow+0x744>)
 8010956:	f7f5 faf9 	bl	8005f4c <__aeabi_ddiv>
 801095a:	4602      	mov	r2, r0
 801095c:	460b      	mov	r3, r1
 801095e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010962:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010966:	f7f5 f9c7 	bl	8005cf8 <__aeabi_dmul>
 801096a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801096e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8010972:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010976:	2300      	movs	r3, #0
 8010978:	2200      	movs	r2, #0
 801097a:	46ab      	mov	fp, r5
 801097c:	106d      	asrs	r5, r5, #1
 801097e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010982:	9304      	str	r3, [sp, #16]
 8010984:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010988:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801098c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8010990:	4640      	mov	r0, r8
 8010992:	4649      	mov	r1, r9
 8010994:	4614      	mov	r4, r2
 8010996:	461d      	mov	r5, r3
 8010998:	f7f5 f9ae 	bl	8005cf8 <__aeabi_dmul>
 801099c:	4602      	mov	r2, r0
 801099e:	460b      	mov	r3, r1
 80109a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80109a4:	f7f4 fff0 	bl	8005988 <__aeabi_dsub>
 80109a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80109ac:	4606      	mov	r6, r0
 80109ae:	460f      	mov	r7, r1
 80109b0:	4620      	mov	r0, r4
 80109b2:	4629      	mov	r1, r5
 80109b4:	f7f4 ffe8 	bl	8005988 <__aeabi_dsub>
 80109b8:	4602      	mov	r2, r0
 80109ba:	460b      	mov	r3, r1
 80109bc:	4650      	mov	r0, sl
 80109be:	4659      	mov	r1, fp
 80109c0:	f7f4 ffe2 	bl	8005988 <__aeabi_dsub>
 80109c4:	4642      	mov	r2, r8
 80109c6:	464b      	mov	r3, r9
 80109c8:	f7f5 f996 	bl	8005cf8 <__aeabi_dmul>
 80109cc:	4602      	mov	r2, r0
 80109ce:	460b      	mov	r3, r1
 80109d0:	4630      	mov	r0, r6
 80109d2:	4639      	mov	r1, r7
 80109d4:	f7f4 ffd8 	bl	8005988 <__aeabi_dsub>
 80109d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80109dc:	f7f5 f98c 	bl	8005cf8 <__aeabi_dmul>
 80109e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80109e4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80109e8:	4610      	mov	r0, r2
 80109ea:	4619      	mov	r1, r3
 80109ec:	f7f5 f984 	bl	8005cf8 <__aeabi_dmul>
 80109f0:	a379      	add	r3, pc, #484	; (adr r3, 8010bd8 <__ieee754_pow+0x6e8>)
 80109f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f6:	4604      	mov	r4, r0
 80109f8:	460d      	mov	r5, r1
 80109fa:	f7f5 f97d 	bl	8005cf8 <__aeabi_dmul>
 80109fe:	a378      	add	r3, pc, #480	; (adr r3, 8010be0 <__ieee754_pow+0x6f0>)
 8010a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a04:	f7f4 ffc2 	bl	800598c <__adddf3>
 8010a08:	4622      	mov	r2, r4
 8010a0a:	462b      	mov	r3, r5
 8010a0c:	f7f5 f974 	bl	8005cf8 <__aeabi_dmul>
 8010a10:	a375      	add	r3, pc, #468	; (adr r3, 8010be8 <__ieee754_pow+0x6f8>)
 8010a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a16:	f7f4 ffb9 	bl	800598c <__adddf3>
 8010a1a:	4622      	mov	r2, r4
 8010a1c:	462b      	mov	r3, r5
 8010a1e:	f7f5 f96b 	bl	8005cf8 <__aeabi_dmul>
 8010a22:	a373      	add	r3, pc, #460	; (adr r3, 8010bf0 <__ieee754_pow+0x700>)
 8010a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a28:	f7f4 ffb0 	bl	800598c <__adddf3>
 8010a2c:	4622      	mov	r2, r4
 8010a2e:	462b      	mov	r3, r5
 8010a30:	f7f5 f962 	bl	8005cf8 <__aeabi_dmul>
 8010a34:	a370      	add	r3, pc, #448	; (adr r3, 8010bf8 <__ieee754_pow+0x708>)
 8010a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a3a:	f7f4 ffa7 	bl	800598c <__adddf3>
 8010a3e:	4622      	mov	r2, r4
 8010a40:	462b      	mov	r3, r5
 8010a42:	f7f5 f959 	bl	8005cf8 <__aeabi_dmul>
 8010a46:	a36e      	add	r3, pc, #440	; (adr r3, 8010c00 <__ieee754_pow+0x710>)
 8010a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a4c:	f7f4 ff9e 	bl	800598c <__adddf3>
 8010a50:	4622      	mov	r2, r4
 8010a52:	4606      	mov	r6, r0
 8010a54:	460f      	mov	r7, r1
 8010a56:	462b      	mov	r3, r5
 8010a58:	4620      	mov	r0, r4
 8010a5a:	4629      	mov	r1, r5
 8010a5c:	f7f5 f94c 	bl	8005cf8 <__aeabi_dmul>
 8010a60:	4602      	mov	r2, r0
 8010a62:	460b      	mov	r3, r1
 8010a64:	4630      	mov	r0, r6
 8010a66:	4639      	mov	r1, r7
 8010a68:	f7f5 f946 	bl	8005cf8 <__aeabi_dmul>
 8010a6c:	4604      	mov	r4, r0
 8010a6e:	460d      	mov	r5, r1
 8010a70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010a74:	4642      	mov	r2, r8
 8010a76:	464b      	mov	r3, r9
 8010a78:	f7f4 ff88 	bl	800598c <__adddf3>
 8010a7c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010a80:	f7f5 f93a 	bl	8005cf8 <__aeabi_dmul>
 8010a84:	4622      	mov	r2, r4
 8010a86:	462b      	mov	r3, r5
 8010a88:	f7f4 ff80 	bl	800598c <__adddf3>
 8010a8c:	4642      	mov	r2, r8
 8010a8e:	4606      	mov	r6, r0
 8010a90:	460f      	mov	r7, r1
 8010a92:	464b      	mov	r3, r9
 8010a94:	4640      	mov	r0, r8
 8010a96:	4649      	mov	r1, r9
 8010a98:	f7f5 f92e 	bl	8005cf8 <__aeabi_dmul>
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	4b66      	ldr	r3, [pc, #408]	; (8010c38 <__ieee754_pow+0x748>)
 8010aa0:	4682      	mov	sl, r0
 8010aa2:	468b      	mov	fp, r1
 8010aa4:	f7f4 ff72 	bl	800598c <__adddf3>
 8010aa8:	4632      	mov	r2, r6
 8010aaa:	463b      	mov	r3, r7
 8010aac:	f7f4 ff6e 	bl	800598c <__adddf3>
 8010ab0:	2400      	movs	r4, #0
 8010ab2:	460d      	mov	r5, r1
 8010ab4:	4622      	mov	r2, r4
 8010ab6:	460b      	mov	r3, r1
 8010ab8:	4640      	mov	r0, r8
 8010aba:	4649      	mov	r1, r9
 8010abc:	f7f5 f91c 	bl	8005cf8 <__aeabi_dmul>
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	4680      	mov	r8, r0
 8010ac4:	4689      	mov	r9, r1
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	4629      	mov	r1, r5
 8010aca:	4b5b      	ldr	r3, [pc, #364]	; (8010c38 <__ieee754_pow+0x748>)
 8010acc:	f7f4 ff5c 	bl	8005988 <__aeabi_dsub>
 8010ad0:	4652      	mov	r2, sl
 8010ad2:	465b      	mov	r3, fp
 8010ad4:	f7f4 ff58 	bl	8005988 <__aeabi_dsub>
 8010ad8:	4602      	mov	r2, r0
 8010ada:	460b      	mov	r3, r1
 8010adc:	4630      	mov	r0, r6
 8010ade:	4639      	mov	r1, r7
 8010ae0:	f7f4 ff52 	bl	8005988 <__aeabi_dsub>
 8010ae4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010ae8:	f7f5 f906 	bl	8005cf8 <__aeabi_dmul>
 8010aec:	4622      	mov	r2, r4
 8010aee:	4606      	mov	r6, r0
 8010af0:	460f      	mov	r7, r1
 8010af2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010af6:	462b      	mov	r3, r5
 8010af8:	f7f5 f8fe 	bl	8005cf8 <__aeabi_dmul>
 8010afc:	4602      	mov	r2, r0
 8010afe:	460b      	mov	r3, r1
 8010b00:	4630      	mov	r0, r6
 8010b02:	4639      	mov	r1, r7
 8010b04:	f7f4 ff42 	bl	800598c <__adddf3>
 8010b08:	2400      	movs	r4, #0
 8010b0a:	4606      	mov	r6, r0
 8010b0c:	460f      	mov	r7, r1
 8010b0e:	4602      	mov	r2, r0
 8010b10:	460b      	mov	r3, r1
 8010b12:	4640      	mov	r0, r8
 8010b14:	4649      	mov	r1, r9
 8010b16:	f7f4 ff39 	bl	800598c <__adddf3>
 8010b1a:	a33b      	add	r3, pc, #236	; (adr r3, 8010c08 <__ieee754_pow+0x718>)
 8010b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b20:	4620      	mov	r0, r4
 8010b22:	460d      	mov	r5, r1
 8010b24:	f7f5 f8e8 	bl	8005cf8 <__aeabi_dmul>
 8010b28:	4642      	mov	r2, r8
 8010b2a:	464b      	mov	r3, r9
 8010b2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010b30:	4620      	mov	r0, r4
 8010b32:	4629      	mov	r1, r5
 8010b34:	f7f4 ff28 	bl	8005988 <__aeabi_dsub>
 8010b38:	4602      	mov	r2, r0
 8010b3a:	460b      	mov	r3, r1
 8010b3c:	4630      	mov	r0, r6
 8010b3e:	4639      	mov	r1, r7
 8010b40:	f7f4 ff22 	bl	8005988 <__aeabi_dsub>
 8010b44:	a332      	add	r3, pc, #200	; (adr r3, 8010c10 <__ieee754_pow+0x720>)
 8010b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b4a:	f7f5 f8d5 	bl	8005cf8 <__aeabi_dmul>
 8010b4e:	a332      	add	r3, pc, #200	; (adr r3, 8010c18 <__ieee754_pow+0x728>)
 8010b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b54:	4606      	mov	r6, r0
 8010b56:	460f      	mov	r7, r1
 8010b58:	4620      	mov	r0, r4
 8010b5a:	4629      	mov	r1, r5
 8010b5c:	f7f5 f8cc 	bl	8005cf8 <__aeabi_dmul>
 8010b60:	4602      	mov	r2, r0
 8010b62:	460b      	mov	r3, r1
 8010b64:	4630      	mov	r0, r6
 8010b66:	4639      	mov	r1, r7
 8010b68:	f7f4 ff10 	bl	800598c <__adddf3>
 8010b6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010b6e:	4b33      	ldr	r3, [pc, #204]	; (8010c3c <__ieee754_pow+0x74c>)
 8010b70:	f04f 0a00 	mov.w	sl, #0
 8010b74:	4413      	add	r3, r2
 8010b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b7a:	f7f4 ff07 	bl	800598c <__adddf3>
 8010b7e:	4680      	mov	r8, r0
 8010b80:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010b82:	4689      	mov	r9, r1
 8010b84:	f7f5 f84e 	bl	8005c24 <__aeabi_i2d>
 8010b88:	4604      	mov	r4, r0
 8010b8a:	460d      	mov	r5, r1
 8010b8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010b8e:	4b2c      	ldr	r3, [pc, #176]	; (8010c40 <__ieee754_pow+0x750>)
 8010b90:	4413      	add	r3, r2
 8010b92:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010b96:	4642      	mov	r2, r8
 8010b98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010b9c:	464b      	mov	r3, r9
 8010b9e:	f7f4 fef5 	bl	800598c <__adddf3>
 8010ba2:	4632      	mov	r2, r6
 8010ba4:	463b      	mov	r3, r7
 8010ba6:	f7f4 fef1 	bl	800598c <__adddf3>
 8010baa:	4622      	mov	r2, r4
 8010bac:	462b      	mov	r3, r5
 8010bae:	f7f4 feed 	bl	800598c <__adddf3>
 8010bb2:	4622      	mov	r2, r4
 8010bb4:	462b      	mov	r3, r5
 8010bb6:	4650      	mov	r0, sl
 8010bb8:	468b      	mov	fp, r1
 8010bba:	f7f4 fee5 	bl	8005988 <__aeabi_dsub>
 8010bbe:	4632      	mov	r2, r6
 8010bc0:	463b      	mov	r3, r7
 8010bc2:	f7f4 fee1 	bl	8005988 <__aeabi_dsub>
 8010bc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010bca:	f7f4 fedd 	bl	8005988 <__aeabi_dsub>
 8010bce:	4602      	mov	r2, r0
 8010bd0:	460b      	mov	r3, r1
 8010bd2:	4640      	mov	r0, r8
 8010bd4:	4649      	mov	r1, r9
 8010bd6:	e60d      	b.n	80107f4 <__ieee754_pow+0x304>
 8010bd8:	4a454eef 	.word	0x4a454eef
 8010bdc:	3fca7e28 	.word	0x3fca7e28
 8010be0:	93c9db65 	.word	0x93c9db65
 8010be4:	3fcd864a 	.word	0x3fcd864a
 8010be8:	a91d4101 	.word	0xa91d4101
 8010bec:	3fd17460 	.word	0x3fd17460
 8010bf0:	518f264d 	.word	0x518f264d
 8010bf4:	3fd55555 	.word	0x3fd55555
 8010bf8:	db6fabff 	.word	0xdb6fabff
 8010bfc:	3fdb6db6 	.word	0x3fdb6db6
 8010c00:	33333303 	.word	0x33333303
 8010c04:	3fe33333 	.word	0x3fe33333
 8010c08:	e0000000 	.word	0xe0000000
 8010c0c:	3feec709 	.word	0x3feec709
 8010c10:	dc3a03fd 	.word	0xdc3a03fd
 8010c14:	3feec709 	.word	0x3feec709
 8010c18:	145b01f5 	.word	0x145b01f5
 8010c1c:	be3e2fe0 	.word	0xbe3e2fe0
 8010c20:	7ff00000 	.word	0x7ff00000
 8010c24:	43400000 	.word	0x43400000
 8010c28:	0003988e 	.word	0x0003988e
 8010c2c:	000bb679 	.word	0x000bb679
 8010c30:	08011338 	.word	0x08011338
 8010c34:	3ff00000 	.word	0x3ff00000
 8010c38:	40080000 	.word	0x40080000
 8010c3c:	08011358 	.word	0x08011358
 8010c40:	08011348 	.word	0x08011348
 8010c44:	2601      	movs	r6, #1
 8010c46:	e66a      	b.n	801091e <__ieee754_pow+0x42e>
 8010c48:	a39d      	add	r3, pc, #628	; (adr r3, 8010ec0 <__ieee754_pow+0x9d0>)
 8010c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4e:	4640      	mov	r0, r8
 8010c50:	4649      	mov	r1, r9
 8010c52:	f7f4 fe9b 	bl	800598c <__adddf3>
 8010c56:	4622      	mov	r2, r4
 8010c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c5c:	462b      	mov	r3, r5
 8010c5e:	4650      	mov	r0, sl
 8010c60:	4639      	mov	r1, r7
 8010c62:	f7f4 fe91 	bl	8005988 <__aeabi_dsub>
 8010c66:	4602      	mov	r2, r0
 8010c68:	460b      	mov	r3, r1
 8010c6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c6e:	f7f5 fad3 	bl	8006218 <__aeabi_dcmpgt>
 8010c72:	2800      	cmp	r0, #0
 8010c74:	f47f ae09 	bne.w	801088a <__ieee754_pow+0x39a>
 8010c78:	4aa3      	ldr	r2, [pc, #652]	; (8010f08 <__ieee754_pow+0xa18>)
 8010c7a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8010c7e:	4293      	cmp	r3, r2
 8010c80:	f340 8101 	ble.w	8010e86 <__ieee754_pow+0x996>
 8010c84:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010c88:	2000      	movs	r0, #0
 8010c8a:	151b      	asrs	r3, r3, #20
 8010c8c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010c90:	fa4a f303 	asr.w	r3, sl, r3
 8010c94:	4433      	add	r3, r6
 8010c96:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010c9a:	4f9c      	ldr	r7, [pc, #624]	; (8010f0c <__ieee754_pow+0xa1c>)
 8010c9c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010ca0:	4117      	asrs	r7, r2
 8010ca2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010ca6:	ea23 0107 	bic.w	r1, r3, r7
 8010caa:	f1c2 0214 	rsb	r2, r2, #20
 8010cae:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010cb2:	460b      	mov	r3, r1
 8010cb4:	fa4a fa02 	asr.w	sl, sl, r2
 8010cb8:	2e00      	cmp	r6, #0
 8010cba:	4602      	mov	r2, r0
 8010cbc:	4629      	mov	r1, r5
 8010cbe:	4620      	mov	r0, r4
 8010cc0:	bfb8      	it	lt
 8010cc2:	f1ca 0a00 	rsblt	sl, sl, #0
 8010cc6:	f7f4 fe5f 	bl	8005988 <__aeabi_dsub>
 8010cca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010cd2:	2400      	movs	r4, #0
 8010cd4:	4642      	mov	r2, r8
 8010cd6:	464b      	mov	r3, r9
 8010cd8:	f7f4 fe58 	bl	800598c <__adddf3>
 8010cdc:	a37a      	add	r3, pc, #488	; (adr r3, 8010ec8 <__ieee754_pow+0x9d8>)
 8010cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce2:	4620      	mov	r0, r4
 8010ce4:	460d      	mov	r5, r1
 8010ce6:	f7f5 f807 	bl	8005cf8 <__aeabi_dmul>
 8010cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cee:	4606      	mov	r6, r0
 8010cf0:	460f      	mov	r7, r1
 8010cf2:	4620      	mov	r0, r4
 8010cf4:	4629      	mov	r1, r5
 8010cf6:	f7f4 fe47 	bl	8005988 <__aeabi_dsub>
 8010cfa:	4602      	mov	r2, r0
 8010cfc:	460b      	mov	r3, r1
 8010cfe:	4640      	mov	r0, r8
 8010d00:	4649      	mov	r1, r9
 8010d02:	f7f4 fe41 	bl	8005988 <__aeabi_dsub>
 8010d06:	a372      	add	r3, pc, #456	; (adr r3, 8010ed0 <__ieee754_pow+0x9e0>)
 8010d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0c:	f7f4 fff4 	bl	8005cf8 <__aeabi_dmul>
 8010d10:	a371      	add	r3, pc, #452	; (adr r3, 8010ed8 <__ieee754_pow+0x9e8>)
 8010d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d16:	4680      	mov	r8, r0
 8010d18:	4689      	mov	r9, r1
 8010d1a:	4620      	mov	r0, r4
 8010d1c:	4629      	mov	r1, r5
 8010d1e:	f7f4 ffeb 	bl	8005cf8 <__aeabi_dmul>
 8010d22:	4602      	mov	r2, r0
 8010d24:	460b      	mov	r3, r1
 8010d26:	4640      	mov	r0, r8
 8010d28:	4649      	mov	r1, r9
 8010d2a:	f7f4 fe2f 	bl	800598c <__adddf3>
 8010d2e:	4604      	mov	r4, r0
 8010d30:	460d      	mov	r5, r1
 8010d32:	4602      	mov	r2, r0
 8010d34:	460b      	mov	r3, r1
 8010d36:	4630      	mov	r0, r6
 8010d38:	4639      	mov	r1, r7
 8010d3a:	f7f4 fe27 	bl	800598c <__adddf3>
 8010d3e:	4632      	mov	r2, r6
 8010d40:	463b      	mov	r3, r7
 8010d42:	4680      	mov	r8, r0
 8010d44:	4689      	mov	r9, r1
 8010d46:	f7f4 fe1f 	bl	8005988 <__aeabi_dsub>
 8010d4a:	4602      	mov	r2, r0
 8010d4c:	460b      	mov	r3, r1
 8010d4e:	4620      	mov	r0, r4
 8010d50:	4629      	mov	r1, r5
 8010d52:	f7f4 fe19 	bl	8005988 <__aeabi_dsub>
 8010d56:	4642      	mov	r2, r8
 8010d58:	4606      	mov	r6, r0
 8010d5a:	460f      	mov	r7, r1
 8010d5c:	464b      	mov	r3, r9
 8010d5e:	4640      	mov	r0, r8
 8010d60:	4649      	mov	r1, r9
 8010d62:	f7f4 ffc9 	bl	8005cf8 <__aeabi_dmul>
 8010d66:	a35e      	add	r3, pc, #376	; (adr r3, 8010ee0 <__ieee754_pow+0x9f0>)
 8010d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d6c:	4604      	mov	r4, r0
 8010d6e:	460d      	mov	r5, r1
 8010d70:	f7f4 ffc2 	bl	8005cf8 <__aeabi_dmul>
 8010d74:	a35c      	add	r3, pc, #368	; (adr r3, 8010ee8 <__ieee754_pow+0x9f8>)
 8010d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d7a:	f7f4 fe05 	bl	8005988 <__aeabi_dsub>
 8010d7e:	4622      	mov	r2, r4
 8010d80:	462b      	mov	r3, r5
 8010d82:	f7f4 ffb9 	bl	8005cf8 <__aeabi_dmul>
 8010d86:	a35a      	add	r3, pc, #360	; (adr r3, 8010ef0 <__ieee754_pow+0xa00>)
 8010d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d8c:	f7f4 fdfe 	bl	800598c <__adddf3>
 8010d90:	4622      	mov	r2, r4
 8010d92:	462b      	mov	r3, r5
 8010d94:	f7f4 ffb0 	bl	8005cf8 <__aeabi_dmul>
 8010d98:	a357      	add	r3, pc, #348	; (adr r3, 8010ef8 <__ieee754_pow+0xa08>)
 8010d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d9e:	f7f4 fdf3 	bl	8005988 <__aeabi_dsub>
 8010da2:	4622      	mov	r2, r4
 8010da4:	462b      	mov	r3, r5
 8010da6:	f7f4 ffa7 	bl	8005cf8 <__aeabi_dmul>
 8010daa:	a355      	add	r3, pc, #340	; (adr r3, 8010f00 <__ieee754_pow+0xa10>)
 8010dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db0:	f7f4 fdec 	bl	800598c <__adddf3>
 8010db4:	4622      	mov	r2, r4
 8010db6:	462b      	mov	r3, r5
 8010db8:	f7f4 ff9e 	bl	8005cf8 <__aeabi_dmul>
 8010dbc:	4602      	mov	r2, r0
 8010dbe:	460b      	mov	r3, r1
 8010dc0:	4640      	mov	r0, r8
 8010dc2:	4649      	mov	r1, r9
 8010dc4:	f7f4 fde0 	bl	8005988 <__aeabi_dsub>
 8010dc8:	4604      	mov	r4, r0
 8010dca:	460d      	mov	r5, r1
 8010dcc:	4602      	mov	r2, r0
 8010dce:	460b      	mov	r3, r1
 8010dd0:	4640      	mov	r0, r8
 8010dd2:	4649      	mov	r1, r9
 8010dd4:	f7f4 ff90 	bl	8005cf8 <__aeabi_dmul>
 8010dd8:	2200      	movs	r2, #0
 8010dda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010dde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010de2:	4620      	mov	r0, r4
 8010de4:	4629      	mov	r1, r5
 8010de6:	f7f4 fdcf 	bl	8005988 <__aeabi_dsub>
 8010dea:	4602      	mov	r2, r0
 8010dec:	460b      	mov	r3, r1
 8010dee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010df2:	f7f5 f8ab 	bl	8005f4c <__aeabi_ddiv>
 8010df6:	4632      	mov	r2, r6
 8010df8:	4604      	mov	r4, r0
 8010dfa:	460d      	mov	r5, r1
 8010dfc:	463b      	mov	r3, r7
 8010dfe:	4640      	mov	r0, r8
 8010e00:	4649      	mov	r1, r9
 8010e02:	f7f4 ff79 	bl	8005cf8 <__aeabi_dmul>
 8010e06:	4632      	mov	r2, r6
 8010e08:	463b      	mov	r3, r7
 8010e0a:	f7f4 fdbf 	bl	800598c <__adddf3>
 8010e0e:	4602      	mov	r2, r0
 8010e10:	460b      	mov	r3, r1
 8010e12:	4620      	mov	r0, r4
 8010e14:	4629      	mov	r1, r5
 8010e16:	f7f4 fdb7 	bl	8005988 <__aeabi_dsub>
 8010e1a:	4642      	mov	r2, r8
 8010e1c:	464b      	mov	r3, r9
 8010e1e:	f7f4 fdb3 	bl	8005988 <__aeabi_dsub>
 8010e22:	4602      	mov	r2, r0
 8010e24:	460b      	mov	r3, r1
 8010e26:	2000      	movs	r0, #0
 8010e28:	4939      	ldr	r1, [pc, #228]	; (8010f10 <__ieee754_pow+0xa20>)
 8010e2a:	f7f4 fdad 	bl	8005988 <__aeabi_dsub>
 8010e2e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8010e32:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8010e36:	da29      	bge.n	8010e8c <__ieee754_pow+0x99c>
 8010e38:	4652      	mov	r2, sl
 8010e3a:	f000 f95d 	bl	80110f8 <scalbn>
 8010e3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010e42:	f7ff bbfe 	b.w	8010642 <__ieee754_pow+0x152>
 8010e46:	4b33      	ldr	r3, [pc, #204]	; (8010f14 <__ieee754_pow+0xa24>)
 8010e48:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8010e4c:	429f      	cmp	r7, r3
 8010e4e:	f77f af13 	ble.w	8010c78 <__ieee754_pow+0x788>
 8010e52:	4b31      	ldr	r3, [pc, #196]	; (8010f18 <__ieee754_pow+0xa28>)
 8010e54:	440b      	add	r3, r1
 8010e56:	4303      	orrs	r3, r0
 8010e58:	d009      	beq.n	8010e6e <__ieee754_pow+0x97e>
 8010e5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	2300      	movs	r3, #0
 8010e62:	f7f5 f9bb 	bl	80061dc <__aeabi_dcmplt>
 8010e66:	3800      	subs	r0, #0
 8010e68:	bf18      	it	ne
 8010e6a:	2001      	movne	r0, #1
 8010e6c:	e453      	b.n	8010716 <__ieee754_pow+0x226>
 8010e6e:	4622      	mov	r2, r4
 8010e70:	462b      	mov	r3, r5
 8010e72:	f7f4 fd89 	bl	8005988 <__aeabi_dsub>
 8010e76:	4642      	mov	r2, r8
 8010e78:	464b      	mov	r3, r9
 8010e7a:	f7f5 f9c3 	bl	8006204 <__aeabi_dcmpge>
 8010e7e:	2800      	cmp	r0, #0
 8010e80:	f43f aefa 	beq.w	8010c78 <__ieee754_pow+0x788>
 8010e84:	e7e9      	b.n	8010e5a <__ieee754_pow+0x96a>
 8010e86:	f04f 0a00 	mov.w	sl, #0
 8010e8a:	e720      	b.n	8010cce <__ieee754_pow+0x7de>
 8010e8c:	4621      	mov	r1, r4
 8010e8e:	e7d6      	b.n	8010e3e <__ieee754_pow+0x94e>
 8010e90:	f04f 0b00 	mov.w	fp, #0
 8010e94:	f8df c078 	ldr.w	ip, [pc, #120]	; 8010f10 <__ieee754_pow+0xa20>
 8010e98:	f7ff bbba 	b.w	8010610 <__ieee754_pow+0x120>
 8010e9c:	f04f 0b00 	mov.w	fp, #0
 8010ea0:	f04f 0c00 	mov.w	ip, #0
 8010ea4:	f7ff bbb4 	b.w	8010610 <__ieee754_pow+0x120>
 8010ea8:	4640      	mov	r0, r8
 8010eaa:	4649      	mov	r1, r9
 8010eac:	f7ff bb3d 	b.w	801052a <__ieee754_pow+0x3a>
 8010eb0:	9200      	str	r2, [sp, #0]
 8010eb2:	f7ff bb89 	b.w	80105c8 <__ieee754_pow+0xd8>
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	f7ff bb73 	b.w	80105a2 <__ieee754_pow+0xb2>
 8010ebc:	f3af 8000 	nop.w
 8010ec0:	652b82fe 	.word	0x652b82fe
 8010ec4:	3c971547 	.word	0x3c971547
 8010ec8:	00000000 	.word	0x00000000
 8010ecc:	3fe62e43 	.word	0x3fe62e43
 8010ed0:	fefa39ef 	.word	0xfefa39ef
 8010ed4:	3fe62e42 	.word	0x3fe62e42
 8010ed8:	0ca86c39 	.word	0x0ca86c39
 8010edc:	be205c61 	.word	0xbe205c61
 8010ee0:	72bea4d0 	.word	0x72bea4d0
 8010ee4:	3e663769 	.word	0x3e663769
 8010ee8:	c5d26bf1 	.word	0xc5d26bf1
 8010eec:	3ebbbd41 	.word	0x3ebbbd41
 8010ef0:	af25de2c 	.word	0xaf25de2c
 8010ef4:	3f11566a 	.word	0x3f11566a
 8010ef8:	16bebd93 	.word	0x16bebd93
 8010efc:	3f66c16c 	.word	0x3f66c16c
 8010f00:	5555553e 	.word	0x5555553e
 8010f04:	3fc55555 	.word	0x3fc55555
 8010f08:	3fe00000 	.word	0x3fe00000
 8010f0c:	000fffff 	.word	0x000fffff
 8010f10:	3ff00000 	.word	0x3ff00000
 8010f14:	4090cbff 	.word	0x4090cbff
 8010f18:	3f6f3400 	.word	0x3f6f3400

08010f1c <__ieee754_sqrt>:
 8010f1c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8011078 <__ieee754_sqrt+0x15c>
 8010f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f24:	ea3c 0c01 	bics.w	ip, ip, r1
 8010f28:	4606      	mov	r6, r0
 8010f2a:	460d      	mov	r5, r1
 8010f2c:	460c      	mov	r4, r1
 8010f2e:	460a      	mov	r2, r1
 8010f30:	4607      	mov	r7, r0
 8010f32:	4603      	mov	r3, r0
 8010f34:	d10f      	bne.n	8010f56 <__ieee754_sqrt+0x3a>
 8010f36:	4602      	mov	r2, r0
 8010f38:	460b      	mov	r3, r1
 8010f3a:	f7f4 fedd 	bl	8005cf8 <__aeabi_dmul>
 8010f3e:	4602      	mov	r2, r0
 8010f40:	460b      	mov	r3, r1
 8010f42:	4630      	mov	r0, r6
 8010f44:	4629      	mov	r1, r5
 8010f46:	f7f4 fd21 	bl	800598c <__adddf3>
 8010f4a:	4606      	mov	r6, r0
 8010f4c:	460d      	mov	r5, r1
 8010f4e:	4630      	mov	r0, r6
 8010f50:	4629      	mov	r1, r5
 8010f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f56:	2900      	cmp	r1, #0
 8010f58:	dc0e      	bgt.n	8010f78 <__ieee754_sqrt+0x5c>
 8010f5a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8010f5e:	ea5c 0707 	orrs.w	r7, ip, r7
 8010f62:	d0f4      	beq.n	8010f4e <__ieee754_sqrt+0x32>
 8010f64:	b141      	cbz	r1, 8010f78 <__ieee754_sqrt+0x5c>
 8010f66:	4602      	mov	r2, r0
 8010f68:	460b      	mov	r3, r1
 8010f6a:	f7f4 fd0d 	bl	8005988 <__aeabi_dsub>
 8010f6e:	4602      	mov	r2, r0
 8010f70:	460b      	mov	r3, r1
 8010f72:	f7f4 ffeb 	bl	8005f4c <__aeabi_ddiv>
 8010f76:	e7e8      	b.n	8010f4a <__ieee754_sqrt+0x2e>
 8010f78:	1521      	asrs	r1, r4, #20
 8010f7a:	d075      	beq.n	8011068 <__ieee754_sqrt+0x14c>
 8010f7c:	07cc      	lsls	r4, r1, #31
 8010f7e:	f04f 0400 	mov.w	r4, #0
 8010f82:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8010f86:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8010f8a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8010f8e:	bf5e      	ittt	pl
 8010f90:	0fd9      	lsrpl	r1, r3, #31
 8010f92:	005b      	lslpl	r3, r3, #1
 8010f94:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8010f98:	0fd9      	lsrs	r1, r3, #31
 8010f9a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8010f9e:	2516      	movs	r5, #22
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010fa6:	107f      	asrs	r7, r7, #1
 8010fa8:	005b      	lsls	r3, r3, #1
 8010faa:	1846      	adds	r6, r0, r1
 8010fac:	4296      	cmp	r6, r2
 8010fae:	bfde      	ittt	le
 8010fb0:	1b92      	suble	r2, r2, r6
 8010fb2:	1870      	addle	r0, r6, r1
 8010fb4:	1864      	addle	r4, r4, r1
 8010fb6:	0052      	lsls	r2, r2, #1
 8010fb8:	3d01      	subs	r5, #1
 8010fba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8010fbe:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010fc2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010fc6:	d1f0      	bne.n	8010faa <__ieee754_sqrt+0x8e>
 8010fc8:	4629      	mov	r1, r5
 8010fca:	f04f 0e20 	mov.w	lr, #32
 8010fce:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010fd2:	4282      	cmp	r2, r0
 8010fd4:	eb06 0c05 	add.w	ip, r6, r5
 8010fd8:	dc02      	bgt.n	8010fe0 <__ieee754_sqrt+0xc4>
 8010fda:	d113      	bne.n	8011004 <__ieee754_sqrt+0xe8>
 8010fdc:	459c      	cmp	ip, r3
 8010fde:	d811      	bhi.n	8011004 <__ieee754_sqrt+0xe8>
 8010fe0:	f1bc 0f00 	cmp.w	ip, #0
 8010fe4:	eb0c 0506 	add.w	r5, ip, r6
 8010fe8:	da43      	bge.n	8011072 <__ieee754_sqrt+0x156>
 8010fea:	2d00      	cmp	r5, #0
 8010fec:	db41      	blt.n	8011072 <__ieee754_sqrt+0x156>
 8010fee:	f100 0801 	add.w	r8, r0, #1
 8010ff2:	1a12      	subs	r2, r2, r0
 8010ff4:	4640      	mov	r0, r8
 8010ff6:	459c      	cmp	ip, r3
 8010ff8:	bf88      	it	hi
 8010ffa:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8010ffe:	eba3 030c 	sub.w	r3, r3, ip
 8011002:	4431      	add	r1, r6
 8011004:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8011008:	f1be 0e01 	subs.w	lr, lr, #1
 801100c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8011010:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011014:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011018:	d1db      	bne.n	8010fd2 <__ieee754_sqrt+0xb6>
 801101a:	4313      	orrs	r3, r2
 801101c:	d006      	beq.n	801102c <__ieee754_sqrt+0x110>
 801101e:	1c48      	adds	r0, r1, #1
 8011020:	bf0b      	itete	eq
 8011022:	4671      	moveq	r1, lr
 8011024:	3101      	addne	r1, #1
 8011026:	3401      	addeq	r4, #1
 8011028:	f021 0101 	bicne.w	r1, r1, #1
 801102c:	1063      	asrs	r3, r4, #1
 801102e:	0849      	lsrs	r1, r1, #1
 8011030:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8011034:	07e2      	lsls	r2, r4, #31
 8011036:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801103a:	bf48      	it	mi
 801103c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8011040:	460e      	mov	r6, r1
 8011042:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8011046:	e782      	b.n	8010f4e <__ieee754_sqrt+0x32>
 8011048:	0ada      	lsrs	r2, r3, #11
 801104a:	3815      	subs	r0, #21
 801104c:	055b      	lsls	r3, r3, #21
 801104e:	2a00      	cmp	r2, #0
 8011050:	d0fa      	beq.n	8011048 <__ieee754_sqrt+0x12c>
 8011052:	02d5      	lsls	r5, r2, #11
 8011054:	d50a      	bpl.n	801106c <__ieee754_sqrt+0x150>
 8011056:	f1c1 0420 	rsb	r4, r1, #32
 801105a:	fa23 f404 	lsr.w	r4, r3, r4
 801105e:	1e4d      	subs	r5, r1, #1
 8011060:	408b      	lsls	r3, r1
 8011062:	4322      	orrs	r2, r4
 8011064:	1b41      	subs	r1, r0, r5
 8011066:	e789      	b.n	8010f7c <__ieee754_sqrt+0x60>
 8011068:	4608      	mov	r0, r1
 801106a:	e7f0      	b.n	801104e <__ieee754_sqrt+0x132>
 801106c:	0052      	lsls	r2, r2, #1
 801106e:	3101      	adds	r1, #1
 8011070:	e7ef      	b.n	8011052 <__ieee754_sqrt+0x136>
 8011072:	4680      	mov	r8, r0
 8011074:	e7bd      	b.n	8010ff2 <__ieee754_sqrt+0xd6>
 8011076:	bf00      	nop
 8011078:	7ff00000 	.word	0x7ff00000

0801107c <with_errno>:
 801107c:	b570      	push	{r4, r5, r6, lr}
 801107e:	4604      	mov	r4, r0
 8011080:	460d      	mov	r5, r1
 8011082:	4616      	mov	r6, r2
 8011084:	f7fe ffb4 	bl	800fff0 <__errno>
 8011088:	4629      	mov	r1, r5
 801108a:	6006      	str	r6, [r0, #0]
 801108c:	4620      	mov	r0, r4
 801108e:	bd70      	pop	{r4, r5, r6, pc}

08011090 <xflow>:
 8011090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011092:	4615      	mov	r5, r2
 8011094:	461c      	mov	r4, r3
 8011096:	b180      	cbz	r0, 80110ba <xflow+0x2a>
 8011098:	4610      	mov	r0, r2
 801109a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801109e:	e9cd 0100 	strd	r0, r1, [sp]
 80110a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80110a6:	4628      	mov	r0, r5
 80110a8:	4621      	mov	r1, r4
 80110aa:	f7f4 fe25 	bl	8005cf8 <__aeabi_dmul>
 80110ae:	2222      	movs	r2, #34	; 0x22
 80110b0:	b003      	add	sp, #12
 80110b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80110b6:	f7ff bfe1 	b.w	801107c <with_errno>
 80110ba:	4610      	mov	r0, r2
 80110bc:	4619      	mov	r1, r3
 80110be:	e7ee      	b.n	801109e <xflow+0xe>

080110c0 <__math_uflow>:
 80110c0:	2200      	movs	r2, #0
 80110c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80110c6:	f7ff bfe3 	b.w	8011090 <xflow>

080110ca <__math_oflow>:
 80110ca:	2200      	movs	r2, #0
 80110cc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80110d0:	f7ff bfde 	b.w	8011090 <xflow>

080110d4 <fabs>:
 80110d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80110d8:	4770      	bx	lr

080110da <finite>:
 80110da:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80110de:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80110e2:	0fc0      	lsrs	r0, r0, #31
 80110e4:	4770      	bx	lr
	...

080110e8 <nan>:
 80110e8:	2000      	movs	r0, #0
 80110ea:	4901      	ldr	r1, [pc, #4]	; (80110f0 <nan+0x8>)
 80110ec:	4770      	bx	lr
 80110ee:	bf00      	nop
 80110f0:	7ff80000 	.word	0x7ff80000
 80110f4:	00000000 	.word	0x00000000

080110f8 <scalbn>:
 80110f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110fa:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80110fe:	4604      	mov	r4, r0
 8011100:	460d      	mov	r5, r1
 8011102:	4617      	mov	r7, r2
 8011104:	460b      	mov	r3, r1
 8011106:	b996      	cbnz	r6, 801112e <scalbn+0x36>
 8011108:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801110c:	4303      	orrs	r3, r0
 801110e:	d039      	beq.n	8011184 <scalbn+0x8c>
 8011110:	4b33      	ldr	r3, [pc, #204]	; (80111e0 <scalbn+0xe8>)
 8011112:	2200      	movs	r2, #0
 8011114:	f7f4 fdf0 	bl	8005cf8 <__aeabi_dmul>
 8011118:	4b32      	ldr	r3, [pc, #200]	; (80111e4 <scalbn+0xec>)
 801111a:	4604      	mov	r4, r0
 801111c:	429f      	cmp	r7, r3
 801111e:	460d      	mov	r5, r1
 8011120:	da0f      	bge.n	8011142 <scalbn+0x4a>
 8011122:	a32b      	add	r3, pc, #172	; (adr r3, 80111d0 <scalbn+0xd8>)
 8011124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011128:	f7f4 fde6 	bl	8005cf8 <__aeabi_dmul>
 801112c:	e006      	b.n	801113c <scalbn+0x44>
 801112e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011132:	4296      	cmp	r6, r2
 8011134:	d10a      	bne.n	801114c <scalbn+0x54>
 8011136:	4602      	mov	r2, r0
 8011138:	f7f4 fc28 	bl	800598c <__adddf3>
 801113c:	4604      	mov	r4, r0
 801113e:	460d      	mov	r5, r1
 8011140:	e020      	b.n	8011184 <scalbn+0x8c>
 8011142:	460b      	mov	r3, r1
 8011144:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011148:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 801114c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8011150:	19b9      	adds	r1, r7, r6
 8011152:	4291      	cmp	r1, r2
 8011154:	dd0e      	ble.n	8011174 <scalbn+0x7c>
 8011156:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 801115a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 801115e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8011162:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8011166:	4820      	ldr	r0, [pc, #128]	; (80111e8 <scalbn+0xf0>)
 8011168:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 801116c:	a31a      	add	r3, pc, #104	; (adr r3, 80111d8 <scalbn+0xe0>)
 801116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011172:	e7d9      	b.n	8011128 <scalbn+0x30>
 8011174:	2900      	cmp	r1, #0
 8011176:	dd08      	ble.n	801118a <scalbn+0x92>
 8011178:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801117c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011180:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8011184:	4620      	mov	r0, r4
 8011186:	4629      	mov	r1, r5
 8011188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801118a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 801118e:	da12      	bge.n	80111b6 <scalbn+0xbe>
 8011190:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011194:	429f      	cmp	r7, r3
 8011196:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 801119a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 801119e:	dcdc      	bgt.n	801115a <scalbn+0x62>
 80111a0:	a30b      	add	r3, pc, #44	; (adr r3, 80111d0 <scalbn+0xd8>)
 80111a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111a6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80111aa:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80111ae:	480f      	ldr	r0, [pc, #60]	; (80111ec <scalbn+0xf4>)
 80111b0:	f041 011f 	orr.w	r1, r1, #31
 80111b4:	e7b8      	b.n	8011128 <scalbn+0x30>
 80111b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80111ba:	3136      	adds	r1, #54	; 0x36
 80111bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80111c0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80111c4:	4620      	mov	r0, r4
 80111c6:	4629      	mov	r1, r5
 80111c8:	2200      	movs	r2, #0
 80111ca:	4b09      	ldr	r3, [pc, #36]	; (80111f0 <scalbn+0xf8>)
 80111cc:	e7ac      	b.n	8011128 <scalbn+0x30>
 80111ce:	bf00      	nop
 80111d0:	c2f8f359 	.word	0xc2f8f359
 80111d4:	01a56e1f 	.word	0x01a56e1f
 80111d8:	8800759c 	.word	0x8800759c
 80111dc:	7e37e43c 	.word	0x7e37e43c
 80111e0:	43500000 	.word	0x43500000
 80111e4:	ffff3cb0 	.word	0xffff3cb0
 80111e8:	8800759c 	.word	0x8800759c
 80111ec:	c2f8f359 	.word	0xc2f8f359
 80111f0:	3c900000 	.word	0x3c900000

080111f4 <_init>:
 80111f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111f6:	bf00      	nop
 80111f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111fa:	bc08      	pop	{r3}
 80111fc:	469e      	mov	lr, r3
 80111fe:	4770      	bx	lr

08011200 <_fini>:
 8011200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011202:	bf00      	nop
 8011204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011206:	bc08      	pop	{r3}
 8011208:	469e      	mov	lr, r3
 801120a:	4770      	bx	lr
